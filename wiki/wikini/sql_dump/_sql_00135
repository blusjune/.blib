INSERT INTO `radiohead_text` VALUES (2042,'\n== 해커스 비법노트 게시판 Best ==\n\n* [http://gre.gohackers.com/bbs/zboard.php?id=toeflnote 해커스 비법노트 게시판]\n\n\n\n=== 독학으로 100~109 목표이신 분 참고하세요 ===\n\n* [http://gre.gohackers.com/bbs/zboard.php?id=toeflnote&page=1&page_num=30&category=&sn=off&ss=on&sc=on&keyword=&prev_no=5624&sn1=&divpage=1&select_arrange=headnum,arrangenum&desc=&domain= 원문]\n\n\n안녕하세요 글쓴이입니다. 해커스 석박사 게시판은 자주 들러서 눈팅을 하는 편인데, 토플 게시판은 오랜만에 들어와보네요. 옛 추억에 잠겨서 와봤는데, 그동안 제 글이 공지에 올라가 있는줄도 몰랐네요 ㅋㅋㅋ 조회수도 많은거같은데 해커스에서 상같은거 안주나요? ㅋㅋㅋ 요즘은 토플 어떤지도 잘 모르겠네요. 더 어려워지진 않았는지.. 다들 토플 공부하면서 힘드시겠지만, 토플을 공부해서 궁극적으로 이루고자하는 목표를 생각하시면 토플따위 한방에 이겨내실 수 있을거에요~ 다들 화이팅 !! -2013년 8월 미 어느 촌구석에서 글쓴이 올림\n\n\n{| class=\"wikitable sortable\"\n|-\n| Test || Test Date || Reading || Listening || Speaking || Writing || Total\n|-\n| TELXML || March 27, 2010 || 28 || 26 || 26 || 27 || 107\n|-\n|}\n\n \n \n지난 3월부터 이 사이트 정말 맨날 들락날락거렸는데\n \n여기서 도움 많이 받았기 때문에, 저도 다른분들께 도움이 되고자 글을 올립니다.\n \n* 참고로 말씀드리자면, 저는 2006년 수능당시 외국어 1등급이었고\n그 이후로 해본 영어공부라면 대학교에서 하는 교양영어 정도..\n취업해야 한다는 급한 마음에 토익 치고 900초반대 점수 나왔었고..\n문법이나 단어는 어느정도 아는 수준에서 시작했습니다. 또한 2년전에 교환학생 때문에 한번 토플을 본적이 있습니다.\n다들 실력이 다양하시기 때문에, 참고하시라고 알려드려요\n \n이번에도 한달 독학, 한번에 졸업합니다. 꺄오!\n(저는 학원체질이 아니라서.. 혼자 하는게 더 편했던것 같습니다^^;)\n \n이번에는 3월한달간 학교(대학교) 다니면서 준비했구요.\n전공 6개 들으면서 하자니 정말 스트레스 대박이었음..아오\n \n미국대학원 준비하기 때문에, 아무리 오래끌어도 토플에 3개월 이상은 투자하고 싶지 않았거든요\n그래서 한달에 한번씩 시험보기로 마음먹었었습니다. 그래서 빡세게 할수 있었고요..\n진짜 영어시험은 오래끌면 안좋은거같아요. 오래갈수록.. 성적나오는것만 기다리면서 공부 더 안하게 되고..(제가 그랬음 ㄱ- 성적게시판에서 정말 이틀간 밤샜음 ㄱ-)\n빡세게 그냥 두달 세달 안에 끝내는게 제일 좋은듯.\n \n \n보카- 저는 2002년에 나왔던 CBT위한 보카책 썼는데요. 새 보카책 사기 싫어서 오빠가 쓰던거 너덜너덜한거 그냥 썼습니다. 학원 다니는 친구꺼 보니까 별로 차이 없더라고요. 아무튼 옛날거나 새거나 그냥 보셔도 될거같습니다.\n \n2년전에 처음 봤을땐 보카를 안보고 갔었는데.. 보카 정말 중요한거 이번에 깨달았습니다.\n보카 외우면, 리딩에 나오는 보카문제를 맞출 수 있는것은 물론이고 (그런데 생각보다 리딩에서 보카문제는 어려운게 안나오더라구요),\n리딩 그자체도 수월해지고, 스피킹이나 라이팅 할때도 어려운 단어 섞어가면서 쓸수있게됩니다.  전반적으로 도움이 됨. 꼭 외우세요!! 학교 오가는 버스안에서(30분+30분=1시간!! 엄청난 시간임)만 봐도 충분히 외울수있습니다.\n \n저는 처음에는 2일치씩 보고 그랬는데, 한 일주일 정도 하니까 하루에 3일~5일치도 볼 수 있더라고요. 물론 사람마다 방법이 다르겠지만, 저는 쓰면서 외우지 않았습니다. 눈으로만 봤습니다. 눈으로만 보고 외우고, 그래도 안되면 마음속으로 읽었습니다. (버스 안에서는 소리내면서 읽을수 없잖아요 ㅋㅋ) 그러면 진도도 엄청 빨리 나가고 부담도 안돼요. 그래서 3회독 했고요. 근데 짜증나는건 나중에 보면 꼭 모르는단어 다시 나옴 ㅋㅋ 그래서 많이많이 봐야해요! 그리고 단어 외울때 영어단어를 보고, 한국말 뜻을 꼭 떠올리려고 노력하지 않았어요. 뭐랄까... apple이면 사람들이 apple이라고 단박에 알지, 굳이 apple이라고 하면..어 그것은.. 사과지. 이렇게 안하잖아요. 이런식으로 단어 그자체를 이해했음. 뭔소린지 아시려나 ㅋㅋ;; 모르면 패스 ㅋㅋ\n \n15일 정도 - 2~5일치 정도씩, 1회독\n16~22 - 10일치씩, 2회독\n22~30 - 10일치씩, 3회독, 안외워지는거 위주로 마무리..\n \n \n리딩- 저는 성격이 급한편이라 -_-; 정규 리딩책 맨앞에 1달플랜? 보고 그대로 따라갔습니다.\n해커스 책이 좋은 이유가.. 하라는대로만 하면 된다는거...ㅋㅋㅋㅋㅋㅋㅋㅋ\n일단 문제유형이 뭔지 알고, 매 챕터 끝날때마다 진짜 시험처럼 지문나오고 문제 나오잖아요? 그거 풀면서\n자주 틀리는 유형 알아두고 시간 날때 그 유형 다시 쳐다보고 하면서 유형에 익숙해지려고 했습니다.\n \n \n리스닝- 리스닝은.. 다른분들은 뭐 cnn들으시고 미드보시고 그러는데, 저는 그냥 정규책만 봤음..\n솔직히 1달후에 시험끊어놨는데 그거 들을 시간이 있겄습니까 ㅠㅠ학교도 댕기는디 ㅠㅠ\n그래서 정규책만 정말 1달플랜 ㅋㅋ 차근차근히 풀어나갔습니다.\n틀리는건 그때그때 답 보고 왜틀렸는지 알고요. 그러고 그냥 넘어갔습니다\n솔직히 다시 들어볼시간이 없었음.\n \n \n스피킹- 스피킹 라이팅은 사람들이 학원 다녀야된다고 그러는데(그러는게 좋다고 하던데)\n솔직히..정말그런거같아요..ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ혼자하느라고 힘들어 죽는줄알았어요.\n아무래도 절 봐줄 수 있는 사람이 없으니까요..\n근데 스스로 자기평가를 할 수 있다거나, 여기 사이트 스피킹 게시판 활용하면 혼자서도 못할일은 아니라고 생각해요.\n \n \n1,2번 독립형은 여기 자료게시판에 어떤분이 주제별로 묶어놓은거 봤고요. 그게 정말 짱임.\n근데 그거 그대로 달달 외우지 않고, 나름대로 같은 문제에 대해서 내가 더 쉽게 대답할 수 있는게 있다, 그런건 그냥 제가 만들었음. ex) 그 자료에는 \"가보고싶은 나라가 어디냐? -스위스\" 라고 대답해놨는데, 솔직히 저는 공감이 잘 안가서\n\"가고싶은 나라- 일본\" 하고 이유를 \"1. 일본만화 좋아해서 ㅋㅋ 2. 일본음식 좋아해서\" 이런식으로, 제 자신의 경험에서 나올 수 있는, 더 말하기 쉬운 답으로 바꿔서 외우기도 했구요.\n근데 독립형은 정말, 외워야되는거같습니다. 솔직히 한국말로도 \"어떤 나라 가고싶니?\" 이러면 \"어??어??글쎄;;; 생각 안해봤는데;;\" 이러면서 15초만에 생각하기 힘들잖아요. 한국말로도 할말없어서 대답 못하는데  영어로는 오죽할까요.\n독립형의 경우는 화려한, 유창한 그런 거보다.. 일단 할말이 있어야됨. 그걸 그냥 또박또박 잘 전달하는게 좋은듯.\n(근데 이러고서 Fair 떳습니다 ㅋㅋㅋㅋㅋ)\n매일 독립형 자료 외웠구요, 거기에다가 하루에 2문제씩 꼭 시간맞춰서 풀었습니다.\n \n \n3,4,5,6은 자료게시판에 어떤분이 템플릿 올려놓으신거 보고 거기에 맞춰서 연습했어요.\n템플릿 맞춰서, detail 다 넣어주고(리스닝이 잘되어야함), 천천히 또박또박 할말 다하면 그게 끝임.\n사실 스피킹도 해커스 정규책 1달플랜보면서 따라갔는데 ㅋㅋ\n똑같은 템플릿 계속 사용하면서, 문제 푸니까, 익숙해집니다. 외워서 나오는게 아니라 그냥 자연스럽게 나옴. \n해커스 책에서는 막 여러가지 방법으로 답안 제시해놓은게 있는데, 저는 해커스 답은 그냥 캐무시..\n저한테 가장 잘맞는 템플릿 하나만 팠습니다. 그리고 제가 녹음해놓은거 다시 들으면서, detail 놓친거 있는지 그런것만 봤습니다.\n솔직히 스피킹은.. 시험장 가면 떨려서 못하는게 반 이상인거같아요\n그래서 시험장 상황이랑 제일 비슷하게 해서,\n스피킹 타이머 (여기 자료게시판 가면 있음) 써가면서 녹음하고, 들어보고 해서 최대한 익숙하게 했어요\n그러니까 정말 시험장가서도 별로 안떨리더라고요. 연습만이 살길 ㅠㅠ\n \n \n참, 그리고 저는 놋테이킹 할때, keywords만 쓰지 않고 약간 문장식으로 적었어요\n단어만 있으면 스피킹 할때 제가 단어를 연결해야하는 어려움이 있는데\n애초에 놋테이킹 할때 문장으로 써놓으면 그냥 그거 그대로 읽으면 되니까..\n대신 손이 죽어남 ㅋㅋ\n \n \n \n라이팅 - 라이팅 솔직히.. 한거 없어서 올리면 욕먹을거같음ㅋㅋ\n이번에 운이 좋아서 G/G 뜨긴 했지만..\n \n통합형은, 일단 리스닝 다해서 detail 다 놋테이킹 하는게 생명입니다. 스피킹 통합형이랑 다를바가 없음.\n양보단 질이고, 형식보단 내용이 중요해요.\n템플릿 달달 외워놓고, detail만 거기에 끼워넣으면 되기 때문에 통합형이 독립형보다 쉬움.\n그래서 저는 라이팅 공부할때 통합형보다는 독립형에 더 시간을 썼네요.\n \n독립형은, 템플릿이래봤자 솔직히 무ㅓ 있습니까 그냥  서론, 본론(First of all, Secondly..), 결론(In brief.?) 나눠주기만 하면 되는데 내용이 얼마나 논리적인지 그게 중요함. 근데 스피킹 독립형이랑 마찬가지로.. 예시답안? 샘플모델? 많이 봤어요. 어떤분들은 유니버셜인지 뭔지 유명한거 보시던데.. 저는 친구가 학원에서 갖다준거-_-;; 그냥 봤습니다.\n그리고 똑같이 달달외우지 않았구요, 외워봤자 똑같이 쓰면 치팅이라던데..\n \n맛깔나는 문장, 속담, 격언, 이런거 일절 모름.ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ\n쉬운 단어라도 논리적으로 할말만 다하면 된다고 (굳게믿고) 그렇게 공부했습니다.\n(참고로 전 27점 나왔으니까 ㅋㅋ 30점 목표이신분들은 패스\n \n그래서 공부할때는 논리전개가 어떻게 되는지 봤습니다.\n한 문단의 구성을 보면 대부분\nThesis , reason , reason 설명하기 위해서 현재상황 설명, reason 다시한번 강조, 마무리 이런식이더라구요\n \n((((2010. 6.9 에 추가한 내용\n=> 요즘 GRE 준비하다가, gre writing 관련 글 읽다가 갑자기 토플 writing 생각나서.. 긁어왔어요.\n\"\". 한 문단의 가장 이상적인 문장의 숫자는 4개에서 5개로 알려져 있으며 일반적인 구조는 다음과 같습니다:\n 1) Topic sentence, 2)Topic sentence를 다시 설명하는 문장, 3)구체적인 예시, 4)구체적인 예시의 부연설명, 5)wrap-up sentence로 전체 문단을 정리하는 문장. 다만 구체적인 예시의 내용과 길이에 따라서 문단의 길이가 좌우가 됩니다.\n...\n \n그래서 저도 브레인스토밍할때 그런식으로 논리구조 맞춰서 생각하는 연습했구요.\n솔직히 매일 독립형 1개씩 쓰자!!!!!!!!!! 이러고 결심했찌만 나중가니까 힘들어서 못해먹겠음.\n그냥 브레인스토밍만 매일 했음. (사실 이것도 후반부가서는 설렁설렁...)\n논리적으로 쓰시기만 하면될듯.\n그리고 여기 해커스 라이팅게시판에다가 올리면, 나는 논리적이라고 생각했는데\n다른사람들은 태클, 반박, 비판 장난아님. 완전 도움되어요. 해커스 완전 활용하세용!!\n \n그리고 아까 위에선 쉬운단어라도 할말을 다 ㅎㅏ라고 했지만..그래도 할수있다면\n쉬운단어보다는, 보카책에서 봤던 보카 생각하려고 애쓰면서 다양한 단어를 썼어요.ex) argue, emphasize, explain, describe, supports his idea by saying that..../ ex2) happy, joyful, delightful, gratified, satisfied, 100% 다 똑같은말은 아니지만 비슷한 의미의..ㅋㅋ 이런거 뭐 말 안해도 다 아시겠지용 ㅠㅋ\n \n \n독학이라서.. 또한 글재주가 전혀 없어서 도움이 될진 모르겠지만;\n혹시라도 도움이 된다면 좋겠네요.\n다들 원하시는 점수 꼭 얻으시길 바라요.\n \n해커스 사이트 사랑합니다 ㅠㅠ\n\n=== 나이 든 토플러 분들에게 ===\n\n\n제가 핵커스어학원에서 공부를 했던때가 벌써 5년이 넘었네요!\n \n물론 유학을 가기위해 토플을 준비하시는 분들이 많이 있겠지만, 전 유학이 목적이 아니고 의대에 편입하고자\n \n토플을 준비했었습니다. 당시에 나이가 31살이였네요~^^;\n \n당시에는 CBT로 체제가 바뀌어서 컴퓨터로 시험을 보다는 자체가 무척 적응하기가 힘들었었던 기억이 나네요~\n \n우연히 인터넷 검색을 하던중 제가 올린비법글이 있어서 보았는데 아~ 감회가 새롭습니다.\n \n당시 저는 4월-6월달 (엄밀히 말하면 약 2달하고 10일정도) 공부를 하고 277점 맞고 비법을 올렸었습니다.\n \n그리고 마지막 토플을 보고 293점이 나왔던 기억이 납니다. IBT 환산하면 119점 이네요~\n \n아마 핵커스 어학원에 다니는 분들중에는 나이가 30대를 넘어선 분들도 있을거라고 생각하네요.\n \n지금 생각하면 점수가 젤 안나왔던 부분이 LC와 RC 였습니다. 특히나 RC는 자신이 있었는데 시험만 보면\n \n25점(만점 30) 이 나와 스스로 책망을 많이 했던 부분이였습니다. LC는 이미 포기를 했었기 때문에 ^^;\n \n \n* RC Part\n \n일단 RCPART의 경우 가장 중요한것이 지문의 내용이 어떻게 전개되고 있는지를 파악하는 것이 제일 중요하다고 생각합니다. 예를 들어 생물학의 관력 지문이 나왔다고 가정을 하면, 글쓴이는 \"침팬치와 인간의 DNA가 98%가 비슷하다, 그리하여 이 침팬치의 DNA를 잘 연구만 하면 인간과 비슷하기 때문에 각종 불치병을 치료할수가 있을것이다. 단 2%가 다르기때문에 2%에 대한 연구도 소홀히 해서는 안된다\" 이러한 내용이 이글의 전체적인 흐름이라고 할 수 있습니다. 그런데 점수가 잘 안나오는 분들의 경우 중간중간에 어려운 단어가 나와 문장의 흐름이 끊어지게 되면 \" 인간과 침팬치는 약 98%의 DNA가 같다. 하지만 2% 정도 DNA가 다르기 때문에 이 2%에 대한 연구가 매우 중요하다\" 라는 식으로 내용을 이해하게 됩니다. 그러면 작은 부분을 다루는 문제의 경우 해당 문제의 문장만 제대로 해석하면 풀리지만 글의 전체적인 흐름을 묻는 문제에 대해서는 비슷한 오답을 고르는 경우를 많이 보았습니다. 따라서 RC에 대한\n\n \n; TIP 1\n: 토플RC와 비슷한 유형의 독해서를 읽을때 간단하게 전제적인 글을 흐름을 요약하여 정리해보는 습관을 갖자!!\n: (저의 경우는 작은 연습장에 항상 글의 전체적인 내용을 요약하여 나중에 해설지와 비교하여 보았습니다.) 막상 핵커스 어학원에 가니 저와는 평균 7살 차이가 나는 분들과 스터디 조가 만들어 졌습니다. 물론 저와 13살 정도 차이나는 친구도 있었구요~ 고등학생이였는데 미국에 영화를 공부하러 간다는 친구였죠!! 처음에 어린친구들과 함께 공부한다는게 왠지 썩내키지않고, 또한 그들의 실력도 잘 모르고 \"괜히 했다가 시간만 낭비하는거 아닐까? 마치 예전에 고등학교나 대학교때 스터디 한다고 모였다고 공부는 뒷전이고 술이다, 영화다 하면서 시간만 낭비하는거 아닌가\" 그래서 시험삼아 약 일주일만 하기도 했었는데, 아!!! RC의 경우는 정말 많이 도움이 되었습니다. \" 아! 난 왜 이 문장을 이렇게 받아드렸을까? 아 !! 이래서 내가 틀렸구나\" 등등의 나만의 논리에 사로 잡혀서 틀렸던 문제들을 매우 많이 잡아 낼 수가 있었습니다.\"\n \n; TIP2\n: 나이드신 분들은 반드시 스터디를 해라!! 안되면 RC 부분이라도 스터디를 해라!!!!!!\n: 리딩을 하다보면 대체 몬말인지 알수가 없는 문장의 나옵니다. 당췌 모라고 하는 말인지,, 이때 절대로 그냥 넘어가시면 안됩니다. 무슨수를 쓰더라도 알고 가야 합니다. 간혹 강사가 \" 해석이 안되는 부분이 있으면 일단 그냥 넘어가시고 전체적인 문장을 본다음 다시보면 뜻을 유추하실수 있을겁니다.\" 라는 말을 하시는 분들이 있는데 제 경험상 거의 80%는 유추가 안되더군요!! 따라서 독해중에 그런 문장이 나오면 일단을 문제를 다 푼 다음 그 문장을 연습장에 적어놓으세요 그리고 받드시 실력이 좋은 스터디 동생들이나 선생님에게 반드시 꼼꼼히 문장을 주어, 동사, 목적어을 찾아내시고, 도치가 된것인지, 분사구문인지 반드시 알아내셔야 합니다. 2달 정도 계속 적어놓으시면 \"아!! 단어의 쓰임새(가령 보통 have라는 동사는 가지다, 먹다 라는 뜻으로 쓰이는데 이때는 have가 ~을 시키다 라는 사역동사의 의미로 쓰였구나 )을 제대로 몰라서 해석을 못한건지, 문법을 몰라 해석을 못한거지를 아실 수 있고, 더불어 연습장에 적어놓은 것들을 학원오가며 보게 되면 그런 형태의 문장이 또 나올경우 틀리는 경우는 거의 없습니다.\n \n; TIP3\n: 해석이 안되는 문장은 반드시 내것으로 이해하고 넘어가라!!!\n\n; TIP4\n: 단어와 기본문법을 충실하라\n: 딱히 할말이 없습니다. 자신과의 싸움이죠!! 단어단어 !!!!!!!!!!!!!!! 사실 토플공부할때 단어 무척 힙들었습니다. 왜이리 비슷비슷한 단어가 많을까!! 어떤 분들은 접두사를 외워서 하면 편하다고 하는데 전 나중대니깐 그 접두사가 단어보다 더헷깔리고 외우기 힘들어서 걍 무식하게 외우고, 외우고 했습니다.\n\n\n* LC Part\n \n아마 나이드신 분들이 가장 힘들어 하는 PART가 아닐까 생각합니다. 순발력도 예전같지가 않고!!!! 하지만 의외로 또 쉽게 풀리는 부분이 LC가 아닐까 생각됩니다. 우선 LC가 단기간에 오르지 않는다는 편견을 버리세요!! 단기간에 오를수 있습니다. 시행착오만 줄이시면 됩니다.\n \n\n; TIP1\n: 딕테이션 (듣고 바로 쓰기)을 해라!!\n: 아주 지극히 개인적인 생각이지만 딕테이션을 하는 이유는 내 뇌에 저장되어있는 소리형태와 실제 미국인이 사용하는 소리의 차이점을 알기 위해 쓰는 방법입니다. 안들리면 들릴때 까지 들어라!! 하시는 분들이 많은데 전 완전 비추입니다. 4-5번 들어서 안들리면 100번 들어도 안들립니다. 가령 You should have to decide to go to school 이란 문장이 있다고 합니다 . 이때 should have to decide to go to 의 발음은 \"슈르부루 디사이루 고루 스쿨\" 로 발음납니다. 이때 뇌속에 슈드햇투 디사이드 투 고투 스쿨\" 로 소리가 저장되어있는 사람은 절대 같은것이라고 인지하지 않습니다. 따라서 이게 몬소리이가 하고 생각하다고 어느새 훌쩍 그 부분을 다 날리고 말지요!! 따라서 딕테이션을 하면 실제 미국인의 발음과 내가 머리속에 저장되어 있는 소리의 차이를 교정하는 방법입니다. 매우 힘들고 가장 지겨운 부분이지만 반드시 반드시 제일먼저 거처야 할 방법입니다. 그럼 얼마정도 해야하나? 제 개인적인 생각으로 시중에 보변 잘나가는 토플 lc책이 있습니다. \"예를 들자면 CBT의 경우 핵커스 LC,  이익훈 ear of TOEFL, 파워프랩, 링구아 토플, 변영훈 LC\" 5권을 다 딕테이션을 한거 같습니다.  더불어 2권정도 하다보면 속도가 붙습니다.\n\n; TIP2\n: 딕테이션이 끝나면 따라 읽기를 해라~\n: 따라읽기를 하는 이유는 계속하다보변 스스로 모르게 그냥 암기가 됩니다. 정확히 100% 암기는 되지 않아도 대충은 문장이 들으면 기억이 날정도는 됩니다. 더불어 딕테이션과 상승효과가 이루어져 잘못 정장된 발음들이 교정될수 있습니다.\n \n; TIP3\n: 렉쳐를 들은다음 문제를 풀기전에 몬소리였는지 대충 요약을 하는 습관을 해라\n: 말이 쉽지 그 긴 렉쳐중에 단어 몇개만 들었는데 어떻게 요약을 하나 라고 생각하시는 분들도 있을텐데 그래도 그래도 해 보십시요!! 신기하게도 하게되면 늘게 됩니다.\n \n; TIP4\n: 기본적인 배경지식을 갖추자!!\n: 우리에게는 후기라는게 있습니다. 후기를 적극 이용하는 겁니다. 가량 공룡에 대한 후기가 나왔다 치면 대충 인터넷등으로 공룡에 대한 배경지식을 후기와 비슷한 부분에 초점을 맞추어서 잃고 갑니다.\n\n\n나이가 들어서 머리가 쌩쌩 돌아가는 젊은 친구들과 공부하기 정말 힘이 듭니다. 원체 머리가 좋다기 보다는 개같은 근성으로 공부를 해서 20대에는 그럭저럭 다른사람들보다 머리가 떨어지지는 안는다는 소리를 들었는데 나이가 드니 근성도 떨어지고 체력도 많이 떨어지고 공부라는게 참 쉽지 많은 않은것 같습니다. 이 글을 보시는 분들중에는 저와같이 나이가 들어서 의대에 편입을 하거나, 한의대 혹은 유학을 꿈꾸시는 분들이 계실줄로 믿습니다. 제가 이런 글을 올리는 이유는 비록 나이들고, 돌아서면 까먹고, 또 돌아서면 까먹고, 또또 돌아서면 까먹고  자괴감이 들어도 중간에 절대 포기하지 않고 나아가신다면 반드시 꿈꾸는,원하는 세상이 서 있는 나를 발견하실수 있을겁니다. 저와 같이 31살에 시작했던 친한 동창은  미국의 유타에서 부동산 전문대학원을 마치고 한국에 들어와 아주 행복하게 살고 있습니다. 저 또한 의과대학에 들어와 이제 몇달뒤면 정식의사의 길을 걷게 됩니다. 전 의과대학에 들어와 20대 초반의 머리좋은 친구들과 경쟁에서 밀리지 않을려고 학기중에는 평균 5-6시간을 자본적이 없습니다. 나이든신 토플러 여러분!! \"잠을 줄이세요 ^^;\" 농담이고~ 공부에 힘들어 하시는 분들이 제가 올린글과 약간의 TIP에 힘들내어 내일아침부터  처음의 그 마음 그대로 다시 공부에 매진하시길 기원합니다.\n\n\n끝으로 얼마전 우리나라 최고의 외과교수님이 하시던 말씀이 기억납니다.\n \n\"공부는 의지로 하는것이다.\"\n\n=== 직장인 TOEFL 104점으로 끝내기 ===\n\n여기는 워낙 잘하시는 분들 많아서요..ㅎㅎ\n제 점수 올리기는 좀 부끄럽긴 하지만, 제 나름대로 직장인으로서 효율적인 공부를 해 왔다고 생각하고\n여기 글 올리시는 분들이 다 그렇듯이 해커스 사이트에서 도움을 많이 받았기 때문에\n다른 분들에게 조금이라도 도움이 되라고 글 올립니다.\n \n저는 31살 직장인이구요, 대학원 박사 과정 유학가기 위해서 작년에 GRE 시험 보고\n올해 토플 준비해서 5월 16일, 6월 27일 두번 시험보고 졸업합니다.\n준비기간은 4월부터 3개월 했네요.. \n\n \n\n \n* 0. 종합\n\n\n* 시간과의 싸움..이 아닙니다. 체력과의 싸움이죠.\n\n\n직장인이다 보니, 공부할 짬을 내기가 쉽지 않습니다.\n일단 출퇴근 시간은 보카 외우는 걸로 적극 활용했구요,\n회사에서 저녁 먹고 집에 오면 8시 정도 되었기 때문에 밤 12시까지 하루에 4시간 정도 공부했습니다.\n몇번 12시 넘어까지 공부해봤지만, 그렇게 공부하고 나면 꼭 몸살나서 며칠 공부 못하는 일이 발생해서\n가능하면 수면 시간을 지키도록 노력했고 따라서 8시부터 12시까지 최대로 집중해서 공부했습니다.\n주말...에는 공부 안 했습니다. ^^\"\'\'\'\n제가 주말에 이리 저리 좀 다녀야 되는 사정이 있어서 처음 공부할 때는 책을 싸들고 다녔는데,\n공부는 안 하고 짐만 된다는 걸 2주만에 깨닫고는\n그 다음부터는 주말에 혼자 이동하는 시간에만 단어 외우고 주말의 대부분은 영화도 보고 친구도 만나면서\n그냥 스트레스 풀었습니다.\n여행 좋아해서 심지어는 공부하는 중간에 몇 번 여행도 다녀왔습니다..ㅡ.ㅡ\'\'\'\n제가 하고 싶은 말은 제가 잘나서 공부 조금 하고 성적 저만큼 받았다는 게 아니구요,\n절대적인 시간이 부족하기는 하지만,\n그 사실 때문에 무리하게 새벽 3-4시까지 공부하면 오히려 더 손해라는 말씀을 드리는 겁니다.\n토플 준비하시는 30대 직장인분들, 육체적, 정신적 체력이 10대 때와는 다르다는 것을 충분히 느끼셨을 겁니다.\n그래서 처음에 욕심내서 한꺼번에 공부하면 몸에 무리가 갑니다.\n저도 처음에는 맛 보듯이 1시간 정도 하다가 점점 시간을 늘려서 나중에 4시간씩 공부하는 스케줄을 짰습니다.\n몸이 변화에 적응할 시간을 준거죠.\n그러다 보면 자연스레 집중력도 좋아지고 공부하는 효율도 늘어납니다. \n\n \n* 보카..계속 외우세요.\n\n\n모든 영어 시험이 그렇듯 토플에서 보카는 매우 중요합니다.\n특히 긴 지문이 있는 리딩에서는 이해도 측면에서 뿐만 아니라 집중력을 잃지 않기 위해서도\n어휘력이 필수입니다.\nGRE를 치기는 했지만, 반년도 넘은 일이고 GRE 단어와 토플 단어는 확실히 다르기 때문에\n해커스 보카를 사서 외웠습니다.\n타자 연습한다고 생각하고 표제어 및 뜻, 동의어를 모두 엑셀 파일로 옮겨서 출퇴근 하면서 외웠습니다.\n처음에는 2일치를 하루에 외우고요, 두번째 외울때는 4일치, 다음은 6일치, 그리고 그 다음부터는 10일치를 하루에 외웠습니다.\n5번 정도 외운 거 같네요.\n계속 외워도 끝까지 안 외워지는 단어가 있기는 한데 ㅡ.ㅡ\'\'\'\'\n그래도 대략적인 뜻의 느낌이 남아서 그렇게 외운 단어는 느낌만으로도 보카 문제를 풀 수 있는 경우가\n생기더라구요.\n단어..열심히 외우세요...\n\n \n이제 영역별로 말씀드리겠습니다.\n \n\n* 1. 리딩\n\n\n어휘력이 받쳐주면 독해 능력도 같이 향상됩니다.\n저는 정규시리즈 해커스 리딩 풀었는데요,\n문제 유형과 푸는 방법을 읽어보기는 했지만, 그다지 도움은 되지 않았습니다.\n해커스 프랙티스도 풀어봤지만, 해커스 테스트 편이 더 도움이 되어라구요.\n해커스 테스트만 시간 정해놓고 풀었습니다.\n한 지문 당 15분 이내에 풀도록 노력했습니다.\n일단 한번 쭉 다 풀어봤구요, 두번째로는 해커스 테스트만 역시 시간 정해놓고 풀었습니다.\n문제 유형에 익숙해지고 어휘력이 늘어나니 나중에는 한 지문당 1-2문제 정도만 틀리더라구요.\n틀린 문제는 왜 틀렸는지 간단하게 복습했구요, 따로 리딩 단어를 외우지는 않았습니다.\n이제 와서 생각해보면, 저같은 경우는 차라리 actual test를 푸는 게 나았을 거라는 생각이 듭니다.\n \n그리고 해커스리딩이 지문 뿐만 아니라 문제도 어려워서 실제 시험에서는 오히려 리딩이 쉽게 느껴졌습니다.\n기초가 달리는 분이 아니시라면 이렇게 어려운 문제에 익숙해지시는 방법을 추천해 드립니다.\n \n어느 정도 실력이 된다고 판단한 이후에도 시험의 감과 실제 시험에서 집중도를 잃어버리지 않기 위해서\n하루에 지문 4개씩 꼭 풀도록 노력했습니다.\n\n \n* 2. 리스닝\n\n\n처음에는 출퇴근하면서 보카를 안 외우고 리스닝을 들었습니다.\n회사에서도 일하면서 계속 리스닝 틀어 놓구요.\n그런데 이렇게 하니까 그냥 배경 음악처럼 집중을 안 하게 되고 그러니까 안 들리는 거는 계속 안 들리더라구요.\n그래서 리스닝은 반드시 책상에 않아서 집중해서 듣고 문제를 푸는 식으로 방법을 바꿨습니다. \n토플 리스닝이 길어서 처음에는 주제 조차 잡지 못해도 뒤의 내용으로 앞의 것을 추론할 수 있는 경우가 많으니까 처음에 안 들려도 당황하지 않고 계속 집중하도록 노력했습니다.\n그리고 노트 테이킹은 무조건 많이 했습니다. 별로 효율적인 방법은 아니죠..ㅎㅎ\n하지만 중요한 건 들리는 거에 절대 집중해야 된다는 거라서 저는 거의 무의식적으로 노트 테이킹을 했습니다. 철자 그런거 별로 고민 안하고 들리는 대로 그냥 썼다는 거죠.\n본인이 쓴거라 나중에 다 알아볼 수 있어요.\n내용을 못 알아듣는 경우에도 나중에 문제를 풀 때 노트 테이킹한 단어들로 유추해서 답을 풀 수 있는 경우도 있어서 무조건 썼습니다.\n \n제가 첫 시험 볼 때 리스닝에서 엄청 집중력이 떨어졌었거든요.\n그 전에 하루에 20분 정도밖에 리스닝을 안 해서 실제 시험을 1시간 넘게 보니까 집중력이 뚝뚝...ㅡ.ㅡ\'\'\n시험보면서 \"뭐야..왜 이렇게 안 끝나\"를 계속 중얼중얼...ㅎㅎ\n그랬더니 22점 나오더라구요....ㅋㅋ\n그래서 그 이후에는 실제 시험과 동일한 시간동안 집중력을 유지하기 위해서 애썼습니다.\n역시 해커스 정규시리즈로 공부했구요, 해커스 테스트를 풀면서 양을 점점 늘려서\n나중에는 실제 시험에서와 마찬가지로 conversation 2개, lecture 4개를 하루에 풀었습니다.\n \n\n* 3. 스피킹\n\n\n점수 보시면 아시겠지만, 별로 할 말이 없습니다. ^^\'\'\'\n이상하게 스피킹 공부하기가 싫더라구요..\n그래서 첫 시험 볼 때는 시험 치기 이틀 전에 처음으로 해커스 스피킹 책 열어봤구요..ㅡ.ㅡ\'\n그것도 통합형은 한번도 연습 못 해보고 시험 쳤습니다.\n그랬더니 fair-fair-limited 떠서 18점..ㅡ.ㅡ;;;\n그리고 사실 두번째 시험에서 가장 노력해야 될 건 스피킹이었는데 역시 많이 준비 못했습니다.\n그냥 해커스 게시판에서 1-2번 유형은 빈출 문제 뽑아서 제 얘기를 써보고\n외우려고 하기 보다는 쓴 거는 안 보고 정말 얘기한다는 기분으로\n시간내에 말하기 위해서 노력했습니다. \n통합형은 해커스 책 보면서 처음할 때는 실전처럼 시간 재면서 연습하구요,\n한번 하고 난 문제는 적당한 포맷을 외우기 위해서 모범답안을 들어면서 쉐도잉했습니다.\n점수가 겨우 20점이라 비법노트라고 하기 송구스럽습니다...ㅡ.ㅡ\'\'\'\n \n\n* 4. 라이팅\n\n\n사실 토플 보면서 시간 제일 많이 투자한 게 라이팅 입니다.\n이상하게 욕심 생기더라구요..ㅡ.ㅡ\'\'\'\n첫 시험에서 28점 받았는데도, 그 이후에 독립형은 꾸준히 하루에 하나 이상 쓰려고 노력했습니다.\n라이팅 게시판 적응 활용했구요, 주로 회사에서 썼습니다..\n출근해서 오전 업무 시작하기 전에 하나 쓰구요, 점심 시간에도 하나 쓰구요.\n여러 사람이 있는 환경에서 집중해서 쓰는 연습도 되더라구요.\n통합형은 첫 시험 보기 전에 2번 정도 써봤었습니다.\n그런데 통합형에서 리딩과 리스닝이 모두 thesis와 supporting idea가 깔끔하게 드러나는 글들이라서\n해커스 라이팅의 포맷을 활용하니 쓰기가 쉽더라구요.\n많이 연습 안 해도 되겠다 싶어서 독립형만 계속 쓰다가\n두 번째 시험 보기 전에 다시 감을 잡기 위해 몇번 써보고 시험쳤습니다.\n저는 두 시험 모두 포맷 대로 썼습니다.\n통합형 문제는 \"리스닝\"이 어떻게 리딩을 반박하는가가 질문이기 때문에\n리스닝에 초점을 맞추면 됩니다.\n서론에서는 리스닝의 주제를 확실히 말해주고 supporting idea3개를 간단하게 언급한 다음\n이것은 리딩을 반박한다..라고 말하고..\n본론에서는 각가의 supporting idea를 쓰고 리스닝에서 들은 근거들을 간단하게 2문장 정도로 정리한 다음, 역시 마지막에는 이런 점은 리딩의 어떤 점을 반박한다..라고 쓰면 끝.\n결론은 안 썼습니다.  \n\n \n독립형은 서론 부분에 참신한 아이디어를 써야 점수를 잘 받는다는 의견이 많이 있지만, \n저는 두 시험 모두, 서론 결론에 그냥 주제와 supporting idea만 정리하는 식으로 했습니다. \n하지만 thesis는 분명하게 한 문장으로 확실히 썼습니다. \n보카도 외우고 있어서 다른 사람들 글 읽으면서 다양한 단어를 쓰기 위해서 노력했지만,\n지나치게 어려운 단어를 쓰지는 않았습니다. 그럴 능력도 없구요. ㅎㅎ\n그리고 통계적인 수치 (적당히 숫자를 지어내세요)나 예시를 적당히 활용하시는 했지만\n개인적인 경험을 절대로 예시로 사용하지 않았습니다. 왠지 논리력이 떨어지는 느낌이 들어서..\nbody는 3개를 맞추기 위해서 노력했구요,\n각 body에는 supporting idea를 확실히 한 문장으로 쓰고,\n그런 idea에 나오게 된 배경을 설명하고\n그런 idea의 어떠한 점이 thesis를 supporting하는 지 썼습니다.\nidea대로 따랐을 때의 장점, 그러지 않았을 때의 단점을 기술하는 식으로요..\n \n\n\n그냥 생각나는 대로 쓰다보니, 글이 엄청 길어졌네요.\n엄청 고득점을 원하는 것이 아니어서 \n스피킹이 20점인 게 좀 아쉽기는 하지만, 저 정도면 대학원 가는데 최소한의 성적은 되는 것 같아서\n여기서 토플 공부는 접으려고 합니다.\n \n첫 시험이야 아무것도 모르고 본 거지만, 두 번째 시험에서는 이번으로 토플 졸업해야 된다는 생각에\n시험 일주일 전에는 스트레스도 많이 받았습니다.\n하지만 직장인이라 그런지 오랜만에 영어 공부하면서 (GRE는 사실...영어공부라고 하기는 좀 그렇죠..)\n재미도 있었고 뿌듯하기도 합니다. \n \n토플 준비하시는 모든 분들도, 너무 스트레스 많이 받지 마시구요,\n즐거운 마음으로 열심히 공부하시길 바랍니다.\n \n모두들 원하시는 성적 받고 그것을 바탕으로 행복한 미래를 만들어가시길 바랍니다.\n\n=== TOEFL 저만의 비법 버전2 - Speaking ===\n\n정말 공부하면서 느낀 개인적인 어려움을 과정 위주로 글을 쓸게요.. \n\n단 한분이라도 제 글에 도움을 받는 분이 있었으면 좋겠네요.. \n\n\n\n* 스피킹\n\n스피킹 공부 사실 많이 안 했습니다.92점중에 고작 17점이네요 ;;;; 솔직하게 말하면..자신 있어서 안 했다기 보다는..하기 싫어서 안했다고 하는게 더 옳은 표현이겠네요.. 지금까지 시험 보면서 제가 말했던 수준과..그 결과로써의 점수..그리고 조금이나마 6점가량 올리기 위해했던 최소한의 노력 -_-;;.... \n\n처음에는 토플 공부를 하면서 리딩과 리스닝에 90%이상의 힘을 쏟았네요.. 토플공부 한지 1달정도 되었을때 첫 시험 성적이 47점이였습니다.. 그 중 스피킹은 11점..뭐 거의 최저 점수네요..말만하면 15점 준다더니 ㅠ.ㅠ 11점 받을때 했던 말수준이란..아기 옹알이 수준이였습니다.. 1,2번에서 외워서 점수 받아야 한다고들 하더군요;; 안 외웠으니 될리가 있나 ;; 그렇다고 기본이 탄탄한것도 아니믄서 ;;; 아무 대비 없이..시험장에 갔죠..아! 물론 그 전날에 딱 하루 1번부터 6번까지 문제유형과 스피킹 템플릿을 외워갔네요.. 이후 독립형 부분은 외워서 말하는 것 외에는 답이 없다는 글을 많이 봤고.. 친절하게 토플 자료 게시판에 독립형 1,2번에 대해서 써주신 분들이 많이 계셨습니다. 그 중 가장 맘에  드는 것 하나 다운 받았습니다..1번은 55개 2번은 30개 가량 되더군요 -0-;; 하루에 2개식 외우자;; 외워나갔습니다. 외웠다기 보다는 노트에 나만의 글로 바꿔쓰기 정도였네요;; 아무래도 내가 모르는 문법과 단어,표현들이 쓰인 글을 외운다는 자체가 힘들었습니다. 외운다는 것도 힘들지만..금새 까먹더라구요..그래서 저는 크게 안 벗어나는 정도에서 저만의 간단한 표현들로 바꿨습니다..애초에 80점만 맞을 생각이였고;; 20점은 못 나와도 18점 가량만 맞자 주의여서 ;; 열심히 안했네요.. 근데 여기서도 하나씩 외우면서 문제가 생기네요.. 억지로 외우다보니 ㅠ.ㅠ 까먹네요... 그리고 주제가 같은 것이 나오지도 않더라구요 실제 토플에서..운 나쁜건지..준비한 것중에 걸리는게 하나도 없었습니다;; \n\n그래서 처음에는 10일가량 외우다가 외우는거 포기 했습니다... 그리고 큰틀을 가진 주제들을 먼저 묶어봤죠 (사건,장소,취미,인물,day,사물)정도로 크게 압축이 되더라구요 여기서 각각 더 디테일하게 파생됩니다. \n\n\n; 사건\n: 경험,좋은기억,안 좋은기억 등.. \n\n; 장소\n: 가보고 싶던 곳,갔던곳,추천하는 장소,좋아하는 장소 등.. \n\n; 취미\n: 좋아하는 운동,음식,휴식시간에 하는 행동 등.. \n\n; 인물\n: 존경하는 사람,자신의 롤모델,선생님에 대해 설명하시오, 아버지에 대해 설명하시오 등.. \n\n; day\n: 국가 기념일 설명,중요한 공휴일 설명, 자신이 좋아하는 특별한 날 설명등... \n\n; 사물\n: 선물받은 물건, 좋아하는 물건, 영화에 대해서, 책에 대해서 등.. \n\n\n각각 큰 타이틀 중에 파생되는 것들을 대부분 커버할 수 있는 템플릿들을 하나씩 작성했습니다 ;; \n\n\n; 사건\n: 월드컵이죠..(좋은 기억, 잊을수 없는 기억,가장 기억에 남는것등..모두 커버되죠...)네..저는 축구 팬입니다..이걸로 밑에서도 엄청 욹어 먹습니다.. 나쁜기억..월드컵이죠 ^^...나는 축구 팬입니다..독일한테 졌습니다 ㅎㅎ..또 한가지 그 날 다쳤습니다 (뻥이죠;;) 로 이유 2가지 충분... 월드컵 말고 자기 스스로에게 있엇던 약간 아카데믹한 주제를 위해 한가지 더 준비 햇습니다.. 뭐하면서 힘들었냐? 라는 질문에..토플하면서 힘들었다..이거 하나 더 준비 했네요.. \n\n\n; 장소\n: 일본여행(갔었던곳,가고싶은곳,추천할곳,기억에 남는도시등..) 시제만 바꾸면 되죠 -_-;; \n: 공원(좋아하는 장소,친구와 주로 가는 곳,쉬는 날에 뭐하냐 공원간다 -_-;;) 앞에 타이틀만 바꾸고 이렇게  말할 작정으로 준비 했습니다..물론 20점만 필요했기에 대충 뭉뚱그려 공부했죠..고득점 원하시는 분을 이렇게 하지 마세요.. \n\n; 취미\n: 무조건 축구 (이유 특별한 사건에서 월드컵 써먹을수 있고 outdoor activity에서도 써먹을수 있죠;; \n\n\n; 좋아하는 음식\n: 초밥^^. 일본여행가는 1가지 이유..나는 초밥을 좋아한다..Because my favorate food is susi, it is a good chace to eat japanese susi... 로 변칙 응용 가능합니다..또 다른 이유도 간단하더군요..신선한 음식을 좋아한다 정도로 했죠 ㅎㅎ\n\n\n; 휴식시간에 하는 것\n: 쪼기 위에 있네요..공원갑니다! 공원가서 뭐하냐 축구합니다..왜냐고 my hobby is soccer!!  이쯤에서 눈치 채셨죠..친구와 주로 가는 곳이 왜 공원인데?? 이유중에 한가지..축구하러 ㅎㅎ..왜냐면,,나..축구팬이야.. \n\n\n; 인물\n: 자신의 롤모델,존경하는 선생님,아버지에 대한 설명등...사실 세가지 주제가 겹치죠.. 아버지에 대해서 솔직하게 씁니다..책임감이 강하다, 진심으로 걱정하며 항상 옆에서 어드바이스 해준다.. 롤모델 물어 볼때..아버지라고 합니다..존경하는 인물 당연히 아버지죠..선생님??..my father >> my math teacher로 바꾸면 되죠;;..여기서 응용한가지 더..가장 좋아하는 클래스가 뭐냐.. 수학 클래스라고 하면서..선생님에 대해서 설명합니다 ^^ \n\n\n; Day\n: 설날(공휴일,휴일,국가기념일,좋아하는 날) 모두 커버되는 엄청난 날입니다 ^^ \n: 설명은 간단하죠..친척들과 모이는 좋은 기회다/ 한국 전통의 게임을 할 수 있다 such as 윷놀이... 좋아하는 이유도 되죠..친척 모이니까 좋죠..게임하니까 좋죠 ^^ 그렇습니다..전 20점만 필요해서 날로 먹으려 잔머리 많이 굴렸습니다 ㅠ.ㅠ 돌던지지 마세요.. \n\n\n; 사물\n: 책 (받은 선물,좋아하는 물건,책에 대해서) 커버 되죠 ㅎㅎ..책 물론 저는 안 읽죠..근데 책만한 것이 없더라구요 ㅎㅎ 여기서 책은 반지의 제왕 합니다 ..왜냐 영화로도 응용이 되니까요 -_-;; \n\n\n\n이렇게 큰 틀을 잡아놨습니다..보시다 시피 엄청 욹어 먹었죠;; 뻔한 말들로.. \n\n그리고 다운 받았던 55개 주제에 랜덤으로 하나씩 대입하는 연습 했습니다.   \n\n사실 머리가 나빠서 그런지..외워도 막상 15초 동안 정리 하려니까..말이 안 나오더라구요.. \n\n시험장 가서는...주제에 맞춰서 이유 2가지 15초 동안 한글로 쓰고.. \n\n그간 외워놨던 말들을 생각 없이 말했습니다.. \n\n\n\n독립형 2번!!  아..힘드네요.. \n\n2번은 1번보다 압축시키기가 굉장히 어려웠습니다.. 2가지중 선호하는 것을 고르는 것이기에.. \n\n1번 보다 훠~얼~씬 범위가 광대 하더군요... \n\n적정수준에 점수를 받을 수 있는 요령 하나 알려 드릴게요.. \n\n모든 이유를 We can 블라 블라,,They can 블라 블라로 하는 겁니다 ;; \n\n이러면 15초 동안 딱 2가지 동사만 생각하면 됩니다.. \n\n만약에 시골이 좋아 도시가 좋아 라는 질문이라면 \n\n나는 시골이 더 좋아 \n\n우리는 신선한 공기를 느낄 수 있잖어~ 우리는 조용한 곳에서 지낼 수 있잖어~ 이런식으로 말이죠.. \n\n또 한가지 더 해볼까요? \n\n제가 실제 시험에서 본 문제인데 승부에 집착하는 코치와 아닌 코치 누가 좋아? \n\n당연히 아닌 코치가 좋지!! \n\n이유1 그들이 다칠 수도 있잖아~ 왜냐면 경쟁 때문에...그들은 승부에 겁낼수 있잖아~왜냐면 이겨야 한다는 프리셔 때문에.. \n\n제가 이 방법을 쓴 이유는..사실 20점 맞음 되지 라는 안일한 생각과 더불어...막상 접하는 낯선 문제에 \n\n능동적으로 대처하기 위해서 였습니다 ^^;; \n\n이걸 저는 여기 토플 자료실에서 받은 독립형 2번을 그냥 쭉 해봤네요.. 이유에 따른 부과 정보들은 \n\n최대한 간단하게 했습니다..버벅대는 것 보다 낫겠죠..간단하게 나마 명쾌하게 답변하는것이.. \n\n\n통합형은...정말 실력이 중요하더라구요.. \n\n저는 딱따구리 형식으로 했습니다...왜냐면 고득점이 필요 없었거든요;;; \n\n외운 템플릿에 주어+동사만 주워 들어 대입시키기... \n\n여기서 중요한 것은..사실 듣기가 굉장히 중요하더라구요.. \n\n노트 필기에 집중하다가 정작 중요한 내용을 놓쳐서 피본적이 있어 말씀드리는 겁니다.. \n\n쓰지 말고 그냥 들으세요.. \n\n토플 공부해보셨으면 적어도 몇가지 이유에 대해서 말할지,,어떤 글의 흐름이 나올지..아시죠? \n\n주어진 30초 동안 딱 들은 내용에 주어+동사만 씁니다..그리고 묵비권 콤보~~ \n\n여기서 60초를 채우기 위해서는 미리 준비하는 폼을 서론이 긴걸로 달달 외우세요.. \n\n그리고 최대한 또박또박 천천히 말하시고 ^^..나중에 멍때리는 시간 줄어 듭니다.. \n\n서론-스피킹 내용 주어+ 동사 -결론... \n\n짧게는 5문장에도 끝나죠..1문장에 10초 한다는 마음가짐으로~~ \n\n여기서 주의하세요..고득점 못 맞습니다..저처럼 했다가는... \n\n그저 제가 3,4,5,6번에서 할 수 있는 전부는..듣고 읽은 주제를 한문장으로 표현하기 정도 였죠.. \n\n좀 느낌이 좋고..할 수 있게다 하는 문제에는 조~금 더 구체적인 사례도 말했습니다.. \n\n이렇게 해서 17점 맞았네요^^;; \n\n제 애초 목표가 82점이였습니다.. \n\n24/22/18/18 맞을 생각했죠;;; 스피킹만 목표에 도달 못했네요 ^^;;;; 공부를 열심히 안해서 ㅠ.ㅠ \n\n\n\n\n여기서 한가지 더 말씀드리고 싶습니다.. \n\n어디까지나 시간이 부족하시고 20점만 받고 싶으신 분들만 제 방법을 쓰세요... \n\n사실 이건 영어가 아니죠..저도 반성하고 있고..열심히 회화 학원 다니고 있습니다.. \n\n토플 준비하는 분들 대부분이 미국에서 공부할 것을 꿈꾸는 분들인 만큼.. \n\n사실 이런 요령을 늘여 놓는것이 이 글을 읽는 분들을 위하는 건지 아닌지...고민 많이 했습니다... \n\n똑똑한 토플러 분들이라면...어디까지나 제 생각은 참고로 하고..자신만의 진정한 실력 향상을 위한 방법을 \n\n찾을거라 믿구요... \n\n나중에 시간되면 라이팅도 쓸게요~.. \n\n라이팅 까지 쓰려고 했는데..힘이 드네요 ㅠ.ㅠ\n\n=== Writing 독립형 비법 ===\n\n안녕하세요. 라이팅 공부하다가 제 공부방법을 공유하면 \n다른사람들도 혹시나 도움이 될까봐 올려봅니다. \n\n전 세달만에 한번도 쳐본적없는 시험을 쳐서 \n고득점을 받아야해서 정말 자료 많이 찾아 다녔었습니다. \n아마 제가 찾았던건 속성으로 정말 해아할것만 \n쏙쏙 뽑아서 말해주길 바랬었나봐요.  그런건 없더군요. \n노력안하고 점수 잘 받고싶은 욕심이죠.. \n그러나 조금이나마 저같은 분들을 위해 몇가지 적습니다. \n\n\n\n일단 기본포맷을 모르시는분들을 위해 기본설명 들어갑니다. \n아시는 분들은 스크롤~ \n\n첫번째 Integrated task 통합형 (225자 max) \n: 지문읽는시간 3분 \n: 강의듣는시간 2-3분 \n: 제한시간 20분 \n두번째 Independent task 독립형 (300자 min) \n: 제한시간 30분 \n\n\n* 독립형\n\n적어도 5분은 충분히 outline쓰시는데 사용하시길 추천합니다. \n제가 아는 어떤분은 한시간 쓰기시간인데 50분을 아웃라인하고 \n10분만에 쓰시더군요. 포인트가 다 들어가있는 자세한 아웃라인만 있다면 \n오히려 글쓸때 시간낭비하는법 없습니다. \n\nOutline쓰실때: 다들 아시겠지만 일단 적기 쉬운편으로 동의하거나반대 합니다.\n\n에쎄이 체점 criteria 는 \n:* addressing the topic & task \n:: 첫번째는 문제를 제대로 알아들었냐는 면에서 보는것이고\n\n:* showing organization and development\n:: 두번째는 주제가 왔다갔다하지않고 ?intro-body-conclusion 을 잘 전개해 나갔느냐는것이고 \n \n:* supports a thesis or opinion about topic \n:: 마지막은 확실한 주제와 타당히 뒷바침할한 예제가 적당한지 보는것입니다. \n\n개인적으로 저는 마지막것이 약해서 쓸때 예제를 많이 떠올려보려고 노력했습니다.. \n\n자. 이제 아웃라인에는 어떤것을 적어야 하느냐. \n아까도 말했듯이 예제, 이유, 개인 경험입니다. \n또한 관련된 adjective, 즉 수식어를 있는데로 생각해내야합니다. \n(추천해드리고싶은 단어들이 많은데 어처구니없이 많아서 적었다 지웠습니다..) \n\nreasoning 을 잘 해야 합니다. 읽는 사람을 이해 시킬 수 있어야 합니다. \n체점자가 나의 의견과 동의 하는 것은 50:50입니다. (agree/disagree) \n따라서 상대방을 설득 시킬 수 있으려면 내 의견들이 \n타당성이 있고 뒷받침하는 이유가 뚜렷해야 한다는 겁니다. \n그렇다고 해서 체점자와 의견이 다르다고 감점하는건 아니지만 \n오히려 반대의견에서 읽을때 타당하다고 느껴진다면 더 높은 점수를 줄겁니다. \n\n정리해본다면 \n\n1. disagree인지 agree 인지 정하고 thesis statement 를 적습니다. \n물론 주제를 paraphrase 해서 own word로 바꿔야겠죠? \n2. 왜 그렇게 선택했느냐를 적어야합니다. \n여기서 보통 시간이 오래걸리는데 일단 한번 결정했으면 \n그걸로 밀어 붙여야 한다고 생각합니다..전 매번 양쪽다 이유가 생각나서 \n시간끌다가 못쓴적도 있거든요. 될수있는한 많이 적어서 고르는것 또한 시간이 걸리므로 \n가장 강한 2가지 이유를 고릅니다. 이유가 강할수록 적을것이 많겠죠? \n3. examples와 개인경험을 기억하든 지어내든 하는 겁니다. \n세번째꺼는 두가지를 적는 것이 적당하다고 생각합니다. \n\n이제 아웃라인이 끝났으니 라이팅의 포맷을 살펴 봅시다. \n\n적는시간은 대략 20분으로 잡고 \nintroduction (3문장) \nbody 1 (7-8문장) \nbody 2 (7-8문장) \nconclusion (3문장) \n으로 하는것이 적당하다고 생각합니다. \n필요해 따라서 body paragraph에 몇문장 더해도 좋겠습니다. \n\n\n가장중요한 Introduction \n첫번째문장에는 식상하게 I would agree/disagree보다 (이건정말 생각안날때쓰기) \n질문의 주제에 대해서 한문장 쓰는게 적당합니다. 자세히 말하자면 그 주제의 purpose를 적는겁니다. \n\n예를들어 주제가 letting a friend make a mistake ~ destroying friendship 이 문제 입니다. \n그렇다면 첫번째 문장을 우정이나관계의 정의나 그것이 어떻게 만들어지거나 유지되는지 적는겁니다. \n\n두번째 문장에서는 주제의 result를 적습니다. 위의 예를 계속 사용해서- 만약 우정에 금이간다고 생각했지만 진실을 이야기했을때 우정이 깨진다면, 그건 진정한 우정인가? 뭐 이런식으로 말입니다. \n\n그리고 마지막 문장에 thesis statement를 적습니다. (Considering__ I strongly agree/disagree that, In my opinion,) 그리고 body에 쓸 토픽을 간출인 단어나 phrase로 적습니다. \n(semicolon(:)을 사용해서 listing 하는것도 좋고 keyword만 적는것도 좋습니다.) \n\nBody paragraph 1&2 \n1.Topic sentence를 적습니다. \n2. explain about the main idea \n3. give examples!!! \n4. summarize main idea (restate topic sentence using different vocabs) \n\nConclusion \n첫번째 문장에는 thesis statement를 다른 어휘로 다시 씁니다. \n두번째 문장에는 topic sentence들을 역순위로 다시 씁니다. (2번째 body topic쓰고 1번째 body topic) \n마지막 문장에는 clincher 를 씁니다. 이것은 final thoughts들을 나타내는 것으로 \nneutral 한 입장에서 양쪽을 바라보는 겁니다. \n\nvocabulary, variety in sentences 와 transition 이 중요한거 같습니다. \n이것이 에쎄이를 쓰는 사람의 스타일을 나타내는거 같습니다. \n외국인들은 글쓴이의 스타일을 존중해주는거같습니다... \n\n\nvariety in sentences 몇가지 설명해드리겠습니다. \n\n1. 직접목적어의 동사를 주어보다 먼저 쓰기. \n: I had foreseen bitterness and hostility, but I had not expected open violence. \n:* effective: Bitterness and hostility I had foreseen, but open violence I had not expected. \n\n2. 수식어나 부사나 부사절로 문장을 시작하기. \n: The handsome instrument that had been found was undamaged by its centuries-long burial in the dry, hot sands of the desert. \n:* effective: Undamaged by its centuries-long burial in the dry, hot sands of the desert, it was a handsome instrument that had been found. \n\n3. 전치사나 분사구로 시작하기. \n:* effective: Through the fog we could see only the tops of the tallest buildings. \n:* effective: Being convinced of the man\'s sincerity, I hesitated to question him further. \n\n\n\nOrganization 에 가장 중요한것은 transition 입니다. \n문장 사이사이에 문단 사이사이에 사용되야 하는것입니다. \n\n부연: again, also, and, and then, besides, equally important, finally, first, further, furthermore, in addition, in the first place, last, moreover, next, second, still, too \n\n비교: also, inthe same way. likewise, similarly \n\n대조: although, and yet, but, but at the same time, despite, even so, even though, for all that, however, in contrast, in spite of, nevertheless, notwithstanding, on the contrary, on the other had, regardless, still, though, yet \n\n예시: after all, an illustration of, even, for example, for instance, indeed, in fact, it is true, specifically, that is, truly \n\n시간을 나타낼때: after a while, afterward, as long as, at last, at length, at that time, before, earlier, formerly, immediately, in the meantime, in the past, lately, later, meanwhile, now, presently, shortly, simultaneously, since, so far, soon, subsequently, then, thereafter, until, when \n\n반복, 요약: all in all, in brief, in conclusion, in other words, in particular, on the whole, that is, therefore \n\n원인과 결과: accordingly, as a result, because, consequently, for this purpose, hence, otherwise, since, then , therefore, thereupon, thus, to this end, with this object. \n\n연결어를 사용하는것만이 방법은 아닙니다. \n두문장을 이어주는 다른 방법중 하나는 last 문장의 마지막 단어를 다음 문장의 첫단어로 사용하는겁니다. \n만약 문장이 forest 로 끝난다면 In the forest, 라든가 끝난 단어로 다시 시작하는겁니다. \n\n\n마지막으로 에쎄이에서 되도록이면 쓰지 말아야 할 단어들입니다. \n\nyou, till, sort of, lots, a lot of, got, ain\'t, a bit of, kind of, bad, good, nice, stuff, thing, something, isn\'t(-is not), this, that, these, those(without reference), due to (-because), so, well,(문장첫머리에), the reason is because, like(-such as),abbreviation (생략)하는 단어또한 쓰면 안될것 중의 하나입니다. \n말그대로 되도록이면 쓰지 말아야할 cliche 들입니다. 위단어들로인해 문장의 질(?)이 떨어진다고 할수있겠습니다. 진부하다는 거죠. 좀 더 세련된 문장을 사용하도록 합시다. \n\n\n\n스피킹은 몰라도,, 라이팅은 첫시험에서 28점 받았습니다.. \n이건 제가 캐나다에서 4년동안 독한 영어선생들과함께 \n빡쎄게 배운것들을 정리해본겁니다.. \n정말 제가 아는 라이팅 비법은 다 써드린거 같네요.. \n부디 도움이 되셔서 라이팅 점수 잘 받으시길 바래요. \n\n\n\n도움이 많이 되셨다고 하시면 통합형도 다음에 올려드리겠습니다.. 너무 오래걸려서 ㅠ ㅠ\n\n=== 해커스 보카 1시간에 다 보기 ===\n\n\n제가 보카 외웠던 방법입니다. \n\n저는 해커스 보카중에 모르는 단어 한개도 없다고 말할수 있습니다. \n\n\n* 첫 번째 달\n\n처음엔 1일치중에서 아는단어 두세개.;; 나머지 모르는 단어.. 그런식이었어요. \n\n저는 3일치씩 외웠구요.. 한달동안 책을 다 봤습니다. \n\n다시 보려니 또 모르겠더라구요. 한달에서 20일간 그냥 3일치씩 외웠고. \n\n나머지 10일간은 체크된거 위주로 빨리봤죠..(그래도 모르는거 엄청났음) \n\n그담엔 5일치씩 봤구요.한달에 책 두번 돌렸습니다. \n\n그러고 나니깐 단어가 정말 수월해 졌습니다. \n처음엔 절대 쓰지 않았습니다. \n\n그리고 아래에 보카암기법 해서 누가 올리신걸 봤는데요.. 솔직히 테클은 아니고 저도 첨에 \n\n노트하나 만들어서 모르는 단어쓰고 옆에 뜻 쓰고 동의어 쓰고 영작 한문장씩 했었는데 \n\n시간이 넘 마니 걸립니다. 그리고 하나하나 상상하는거.. 상상하는게 일입니다. 그리고 발음 \n\n제대로 습득하지 못하는 문제점이 있습니다. 고등학교때 많이 했던 방법이라..;; \n\n단기간에 점수를 빨리 내야하는 토플러들에겐 적당하지 않은 방법이라고 생각합니다. \n\n그냥 단어를 보면 뜻과 함께 동의어가 파파팍 하고 머리에 떠야합니다. \n\n하루에 몇백개의 단어를 외워야 하는게 문제이기 때문에 그냥 무식하게 외우십시오~ \n\n하지만 기본적인 어원같은건 생각하면서 외워야 합니다.; \n\n만약 그냥 천천히 오랜기간 잡고 하시겠다 하심.. 위의 방법 해도 효과 볼것입니다. \n\n테클 거셔도 되지만, 토플 단어외우는 방법은 제가 했던 방법아 단시간에 효과 볼수 있을거 같아요,. \n\n\n일단 제가 외운 방법 \n\n1. 1일치를 한번 쭉 읽는다.. 동의어까지~눈으로 모르는 단어는 콕 찍어놓는다.(눈으로!!) \n(읽으면서는 발음도 정확하게 해야해요. 그래야 LC도 도움이 됩니다.) \n한번 읽고나서 다시 그 하루치를 읽는다. 이때 모르는 단어는 다섯번씩 읽고 뜻도 되새긴다 \n그 하루치를 다시한번 읽으면서 모르는 단어는 5번 읽고 체크표시를 연필로 해둔다. \n즉 첨에 하루치를 3번 돌려보면서 모르는 단어는 10번이상 읽어놓은것이다. \n무의식적으로 머릿속에 있다. \n\n2. 2일치를 읽는다.~~ 똑같이 한다. \n\n3. 3일치도~~ \n\n4.읽는걸 끝내고 다시 1일치로 온다. \n다시한번 읽는다. 이때는.. 그 전에 3번읽었고. 모르는 단어는 몇번이나 읽었기 때문에 \n모르는 단어가 자기도 모르게 외워져 있는것도 있고 \n죽어도 안외워지게 생긴것도 있다. \n1일~3일치를 다시한번 읽는다. 모르는 단어는 체크되어있기때문에 자기도 모르게 \n신경쓰고 보게된다. 이때 체크된 것중에도 완전히 외워졌다고 생각하는건 체크표시 지워가면서 읽는다. \n\n5.체크표시 된것만 읽는다.(여러번 마구 읽어 외운다) \n\n이상은 3일치씩 처음 외울때였구요.. 저는 하루에 2시간~3시간 걸렸습니다. \n읽는다고 생각하면 스트레스도 덜 받구요. 훨씬 잘 외워집니다. 한번 외우면서 그담으로 넘어가고 외우면서 그담으로 넘어가고.. 그럼 다시보면 또 모르죠 \n몇번씩 반복하면 훨씬 효과가 좋다는게 제 생각입니다. 저도 그렇게 잘 외웠구요. \n\n이렇게 해서 한달동안은 3일치씩 외우고.20일에 끝납니다. 나머지 10일동안은 \n오로지 체크만 해 놓은거 읽습니다. \n\n\n\n* 두번째달 \n\n하루에 5일치씩 외우기 \n\n전달에 했던방법으로 읽는다. 전달보다 훨씬 단어를 많이 아는 느낌이다. \n그래도 안외워 지는 단어가 많은데.. 그 단어들 체크 하나 더한다.;ㅋ \n5일치를 외우지만 전달에 3일치씩 외웠던것보다 더 빨리 외워진다. \n\n무조건 읽는다. \n자기전에 체크표시 되어있는것 두번씩 읽고잔다. \n\n12일에 한번 다 보고, \n\n5일치씩 12일 다시한번 본다. 똑같은 방법으로.. \n하지만 이전에 외운건 체크 지워져 있고 모르는건 체크가 두개 있기때문에 \n모르는 단어 중점적으로 외울수 있다. \n\n나머지 6일동안, \n\n정말 죽어라 안외워 지는거 있다. 진짜 짱난다~ \n나같은경우는 5일치 기준으로 동의어 포함  아리까리한것 포함 15개정도 나왔다. \n거의 아리까리한것.. 단어도 알고 뜻도 아는데. 바로 생각 안나는것.. \n\n그건 어쩔수 없다. \n\n공책 한장 딱 찟어서 세로로 4등분으로 나눈다 \n\n걍 쓴다. 모르는것.. 한쪽엔 단어 한쪽엔 뜻 \n앞뒤로 한장 꼭꼭 채워서 밥먹을때고 걸어다닐때고 버스안에서고 어쨌든 그냥 막 외운다 \n\n그중에서 아리까리 했던건 이작업 하면 외워져 버리고 그중에서 안외워 지는건.. \n\n형광펜으로 마구마구 칠해서 며칠 가지고 다니면 외워진다. \n\n6일동안 이 작업한다. 안외워질수가 없다. \n\n\n이때 셤봤다.(두달잡고 독학했음) \n해커스 보카 위대한점.. 단어문제는 무조건 걸리고. \n지문안에서도 모르는 단어.. 2개이상 없었던거 같다.(지명..이름 이런거 빼고) \n\nLC땜에 셤을 한번 더 봐야했다. \n\n단어는 안외우면 허전하므로..;(나중엔 단어외우는게 재밌어진다.) \n쉬면서 그냥 본다.; (처음엔 엄청난 고충이었다) \n\n10일치씩 본다. 한시간 걸린다.- 6일동안 본다. \n\n20일치씩 본다 . 역시 한시간 걸렸다 -3일동안 본다. \n\n30일치씩 본다. 그냥 한시간 잡고 봤다. -2일동안 본다. \n\n이제 60일치를 한시간에 봐진다. 모르는 단어 없다.;;;  아리까리한거 가끔 나온다 \n\n스펠링 발음 비슷한거.. 그건 한번 쬐려봐 준다. \n\n다시한번 60일치를 본다... 정말 모르는 단어가 없구나. \n\n하고 넘어가면 된다. (참고로 반의어는 외우지 않았다. 어차피 반의어도 다른 표제어나 동의어로 들어가 있기때문에 내 생각엔 괜히 헷갈리니깐 안외우는게 좋은거 같다.) \n\nRC30점 나왔다.; \n\n\n\n\n이상은 제가 공부한 방법이었구요 \n저는 LC를 첨 3시간정도 하고 SW2시간정도 그담 단어 외우면 잘시간이 되더라구요.;; \n\n머 하는것도 없었는데..ㅋㅋ RC는 정말.. 두달동안 해커스 리딩 스타트 한권 겨우 봤구요 \n\n에세이도.;; 두달동안 3개써봤습니다. \n\n리딩 스타트만 보고 보카만 그냥 외웠는데도 실제 셤에서 26점 받았었구요 \n\n실제로 두달동안 LC는 해커스리스닝스타트,변역석토플LC,해커스(뒤에 렉쳐 약간 못끝내고 \n\n셤 봤음) LC는 이 세권을 봤었고.. SW는 그래머스타트,해커스그래머 두권 끝냈고.. \n\nRC는 정말 그래머 스타트밖에 안봤어서 약간 불안했는데 실제론 RC가 가장 잘나왔습니다. \n\n그 담 한번 더 셤 볼때.. LC는 렉쳐만 3시간 했고 SW는 그냥 하루에 20문제만 풀고 체크만 \n\n하고.. RC는 해커스 RC2주 하다가 2주동안은 1300제 했습니다. (다른과목도 1300제만 했죠) \n\n해커스 정말 좌절이었습니다. 다 못끝내고 포기했구요. 단어가 문제가 아닌데도 \n\n어렵더라구요.. 문장구조도 복잡한게 많고 그래서 그런지.;; \n\n1300제 오니..정말 마구마구 쉽더라구요. 한지문 보는데에 5분도 안걸리고 문제 정말 \n\n1300제 파트 A만 풀었는데.. 그 많은 문제중에 3개 틀렸습니다. \n\n좀 자신감 갖고 셤 봤는데.. RC30점 나오더군요. RC=VOCA \n\n여러번 읽어 외운다고 시간 많이 걸리지 않습니다. \n\n오히려 시간 단축되죠~ \n\n외운다고 생각하지 말고 읽는다고 생각하면 외워집니다. \n\n저도 제가 그 끔찍한 단어책을 통째로 외워버릴진 정말 몰랐습니다. \n\n그리고 조언아닌 조언을 하자면.. 토플.. 두번은 봐야 점수 나오는거 같습니다. \n\n저는 처음에 두달후꺼 신청해 놓고 한번에 끝내야해 무조건 한번에 끝내야해 \n\n하면서 공부했는데요.. 확실히 셤장 분위기라든지.. 처음하는 그런것..또 공부법도 \n\n수정할수 있고.. 저는 어쨌든 두번째 셤에서 많이 올랐기 때문에 그렇게 말 하고 싶습니다. \n\nLC같은 경우에도 두번째 셤에선 맘 편하게 봤고..SW도.. 첨엔 화면이 읽히지도 않고.. \n\n결국 다 못풀었는데 창 닫기고 그랬었거든요.. 두번째 셤에선 SW에서 4분이 남아서 황당했습니다. \n\n그리고 에세이도.. 저는 첨 셤볼때 정말 3개 써보고 브레인스토밍도 안해서 \n\n애들 쓰는것처엄 완전 유치하게 썼는데도 4점이 나오더라구요. 여기서 나름대로 자신감을 \n\n얻고.. 그냥 대충써도 그렇게 주는구나..하는.. \n\n그래서 두번째 셤 보기 한달동안 브레인스토밍 다 끝냈습니다. 에세이는 10개정도 \n\n추려서 써 봤구요. 생각보다 점수 잘주더라구요..에세이.;; 비록 5점이지만.. \n\n저에게는 목표 이상의 점수라서..^^ LC도 첨에 22점에서 25점으로 올랐고.. \n\nSW는 누구나 고득점 받기 쉬운거니 생략하고.. \n\n토플공부하기 전에.. 영어공부 따로 한적도 없었고..공대라서 영어 많이 접하지도 않었습니다. \n\n방학때 회화같은거 등록해 놓고 안가는것도 태반이었고.. \n\n첨에 공부시작하기 전에 셤 신청 해 놓고 파워프렙을 한번 돌려보니 맥스점수가 210점 \n\n나오더라구요,,  하지만 나름대로는 정말 열심히 공부했고.. 어쨌든 275점으로 제 목표보다 \n\n높은 점수로 끝내서 아쉬움은 조금 있지만 영어가 조금은 더 수월해진 느낌입니다. \n\n어쨌든 실력 쥐뿔도 없던 제가..토플 성적 나온거 보니.. 누구나 다 할수 있다는 \n\n생각이 들었습니다.\n\n=== 착각들 하지마세요. 진정 귀담아 들으셔야 토플 졸업하십니다. ===\n\n\n놀랍게도 수많은 토플러들이 간과하는 사실이 있습니다. voca power죠.\n \n사실 토플 공부를 어느정도 하면서 단어를 어느정도 외우게 되면 리딩같은 경우는 단어뜻을 제대로 몰라도\n \n문맥을 짚어가면서 풀면 결국 문제에서도 정답으로 이어지는 경우가 상당히 많습니다. 여기서 함정.\n \n\'아 단어를 정확히 몰라도 문제는 풀 수 있고, 리딩스킬이 조금씩 느니까 단어는 정확히 몰라도 되는구나\'\n \n사실이긴하죠. 단어를 정확히 몰라도 만점 찍을 수 있습니다. 그러나 그렇다고해서 단어공부를 소홀히 해야한다는\n \n건 절대 아닌거죠. 전 하루 공부의 30~40%의 시간을 단어외우는데 투자했습니다. 토플 점수가 100점 언저리에서\n \n정체되어있을 즈음 도저히 뭐가문제인지 알 수 없었는데..어느 순간 초록보카책을 보는데 정확한 뜻을 모르는 단어가\n \n엄청 많더군요. 물론 10번넘게 보게되면 그 단어의 정확한 뜻은 몰라도 뉘앙스정도는 알게 됩니다. 그러나 실제시험에서\n \n시간관리와 정확한 해석을 하려면 단어는 정확히 알아야합니다. 전 매일 약 2000개의 단어를 매일매일 봤습니다.\n \n처음에는 존나 안외워지죠. 그런데 그렇게 1주일, 2주일 지나면서 3000천개 정도의 전문용어 및 필수단어가\n \n아주 자연스럽게 외워지더군요. voca power는 리딩에서만 유용한게 아닙니다. 단어를 모르는데 리스닝에서\n \n들릴리가 있겠습니까? 많은 사람들이 착각하더군요. 그 긴 리스닝 시간 동안 중요한것만 들으면 되고 결국\n \n리스닝 스킬이 중요하다라고. 그런데 단어를 모르고 그 의미를 모르면 뭐가 중요한지 알 수가 없습니다.\n \n단어를 많이 알면 스피킹 자연스럽게 늘고요. 라이팅도 쓸 단어가 너무많아 고민하는 경지에 이릅니다. 단어의 힘\n \n을 무시하지마세요. 혹시 지금 점수가 정체되어 있으신분들. 본인이 단어를 정말 정확히 알고 있는지 반문해보세요.\n \n장담하건데 확실히 알고 있는 단어 뜻 별로 안될 겁니다.\n \n언어에서 단어는 가장 기본입니다. 전장에서 총탄과도 같죠.\n\n\n\n\n\n=== 감동의 토플 끝내기 비법 (Very Lengthy) ===\n\n게시판에서 읽고서 감동했습니다. 혼자 보기 아까워서 퍼왔습니다.\n \n \n안녕하세요 ^^ \n아직도 처음 설레는 마음으로 어색하게 카운터로 다가가 \n아무것도 모르고 그냥 등록을 했던 기억이 생생한데. \n어느덧 시간을 흘러 해커스에서 먹고 자고(?!) 한지가 네달이 다 되어 가네요. \n\n9월 초 갓 전역한 까까머리 청년에게는 세상의 모든것이 어색하기만 했지만 \n특히 처음에 해커스의 빡센(!?)교육철학과 체계적인 study gorup 사람들의 학구열은 \n적응하기가 너무 힘들었죠 ㅠ_ㅠ \n그랬던 제가! 어느순간 부턴가 학원이 집보다도 더 편하게 느껴지고. \n이제는. 학원 구석 구석 정말 많은 추억이 들었네요. \n특히 쏘쏘프레소에서 공부 참 많이 했는데 ㅎㅎ \n(커피 안시키고 그냥 공부 한적도  많은것 같아서 관계자 분들께(!?) 죄송할뿐입니다 ^^;;) \n어느정도로 정이 들었나 하면. \n토플 셤이 끝날때마다 오늘 하루는 진짜 쉬어야지 하면서도 \n가장 먼저 가고 싶은 곳이 이상하게 학원이더라고요. \n\n암튼 우선 토플 공부 하는 모든 분들에게 심심치 않은 위로의 말씀을 드리고 싶네요. \n다들 너무 힘드시죠 ㅠ_ㅠ 스트레스도 많이 받으실꺼고. 제가 다 알아요 ㅠ_ㅠ \n해본사람만이 안다고 어머니가 가끔 전화로 토익공부하느라 힘들지 그러면 \n\"토익 아니고 토플!!!!\" 이라고 괜한 객기를?ㅋ 부렸던 기억도 나네요. \n(그래도 저희 어머니는 끝까지 토익이라고 하셨지만ㅎㅎ토익 무시하는건 아니고요 ^^;; )   \n암튼 일단 저는 전공이 영어긴 했지만 군대가기전의 대학생활은 어디가서 전공이 영어라고 \n말하는것도 한없이 챙피할뿐이였고! 또 3년전인가 CBT를 두달 정도 해보긴 했었지만 \n모든 남자분들이 마찬가지시겠지만. 2년의 공백은 모든걸 초기화 시키기에 충분했고! \n또 IBT에 대한 정보가 절대적으로 부족했기 때문에 결론을 말씀드리면! \n진짜 IBT가 이렇게 어려운 시험인지는 상상도 못하고 있었죠. \n저 토플 하기전에는 천문학에 관심이 쫌 있어서 전문적인 지식이 있던건 아니였지만 \n그래도 천문학 관련된 책이나 tv 프로그램 이런거 정말 좋아 했거든요. \n근데 토플 시작하니까 희한하게 그 좋던 천문학도 완젼 싫어 지더라고요 ㅋㅋ \n실제로 별의 생성과정 하면서 cloud 나오는게 진짜 하늘에 떠 있는 구름이 아니고 \n우주에 있는 먼지구름이였다는 것을 알기까지 거의  한달 반은 걸린거 같네요 ㅎㅎ \n\n암튼 지금와서 다시 돌아 보자면. \n9월 1일 학원을 처음으로 다니면서 12월 21일 마지막 토플을 치루기까지 \n정말 치열했던 하루하루의 연속이였던것 같습니다. \n친구들에게 무슨 사시 준비하는 것도 아니고 오바냐고 핀잔까지 들어가며. \n결국 모든 대인관계는 고이 접어 두고. 고시원 생활의 당연한 결과물이였겠지만. \n시간이 갈수록 살은 한없이 빠지기만 하고. (한 10키로는 빠진것 같네요. ㅠ_ㅠ) \n살면서 먹을 라면을 네달동안 다 먹은것 같네요 ㅎㅎ \n스트레스는 스트레스대로 받고. 하면할수록 끝은 더 안보이는것 같고. \n토플 괜히 시작했나 하는 생각도 들고. 심지어는 괜한 인생에게 시비를 걸기도 했죠.ㅋ \n\n그래도 저는 전역하고 바로 자연스럽게 휴학이 된 상태에서 시작한거라서. \n말그대로 하루종일 토플만 하는게 가능했지만. \n주위에서 정말 어려운 환경에서 공부 하시는 분들도 많더라고요. \n학교다니시면서 하시는 분들. 알바를 하면서 하시는 분들. 직장을 다니시는 분들. \n이런 분들의 각고의 노력에 비하면 저는 상대적으로 공부할수 있는 시간이 많았기 때문에. \n저의 무식한 후기가 도움이 될지는 잘 모르겠네요. \n\n그래도 그동안 제가 공부를 하면서 느꼈던 생각이나 \n공부하는데. 시험 보는데. 조금이라도 도움이 될까 해서 \n아니 조금이라도 도움이 됐으면 해서 몇자 적어 보도록 하겠습니다. \n\n일단 수업은. \n9월 오전기본종합반(이화경쌤, 이유호쌤, 변효진쌤, 유리정쌤, 김성은쌤) \n10월 아침 중급종합반(신화식쌤, 송원쌤, 천재은쌤, 쌔라쌤) \n11월 12월 해커스 LC 단과(신화식쌤) \n이렇게 네달 다녔고요. \n\n시험은. \n10월 26일 18 / 27 / 19 / 23 / 87 \n11월 30일 28 / 28 / 22 / 26 / 104 \n12월 13일 / 12월 21일 (아직 결과가 안나왔고요^^;) \n이렇게 총 4번을 봤습니다. \n\n첫 시험에서 점수가 실력에 비해서 기대 이상으로 잘 나오기는 했지만 \n분명히 말씀드릴수 있는건 제가 8월말까지 토플에 대한 정보가 아무것도 없던터라 \n시험을 신청을 못해서 바로 셤을 못봤을 뿐이지(실력이 어느정돈가 한번 보고 싶었거든요) \n정말 바로 9월초에 시험을 봤었더라면 60점도 못맞았을꺼예요. \n분명 토플이 어려운 시험임음 자명한 사실이지만. \n점수가 안나와서 힘들어 하시는 분들도 끝까지 포기 하지 않고. \n열심히 하신다면 분명히 좋은 결과가 있을꺼라는 걸 꼭 알려드리고 싶습니다. \n그럼 일단 파트별로 설명을 드리겠습니다. \n\n[Reading] \n\n알씨는 제 실력에 비해서 저 조차도 놀랄만한 점수가 나와서 많은 도움은 못드릴꺼 같네요. \n그래도 짧게 말씀을 드린다면. 토플 시작하기전에는 한국사람에게는 다른 영역에 비해서 \n쉽게 느껴지는 알씨였다고 들었었지만 저는 RC가 너무 어렵더라고요. \n그 결과를 반영하듯 첫 시험에서 18점 ㅡㅡ;; 9월 10월 공부를  안한건 아니였는데 \n첫 시험이라서 그런지 컴터로 문제를 푸는거에 적응이 잘 안된것도 있고. \n10월달에 첫 시험을 보고 느낀게 알씨 이대로 하면 안되겠다는 생각이 들더라고요. \n왜 그런것 있잖아요. 알씨 첫지문에서 말리면 다 말리는 듯한 기분. \n일단 푼 책은 해커스 Basic / Complete Guide / 해커스 리딩 / 해커스 actual test \n이렇게 네권 풀었고요. 11월부터는 컴터로도 적응 훈련을 하기 시작했습니다. \n필요하신분은 제가 자료 드릴께요.(해석은 없고 답하고 문제만 있어요.ㅋ) \n그리고 해커스 리딩 푸신분들은 해커스Actual Test  강추해드릴께요! \n정말 이 교재는 최고인거 같에요. 해커스 리딩에 비해서 설명도 훨씬 자세하고 \n문제에 대한 해석도 나와있고 분명히 난이도가 있긴 하지만 그래도 정말 어려운 문제를 \n다루고 시험장에 가니까 상대적으로 쉽게 느껴지는 기분이 들더라고요. \n시험 보기 바로 전날에는 해커스 actual test 7 CD 있는 걸로 모니터에 대한 감을 \n유지하려고 노력했고요. \n\n아~ 그리고 제 실력은 항상 해커스 책 풀면 단어 하나는 무조건 포함.ㅋ \n3개씩은 꼬박 꼬박 틀렸었는데 ^^;; 28점이라는 점수가 나온걸 보니까 \nRC는 상대평가라는 변수가 있기때문에 10개 정도까지는 틀려도 \n무난히 고득점이 가능한거 같습니다. \n\n해석을 봐도 이해가 안되서 화나는 경우도 많이 있었지만 \n그래도 그나마 알씨 공부를 즐겁게 할수 있었던 팁을 드리자면 모든 지문을 대할때. \n단순히 토플지문으로 대하지 마시고. \n정말 다양한 분야들에서의 유익한 정보를 얻는 다고 생각하시면서 사랑스런 마음(?!)으로 \n지문을 대해보세요.ㅋ 극단적으로 말해서 상식을 쌓는다는 기분으로 ^^; \n솔직히 쪼금 동떨어진 얘길수도 있지만 저는 도움이 많이 되더라고요. \n문장이 해석이 안되면 답을 알기 위해서 해석을 보기보다는 정말로 이 얘기가 궁금해서 \n참을 수가 없을 때 해석을 보는거죠!! \n\n[Writing] \n\n롸이팅은 저는 쫌 무식하지만 무조건 외우는 방법을 추천해 드리고 싶습니다. \n물론 주제별 표현들이나 어휘들을 외우는 것도 무시할수 없죠. \n저도 9월달에 기본반 들으면서 표현들 정말 많이 외웠거든요. \n그러면서 10월달부터 송원쌤 수업 들으면서 에쎄이를 외우기 시작했는데. \n자체적으로 표현을 아무리 외우고 외워도 정작 에쎄이를 쓸때면 생각이 안나고. \n짧은 문장이나 표현들을 단편적으로 외워서는 에쎄이를 쓸때 \n머리속에서 끌어 내어 에쎄이에 포함시키는 것이 쉽지 않다는 개인적인 결론을 내렸습니다. \n또 같은 주제로 에쎄이를 써도 그 전날 쓴 에쎄이와 다음날 쓰는 에쎄이가 똑같이 나오지 않는다는 충격적인 사실을 깨닫고는 완젼 마음을 굳혔죠. 무조건 외우기로! \n\n그리고는 10월달부터 하루에 쌤플 에쎄이 하나씩을 외운다는 어마어마한 계획을 세웠지만! \n네. 완젼 오바였죠 ㅋㅋㅋㅋ 쉽지 않더라고요. \n하루에 에쎄이 하나를 완벽하게 외우는데 3시간이 걸리더라고요. \n(머리이 용량이 완젼 딸리더라고요 ㅠㅠ) 근데 이것만이 문제가 아니였죠. \n전날 완벽하게 외웠다고 생각해도 하루 이틀 지나면 또 금방 까먹더라고요. \n엄청난 시간 투자와 반복학습이라는 두가지가 보장이 되야 했기에.   \n분명히 에쎄이를 통으로 외우는게 쉽지는 않았습니다. \n\n하지만 외우는 것의 장점을 말씀 드린다면. 쌤들의 훌륭한 쌤플 에세이를 외우다 보면 \n시험 뿐만이 아니라 영어로 글을 쓰는것에 대한 전반적인 센스가 는다고 할까요. \n이게 롸이팅의 묘미일꺼 같은데요. 분명히 내 머리속에 나온 문장이 아닌 쌤들의 글이지만 \n외워서 쓰다보면 그게 꼭 제 글이자 곧 제 실력이 되어 있는 느낌이 들더라고요. \n물론 외웠는데 정작 시험에 안나오면 아무 의미가 없지 않느냐는 걱정을 하시는 분들이 \n계실꺼 같은데 저도 분명히 그 생각을 안해본건 아니지만 제 경험상 정작 시험에서는 \n외운 에세이가 나오지 않더라도 그동안 외웠던 에쎄이에서 비슷하게 껴 맞출수 있는 예를 \n끌어 오는것이 확률적으로도 승산이 있었고 또 에쎄이만 완벽하게 외웠놓았다면 그렇게 \n어렵지 않기 때문에 훨씬 더 탄탄한 에세이를 쓸수가 있는거죠. \n\n참고로 에쎄이 외우는 방법에 대해서 잠시 말씀을 드리자면. \n일단 젤 중요한거는 컴터로 쓰면서 외우는 것입니다. \n어차피 시험장에서는 컴터로 써야 하니까 영타를 무시할수 없으니까요! 저는 처음에 토플 \n시작할때 영타라고는 싸이월드 이메일이랑 비번쓸때만 필요한건줄 알고 있었는데. \n세달동안 컴터로 에쎄이를 쓰면서 외우니까 정말 따른건 몰라도 영타는 많이 늘더라고요. \n(영타 느는거 사소해 보일지 몰라도 은근히 이거 큰 수확인거 같아요ㅋㅋ) \n만약 토플은 못건져도 영타하나는 건지겠구나 싶더라고요.ㅋ 그리고 어느정도 외웠졌다 \n싶으시면 소리내서 스피킹 하듯이 외워 보세요. 이것도 정말 좋아요 스피킹에도 좋고 \n외워지는 효과도 더 빠르고요. 처음에는 하루에 에쎄이 하나 외우는데 3시간씩 걸리던 것들도 시간이 갈수록 요령이 생기다 보니까 시간도 조금씩 쭐여 나갈수 있었고요. \n그래도 저는 2시간은 꼬박 걸리더라고요ㅋㅋ 암튼 그래서 결국 세달동안 에쎄이 90개를 외우려는 엄청난 목표는 있었지만 결국 30개정도 외운것 같네요. 저는 외우는 것에 상당한 매력과 효과를 느꼈기에. 앞으로 토플은 안해도 에세이는 꾸준히 외우려고 생각중이고요.ㅋ \n풀 에쎄이 집적 안 써볼꺼면 다른 공부들의 의미가 퇴색되어 지더라고요. \n그래서 저는 외우는 방법 강추 드립니다 ㅋㅋ 물론 롸이팅은 저의 개인적인 방법이였으니까 \n외우는게 안맞는 분들은 표현들 열심히 공부하시고 \n브레인 스토밍 꾸준히 하시는 것도 좋은 방법일 듯 싶네요 ^^; \n\n[Speaking] \n\n스피킹은 9월달에는 토플 자체가 처음 시작하는 거였기에 Speaking에 상대적으로 \n시간 할애하는 것이 쉽지가 않았죠. 거의 못했어요(해커스 보카도 외워야 했고 ㅠㅠ \n암튼 토플 해보신 분들은 다 이해하실듯^^;) 그러다 이러다가 진짜 스피킹 완젼 망하겠다 \n싶어서 10월 한달은 거의 독립형에만 목숨을 걸었습니다. \n쌔라 쌤 수업 들으면서 쌤이 뽑아주신 예상 목록을 보니까 \n1. Personal Question 2. Paired-Choice 합치니까 딱 222개가 나오더라고요. \n일단 쌤이 주신 쌤플 앤써 있는거는 그냥 딸딸 외웠고요 없는 거는 문장 만들어서 \n거의 다 외우다 싶이 시간에 맞춰서 연습을 했습니다. 10월 한달 정말 독립형에 올인했어요. 사실 솔직히 통합형이 감도 안잡히고 하기가 겁이 났던 이유도 있었고요 ^^; \n\n그리고 한가지 팁을 드리자면. \n첫 시험을 보니까 어느 시험장을 가든지 Speaking을 정말 우렁찬 목소리로 하는 사람이 \n꼭 한명씩은 있다는 사실과 나는 그냥 들려서 들었을 뿐이데. \n어느정도의 눈치만 있으면 독립형 1,2번이 머가 나오는지 예측하는게 어렵지 않다는 사실과. \n또 감사하게 그것의 예상답안을 준비할수 있는 더미라는 황금같은 시간이 \n주어진다는 사실을 알고. 독립형에 너무 많은 시간을 투자한걸 약간 후회하기도 했죠.   \n(간혹 이걸 두고 컨닝이다 기분이 나쁘다 하는 고수님들도 계신것같은데 솔직히 저는 이해가 안되네요. 어떻게 보면 컨닝은 분명한 컨닝이죠. 다른 사람이 말하는 걸 듣고 미리 주제를 파악하고 미리 준비해서 말한다는게. 하지만 셤 보는데 쓰는 어마어마한 비용들과 새로운 문제를 만드는 것도 아니고 예전꺼 자기들 맘대로 돌려먹으면서 가만히 앉아 엄청난 이익을 누리는 ETS 생각하면 어느정도로 인정이 되는 합법적인 컨닝이 가능하다면 한민족끼리 서로 도와서 외화낭비 막아야죠.ㅋㅋㅋ) \n\n암튼 그 이후로는 독립형은 거의 손 놓고 통합형에 전력을 \n다 하긴 했지만 결론적으로 보면 speaking 독립형에서 많은 주제를 다뤘던것이 Writing Brainstorming에 정말 많은 도움이 되더라고요. 주제가 겹치는 경우가 많은거 아시죠? \n그리고 통합형은 많이 해보는 거 말고는 방법이 따로 없을듯 싶습니다. \n저는 솔직히 Speaking은 첫 시험보고 나서 아 이건 안되는 싸움이구나 싶더라고요. \n정해진 시간에 마이크에 대고 말한다는게. 저는 유난히 시험때만 되면 긴장하는게 심해서. \n말도 더듬고. 머리도 하애지고. 완젼 덜덜덜. 그래서 스피킹은 마음을 비우고 \n목표 점수도 아무리 잘해야 23으로 잡았거든요. \n책은 해커스 basic / complete guide / master 교제 이렇게만 풀어 봤고요. \n11월 부터는 후기들로 준비 하기 시작했어요. \n\n아 그리고 제 경험상 말씀 드리면 스피킹은 물론 탄탄한 내용도 당연히 중요하지만 \n그렇게까지 고득점이 필요가 없다면 발음을 은근히 중요하게 보는것 같아요. \n(제가 발음이 좋다는건 아니고요^^; 내용이 하나도 안탄탄한거에 비해서 그래도 20점대 \n초반 점수가 나오는거 보면 내용에 비해선 완벽히 연습했던 템플릿이 쫌 통하지 않았나^^;;) \n\n그래서 스피킹이 목표가 고득점이 아니고 20점대 초반이시라면 저는 내용보다는 전체적인 영어 억양과 발음에 신경을 많이 쓰시라고 권해드리고 싶네요. 확실치는 않지만 미국애들이 \n채점할때 문제가 먼지도 안보고 그냥 체점한다는 얘기도 있고. 암튼 상식적으로도 우리도 사람들 영어하는거 딱 한문장만 들어봐도 알잖아요. 잘하는지 못하는지 ^^; \n채점하는 애들도 마찬가지지 않을까요. 아 얘는 영어 할줄 아는 애구나. \n외워서 말하고 있구나. 그러한 것들. 어차피 기계가 아니라 사람이 채점하는 거니까요.ㅋ   \n\n이러한 이유로 저는 나름 발음을 고치기 위해서 안되는 발음에 중점을 쫌 많이 뒀어요. \n한국사람들은 구강구조상 p랑 f b랑 v는 그래도 잘하는데 R이랑 L 그리고 특히 th sound 가 정말 약하다는걸 알게 됐죠. 그래서 좋은 것 중에 하나가 구글가서 tongue twister 치시면 \n어려운 발음 연습 하는거 나오거든요. 예를 들면 \"내가 그린그림은 긴기린그림이냐\" 머 이런거 있잖아요 영어로 하는거죠.ㅋ 그냥 혼자 중얼중얼대기에 좋은 문장들이 많아서 많이 도움이 된 것 같네요 ^^ \n\n[Listening] \n드디어 대망의 리쓰닝이네요. 원래 RC WR SP은 정말 짧게 얘기할려고 했는데 \n저렇게 길어진걸 보니까 엘씨가 얼마나 길어질찌 살짝 두렵네요.ㅋ \n(저같으면 제 글 넘 길어서 안 읽을꺼 같네요 간결하지 못해 죄송ㅠㅠ) \n\n앨씨 처음 본 시험에서 27점이 나왔을때는 한치의 의심도 없이 결론을 내렸죠. \n한치의 의심도 없었죠! 뽀록이구나! 찍은게 다 맞았구나! 싶었죠. \n근데 11월달에 본 시험을 결과 보고 28점 나온거 보고. 정말 너무 기쁘더라고요. \n다른 과목들은 몰라도 엘씨는 정말 열심히 했기에. 정말 뿌듯했어요. \n그래서 엘씨는 많은 도움을 드릴수 있을꺼 같네요. \n\n일단 초급(~15) 중급(15~20) 고급(21~30) 이렇게 세 단계로 설명을 드릴까 합니다. \n저도 9월(기본반) 10월(중급반) 11월 12월(고급) 이렇게 들었기 때문에.ㅋ \n\n[9월 초급] \n초급단계에서는 감을 거의 못잡고 있었습니다. 일단 쉽게 말하면 너무 어려웠죠. \n안들려요. 안들렸죠. 안들렸고요. 정말 안들렸어요. \n귀가 문젠가 쉽을 정도로 안들리더라고요. 머 이딴 시험이 다 있나 싶었죠.   \n간혹 들려도 (컨버같은 경우는 그래도 렉쳐에 비해서는 쫌 들렸으니까.) \n\"문제는 정작 못풀겠더라고요.\" 솔직히 노트 테이킹은 해 볼 엄두도 못내고 있었죠. \n간혹 노트 테이킹을 조금 하더라도 정작 문제 풀때는 쳐다 보지도 않더라고요. \n부교재를 풀때 딱 어느정도였냐면 렉쳐 하나 풀면 두개 겨우 맞추고 세개 맞추면 \n아 선방했다 기분 좋은데? 이 정도로 렉쳐는 정말 말도 안되게 어렵다고 느꼈죠.   \n해커스 basic으로 공부를 하긴 했지만 전혀 감을 잡지 못한체 한달을 보냈던것 같네요. \n이랬던 저에게 정말 기적같은 일이 일어 납니다. \n바로!!!!!!!!!  신화식 쌤을 만난거죠.ㅋ \n(제가 신화식쌤 광팬이기 때문에^^ 앞으로 드릴 설명들도 모두 쌤의 수업에서 들은 \n내용들로 바탕으로 이루어져 있음을 미리 알려 드립니다.ㅋㅋ) \n결론부터 맛뵈기로 말씀 드리면 \n엘씨 고득점을 받는 것과 들리고 안들리고는 중요한게 아니라는걸 깨닫게 됩니다. \n자 그럼 중급으로 넘어 갈까요.ㅋ \n아 그 전에! 처음 시작하시는 분들은 해커스 Basic 강추해드릴께요! \n이 책이 저도 그 당시에는 몰랐지만 실력이 쌓이고 나서 다시 풀어보면 Signal words를 \n명확히 주기 때문에 처음 풀기에도 나중에 다시 복습하기면서 실력이 얼마나 늘었나 측정할때도 정말 도움이 많이 되는 좋은 교재인 것 같아요. \n\n[10월 중급] \n아침중급반을 들었는데. 반을 옮기는 중간 과정이 있어서 3일은 수업을 못들었지만 \n첫 수업에서 신화식 쌤 수업을 듣고 나서 생각했죠, “아 대박이다.”ㅋ   \n쌤이 설명해주신 상상도 못했던 접근 방식과 18개의 문제유형. \n모든걸 알고 있는 듯한 쌤의 간결 명료한 설명들. \n모든게 저에게는 엘씨문화충격과도 같은 거였죠 ㅋㅋ \n지금도 자신있게 말할수 있는건 쌤 안 만났으면 엘씨 정말 못 끝냈을 것 같습니다! \n중급단계는 우선 제가 느꼈던 엘씨가 안되는 문제점을 바탕으로 설명드리겠습니다. \n\n1. 복습할때 Script을 보면 안되나? \n정말로 10월달부터는 엘씨에 투자하는 시간이 절대적으로 많았졌습니다. \n하루에 5-6시간은 무조건 했으니까요. 근데 신화식쌤한테 충격적인 말을 듣게 됩니다. \n투자하는 시간이 중요한게 아니라. \n얼마만큼 효과적으로 공부 하느냐 하는 것이 중요한거라는. \n고민 정말 많이 했죠. 원래 저는 렉쳐 하나를 듣고 틀린 문제를 보고 다시 복습을 할 때. \n무조건 스크립을 보면서 다시 들었거든요. 답답하기도 했고 안들리는데 어떻해요 ㅎ \n달리 방법도 없었죠. 어느날 신화식 쌤 수업 중에서 듣고 눈으로 스크립을 보면서 귀로 들으며 이해하는거는 아무 의미가 없는 공부라는 얘기를 듣고 제가 얼마나 무의미한 공부를 해 왔는지 깨닫게 나서 부터 많은 고민을 하고 공부 방향을 다시 잡게 되었습니다. \n문제를 풀고 복습을 할때. 일단 세번까지는 안들리는 부분을 듣고 그래도 안들리면 스크립을 봤습니다. 스크립을 다 태워 버리지 않는 이상 스크립을 보고 싶은 욕구를 자제할 방법은 \n없더라고요. 희한하게 따른거는 다 자제가 되도 스크립 보는건 자제가 안되더라고요 ^^; \n대신 그만큼 쉐도잉을 철저히 하려고 노력했죠. \n자 그럼 엘씨의 꽃! 쉐도잉에 대해서 잠깐 말씀 드릴께요 ^^ \n\n2. 쉐도잉 vs 딕테이션 \n일단 결론부터 말하면 딕테이션의 장점도 분명히 있겠지만 \n저는 두가지 다 가치 못하겠더라고요 10월 초에 렉쳐 하나를 딕테이션 하고 쉐도잉 하는데 \n2시간이 걸리는 겁니다. 한 셋트도 아니고 렉쳐 하나를요. 도저히 안되겠다 싶어서 \n신화식쌤이랑 상담 끝에 딕테이션은 고히 접어 두기로 했죠. \n그리고 쌤한테 배운 완소 쉐도잉 공부 방법을 그대로 적용 시켰습니다. \n물론 딕테이션이 쓸모가 없지는 않겠지만.(안해봐서 장점을 잘 모르겠네요.ㅋ) \n쉐도잉의 강점이 너무 크기 때문에 이런 이유로 저의 쉐도잉 사랑은 중급부터 시작됩니다. \n사실 저는 몰랐기 때문에. 몰랐다기 보다는 하기 싫었고 하기도 어려웠고 \n그래서 중급부터 했지만 토플 처음 시작하시는 분들은 처음 시작할때 부터 하시라고 \n적극 권해 드리고 싶네요. \n\nShadowing!! 말 글대로 그림자 처럼 따라 읽는다는 의미인데요. 정말로 엘씨의 모든 기본은 쉐도잉에서 시작되는 것 같습니다. 흔한 오해 중에 하나가 쉐도잉을 외우는 거라고 생각하시고 거부 반응이 있으신 분들는데이 있는데 외운다기 보다는 \n문장을 의미구로 끊고 그 문장을 따라 하는 겁니다. 예를 들어서 안들린 문장 중에 \nthat’s about as far as you can drill into the earth now at least 라는 문장이 있다면. \n세번까지 들어 보고 그래도 안들리면 스크립을 보고 쉐도잉을 시작하는거죠. \n왜냐면 세번이상을 듣고도 안들리는 문장은 열번 백번을 들어도 안들리는 거니까요. \nthat’s about / as far as you can drill into the earth / now at least 세토막을 냅니다. \n그리고 세부분으로 따라 읽는 거죠. 그래도 안들린다 그러면 더 작은 의미구로 끊습니다. that’s about / as far as / you can drill / into the earth / now at least. \n이런식으로 5개로 짤라서 다시 따라 읽는 겁니다. 이래도 문장을 따라하거나 이해하는데 \n어려움이 있다면문장을 최대한 잘게 짤라서 자기가 이해할수 있을때까지 따라 읽는 거죠. \n그리고 나서 더 중요한게 이제 이 나눈 문장들을 다시 붙여서 이해하는 부분입니다. \n아무리 쉬운 문장과 들리는 문장들도 쉼표가 먼지 모르는 미국 애들이 말할때는 뒷부분가면 \n자연스럽게 놓치게 되더라고요. 길게 따라갈수 있다는 것은 그만큼 쉐도잉을 제대로 하고 \n있고 그만큼 내 실력이 늘고 있다는 증거이기도 했으니까 \n최대한 길게 문장을 끌고 가면서 들을수 있나 없나 많이 시험을 해 보았습니다. 한 문장을 듣고 귀랑 머리가 동시에 따라갈수 있을때까지 연습이 되면 다음 문장으로 넘어 가는 겁니다. \n\n근데 또 이런 딜레마가 찾아오더라고요. 다 안들리면 어떡하나? 쉐도잉을 다 할수도 없고. \n저는 일단 처음에는 다 하라고 말씀드리고 싶네요. 물론 엄청 시간도 오래 걸리고. \n힘들긴 하지만. 저 같은 경우는 쉐도잉 할 문장에 노랑 형광펜으로 표시를 했는데. \n처음에는 너무 많고 힘들어서 쉐도잉의 효과를 의심한적도 있었지만. 시간이 갈수록. \n어느새 저도 모르는 사이에 책 뒤로 갈수록 형광펜의 빈도가 줄어 드는게 보이더라고요. \n(표면적으로 들어나진 않았지만 조금씩 듣기 실력도 향상이 되고 있다는 증거였겠죠?^^;) \n\n그리고 또한 쉐도잉의 장점 중의 하나는 자신이 못 듣는 이유를 분석할수 있다데 있습니다. \n일단 쉐도잉을 시작하기 전에 왜 안들릴까를 먼저 분석을 했죠. 크게 3단계로 나누자면 \n1. 단어를 모를경우 2. 연음을 못잡는 경우 3. 문장구조를 모르는 경우. 차라리 단어를 \n몰라서 안 들리는 거면 오히려 안도감이 느껴졌어요. 단어야 외우면 되는거니까요. \n\n연음이랑 문장 구조가 가장 큰 문제였습니다. \n연음은 스크립을 보면 해석을 못하는 경우가 없는데 들을때는 못듣는 거죠. \n너무나 쉬운 단어들도 붙어서 빠르게 발음이 되다보면 단편적으로 귀로 듣기에는 \n전혀 새로운 하나의 단어가 되어 버리더라고요. \n너무나 많은 예가 있지만 몇가지만 들어보면 듣기를 하는데 락씬잇 락씬잇 그러는 겁니다. \n진짜 오랫동안 고민해도 모르겠길래 결국 스크립을 봤는데 충격이였죠. locks in it. \n미국애들이 빨리 말하려고 붙이다 보니까 새로운 아는것들도 새로운 단어(?) 처럼 들리는게 문제더라고요. 진짜 연음을 못잡는 경우가 너무나 너무나 너무나 많았습니다. \n안들려서 스크립을 보면 황당하기 그지 없는 것들. ㅎㅎ \n\n그래서 이때부터 모든 문장을 볼 때 붙여서 인식하는 연습을 했죠. \n예를 들어 locks in it [locksinit] / turns around [turnsaround] 이런식으로요. \n실제로 들을때는 턴즈! 어라운드!라고 들리는게 아니고 [턴자라운드]라고 들리더라고요 \n연음이 되는 부분을 하나의 단어로 인식하려고 노력을 많이 한거 같아요. \"아버지가 방에 \n들어 가신다\"를 \"아버지 가방에 들어가신다.\" 라고 하더라도 내용 이해가 될수 있게. \n\n그리고 또 연음이 하나도 안 됐는데 안들리는 경우에는 문장을 다 외운다기 보다는 \n문장 구조를 외우려고 노력했습니다. 예를 들어 아까 위에서 말한 that’s about as far as you can drill into the earth now at least. 이 문장을 위움으로써 비교급을 잡을 수 있었고요. \n머지 않아 that’s about as far as로 시작하는 또 다른 비교급 문장을 들었을때.   \n들리니까 기분 정말 좋더라고요. The peak was not as thin as fragile as the needle 이런식으로 비교급이나 가정법이 어려운 문장구조들은 나오는 족족 다 외워 버렸드니 다음에 비슷한 어려운 문장 구조가 나오도 전보다는 훨씬 잘 들리더라고요. \n\n쉐도잉 처음 하면 시간도 많이 걸리고 힘들기도 하지만 스피킹에도 엄청 긍정적인 효과가 있고 무엇보다도 분석적으로 공부하는게 가능해졌요. 예를 들면 비교급이 안들리면 왜 안들리는지 아 as 하고 as가 멀리 떨어 져 있을때는 못듣는구나 다음에는 신경써야지 이런식으로요. \n“어제 쉐도잉 했던 문장이 오늘 기억나지 않는다면 모든 고생을 물거품이 될수도 있다는” \n신화식쌤의 말에 항상 자극을 받고 정말 10월 한달 쉐도잉 열심히 했던 것 같습니다 ^^; \n\n3. 문제유형 \n우선 signal words를 잡아서 문제가 머가 나올지 예상을 하고 듣는 건데. \n정말로 쌤이 만든 18가지의 문제 유형들은 특허급이기 때문에 온라인상에서의 \n자세한 언급은 자제 하도록 하겠습니다.ㅋㅋ \n핵심만 말씀 드리면 엘씨가 5분 이상의 긴 강의를 듣고 그 중에서 한가지를 찝어서 물어 보는 건데 렉쳐가 다 들린다고 해도 기억해서 맞추기 힘들다는 거죠. \n\n\"문제라고 기억을 해 논 사람만이 5분의 렉쳐가 끝나고 나서도 그 답을 기억해낼수 있다.\" \n\"시험문제의 90프로가 어디서 나올지 예상이 된다면 해볼만한 싸움이다.\" \n\"문제유형을 아는 사람은 10년의 해외경험을 가진 사람도 이길수 있다\"는 쌤의 말을 듣고 \n어쩌면 엘씨 정복의 꿈이 현실이 될수도 있겠다는 기대감에 \n엘씨 공부가 슬슬 즐거워 지기 시작했습니다. \n토플 시작한지 두달 후에 거둔 나름의 성과였죠. \n\n4. 노트테이킹 \n아 이게 정말 골때리더라고요. 그래 머 일단 기본반에서는 전혀 쓸 수가 없어서 \n고민이던 것이 중급 단계로 오면서 쓰는건 상대적으로 쫌 많아 지더라고요. \n근데 여기서 또 문제가 노트테이킹 신경쓰느라 \n정작 중요한 부분을 못 듣는 경우가 많이 생겼습니다. 정말 난감했죠. \n그렇다고 노트테이킹을 안하면 불안하고. 그렇다고 노트 테이킹 많이 해도 \n정작 문제 풀때는 안보는 경우도 태반이였고 하도 답답하고 \n그래서 차라리 노트테이킹을 아예 하지 말까 컨버는 그냥 듣고 렉쳐만 할까 \n진짜 오만가지 생각을 다 해봤습니다. \n\n결국 다시 신화식 쌤께 SOS! \n\"노트테이킹은 100%를 다하려고 욕심을 내는 것이 아니라 0%에서 쌓아가야한다는\" \n쌤의 조언을 바탕으로 결국 Signal word를 잡아도 노트 테이킹에 신경을 쓰다 보니까 \n정작 중요한 뒷부분을 놓치는 걸 막기 위해서. 극단의 방법을 적용했죠. \n만족스러운 해결책이 나올 때 까지 노트 테이킹을 아예 안했습니다. \n노트테이킹에 의존하다 보니까 기억할수 있는것도 기억을 못하는것 같아서 \n철저히 기억에만 의존하려고 노력을 많이 했습니다. \n신기하게 생각보다 효과가 빨리 있더라고요. \n노트테이킹을 안하면 문제 푸는게 거의 불가능 하긴 했지만 그래도 노트 테이킹을 하느라 뒷부분을 놓치는 악순환은 많이 예방할수 있었던 것 같습니다. \n그리고 또 문제가 시그널을 잡고 노트 테이킹을 해도 결국 문제 풀때는 \n어딨는지 못찾거나 한참 걸리더라고요 (너무 난잡하게 써서 그런지^^;) \n그래서 저는 예상되는 문제에는 별표를 쳤고요.(이거 은근히 도움 많이 되더라고요ㅋ) \n나중에 진짜 별개수와 문제가 일치 될때는 희열감마저 들더라고요 ^^; \n\n노트 테이킹! 어쩌면 득이 될수도 어쩌면 독이 될수도 있는 양날의 칼과 같은것 같네요. \n확실한거는 노트 테이킹이 주가 되면 안된다는 겁니다! 아 그리고 한가지 팁을 드리자면! \n저는 렉쳐 하면서 또 어려웠던게 대명사 나오는 부분이 되게 힘들었어요. \n일단 알아 듣기 힘들뿐더러 대명사를 그냥 일반 단어로 이해하고 아 머야 안들려 그랬던 \n어처구니 없는 실수들도 다반사였고요. \n그래서 대명사가 나왔을 때 당황하지 않으려고 신경을 많이 썼습니다. \n예를 들어 사람 이름이 나오면 John Legend라는 사람이 나오면 \n교수님이 두번째 그 사람을 다시 언급할때는 무조건 last name만 말하더라고요. \nJonh은 적을 필요도 기억할 필요도 없는거죠! 한자로 사람인짜랑 Legend의 L만 적었어요. \n당연하다고 생각하시는 분들도 있으시겠지만 저는 이거 깨닫는데 두달이 걸렸네요 ㅋㅋ \n(대체적으로 사람을 언급하면 문제랑 연결되는 부분이 많기때문에 중요했던것 같네요.) \n\n이렇게 10월 한달 complete guide랑 쌤의 스터디 자료들로 분석적인 공부를 하다 보니까 \n그래도 실력이 확 느는게 눈에 띄게 보이지는 않았지만. \n어려운 엘씨에 끌려다닌다기 보다는 철저하게 엘씨를 이용한다는 자신감을 얻은체 \n다음 단계로 올라가게 됩니당 ^^; \n\n[11월/12월 고급] \n11월 중순에 나온 10월 말 셤에서 말도안되는 27점을 받긴 했지만 여젼히 문제를 풀면서도 \n점수가 뽀록이였다는 사실을 명백하게 해주는 틀리는 문제들이 많았기에 \n더 많은 노력을 쏟아 부었죠. (진짜 9월에 셤 봤으면 100% 10점대 초반 나왔을꺼예요^^;) \n\n암튼 그래도 이 단계에서는 어느정도 기본기가 잡힌 상태였지만. \n그래도 문제점이 당연히 있었습니다. 아니 오히려 더 많았습니다. \n\n1. 들려도 문제는 틀리는 경우가 많다? \n\n9월달에 처음 엘씨를 시작하면서 정말 안들렸던 그런 고달펐던 경험들이 \n전혀 절망적이고 나쁜 경험이 아니였다는 사실을 깨닫습니다. \n왜냐하면 공부 하면 할수록 들려도 틀리는 문제들이 정말 많더라고요. \n오히려 안들리고 틀리는 것보다 더 큰 문제점으로 다가왔죠. \n또한 시험을 몇번 봐보니까 평소에 아무리 많은 준비를 하고 가도 시험장에서는 \n긴장하는 것도 있고 실제로 난이도가 같다고 하더라도 더 어렵게 느껴 지기 때문에 \n상대적으로 평소보다 잘 안들리는 것 같더라고요. \n\n그래서 언제나 시험장에서 써 먹을수 있는 공부! 강조했던 쌤의 교육철학을 따라.ㅋ \n렉쳐를 잘 들을려고 노력하기 보다는 안들릴 때 어떻하면 당황하지 않고 \n내가 맞출수 있는 문제들을 어떻게 잡아 낼 것인지에 모든걸 집중을 하고 연습을 했죠. \n문제도 맞춘문제를 확인하고 그냥 넘어 가기 보다는 다른 보기들은 왜 냈는지 \n의도를 파악하는데 더 많은 비중을 두었고요. \n\n또 틀린 문제들은 왜 틀렸는지 철저하게 분석을 하고 \n씨그널의 신호가 약하거나 없는 경우 두가지로 나누어서 정리를 하면서 연습했어요. \n근데 저는 개인적으로 메인아이디어가 제일 어려웠어요 ㅠㅠ \n일단 시그널이라는 개념이 일반적으로 적용이 안됐고. \n전체적으로 내용을 묻는 것이였기때문에 \n시그널을 잡아야 한다는 일념 하나로 국부적인 렉쳐의 내용에만 초점을 맞추어서 \n공부를 해온 저로써는 메인아이디어는 스트레스의 근원지였죠. ㅋ \n전체적인 그림을 항상 염두에 두고 듣는거! 씨그널 못지 않게 중요한거 같습니다 ^^ \n\n2. 쉐도잉은 계속 해야 하나? \n\n저는 솔직히 고급 단계로 들어오면서는 쉐도잉을 거의 못했습니다. \n말그대로 정해진 시간내에 최대한 많은 문제들을 다뤄야 했기에 시간적인 여유가 없었죠. \n그래도 감을 잃지 않기 위해 렉쳐 하나당 세문장 정도는 콕 찝어서 했어요. \n근데 문제가 쉐도잉을 아무리 철저하게 많이 해도 영어를 듣고 모국어로 바로 전환해서 이해하기란 여전히 어려움이 있었죠. 속도가 쪼금만 빨라지면 정신을 또 금방 못차리겠더라고요. \n\n내가 들리는 문장을 의미구로 끊고 한번에 따라갈수 없다면. \n방법은 하나 밖에 없더라고요. 탐과 매리가 천천히 말하는거 그거 하나였죠. \n근데 그게 불가능하잖아요. 시험보는데 렉쳐에서 교수님이 갑작이 학생들한테 \n\'자 애들아 니네말고도 지금 토플 시험보는 애들도 듣고 있으니까 천천히 말할께 잘 들어\' \n이럴리는 없으니까요. 암튼 이런 배려심이라곤 전혀 없는! 코쟁이들! ㅋ이런식으로라도 \n스스로 위안을 삼으면서 속도에 적응 하는 방법을 찾으려고 고민을 하기 시작했습니다. \n\n3. 문제는 SPEED \n그래서 1번 2번의 복합적인 고민끝에 나름 방법을 생각해 냅니다. \n중급부분에서도 잠깐 말씀 드렸듯이 이미 한번 듣고 눈으로 스크립으로 내용을 이용한 \n렉쳐를 또 듣는건 아무런 의미가 없는 공부입니다. 물론 단기적으로 기분은 좋고 \n웬지 실력도 늘고 있는것 같고 그렇더라고요. 들리니까요 ^^; 하지만! \n\n여기서 또 신화식 쌤의 어록! ㅋ \n\"공부할때 편할래 시험장가서 편할래 공부 할때는 힘들게 하고 시험장가서 편해야지\" \n“갈색털을 갔고 있던 북극곰이 북극으로 가면서 털 색까지 흰색으로 바꿔 가면서 환경에 \n적응하려고 노력했죠. 왜냐고요? 안그러면 죽으니까요. 살려고 노력한거죠. 근데 여러분들은 엘씨 풀 때 스크립 본다고 죽는거 아니잖아요. 토플 공부 안한다고 죽는거 아니잖아요.\" \n\n이것도 충격이였죠. 이 세상 온갖 미물들도 살기위해 피나는 노력을 하면서 살아 가는데 \n저도 사람의 자존심을 걸고.ㅋㅋ 먼가 피나는 노력이 있어야 겠구나 싶더라고요.ㅋ \n그래서 내린 결론은 제 귀가 미국애들 말하는 속도를 따라 갈수 없다면 \n귀를 짤라서 미국애들 귀랑 바꿀수만 있다면 그렇게라도 하고 싶은데 불가능 하니까. \n어쩔수 없이 제 귀를 적응시켜 나가는 수 밖에 없었죠. \n\n그래서 쉐도잉을 하고 스크립을 보고 눈으로 머리로 내용을 이해해 버린 모든 렉쳐들은 \n전부다 속도를 1.5배로 듣기 시작했습니다. 곰플레이어로 속도 조절이 가능하더라고요 \n처음에는 역시 엄청 힘들었죠.(처음에는 1.1배부터 차근차근 늘려나가시는 것도 좋으실 듯!) 근데 효과는 생각보다 제 기대보다 빨리 나왔습니다. 원래 속도로 돌아 왔을 때는 희한하게 탐과 메리가 천천히 말하는 듯한 기분이 들더라고요. 상대적인 거였지만 이게 반복이 될수록 조금씩 쌓일수록 저의 귀는 빠른 렉처의 속도에 적응을 해가고 있었죠. \n\n또한 속도가 빨라지니 들리던 문장도 다시 안들리는 것들이 나왔고. \n마치 속도를 올릴때마다 새로운 렉쳐를 듣는 듯한 기분이있 들더라고요. \n이렇게 함으로써 시험장에서 처럼 안들리는 렉쳐들이 나왔을때도 \n문제들을 찝어내는 연습을 할수 있었고요. \n\n\n4. 주제 확장 \n11월 12월 해커스 LC 단과를 들으면서 신화식쌤이 주제 확장을 늘 강조하셨기에. \n본격적인 주제를 확장하는데 중점을 두었습니다. \n시험장가서 새로운 주제를 만나서 당황하지 않기 위해. \n예를 들어서 제가 건축에 관한 렉쳐를 푸는데 무슨 가딕 가딕 가딕이 계속 나오는 겁니다. \n가딕이 멀까 한 1분은 고민하면서 렉쳐를 들은거 같아요. \n가딕은 그냥 대명사일 뿐! 신경안쓰려고 많이 노력했지만 \n자연스럽게 문제유형을 잡아내는데 지대한 악영향을 끼쳤죠. \n문제를 풀고 스크립을 보는데 충격을 완젼 받았죠. 고딕양식이였어요.ㅋㅋㅋ \n진짜 허탈한 웃음 밖에 안나오더라고요. 이러한 면에서 주제 확장 정말 너무 중요합니다. \n시험장 4개의 렉쳐 중에서 최소한 3개는 내가 다뤄본 주제가 나와야 승산이 있다는 생각으로 열심히 부지런히 늘려 나갔습니다.ㅋ \n\n11월 12월 지금까지. \n쌤의 완소 핸드아웃들!! + 해커스 Basic + complete guide +해커스 LC + Actual test \n그리고 다양한 실전 문제들을 풀면서 복습할때 주제별로 묶어서 공부를 하기 시작했습니다. \n일단 저는 해커스 LC책에 나오는 Lecture 주제별 분류표를 기준으로 정리를 했습니다. \n\n잠깐 말씀을 드리면. \n1. Biology (23개) \n2. Astronomy (10개) \n3. History (20개) \n4. Art (22개) \n5. Music (14개) \n6. Enviromental science (10개) \n7. Geology (26개) \n8. Literature (15개) \n9. Linquistics (5개) \n10. Anthropology (13개) \n11. Archeology (8개) \n12. Paleontology (5개) \n13. Sociology (7개) \n14. Phychology (6개) \n15. Economics (16개) \n16. Physics (4개) \n17. Chemistry (12개) \n18. Physiology (11개) \n19. Communication (6개) \n20. Architecture (7개) \n21. Film (6개) \n22. Photography (6개) \n23. Engineering (6개) \n\n주제별로 Biology면 Biology에 관련된걸 다 다시 찾아서 복습을 했습니다. \n세달동안 대략 200개는 넘는 lecture를 다뤄 본것 같네요. \n물론 주제가 겹치는 것도 많았고 1분이나 2분짜리 짧은 lecture가 훨씬 많았습니다.ㅋ \n감을 못잡았던 9월달 제외하고는 10월 11월 12월! \n이때까지 했던 모든 자료들을 듣고 듣고 또 들었습니다. \n처음 10번정도는 그냥 속도로. 그 이후로는 속도를 늘려나가면서 1.5배의 속도로 들었어요. \n(속도를 빠르게 하는게 은근히 시간절약의 효과도 있어서 좋더라고요.ㅋ) \n\n주제별로 듣는 것의 장점은! 주제별 공통점을 찾을수가 있었어요. \n근데 진짜 신기할 정도록 주제별로 공통점을 찾는게 그렇게 어렵지는 않았습니다. \n눈에 보이는 뻔한것들도 나오기 시작했죠. \n1.Main topic과 6. 해드셋(물론 헤드셋도 문제유형별로 다 다르긴 하지만 그래도 다시 들려주니까 제외!ㅋ) 이 두 문제를 빼고 나머지 4문제를 잡느냐 못잡느냐 하는건데.. \n주제별로 2문제 정도를 예상하고 있을수 있다면 \n그리도 나머지 두문제를 철저한 문제유형에 입각해서 잡아 낼수 있다면 \n어쩌면 6개를 다 맞추는게 가능할수도 있다는 생각을 하게 되더라고요. \n\n예를 들어서. Art에 관한 렉쳐는 어떠한 주제가 나오던 학파와 작품 이름의 유래라든가 \n그리고 이게 어디에 대항해서 나오게 된 배경과 어디에 영향을 줬는지 \n이정도는 거의 항상 나온다는걸 알게 되었습니다. 조금이라도 비슷한게 들리면 문제인거죠! \n또 상대적으로 난이도가 높아지는 경우는 예를 들어서 인상파와 다다이즘과 큐비즘을 설명하면 렉쳐에서는 인상파의 단점을 말하고. 정작 지문에서는 똑같은 내용을 다다이즘의 장점으로 냄으로써(대비해서 나온거니까요.) 이런식으로 문제의 난이도를 조절한다는 것 까지 \n보이기 시작하니까 들을때 더 신경써서 듣게 되더라고요. \n\n또 대표적인 몇가지를 말씀 드리면, \nMusic이면 악기가 소리를 내는 곳. Geology면 어떤 이론이 멀 밝혀 냈는지. 하지만 머는 설명할 수가 없다라든가. Science를 들으면 불가능한것. 대체에너지에 관한 거면 새로운 에너지의 장단점! 문학이나 미술은 거기에 관련된 비평이 있었다! 고고학은 발견한 것이 갖고 있는 의미! 또한 병의 예가 나오면 해결책은 무조건 나오다는 거나. 당연히 100%는 아니겠지만 그래도 주제별로 다른 렉쳐들을 같이 듣다 보니까 전체적인 윤곽과 세부적인 디테일까지 \n다룰수 있었던것 같고요. 일종의 자신감도 생길수가 있었던 것 같습니다. \n모든 섹션이 다 마찬가지이겠지만 렉쳐는 정말 자신감도 정말 중요한것 같아요. \n일종의 시험장에서 안들려도 문제는 마출수 있다는 자신감이랄까요? ^^; \n\n결국 9월달 처음에 토플을 시작할 당시 거의 아무것도 못듣던 제가 \n12월 21일 마지막 토플 시험을 볼때는 노트테이킹한 것 중에서 signal을 잡고 별표를 쳤던 \n모든 부분과 문제가 100% 일치하는 기적같은 일을 느끼면서 시험장을 나오게 되었네요. \n\n그리고 저는 또 신기 했던게 쌤이 수업 중에 농담으로 시험보는 학생들이랑 가치 시험장가서 옆에 앉아서 앗 문제 나온다 이 부분 잘들어 알려 주고 싶다고. 하신적이 있었는데.ㅋ \n그리고 또 쌤이 수업시간에 문제유형이 걸리는 부분이 나오면. \n손가락으로 \"딱\"소리 내는거 하시는데.(모라 표현해야 할지 모르겠네요.ㅋ) \n\n암튼 시험장에서 엘씨를 푸는데 문제 유형에 걸릴 때 마다 쌤의 그 손가락 소리가 환청으로 들리는 겁니다.ㅋ 정말 신기하고 아찔한 경험이였죠 (쌤이랑 같이 시험 보는 듯한 기분? ㅋ) 암튼 그 만큼 문제유형과 주제확장에 모든걸 걸었던 것 같네요. \n\n암튼 엘씨도 결론을 내자면. \n(너무 길었죠 ㅠ_ㅠ) \n\n4과목중에 가장 감을 잡기가 어렵고 방향을 처음부터 잘못잡으면 \n그만큼 빠져나오기도 힘든게 엘씨인거 같아요! \n하지만 한번 감을 잡으면 양방향 쌍방향으로 속도가 붙는게 바로 LC죠 ^^; \n전 딴거는 몰라도 신화식 쌤덕분에 엘씨는 진짜 재밌어서 했던거 같아요. \n강수진이 발레 토슈쥬 하루에 세개씩 갈아 치우는 기분으로 \n저도 2주간격으로 쌓여가는 엘씨 노트를 볼때면 뿌듯하기까지 하더라고요! \n\n하지만 분명히 엘씨에 많은 노력을 투자하기는 했지만 \n그나마 쫌 괜찮았던 12월 21일 마지막 셤을 제외하고는! \n시험을 볼때마다 절대로 엘씨를 잘 들었다는 생각을 해 본적도 없었고요 \n오히려 시험 보고 와서는 기분은 찝찝하기만 했고요. 그래서 내론 결론은! \n역시 들리는게 중요한게 아니라! 문제 유형이 중요한거구 싶더라고요!   \n그래서 항상 엘씨 공부 시작하기전에는 두가지를 마음속으로 생각하고 시작했어요. \n\'항상 시험장과 같은 기분으로\' \n\'난 안들려도 다 맞춘다\' \n\n이상 엘씨였습니다! \n후기도 저는 11월 12월 두달동안 열심히 팠기에 잠깐 말씀 드릴까요 ㅋ \n\n[후기] \n9월 10월달에는 후기가 먼지도 몰랐습니다. 그리고 11월달 되니까 분위기가 심상치 않더라고요. 이제 나올 후기가 얼마 남지 않았다? 정말로 달콤한 유혹이였죠. 그래서 후기를 하기로 결심을 하고 시작했는데. 처음에 한 일주일은 후기 공부도 제가 하던 공부도 둘다 다 말리더라고요. 그래서 저는 웬만하면 후기는 추천해드리고 싶지 않네요. \n\n물론 리딩 단어랑 스피킹 롸이팅은 도움이 많이되는건 사실이죠! \n하지만 절대로 실력이 없는 후기라는 것은 존재 하지 않습니다. \n간혹 후기를 그냥 훝어 보고 가라고 하시는 분들 있으신것 같은데 후기는 훝어 보면 \n아무런 의미가 없는 것 같습니다. 후기를 탄다는 것 자체도 로똔데 후기타고도 시험 점수 잘 못받으면 너무 억울할꺼 같아서 저는 정말 확실히 다 한것 같네요. \n저는 남은 후기중에 2007년 5월 6월 7월 8월 10월 거의 모두다 딸딸 외웠죠. \n\n도움이 되실지는 모르겠지만. 후기 공부 방법 팁을 알려드리면! \n알씨랑 엘씨는 웬만하면 보지 마세요! 엘씨랑 알씨는 내용을 알고 있어도 \n문제푸는것과의 상관관계는 극히 적어 보입니다. 더 헷갈리기만 하고요 ^^; \n암튼 저같은 경우는 일단 후기 자료를 보고 롸이팅이랑 스피킹을 다 모법 답안을 만들어서 외웠습니다. 스피킹은 자료가 완벽한게 아니였기때문에 최대한 비슷하게 만들고 시간내에 맞춰서 연습하는데 중점을 뒀고요. 그리고 나서 이제 후기를 탄다는 것의 행운을 극대화하기 위해 \n리딩 제목 3개랑 스피킹 6개 그리고 롸이팅까지 연관을 지어서 외웠어요. \n리딩 첫 지문의 제목을 보는 순간 머리속에서는 다음 지문이 머가 나올지 스피킹이 머가 나올지 펼쳐 질수 있도록! \n\n예를 들어서 2007년 7월 21일 후기를 공부 한다고 하면 \n\n(리딩)다큐멘터리 - 애들 이모션 - 바다섬 - (스피킹) 가장 배우고 싶은 과목 - 핸드폰 공공장소 금지 - 조소클래스 인원 쭐이는거 반대 - Process explanation - 학생과외 vs 학교시험 - Painting - (롸이팅)도도새 멸종 원인 - 애들이 미리 계획하는 것이 좋다. \n\n이렇게 정리를 하고 외웠죠. 외우는게 쉽지 않아서 어떻게든 연관관계를 만들어 보기도 했고요.ㅎㅎ말도 안되는 거였지만 나름 잘 외워 지더라고요. 예를 들어서 \n\n7월 21일날 상영하는 다큐멘터리 영화봤어? 얘들 emotion 발달에 좋을꺼 같드라. 무슨 내용이였는데? 머 태평양 어떤 섬에 사는 동물들에 대한 거였어. 어 그거 내가 학교에서 더 배우고 싶은 과목이였는데. 못봤으면 핸드폰으로 재방송 보던가. 나 지금 조소클래스 들어가야 돼서 지금은 못봐. 니가 process를 explanation 해줄래? 야 나도 요즘 시험 준비하랴 학생 과외시키랴 바뻐. 그래? 그러면 티비는 못봐도 그림이라도 봐놔야 겠다. 도도새에 대해서 나왔는데 흥미롭드라 애들이 미리 배울가치가 충분히 있더라고. \n\n이런식으로 한 이유는 만약에 하나님의 축복?으로 후기를 탄다면 리딩 첫지문을 보는 최대한 흥분을 가라않히고 리딩을 집중해서 풉니다. 그러면 40분이라는 리딩더미와 30분이 넘는 엘씨더미라는 선물이 기다리고 있는거죠. 그 시간에 외웠던 목록을 토대로 스피킹을 1번부터 6번까지 다 쓰는거죠. 시간이 남으면 롸이팅 핵심 내용까지요. 그리고 평소에 연습했던 대로 스피킹을 하는거죠. 이렇게 계획대로만 진행이 된다면 정말 고득점도 가능할꺼 같더라고요. 하지만! 저는 한번도 안탔다는거 ㅋㅋㅋ 어쨌든 이런 자기만의 노하우 + 롸이팅 에세이 외우기 + 스피킹 시간내의 완벽한 연습 + 리딩 단어가 복합적으로 이루어 져야지 후기를 공부할 가치가 있을것 같네요. 정말 어설프게 후기 봤다가는 실력에 상처를 받게 될뿐만 아니라 마음에도 상처도 받는것 같습니다.ㅎㅎ \n\n암튼 결론은 저는 11월 12월 남은 2007년도 후기에 올인을 하고도 \n고작 후기 탄거라고는 12월 13일 롸이팅 하나! 그것도 억울하게 자료가 없어서 롸이팅밖에 못했던 2007년 5월 18일꺼여서. 또 11월 달 중순에 그토록 고대하던 후기를 타고도 컴터가 멈춰 시험이 취소돼는 말도 안되는시츄에이션과. 후기 탈꺼라고 정말 기대를 많이 했던 12월 21일 마지막 셤에서 2008년 2월달 문제를 돌려 먹은 ETS의 만행을 봐서는 후기 범위가 확장된듯 싶고. 그래서 암튼 저는 후기는 비추입니다 ^^;;; 보실거면 롸이팅이랑 스피팅 리딩 단어만 보세요! 후기 공부 라기 보다는 그냥 공부 한다는 기분으로요 ^ㅡ^// \n\n[IBT 토플] \n분명히 만만치 않고 어려운 시험임에는 분명한 것 같습니다. 공부하는 것도 만만치 않고요. \n일단 머 단어는 말할 것도 없고 4과목이라고 치고 하루에 한과목당 3시간씩만 한다고 해도 \n일단 단편적으로 12시간이라는 어마어마한 공부량이 필요하잖아요. 솔직히 공부 하다 보니 한과목당 3시간도 그렇게 충분한 시간이 아니라는걸 아는데 오래 걸리지 않았고요. 그래도 저는 휴학중이여서 다른거 다 제껴 두고 하루종일 토플만 해서 시간적인 부분에선 쫌 여유로웠음에도 불구하고 하루에 한과목은 펑크가 나기 일쑤였죠. 대표적으로 Speaking을 안하고 넘어갔던 날이 젤 많은거 같네요.ㅋ 암튼 그래서 내린 결론은 토플의 모든 과목의 연관성에 많은 비중을 두시는 것이 효과적이실 것 같습니다. 롸이팅과 스피킹의 통합형에 엘씨가 나오니까 엘씨가 절대적인 영향이 이런 표면적인 것 뿐만 아니라 세부적인 연관성을 스스로 찾아서 자신만의 공부방법에 적용시키시는게 효과적이실 것 같네요. \n\n예를 들면 Speaking 독립형을 하면서 Writing의 Brainstorming을 / 엘씨 Shadowing을 하면서 speaking 연습을 / reading을 풀면서 lestening 주제 확장을 / writing을 소리내서 외우면서 speaking 연습을 / 이런식으로요! 영타는 어느곳에든 적용을 시켜야 하고요! ^^ \n\n으아 원래는 이렇게 길게 쓸 생각이 아니였는데 어쩌다 보니까 이렇게 됐네요.ㅋ \n그래도 토플에 대한 정보가 정말 아무것도 없어. 힘들었던 만큼. \n(토플공부 하면서 토플이 이런건지 살짝만 알았어도 2년동안 군대 있을때 해커스 보카 하루에 세개씩 외웠을 텐데 하는 후회 진짜 많이 했거든요 ㅠㅠ) \n두서없고 난잡한 글이긴 하지만 새로 시작하는 누군가에게는 조금이라도 도움이 된다면. \nAnti-ETS의 한 멤버로써 보람이 있을 것 같아서. 그리고 쌤들. 도와준 주변사람들에게. \n고마운 마음을 전하고 싶은 생각에. 이렇게 후기를 쓰게되었습니다 ^^ \n\n물론 아무것도 모르고 토플이 이렇게 어려운 셤이라는 걸 모르고 시작 전에 잡았던 110점. \n대학원을 목표로 토플 한거여서 높게 잡긴 했었지만.   \n목표는 이루지 못했지만 제 실력을 그 누구보다 잘 알기에 \n104점에 완젼 감사 만족하고 토플 이제 졸업 할까 합니다 ㅠㅠ \n원래는 토플 끝내고 바로 GRE도 할려고 했었는데 \n딴건 둘째치고 건강을 생각해서라도 두달정도 쉴까 합니다 ^^;; \n\n토플 정말 힘들었습니다. \n하지만 24년의 길지 않은 인생이지만 \n나름 신념으로 자리 잡은 한가지. \n사람들은 무의식적이든 의식적이든 과거를 잊으려는 경향이 있기 때문에 \n과거의 거의 80%는 잊는 다고 하더라고요 \n(마치 해커스 보카 잊어 버리듯이요 ㅋㅋ) \n그리고 그나마 생각나는 20%의 과거는 \n아무리 힘들었던 기억이더라도 시간이 지나면 \n다 과거의 고통도 아닌 과거의 기억도 아닌. \n현재의 추억으로 다가온다는걸 깨달았죠. \n그래서 토플. 하루 하루 정말 힘들었지만. \n더 힘드려고 노력했습니다. \n언젠가는 이것도 다 추억이 될것을 알기에. \n하루 하루 한계에 도전하려고. \n그리고 그 한계를 뛰어 넘기 위해서 더 노력했습니다. \n\n하루에도 그냥 포기할까 하는 생각 30번. \n조금 쉬다가 할까라는 생각 30번. \n하지만 내 인생을 걸고 하는 것이기에 포기할 수 없다라는 생각 31번. \n쉴 시간이 없다는 생각 31번. \n정말 포기하고 싶었던 순간들도 많았지만 \n생각 한번의 차이로 여기까지 올수 있었던것 같네요. \n\n세달동안의 해커스. \n이러한 면에서 저에게 있어서는 \n정말로 단순한 시험 준비가 아니라. \n인생을 배우고 돌아 간다는 생각에 \n너무나 감사한 마음이 드네요. \n\n물론 그 중심에는 신화식쌤이 계시고요 ㅋㅋ \n제가 신화식 쌤 수업을 들으면서 가장 인상깊었던 말들과 함께 \n먼가 난잡한듯한 부족한 후기를 마칠까 합니다. \n\n\'토플! 단순한 언어 시험이 아니라 어려움을 이겨내기 위한 방법일 뿐이다\' \n\'한번 좌절을 해본 사람은 다음에 좌절하게 될 때 쉽게 극복 할수 있다\' \n\'힘든거? 힘든건 참아야죠 인생을 걸고 하는건데\' \n\n신화식쌤! 정말로 쌤이랑 함께한 세달. \n저에게는 평생 너무나 소중한 추억이 될 것 같습니다! \n단순한 시험을 떠나서 제 인생을 TURNING POINT가 될만한 \n그 무언가를 보여주시고 알려주셨으니까요. 쌤 진심으로 완젼 존경합니다.ㅋ   \n\n그리고 기본반 이유호쌤, 변효진쌤, 이화경쌤, 유리정쌤, 김성희쌤 \n제가 기본반에는 처음하는 거라 토플이 먼지 잘 몰라서 쌤들하고 \n깊은 유대 관계를 쌓지는 못해서 아쉽지만 탄탄한 기본기가 나중에 \n엄청나게 중요하다는 걸 알게 되었습니다. 좋은 수업 정말로 감사 했고요 ^^ \n\n중급반! 천재은쌤, 쌔라쌤! 그리고 송원쌤! \n천재은쌤!맨날 단어 열심히 안찾고 질문만 많이 해서 죄송했고요 ^^;; ㅎㅎ \n쌔라쌤! 쌤 덕분에 스피킹 열심히 재밌게 할수 있었어요! ㅋ 감사했습니다 ^^ \n그리고 쏭원쌤!!!!!!!! 저 쌤 수업 안들을때도 친절하게 잘 도와주셔서 너무 감사했어요 \n솔직히 실례라고 생각하고 물어 본것들도 오히려 더 친절하게 도와주셔서 완젼 감동 ㅠㅠ \n롸이팅 28점 이상 나오면 밥 사주신다는 말! 잊지 않고 기억하고 있겠습니다.ㅋㅋㅋ \n농담이고요 말만으로도 너무 감사했습니다 쌤 진짜 최곤거 가테요 ㅎㅎ \n\n그리고 9월에 스터디 함께 했던 홍기, 상철이 행님, 은정이 누나, 세미, 신혜, 은정이 \n다들 너무 고마웠고 즐거웠고! 저번달에 밥 먹는데 못가서 넘 아쉬웠는데 한번 또 뭉치자 ㅋ \n그리고 주현이! 나경이 성영이 성현이 고마웠고! \n현정이 누나 은영이 누나 다들 너무 고마웠어요 ^^ \n아 그리고 프리해커스때 스터디 급빠져서 팀원들 너무 미안했고요! ^^; \n\n그리고 세달동안 동고동락한 나의 벗 윤제!!   \n토플 후기 쓰는데 니 얘기 빼노면 말이 안되는거 같아서 ㅎㅎ \n학원에서 급만남으로 알게됐지만 정말 평생을 함께할 친구 만난거 \n니가 믿고 내가 믿는 하나님께 진심으로 감사드린다! 친구! \n그동안 나 새벽마다 깨워 주느라 너무 고생 많았어 ㅋㅋㅋ \n\n아 그리고 진짜 마지막으로! \n신화식 쌤 팬클럽 모집합니다!   \n제목은 제가 급조한 [신화창조] \n참고로 회장직은 양보 못하고요 ㅎㅎㅎ \n암튼 개인적으로 연락 주시면 왕성하고 구체적인 활동 한번 해보죠 ㅋㅋ \n\n대한민국 모든 토플러가 원하는 점수 받고 \nETS는 망하는 그날까지! \n다들 모두 힘내세요 ^ㅡ^// \n이상 요한이였습니다. \n아 힘들어 ^^;;\n\n=== 리딩, 리스팅 팁입니다. 소중한 제 자료이구요 ===\n\n세시간에 걸쳐 드리는 말씀입니다. 허위 광고도 아니며, 저의 인생담+경험담+팁이기에 리플에 욕을 다시면 제 인생과 착오에 욕을 하시는 것과 같은 이치니 욕은 사절입니다..\n \n팁을 드리기에 앞서 저에 대한 설명은 간략하게 하겠습니다.\n\n1. 전 특기생 이었습니다\n: => 즉 돌대가리죠(특기생이라 돌대가리라고 한거 아닙니다, 전 공부를 아에 안했어요. 땡땡이가 하루 낙이었죠)\n\n2. 2년간에 걸친 방황기\n: => 운동을 그만두고 신나게 놀았습니다, 줄기 차게 놀았죠. 극단 적으로 말해서, 월요일에 학교가면 친구들과 이번주 토요일은 어느 학교 딸래미를 만날까?로 토론을 했고. 그런 생활이 2년 동안 반복 되었죠.\n\n3. 인생의 전환점\n: => 지인으로 부터 인생의 전환점을 만났고, 그 이후 3시간 씩 자며 수능에 매달렸습니다\n\n4. 영어\n: => 처음 영어를 접했을 때는, 알파벳도 몰랐고, 영어는 그림 또는 아랍어 였습니다\n\n5. 성균관대 합격\n: => 언외9등급인 저에게 행운이 찾아왔죠, 물론 그만큼의 노력은 했습니다. 하루에 3시간씩 자는 건 어렵죠..하지만 특기생이었던 저에게 하늘에선 안좋은 경험이라는 벌을 주었고, 인내심이란 거대한 행운을 주셨습니다. 그렇게 1년 미치고 성대 합격이란 축복을 받았죠.\n\n6. 꿈을 위한 날개 짓\n: =>저의 꿈은 스포츠 매니저라 성대를 포기하고 BU(보스턴대학교)를 또 다른 목표를 잡았죠. 그리고 토플을 맞이 했습니다.\n \n이렇게 저의 이력서를 제출하고, 팁 아닌 팁을 드리겠습니다. 단 한명이라도 괜찮으니 용기와 자신감을 가지란 의미해서 글쓰겠습니다.\n \n\n* 리딩\n\n아랍어,, 그림,, 저한텐 미친 것이었죠. 아무 것도 몰란 던 터라 (영어에 대한 지식) 6개월 이란 엄청난 시간을 문법에 투자했습니다. 처음엔 문법부터 했죠(물론,단어는 중학교1학년 교과에 있는 단어를 외우기 시작했죠, 모르는 단어 투성이었습니다, 심지어 apple도 몰랐으니까요). 문법은 일단 한자어로 즉 왕래발착, 관계 접속사 뭐 이딴식의 글들을 과감히 없애고(왜냐면, 그렇게 말했을 땐 못알아 먹었기떄문에) 순수 한글로 외웠죠, 필요없는 말은 제외하고요. ex)\"왕래발착=>왕래, 출발, 도착\",\"관계 접속사: 주어, 동사를 연결 시켜주는 것\" 이런식으로요.\n그리고 학교에서 샘들이 적어주는 필기 무작정 note taking 했어요. 이 후에 보니 아~,아~ 이렇게 하면서 돌깨지는 소리가 나더라고요, 그럼으로 더 빠르고 쉽게 외워지고요(아~이런 탄성이 나오기전에 선생님의 모습이 떠올랐어요, 수업하는 장면이요)\n \n1)문법 팁(초급)\n: 순수 한국 말로 용어를 외워라!.\n: 지문에 깜지가 되도록 문법 형식을 적어라.\n: 그리고 주어, 동사, 목적어 등에 사선을 끄어 구분 시켜라.\n2)문법 팁(중급)\n: 접속사 that과 수식 that 구분 하라\n: 문법 생각 보다는 지문이해에 초점을 두어라\n \n3)문법 팁(고급)\n: 까먹지 않게 복습하라.\n \n그렇게 문법이 되니, 단어가 거슬리네요..\n \n1)단어 팁(초급)\n: 토플을 접하시는 분들 특히! 아무 짜개도 쓸모없는 영어능력으로 HACKERS VOCA 외우지 말라!\n: 기초 영어 부터 외워라!\n: 꼭 필요한 단어순으로 외워라!\n \n2)단어 팁(중급)\n: 문법과 연관 시켜 단어를 외워라 (즉, make란 단어는 만들다란 의미적내용도 있지만 문법적으로 달라진다)\n: 기초 영어 단어를 외웠다면, 과감히 hackers voca로 넘아가라, 대 부분의 단어는 동의어로 나오기에.\n \n2)단어 팁(고급)\n: 저같은 돌 머리의 경우, 맨날 반복하라\n: 단어 장을 만들어라(저는 단어장 만드는거 존나! 싫어 했어요. 엄청 싫어했죠. 그래서 전, 해커스 보카 따로 날마다 3개 유닛 읽고, 지문 접할 때 모르는 단어들, 모아 모아 외웠습니다)\n\n* 단어장 만들 때 저만의 팁\n: 네모난 종이 쪼가리 몇백게 잘라노은거(작게) 문구 점 가면 팔아요. 거기서 사서 한 장에 단어 한개로 앞쪽에 적고, 뒤쪽에 한글 뜻없이 엄청 쉬운 단어 순으로 동의어 3개씩 적었습니다. 1석2조 에요.\n: 맨날 반복하고, 지문에 추출한 단어 외웠으면, 각 각의 분야 별로 단어를 외워라(토플 같은 경우에, 전문 단어가 나올 경우가 많아요, 모르면 헷갈리죠, 외워야 합니다)\n: 전문 단어를 그대로 외우지 말고 풀어서 외워라! (예를 들면, 물질대사, 신진대사 ->식물이 생명을 유지하기 위해 흡수한 물질을 에너지로 바꾸고, 이 때 나오는 노폐물을 외부로 배출하는 과정을 Metabolism(신진대사)라 고함\n: 단어 되고, 문법 되면 읽기 끝이라고 말하면 안되죠. 문법되고 단어되면 고급의 경우 다  이해는 가겠지만, 토플리딩에선 배경지식도 중요합니다.\n \n1) 문법,단어 고급 but 읽기 초급\n- 문법, 단어는 다 알겠지만 읽기가 잘안되는 경우, 문제를 많이 틀릴 경우 (몇 달 전에 겪었던 터라 100% 보장합니다) 리딩6시간 공부를 한다면->1시간 30분~2시간은 배경지식을 쌓는데 집중하라!\n- 배경지식이 먼데 차라리 문제 많이 풀지, 이리 반응하는 분도 계실지 모르지만, 배경지식에 대한 풍부한 잠재성을 말해드리고 싶네요, 예를들면, 제가 배경지식을 모르는 리딩문제를 풀땐, 그 지문에 의존 하며 지식을 습득한 뒤 문제를 풀게 됩니다. 그래서 시간이 정해져있는 시험장에선 약간 빠듯하죠, 하지만 배경지식을 알고 접하게 된다면, 말을 달라집니다. 어려운 문법구조도, 몰랐던 단어도 순식간에 추측하며 속독이 가능해지죠)\n \n* 배경지식에 투자해도 안된다면, 문법적 의미를 추측하도록 노력하라!\n: 문법 고급 단계면 다 아시겠지만, 고급이 되면 문법 보는 것보단 단어를 외우느라 진정 문법에는 소홀해 지기 일수! 간단한 의미로 인해 정의를 구사할 수 있다! (예, A is B = A는 B이다, S V C 이렇게 된다는거 다 아시겠지만 읽기가 잘안되고 문제가 안풀어진다면, \"아 A is B, A는 B이니까 A의 정의로써 글을 적은 부분이구나! 이렇게요)\n \n* 컴퓨터에 있는 워드 프로그램이나, 메모장에 풀어 적으면서 읽어라(직독직해로 적으며)\n: of all U.S. cities, Chicago has been examined more extensively than any other\n: 이 문장을 메모장에 적으면\n: 미국 시티중에서 / 시카고는 / 조사 해왔다 / 좀 더 / 광법위하게 / 보다 / 어느 다른것\n \n* 이렇게 문제 풀어 적었으면 직접 문제를 만들어라\n: 다음중 이글의 목적은? (그리고는 메모장이나 워드에 한글로 내용중 목적에 하이라이트 하는거죠)\n: 마찬가지로 다음에 화자가 ~을 언급한 이유는? (마찬가지 입니다)\n \n2)문법,단어 고급 but 읽기 중급\n\n: 읽기 중급을 전, 약간의 소홀함 이렇게 말하고 싶네요, 이정도 리딩에 실력을 갖게 된다면 토플러로썬 LC, W, S에 눈이돌아가기 일수\n \n* 숙어, 동의어를 좀더 확실히 외우자\n: 아주 극히 쉬운 예로써,  result in : 초래하다 <- 이런 것을 외우란 말이죠. 왜냐하면 읽다가 A result in B 를 만나면 바로 A로 인한 결과를 알 수 있으니까요\n \n* 숙어를 동의어로 정리 하자\n: result in, be responsible for, bring about, cause등 합쳐서 외우면 속독이 자연스레 되더이다.\n \n* 문법적으로 다가가지 말고 다시 한번 생각해서 읽어 나가자\n: 아까 말헀듯이 a is b 는 정의, a result in b는 a의 결론은 b 이런식으로요.\n \n* 고급은 언급 할 필요 없죠?\n \n* 저의 리딩 습관을 알려드리도록 하겠습니다\n1) 문제 풀기 (summary문제에서 중심파악->모든 문단의 첫 문장 읽기->문제 보기->바로 풀수 있는 문제풀기(단어찾기, 지시대명사찾기 등)->다시 지문에 가서 못풀었던 문제의 핵심키 찾아서 다시 지문읽기->문제풀기)\n: 이렇게 15~20분 안에 다 풀도록 합니다\n \n2)복습\n: 문제풀고, 다시 정독에 들어갑니다\n# 핵심 중요 구문을 하이라이트 합니다. (정의, 결과, 이유 등으로요)\n# 문법적으로 다가섭니다.\n# 모르는 단어 하이라이트 합니다 (이후 동의어로 네모난 종이에 정리)   \n#: 1~3번은 동시에 하시면서, 해석 하세요\n# 다시 읽기\n# 문제 다시 보기(왜 이 선지가 틀렸는가? 자신에게 되물어 보면서)\n# 문제 만들어 보기(위에 읽기 초급에 보시면 자세한 설명있음)\n \n이렇게 꾸준히 하시면 전 읽기 초급땐 지문한개에 1~2시간 걸릴 때도 있었답니다, 하지만 한 달도 안되서 실력이 수직상습했죠. 문제를 읽지 않아도 문제를 만들어보는 습관 덕분에 지문을 보면 한눈에 문제가 파악 되더라구요. 그래서 이 후 전 몇번의 시험을 더쳤지만 30점을 유지 합니다 (아, 공부는 병행하면서 했어요. 첨부합니다)\n \n \n\n \n* 리스닝\n\n.....외계인 언어..로 들렸어요!!... 미친 왜 이건 이렇게 첫같지? 이렇게 생각이 들더이다..\n팁드립니다\n \n1)듣기 초보\n: 연음에 적응 하라\n: 듣기 할 때 딕테이션을 하라 (초보 때 연음듣기 위해선 딕테이션이 최고죠)\n: 딕테이션 시, 안들리는 부분을 한글로 적어라 (한글로 적고 스크립트를 보면 왜 그렇게 들린지 인식할 수 있음)\n: ex) all over  올러벌 (지금도 생각나네요 all over 을 전 딕테이션 할 때 all lover 이렇게 적었어요) 그러니 금방 같은 연음은 다 들리 더라구요\n \n2)듣기 중급\n: 초급에서 연음에 적응 하셨으면, 내용이해하기 위해 집중\n: 각종 전문용어 외우기\n: 배경지식 쌓기\n: 딕테이션하기\n: 쉐도윙 하기\n \n3)듣기 고급\n: 내용과, 연음에 적응 하셨으니, 문제 나올 부분 예상하며 들으세요\n: 그리고 문제 푼 후 딕테이션 하세요 (단 듣기 속도를 약간 빠르게 진행시킨 후에요)\n: 그리고 그 빠른 속도의 듣기를 쉐도윙하기\n: 엄청 빠른 속도로 계속 들어주기 (mp3넣고 시도 떄도 없이 들으세요)\n \n*제가 쓰는 알송은 어학 기능이 있어서 거기 속도에 50%로 마춰 놓고 문제 풀고 딕테이션합니다 그리고 80~90으로 복습하죠. (복습시, 렉쳐나 대화 내용이 그 단어로 인해 이해가 되어야합니다)\n \n \n \n휴, 엄청 시간이 걸리네요, 리딩과 리스닝은 이까지 하겠습니다. 롸이팅과, 스피킹은 다음에 올리도록 하죠....\n \n \n*P.S: 리딩읽기 초급 때 쓰던 메모장 첨부 해드립니다. 저의 계획서 첨부 해드립니다.    좀더 많은 첨부를 원하시면 리플 달아 주셨으면 하네요, 많긴 한데 토플러 분들이 진정 필요한 것이 무엇인가 확인하고 올려 드리도록 하겠습니다.\n\n== 해커스 비법노트 게시판 (일반) ==\n\n=== 간신히 100 넘겼던 경험, 참고가 될까해서 올려보아요 ===\n\n\n방학 2달동안 공부하고, 9월 1일 항공대에서 시험을 봤습니다.\n항공대가 시설이 별로다 말이 많던데, 저는 그런 거 잘 모르고 집에서 가까운 곳 그냥 등록해버렸습니다...\n(하지만 실제로 가보니 생각보다는 양호하더군요. 스피킹 웅얼거리는 거는 어딜 가나 마찬가지일 것 같았구요.)\n26/27/22/27 = 102 이렇게 나왔더라구요.\n사실 토플 난이도도 확실히 모르고, 그렇다고 시험 비용이 만만치도 않아서 걱정을 많이 했는데,\n생각보다는 잘 나와줬습니다.\n제 목표는 스피킹 20초반 / 나머지 25 이상 -> 이렇게 잡았거든요.\n \n수기랄 것도 없지만, 혹시나 공부하시는 분들 참고나 되시라고 적어봅니다.\n저는 2달동안 학원에 다녔습니다. 맨땅에 헤딩하듯 군대 시절 토플 리딩/라이팅 책 사들고 두 달 정도 보긴 했지만, 이미 머릿속에서 휘발되어버려서 처음 하는 것이나 다름없더라구요.\n사실 고등학교 시절에는 수능 영어야 그럭저럭 했지만, 대학 들어와서도 교양 영어 외에는 논문 찔끔 외엔 영어를 아예 들여다보지도 않았더랬지요...\n많은 분들이 목표를 가지고 토플을 보지만, 사실 저는 조금 막연하게 보았습니다. 당장 필요치는 않았죠.\n학원에 다니긴 했지만, 워낙 혼자 공부하는 타입이다보니, 학원에서 알려준다고 곧이곧대로 받아들이지도 않았습니다. 득이 될 만하면 취하고, 누가 봐도 스킬 위주다 싶으면 자체적으로 걸러버리고 제 식으로 파고들었죠.\n공부시간은... 밥 먹고, 잠자고, 류현진 등판경기 챙겨보고, 일본어 기초 병행하면서 나머진 모조리 때려박은 듯 싶습니다. 현대카드 시티브레이크 메탈리카 보고 온 게 유일한 낙이었네요... ㅜ \n \n* RC\n사실 리딩이 그나마 좀 가망이 있어 보이는 과목... 이지요?\n혼자 군대에서 해커스 리딩책 풀어보면서 대충 맞는 걸 세어보니 이건 어느 정도 가능성이 있겠다 싶더라구요.\n항상 글을 읽을 때 세부적인 내용보다는 맥락에 중점을 두어 읽는데요, 노트테이킹은 할 때도 있고, 안 할 때가 더 많았습니다. 시험 볼 때는 단락마다 중심되는 내용 몇 단어만 적어두고 말았습니다. (뭐 장점1/장점2 이런 식으로 글의 구조를 분석하고 흐름을 따라갈 정도면 충분한 것 같았습니다.)\n시중에 있는 문제집이나 학원 교재나 조악한 것들이 꽤 되는 것 같습니다. 아무리 꼼꼼한 문제집이어도 때론 조금 억지스럽다거나, 핀트가 맞지 않는 것처럼 느끼는 경우가 종종 있었는데요, 집착하지 말고 넘겨버리는 것도 도움이 되더라구요.\n학원에서는 유형별로 파악을 한다고 하지만, 사실 그냥 문제 풀고 과제 맞춰 해가는 정도로 이용한 것 같아요. (그것만 해도 도움이 되겠지요.)\n리딩에서 관건은 일단 단어... 같습니다. 많은 분들이 공감하시겠지만, 아카데믹한 단어가 주로 나오고, 어려운 용어가 자주 등장하니까요. 다들 그렇듯 저도 초록 보카 봤습니다. 학원 교재의 단어 정리나, 이렇게 저렇게 지문 풀면 단어 정리는 꼭 해가면서 챙겼습니다. 당연히 다 못 외우는데요, 어릴 적부터 단어만 붙잡고 외우는 걸 너무 싫어해서 안 외워지면 넘기고 나중에 다시 보는 게 저는 좋더라구요. 초록 보카는 그 안에서 모르는 단어만 (동의어 포함해서) 따로 정리를 해놓았는데, 노트북이 맛이 가서 윈도우를 밀어버리는 바람에 날아가버렸네요. 시험 열흘 전쯤에는 그것만 보려고 했거든요.\n시험 임박해서는 리딩 공부는 단어 공부하고 문제 1set나 지문 두어 개 매일 푸는 식이었습니다.\n단어 맞추는 문제는 오히려 생각보다 쉬웠고, 지문 길이도 기대(?)했던 것보다는 짧아서 무난하게 보았던 것 같아요.\n걱정이 지나쳤던 탓인지 생각보다는 좀 쉽게 느껴지더라구요.\n2번째 지문에서 아리까리한 것이 좀 있었는데, 체감 난이도 치고는 점수가 오히려 리스닝보다 낮아서 예상과 다르네요.\n \n* LC\n처음 렉쳐를 듣고보니 반절 정도만 알아먹은 것 같더라구요.\n수능에서도 리스닝을 무서워했는데 (자꾸 놓치더라구요 제가...), 여기서도 리스닝은 좀 공포스러웠죠.\n영어로 된 걸 들어본 게, 음악이나 가뭄에 콩나듯 TED 강의, 유투브에 올라온 학자들 강연 영상 (당연히 못 알아들어요. 그냥 대충대충~) 정도가 고작이었어요.\n게다가 컨버도 저는 쉽지는 않더라구요. 오히려 렉처가 나은 것 같기도 하고;;;\n렉처는 단어가 어느 정도 커버된다면 흐름을 따라가기는 쉽다고 생각해요.\n실제로 한 달 정도 지나보니까 디테일을 모두 기억하지는 못해도, 전체적 흐름을 못 잡는 경우는 없더군요.\n학원에서 내주는 딕테이션 과제 꼬박꼬박 하고, 교재 리스닝 다 듣고는 1.1배속 정도로 살짝만 빠르게 해서 다시 노트테이킹만 해봤어요.\n별도로 자료를 주는 것에 대해서는 문제지가 없더라도 노트테이킹 해보는 식으로 연습했습니다.\n노트테이킹 하다보니 쓰다가 못 듣는 게 종종 생겼지만, 계속 했습니다. 어쨌든 그게 집중이 더 잘 되니까요.\n하루에 1~2시간은 리스닝에 투자했던 것 같아요. 복습 포함해서...\n제가 가장 걱정했던 것은 \'속도\'였는데요. 빨라지면 알아듣기 힘들더라구요.\n사실 이게 제일 무서웠는데, 결과적으로는 시험장에서는 보통 정도로 들렸어요. 컨버가 오히려 더 빠르게 나와서 좀 당황스러웠네요. 리스닝은 점점 자신감이 없어져서 20초반 정도 기대했는데, 그 날 컨디션이 바닥(전날 몸살이 나서 ㅜㅜ)을 쳤는데도 생각외로 잘 들렸던 것 같아요. 문제의 디테일은 사실 아주 어려운 정도는 아니었다고 생각이 듭니다. 중간에 흘려버린 내용에서 나오기도 했지만, 맥락으로 유추해볼 수 있는 경우도 있었구요.\n(제 경우에는 시험장에 늦게 와서 거의 꼴지로 들어갔기 때문에, 리스닝 더미를 풀 때 남들이 스피킹을 했습니다. 헤드셋 쓰고 있어서 어차피 치팅은 불가능하구요. 그래도 웅얼웅얼하는 소리는 들리기 때문에 차라리 더미 문제 때 소음에 시달리는 게 나았습니다.)\n \n* SP\n많은 경우 최악의 섹션... 이겠지요?\n저는 인토네이션이나 발음 따위가 심각하게 문제가 되는 케이스는 아니었던 것 같아요. (토종 치고는) 그보다는 말이 잘 안나오고 자꾸 끊긴다는 게 일단 문제였죠.\n다만, 영어로 말을 해본 경험이... 있었던가 싶을 정도였기 때문에 굉장히 어려워한 섹션입니다.\n하지만 탬플릿이라는 게, 사실 독립형에서나 (그것도 어느 정도 주제가 비슷할 경우에나) 요긴하지, 통합형에서는 그저 전체 구조만 잡는 문장 몇 개만 가지고 들어가게 되더라구요.\n독립형은 주제 최대한 많이 준비해서 답안을 만들어보고 (기억하려고 하지는 않았습니다. 그게 더 힘들어서, 그냥 세부 아이디어 두 개 정도 떠올릴 수 있도록 연습하는 식이었어요.) 휴대폰으로 녹음하면서 연습했어요.\n학원에서 제공하는 탬플릿은 그대로 쓴 것도 있고, 약간 바꿔서 쓰기도 하고, 거의 사용 안 하기도 했어요. 특히 렉처 나오는 경우에는 탬플릿이 거의... 무용지물이었다고 생각해요.\n긴장하면서 녹음하면 항상 억양은 전혀 신경쓰지 않고, 말이 더듬더듬 버벅거리는데요, 역시나 시험에서도 마찬가지였다고 생각합니다.\n스피킹은 참 하기 싫어서 매번 잠들기 직전에 공부하곤 했어요. (미루고 미루다가) ㅜㅜ\n저는 FFF 나왔는데요, 말만 하고 나오면 된다는 식으로 준비해서 사실 기대를 안 한 점도 없지 않네요.\n한 문제인가는 디테일 하나를 제대로 못 들어서 뭉뜽그려 말했고, 두어 개는 끝을 시간 내에 마치지 못했는데, 그래도 Fair는 나오더라구요.\n패러프레이징은 되면 하고, 말면 말고;; (일단 내용을 말하는 게 우선이라고 생각해요.)\n스피킹은 정말로 의미 전달에 중점을 두면 된다고 (제멋대로) 믿습니다. 구성보다도 일단은 내용을 쉬운 언어로 표현하는 게 우선이에요. 연습을 하다보면 입에 붙는 문장들이 조금씩 생겨, 써먹을 구석이 생길지도 모르구요.\n \n* WT\n사실 별 걱정을 안하다가, 막판에 걱정했는데요.\n통합형 리스닝이 생각보다 잘 안들리더라구요 ㅡㅡ;;\n독립형은 (어차피 유려하고 좋은 문장으로 쓸 생각이 없는지라) 상대적으로 편했습니다. 아이디어를 생각하는 것이 어렵다기보다는 그걸 영작하는 게 어려운 거죠? 구조는 어느 정도 정해져 있는 것이고, 영어는 간결하고 핵심을 분명하게 표현하는 걸 좋아하는 듯 싶어요. 글을 쓰는 걸 싫어하지 않는 터라, 다만 생각을 아주 간단하고 명료하게 끊어내려고 노력을 많이 했어요. 소스가 부족하다기보다는 그걸 표현할 제 영어 수준이 걸림돌이니까요. 어렵고 화려한 문장을 샘플로 외우기보다는, 무조건 간단하지만 명확하게 쓰려고 했어요. (저는 주절주절 늘어놓는 편이거든요;;)\n패러프레이즈는 단어 수준에서만 조금 했습니다. 사실 이건 리딩을 준비하면서 저절로 되는 것이기도 해요. (동의어 보시다보면 어느 정도 도움이 되겠지요?) 그 중에서도 자신이 자주 쓰는 단어들은 조금 더 다양하게 준비하는 게 좋죠. crucial=conclusive=important=decisive 처럼 머릿속에 몇 개 집어넣으시면 좋지요. 생각 안 나면 반복해버렸습니다.\n문제는 통합형이었는데, 저는 왜 그 2분밖에 안되는 렉처가 리스닝보다 어렵게 느껴졌을까요... 막판에 빡세게 준비하니까 결국 시험장에서는 잘 들리더라구요. (다행스럽게도.)\n통합형 탬플릿은 별 거 없죠. 어차피 리딩/리스닝의 내용을 분명하게 전달하는 게 중요하니까요.\n사실 많은 분들이 탬플릿 외우고, 모델 에세이 외우시기도 하는 것 같은데요, 저는 그보다는 죽이 되든 밥이 되든 자신의 생각을 표현하는 게 좋다고 생각합니다. 사실 토씨하나 틀리지 않은 글이 여러 개 보인다면 채점자 입장에서도 일단 부정적인 인상을 주지 않겠어요? 참고는 어디까지나 참고용으로만 쓰는 게 좋을 것 같아요.\n매일 통합형/독립형 하나씩 쓰곤 했어요. 학원 첨삭을 통해 자주 틀리는 걸 발견할 수 있었구요.\n통합형 300자 / 독립형 450자 정도 쓰고 나온 것 같습니다. 충분하지는 않지만, 나름대로 쓸 만큼 썼다 생각하며 이미 텅 빈 시험장을 거의 마지막으로 나왔습니다.\n \n제가 따로 영어실력이 기존에 갖춰져 있었다고 생각하진 않습니다.\n카투사 지원해보려고 토익 한 번 본 게 전부였는데, 그게 800 중반 정도 나왔습니다. 3~4년 전 일이네요;\n수능 영어를 어느 정도 따라가실 정도라면 두 달 하고도 어느 정도의 점수는 가능한 것 같아요.\n혹시 저와 비슷한 처지이신 분들이 계시다면, 참고되셨으면 좋겠습니다!\n\n\n\n=== 60점에서 116으로 올렸어요 ===\n\n우선 제가 처음 토플을 친게 제작년이고요 점수가 60점이었어요..\n딱 60.. 솔직히 그렇게 못보리라 생각은 못했는데... 3달 학원다니면서 공부했는데도 60이 나왔더라고요..\n진짜 절망중절망이었죠..ㅋㅋㅋ\n\n\n아 이렇게는 안되겠다 싶어서 우선 점수들을 분석해보니까  writing 빼고는 20점을 넘는게 없더라고요 ㅋㅋ \n이것도 절망..ㅋㅋ 라이팅은 생각보다 점수가 잘나온다고 하더라고요.. \n\n\n아무튼 저의 젤 큰 문제점은 reading이었어요.. 책을 읽을때 집중은 커녕.. 공부도 안되더라고요\n이유를 찾아보니까 voca가 가장 큰문제엿어요 쉬운 단어를 오히려 모르고 쓸모 짝에도없는어려운 단어들만 제가 알고있더라고요 ㅋㅋ\n\n\n우선 학교끝나면 집에와서 초록이 day하나씩외웠어요 솔직히 day3를 하루에 다외우려니까 그냥 안하게 되더라고요..\n첨부터 조금씩조금씩 외우기 시작했어요 \n초록이 한번다보고 정말 책이 너덜너덜해질때 까지 10번은 다시 반복했던것같아요 마지막엔 진심 책이 두동강났어요 ㅋㅋㅋ \n두동강 난이유중하나가 비가와서 책이 젖은것도있는데 아무튼 그만큼 많이 봤다는 뜻이에요. 그렇게 보카를 외우니까 리딩이 18점에서 29로 올랐어요 ㅋㅋ 진짜 깜놀.... \n\n\n리스닝같은경우는 전 제가 정말 잘한다 생각했거든요 유학도했었고 귀는 어느정도 뚫려있다고.. 근데 젤 낮게 나왔어요 첫시험에서.. 우선 리스닝은 노트테이킹이 젤 중요하다고들 하시는데 저는 좀 반대랄까?\n노트테이킹? 당연히 합니다 근데 우선 듣기에 집중하죠 막 적지는 않는다는거에요\n정말 긴, 아주긴~ 문장이 나왔을때 그 문장을 다 쓰려고하면 내가 아는 단어만 쓰게 되더라고요 그래서 저는 차라리 그림을 그렸어요 다이어그램처럼 토픽을 원으로 그리고 옆으로 키워드막 딱딱 잡아서 썻죠\n그냥 내가 지금 학생이란 생각으로 노트테이킹보단 짧은 강의에 더 집중을 했어요\n리스닝은 답없어요 그냥 아는 만큼들립니다 보카의 힘이 대단해요\n\n\n스피킹 ㅋㅋㅋ 해외에 살았다고 하는데 발음이 왜이렇게 구린지... 진짜 스트레스 많이받았어요\n우선 스피킹은 아이디어 싸움이라 첨엔 생각을 했는데 아니더라고요 응용이에요 ㄱ\n같은말 반복반복 자꾸 fair만 나오고 good은 안나와서 왜그럴까 생각해봤는데 발음이 첫번째 그리고 더듬거리는거?\n저는 독립형같은경우 30개를 달달외웠어요\n나머지들은 제가 뭐라하긴 그렇지만 아는만큼들리고 아는만큼 말할수있어요 ㅋㅋ\n많이 듣고 연습하는게 최상의 방법이에요 탬플렛은 꼭외우시고요 \n지금은 스피킹 만점 30점 나옵니다^ㅋㅋㅋ \n\n\n마지막으로 라이팅! 학교에서 맨날 지적받는게 문법이엇어요 전 왜 문법이 틀렷는지도.. 뭐가 잘못됐는지도 몰랏어요 \n전 학원다니면서 받은 모델 에세이를 그냥 다외웠어요\n하루에 하나씩 그냥 외워서 비슷하게 쓰려고했고 거의 시험때도 그걸 토대로 비슷하게 썻어요\n그니까 나름? 잘나오더라고요 ㅋㅋㅋ 라이팅이 첫시험엔 젤 잘보고 지금은 넷중 젤 못나왔지만 그래도 저한텐 이게 최상의 방법이라 생각해요 모델 에세이 달달달 외우기 ㅋㅋ\n\n\n\n다들 아는 내용일지도 모르는데 저는 이런식으로 공부했어요\n하루에 4시간은 토플만하고 10개월동안 정말 토플만 파고 공부했어요\n\n\n간략하게 줄이자면\n\n\n# 리딩- 보카! 완전 중요합니다 보카를 달달달 외우세요\n# 리스닝- 아는만큼들려요 보카 중요해요. 연습많이 하시고 노트테이킹에만 집착하지 마시길\n# 스피킹- 발음조심하시고요 템플렛 독립형 한 30개외우시고 나머지는 연습 하시는만큼 점수나와요\n# 라이팅- 전 그냥 모델 에세이 하루에 하나씩외웠어요 토탈 한 60개는 외운듯해요. 60개를 완벽하게 외웠다는말 !!\n\n\n다들 화이팅하셔서 꼭 원하는 점수받으세요  ^^\n\n\n=== 함께 고생하는 토플러들에게 작은 도움이 될까해서 ===\n\n\n\n안녕하세요.\n \n저는 9월 14일 첫 토플 시험을 쳐보고(많은 분들처럼 저도 성적 연기에 애 많이 탔습니다..)\n \n여기 100점도 넘는 분들이 많으시고 저는 98점(25/27/24/22)으로 졸업하려고 하지만\n \n지금 그리고 앞으로도 함께 공부하는 토플러들에게\n \n제가 1개월 hackers 학원과 2주 독학으로\n \nTOEFL을 하면서 나름 느꼈던 부분들을 공유하고\n \n도움이 드리고 또 저도 다른 분들의 의견들을 듣고 싶어 글을 쓰게 되었습니다.\n \n저도 나름 여기 게시판에 올려주신 비법들을 보며 공부를 많이 했습니다.\n \n시작해보겠습니다.\n\n \n \n* 1. TOEFL 은 영어지만 언어 영역이다.\n \n\n저는 갓난애기 때 미국에 있어서 나름 영어에는 자신이 있다고 했지만\n처음 TOEFL을 접했을 때 정말 학원 프린트나 문제집을 풀면 Reading 에서 비가 내렸습니다.\n처음이라 그럴 수도 있지만 해석은 할 줄 아는데(모르는 단어도 많았지만..) 문제를 풀면 틀린다??\n \n\n여기서 잠시 회의감이 들다가 생각난 것이 저의 언어영역이였습니다.\n저는 고등학교 때 언어영역이 많이 약해 4등급 위로 올라가 본 적이 없었습니다.\nTOEFL은 미국사람에겐 쉽다고 생각하면 똑같이 언어영역도 한국사람은 쉬운가.\n \n\n하지만 TOEFL 또한 언어영역이였습니다.\n문장에서 모르는 단어 찾으면서 하나하나 찾아가며 해석은 누구나 다 할 수 있습니다.\n하지만 그 sentence들이 모여 - a paragraph - a reading passage 가 되는 거더군요.\n \n\nReading 에서 글의 흐름을 파악하는 것도 전부 이 이야기에서 시작된 것이라고 깨닭았습니다.\n그래서 저는 Reading이든 Listening이든 제가 읽었던 지문, 스크립트,\n제 Writing Essay 를 몇 번이고 반복해서 읽었습니다. 그 지문들이 책을 덮었을 떄 생각날 정도로..\n \n\n\n* 2. Reading\n \n\nTOEFL에서 가장 두려웠던 점은 바로 iBT였습니다.\n문제집은 종이로 풀지.. 모의고사 치려고 해도 인터넷 상에는 많이 없지..\n그런데 막상 시험은 또 컴퓨터지..\n문제집 풀때는 문제 읽어보고 쉽게 왔다갔다.. 시험과 다르게 클릭 클릭 안해도 되지..\n이게 저는 정말 처음 컴퓨터로 시험을 친다는 것에 걱정을 많이 했습니다.\n\n \n하지만 제가 문제집 위에서처럼 몇 번이고 반복적으로 읽으면서 알게되었습니다.\n대게 문제의 범위는 단락을 벗어나지 않습니다(summary나 category chart 제외하고)\n쉽게 According to paragraph 4, which of the following is true about the transport of natural gas?\n\"according to paragrapg 4\"...\n정말 깔끔하게 4단락에 있는 내용만 읽어도 문제를 풀 수 있었습니다.\n왠지 다른 단락에도 이 내용에 대해 나올 것 같은데 의심하면서도 4단락만 가위로 짤라서 봐도 풀 수 있습니다.\n\n \n그래서 저는 시험 때 리딩을 어떻게 풀까 그리고 어떻게 풀었는가 하면\n\n# 전체 Reading passage 스크롤을 쭈욱 내리고\n# NEXT\n# 1단락 읽는다. 읽지만 정말 정독하듯이. 그리고 읽고 나면 속으로 다시 무슨 얘긴가 흐름을 생각해보고\n# 1단락에 대한 문제를 푼다(많아봐야 3문제까지)\n\n \n이거 보시고 당연한거 아니냐고 할 수도 있겠지만\n저는 종이로 공부를 하고 컴퓨터로 시험을 쳐야 한다는 그 압박에 많은 고민을 하여\n이제 제가 Reading을 푸는 노하우입니다.\n \n\n* 3. Listening\n \n\nListening은 정말 Note-taking이 길이였습니다.\n하지만 문제는 Note-taking을 어떻게 하느냐..\n학원과 독학으로 제가 느낀 점들입니다.\n \n\n1) 대화 목적과 lecture 주제 파악하기 연습\n\n\n9월 14일 시험에서 저는 Listening의 1번 주제 문제에서 시간을 많이 섰습니다.\n들었는데 보기에는 주제와 일치하는 게 없는거 같애... -_-;;\n \nTOEFL도 언어영역이라고 말했듯이 정말 흐름을 파악하는게 중요하더군요.\n\n쉬운 예로..\n대화 문제에서 중간부터는 뭔가 남자여자가 \'내가 좋니 쟤가 좋니\' 사랑싸움을 하고 끝났는데\n1번 문제에서 남자가 여자를 만나러 온 목적은 무엇인가.\n\"사랑싸움하려고\"\n그런데 정답은 \"어떤 물건을 빌리러\".......\n그런데 다시 들어보면 상황은 남자가 여자에세 어떤 물건을 빌리러 왔다가 둘이 커플인데 사랑싸움을 하게 된..\n정말 TOEFL은 질문에 요구하는 것을 그대로 묻더라구요.\n\n \n따라서 Listening 또한 언어영역 중 듣기이기 때문에\n가장 먼저 연습해야 할 것은 내가 이 Listening을 듣고 목적과 주제를 파악할 수 있는가 연습입니다.\n \n\n2) connecting words or sentence 듣기 연습\n\n\n사실 학원에서 Listening 강좌에서 이 부분을 먼저 배웠습니다(학원에 따른 일정이 있기 때문에..)\n하지만 정말 Listening 에서 중요한 부분이였습니다.\n \n\n누구나 아는 however나 but\nWriting 강사님의 명언.. \"TOEFL에서는 however 이전 이후로 판가름\"\n정말 맞는 것 같습니다.\n\n \n하지만 가장 중요한 것은 이러한 connecting sentence를 빠르게 캐치해야\nNote-taking 할 때 정말 필요하고 불필요한 정보를 걸러낼 수 있습니다.\n \n\n그리고 누구나 다 알듯이.. Listening 문제풀이는 나의 Note-taking과 함께 손잡고 푸는 것.\n\n \n또 TOEFL Listening을 공부하면서 저는 학교 영어 강좌에서도 처음으로 재미를 느꼈습니다.\n더 잘 이해가 되고.. 나도 모르게 모르는 단어들도 찾고..\nTOEFL이 대학원 유학을 위해 주로 치르는 시험인 만큼 정말 그 만든 취지에 도움이 많이 되는 것 같습니다.\n \n\n* 4. Speaking\n\n\nSpeaking은 사실 저는 학원에서도 배우지 않았고\n독학을 하면서도 가장 시간 투자를 적게했습니다.\n \n매년 방학이 되면 저는 외국으로 나갔습니다. 저는 스쿠버 다이빙을 좋아하고 필리핀에서 보조강사 경험도 있고\n전공이 해양학이다보니 남태평양 한가운데서 탐사선에서 1달 이상을 먹고 자며 생활한 경험도 있습니다.\n그럴 때마다 외국에 나왔기 때문에\n다이빙샵에 놀러온 외국인 손님들에게 인사와 다이빙 가격만 이야기한 것이 아니라\n어디서 왔고~ 시간되면 같이 식사도 같이 하자~ 하며 영어로 대화를 많이 했습니다.\n탐사선에서도 외국인 참관인이 타기 때문에 공적인 이야기 외에도 많이 할 기회가 있었습니다.\n\n \n1) 15초 생각하고 30초 이야기에서..\n\n\n사실 15초는 엄~청 짧고 30초도 또 말하면 엄~청 짧습니다(60초도 마찬가지로..)\n하지만 Speaking 또한 언어영역이며\n실제로 Speaking 채점 기준표에서도 4점까지도 \'약간의 실수\'는 허용이 됩니다.\n버벅 어..어.. 하는 것은 외국인도 할 수 있는 것이고\n가장 중요한 것이 질문에 대해 요구하는 것을 얼마나 논리적으로 대답하였는가.\n\n \n예로 가장 쉬운 Task1.\n\nWhat is the most important decision that you have ever made and why? Please\ninclude specific examples and details in your explanation.\n정말 간단하게 어떤 중요한 선택 그리고 이유. 플러스 특정한 예와 세부적인 내용.\n한 번 밖에 시험을 못 쳤지만 저는 이 요구사항들이 들어갔을 땐 GOOD는 나온다고 생각합니다.\n \n\n2) 자신있게 (but 녹음이 되게)\n\n\n이는 실제로 제가 선린인터넷고등학교에서 칠 때 느낀 점입니다.\n처음 마이크 테스트 때 \'describe your city..\"\n\n마이크가 입에서 떨어진 상태에서는 자꾸 에러가 뜨더군요.\n그래서 눈치가 빠르기 때문에 입가에 손으로 잡고 말을 하니까.. 헤드셋에 제 목소리가 어느 정도 들리더라구요.\n제 뒤에 계시던 여학생 분은 \'describe your city..\"만 30분 하셨던거 같아요.\n\n \n그래서 Speaking은 자신있게 목소리 크게 해야됩니다.\n왜냐면 어느 시험장에 마이크가 100% 완벽하지 않습니다.\n하지만 내 귓가에 내 목소리가 들릴 때.. 가 바로 녹음의 증거라고 생각합니다.\n\n \n* 5. Writing\n\n\nWriting은 학원에서 정말 많은 도움을 받았습니다.\n통합형만 배웠지만 행운이였던 것 같습니다.\n \n\n나만의 Template을 정리하고 시험장 컴퓨터에서 정말 막힘없이 쓸 수 있을 정도의 연습.\n저는 word 파일에 가로로 다단을 나누어 오른쪽에서는 시험과 비슷하게 네모 칸에 연습을 했습니다.\n왜냐면 TOEFL은 영타까지도 시험성적에 들어가는 것 같습니다.. 영타가 느리면 어떻게 그 시간 안에 다 쓰는가..\n그래서 따로 영문타자 연습하지 마시고.\n네모 칸에 똑같이 Template 쓰거나 독립형 Writing을 손으로 안 쓰고 컴퓨터로 연습했습니다.\n시험 치기 전날 정리하면서 봤는데 정말 많이 섰더군요.\n\n \n그리고 Speaking에서 말했듯이 저는 14일 점수에서 독립형이 제일 낮게 나왔습니다.\n물론 독학으로 열심히 제 Template을 goHackers와 문제집에서 정리하였지만\n제가 시험 치면서도 제가 쓴 근거 2가지가 왠지 억지 같고.. 논리적이지 못한 것 같다..\n그렇게 시간에 쫓겨가면서 쓰고 나왔는데 정말 성적표 그대로 나오거군요.\n저는 ETS에서 정말 사람이 채점하는 건데 이게 객관적일까 의심도 많이 했지만\n명언을 주셨던 Writing 선생님께서 농담으로도 하신 말씀이 기억 남습니다.\n\"거기 앉아 채점하시는 흑인 아주머니들도 많은 교육을 받고 채점하는 것이다. 그날 기분에 따라가 아니라..\"\n\n \n* 6. 마지막으로 자신감.\n\n\nTOEFL을 준비하면서 저도 많이 힘들었습니다.\n학교 나니면서 수업 끝나고 강남까지 가면서..\n다 큰 대학생이라고 생각했지만 무언가 늦게 시작했던 터에 불안함..\n그 불안함이 여자친구에게 화를 내고 심지어 걱정해주시는 어머니께도.. 친구들.. 그리고 내 자신..\n \n\n쉽게 시험을 치고 유학을 준비하시는 분들도 있겠지만\n걱정 속에서고 끈기 있게 준비하시는 분들이 더 많을 꺼라고 믿습니다.\n그럴 때 마다 시험장에 들어가실 때\n\"잘 칠 수 있다\" 자신감 하나 마음 속에 굳게 다짐하고 시험을 치는게 가장 중요하다고 생각합니다.\n \n\n \n여기까지 읽어주셔 고맙습니다.\n \nTOEFL로 영어만 읽다가 비법노트 게시판 글들을 보면 왜이렇케 긴 한글을 읽어야 되나 저도 그랬는데\n \n막상 써보니 하고 싶은 말이 많네요.\n \n제가 TOEFL을 공부하면서 느꼈던 부분들이고 이 부분들이 무조건 맞다고는 생각하지 않습니다.\n \n하지만 지금 고생하시는 토플러분들께 작은 도움이 될까하여 적어봤구요.\n \n다른 의견이 있으시다면 고쳐주셨으면 좋겠습니다.\n\n\n \n저의 좌우명처럼..\n \n\"세상은 노력한 만큼 나에게 돌아온다.\"\n \n\n그리고\n \n\"세상은 내가 생각하는대로 이루어지지 않는다. 다만, 오늘 하루 최선을 다했다면 오늘 밤은 편안히 주무셔도 됩니다.\" - 힐링캠프 <박진영>\n \n내년 우리 모두 유학의 꿈 이루었으면 합니다. Fighting !!\n\n\n=== 115점 (28, 29, 29, 29) ===\n\n\n저는 이번에 영어특기자 전형을 준비하고 있는 19살 학생입니다\n캐나다에서 4년을 유학,졸업했지만 몇달전까지만 해도 다른 유학생들에 비해서\n영어점수가 현저히 딸려 재수를 하느냐 마느냐의 기로에 있었습니다. \n3월에 받은 92점이란 점수는 너무나도 굴욕적인 점수였지만 불과 4달만에 이런 고득점을 받을거라곤 상상도 못했네요\n내가 토플 후기를 남기게 될줄이야.. \n\n\n저의 가장 큰 문제점은 리스닝이였습니다. 캐나다에선 일상회화는 물론이고 수업도 따라가는데 지장이 없었는데\n토플 특유의 6분짜리 긴~ 심오한 강의는 너무나도 힘이 들었네요. 노트테이킹도 본인도 못알아볼만큼 조잡했고\n스킬이라곤 전혀 없었습니다. 해외에 있는지라 학원도 다닐수도 없고 인강도 집중을 못하는터라 선택한 방법은\n그냥 원시적인 방법이였습니다. 토플을 위한 귀를 뚫는것이였죠. 사실 본인은 정말 공부를 싫어하는 성격인데\n영어만은 좋아하는지라 걸으면서도 리스닝 듣고 버스에서도 듣고 점심시간에도 듣고 그냥 듣고 또 들었습니다\n사실 계속 듣다보면 질리기 마련인데 TED라고 영어연설 모아놓은 사이트가 있는데 거기서 10분짜리 하루 3개씩 듣고\n생각하고 하다보니 어느 순간 6분이라는 시간이 짧게 느껴지더군요. 그리고 계속 귀에 쏙쏙 들어오더니 어느 순간부터는\n완벽하게 이해가 되더라구요. 물론 노트테이킹 스킬도 정말 노력을 많이 한것 같습니다 제가 점수 따면 나중에 볼려고\n노트테이킹한걸 모아뒀는데 거짓말 안하고 에이포 용지 100장은 되더라구요.. 저만의 기호를 써서 최대한 줄이고 줄이고\n인내심을 가지고 쓰다보니 해커스책에 나오는 노트테이킹처럼 간단명료한게 정말 놀라웠습니다. 그렇게 노트테이킹 실력도 늘리고 귀도 뚫고 하다보니 문제를 보면 딱 답이 보입니다.. ABCD가 있으면 하나빼고 다 헛소리로 보이는 기묘한 능력을 가지게 되더라구요.. 물론 운도 많이 받쳐주고 해서 리스닝 29점이 나왔지만 역시 리스닝은 그냥 닥치고 들릴때까지 듣는게 저는 가장 확실한 방법이라고 생각을 해요..\n\n\n그리고 리딩은 한국인이 가장 강세를 보일수있는 과목이라고 생각합니다. 가장 중요한것은 물론 초록보카를 외우는것인데 정말 듣도보도 못한 단어들도 많던데 제 경험상 85%~90%정도만 외워도 토플하는데 큰 지장이 없다고 생각해요 저도 초록보카 다 훑어보니깐 저도 모르는 단어 은근히 많더라구요 근데 정작 그 단어들은 토플에 안나와요..\n나오는 단어만 나오는 경향이 큰것 같네요. 리딩에서 또 중요한건 적절한 skimming과(맞나?) 완벽하게 이해를 하고 넘어가는게 중요하다고 생각합니다. 간혹 문제 먼저 읽고 패시지를 보시는 분도 계시는데 독해실력이 충분히 갖춰지지 않은 상태에서 문제 요점만 보고 패시지를 읽는다면 부분적인 내용만 보이게되고 전체적인 내용은 잡기 어려워지는것 같아요\n저도 문제 먼저 읽고 풀라고 하면 머릿속에서 그 문제만 돌아서 정신팔리게 되더라구요. 항상 자신 있다고 생각하는게 리딩인데 정작 시험보면 꼭 몇개씩 틀리네요..\n\n\n라이팅은 딱히 별거 없습니다 저는 작년 여름에 실전반 들었었는데 그떄 송원샘이 주신 템플렛 그냥 다 외우고\n통합형도 계속 비교해보면서 40개이상 써보니 27~28 안정적인 점수가 나옵니다. 사실 어떻게 보면 라이팅이 가장\n점수따기 쉬운 과목인거 같아요 외우고 잘 적용만 하면 되니.. \n\n\n스피킹은 죄송한게 저는 스피킹이 너무 싫어서 공부를 안했어요 ㅠㅠ 사실 오랫동안 해외생활 하고 영어도 유창한편이다 보니 도대체 왜 내가 영어 말하기를 책을 보면서 공부를 해야되는거지?? 하는 몹쓸 자격지심떄문에 115점 나오기전까지도\n스피킹은 딱히 공부를 해본적이 없네요 ㅠ 저는 유학생 출신이다보니 다른 배경도 있겠지만 저는 리스닝 귀가 뚫리다보니\n스피킹,라이팅도 잘 들리게 됐고 딱딱 키포인트만 잡아서 스토리텔링 위주로 자신감 있게 마이크 딱 입에 갖다 대고\n아나운서처럼 유창하게 말하려고 노력한게 고득점의 길로 이끈거같네요. 솔직히 생각해보면 좀 버벅거리기도 하고\n시간초과도 하고 15초 남기기도 하고 내용도 그닥 좋지 못했는데 그냥 나 영어 존x 잘해 이런 어필을 하는게 중요한듯.\n팁을 드리자면 어떻게든 리딩,리스닝 시간을 끌어서 옆에 있는 사람꺼 독립형 듣고 휴식시간 가지면서 생각 정리하는게^^\n\n\n7월21일 시험이 사람들도 그렇고 다 어렵다 어렵다하고 저도 굉장히 어렵게 느꼈었는데 기대도 안한 시험에서 점수가 올라서 너무너무 행복하네요 물론 다른 상위권 영특분들에 비해선 좀 모자라지만.. 저는 상위권 대학 지원을 안해서\n이정도 점수면 그래도 가능성이 보입니다.. 토플은 정말 그냥 아무생각 없이 아 망했음 그냥 될대로 되라지\n이럴때 가장 잘나오는거 같아요 저도 토플 보면서도 아 걍 재수해야지 이런 생각하면서 봤거든요.. 시험 전날에도\n공부 하나도 안하고.. 아무래도 시험영어다 보니 노하우가 쌓이고 쌓였을때 빛을 발하는거 같네요 유학준비하시는 분들이나 8월17일 시험 준비하고 계시는 영특입시생들도 힘내시길..\n\n\n\n=== 119점 (30, 30, 29, 30) ===\n\n\n안녕하세요 토플을 총 3번 본 사람입니다\n나름 토플을 마스터(?)하고 끝내겠다는 불같은 의지를 가지고\n만점을 향해 도전했던 사람입니다\n\n\n맨처음에 본 토플은 리딩-30 리스닝-30 스피킹-29 라이팅-28(총 117점)이렇게 나왔구요\n두번째 본 토플은 리딩-28 리스닝-30 스피킹-30 라이팅-30(총 118점) 요렇게 나왔어요\n두번째 본 토플은 무조건 만점이다!!!!!!!라는 마인드로 더 열심히 공부했지만 실수를 했는지 리딩이 제 뒷통수를 때렸습니다..ㅠㅠ너무 아쉬웠죠.....\n\n\n결국에는 만점을 이루지 못하고 토플을 졸업하게 될줄 알았지만 토플을 한번더 봐야되는 일이 생겨(2년 유효기간때문에)\n이번에 2월 3일자 토플 한번 더 봤습니다! 이번엔 아예 마지막인만큼 반드시 만점이 나왔으면 하는 바램을 가지고 점수 기다리고 있어요\n\n*수정* 3번째 토플은 119점이 나왔습니다! 리딩-30 리스닝-30 스피킹-29 라이팅 30 (총 119점) 결국 만점은 이루지 못했지만 성적이 올랐기 때문에 행복합니다~\n\n\n게시판 보니 다른분들은 매우 구체적으로 정성들여 비법노트를 공유해주시던데 저는 그정도는 안되지만\n제 나름의 비법을 조금 끄적여보자고 합니다. 순전히 제 personal 주관적 비법이기 때문에 한번 해보실 분들을 해보시고 이건 나한테 안맞다 싶으면 안하셔도 됩니다~\n(저랑 비슷하게 110점 위로, 또는 만점을 향해 도전하시는 분들께 비법이 도움될 것같아요. 고득점을 바라시는 분들께는 1-2점차이가 얼마나 큰지 제가 알고있기때문에 조금이나마 도움이 됐으면 좋겠습니다^^)\n\n\n그리고 각 파트마다 설명드리기 이전에 한가지 확실히 밝히고 가겠습니다.\n물론 제가 어릴때부터 영어를 많이 좋아하고 영어책도 많이 읽은 영향이 크겠지만,\n아무런 준비없이 그냥 쳐본 토플이 아니기 때문에 제가 첫 토플시험에서도 고득점할 수 있었다고 생각합니다.\n확실한건, 연습하고 공부하고 노력한 만큼 성적은 나옵니다!\n\n\n* 리딩\n\n\n토플을 한번이라도 쳐보신 분들은 아시겠지만 직접 시험을 볼때 리딩 passage 전체가 화면에 가장 먼저 나오고 그다음에 continue를 누르면 문제와 함께 오른쪽옆에 리딩 문단들이 뜹니다. 어떤 분들은 첫 화면에 나오는 passage 전체를 쭉 한번 읽어보고 나름의 중요포인트를 노트에 적거나 파악한뒤 문제로 넘어갑니다. 저는 무조건 첫 화면 passage의 제목만 보고 바로 문제풀기로 들어갑니다. 제목은 반드시 보고 머리속에서 \"아 이런 토픽이구나\"라고 나름의 마음의 준비를 한뒤 문제로 들어가면 됩니다. 문단 순서대로 문제가 2-3문제씩 나오기 때문에 한 문단 읽고 문제 풀고, 읽고 문제 풀고 하는게 더 시간 효율적입니다. 시간이 많이 부족한데 passage전체를 읽어보며 낭비할 순 없습니다. 한 문단읽고 그 문단에 관련된 문제를 다 풉니다. (첫번째 문단에 관련된 문제가 2개라면 2문제 다 풀면됩니다.) 하지만 여기서 명심해야 되는건, 맨 마지막 문제인 summary point문제를 풀기위해서 읽으면서 아하 요런 내용이구나 정도는 기억하고 계셔야 돼요. \nsummary point문제에서 다시 문단을 훑어볼 수 있으니 걱정안하셔도 돼요! (대신 다시한번더 전체적인 passage를 훑어보려면 2-3분정도 extra시간은 더 투자하신다고 생각하시면 돼요. 즉, 쉬운문제는 최대한 빨리빨리 어려운문제는 시간 더 투자해도 시간 모자랄까봐 안절부절해하시지 말구요~)\n\n\n: 마지막 summary 문제팁\n:: 너무 세세하거나 불필요한 디테일을 설명하는 문장은 무조건 오답입니다! summary문제인만큼 굵직하게 중요한 내용을 나타내는 문장이 항상 정답이죠\n\n: vocab 문제팁\n:: 헷갈리는 보기가 여러개 나올때가 많죠. 저는 뻔한 정답도 그냥 클릭하고 넘어가지않고 반드시 문단에 대입해서 문장전체를 한번더 읽어보고 흐름이 자연스러운지 확인하고 넘어갑니다! double check는 늘 좋은 방법이죠\n\n\n그리고 리딩 문제 푸시면서 문제 정답 중 보기 2개가 너무 헷갈린다~ 이거 뭐가 정답인지 어떻게 알아~ 하시는 분들 계신데 심호흡하시고 그 문제의 연관 문단을 다시 천천히 읽어보세요. 문제에서 질문하는 내용을 찾아내서 그 앞 문장 2개, 뒤 문장 2개는 눈알 뽑혀라 집중해서 읽어보세요. 깨달음이 올때까지 열심히 읽어보시면 정답은 항상 리딩 안에 있습니다.\n도저히 모르겠다, 하시는 문제도 반드시 리딩안에 정답이 있습니다. 단지 다르게 paraphrase된 정답보기때문에 헷갈리는 것뿐!\n\n\n* 리스닝\n\n\n저는 리스닝에서 노트테이킹만큼 중요한 건 없다고 생각합니다. 적는게 느리니까 차라리 안적고 집중해서 내용파악할래~ 하시는 분들은 고득점은 불가능합니다. 시험 전에 피눈물나게 노트테이킹 연습을 해야지만 리스닝 만점을 바라볼 수 있습니다. 하지만 노트테이킹을 하는데 있어서 가장 큰 어려움은, 하나 열심히 쓰고 있는데 이미 교수는 엄청난 스피드로 다른 내용으로 넘어가고있죠. 그럼 토플러들은 어?어?!?!? 라고 외치며 당황해서 쓰던것도 놓치고 다음말도 놓치고 당황해서 많은 내용을 놓치게 되죠. 필기 속도가 느린데 어쩌죠? 듣는것도 느린데 어쩌죠? 답은 연습, 연습, 또 연습뿐입니다.\n\n\n필기 속도 팁: 필기속도가 느린 이유 중 하나가 단어 전체를 받아적거나 문장 전체를 받아 적으려다보니 느려지는 거죠. 단어는 자신만이 알아볼 수 있도록 줄이는게 좋습니다. 사실 필기한 내용중 30-40%만 문제풀때 사용하게 되니 100% 다 적을 필요는 없겠죠\n\n\n; 예)\n: with -> w/\n: and -> &\n: because -> b/c\n: why->?\n: many -> 多\n: (요런 접속사나 전치사들은 무조건 줄여 적어야 하구요)\n\n: traditional -> trad.\n: for example -> ex)\n: philosophy -> philo.\n: (요런식으로 아무 단어나 자기가 알아볼수있을 정도로만 팍팍 줄여주면 돼요)\n\n\n그리고 저같은 경우는 negative한 톤이 나온다면 (disagree/criticize하는 내용) 찡그리고 있는 얼굴을 옆에다가 그립니다. positive한 내용이면 웃는 얼굴/이모티콘을 그리구요! 그림 그리는건 1초도 안걸리니 간편해서 항상 써먹는 방법입니다.\n\n\n그리고 마지막으로 주제, 예시, 의견(교수님의 의견), 주제랑 관련된 topic중 좋은점/나쁜점은 반드시 필기를 하며 빠른 속도로 동그라미 칩니다.\n\n \n:- 주제: \"Today\'s lecture will be about the early 20th century artists and how they influenced other future artists.\"\n:: 와 같은식으로 반드시 렉쳐 앞부분에서 교수님이 오늘 수업은 어떤 내용일것이다라고 언급을 할꺼에요.\n:: 저같은 경우에는 위에 문장을 이런식으로 노트테이킹 하겠죠: \n:: early 20th art人 & how influ. other art人 (전 사람인자도 자주 써요~ 그림이 간편하고 빠릅니다!)\n:: 주제부분을 노트테이킹한 거는 반드시 동그라미 쳐두세요~ 중요한 부분이죠!\n\n:- 예시: \"Let\'s take the frog as an example\" \"For example, let\'s look at the frog\"\n:: 와 같은식으로 교수님은 무슨 상황이든간에 예시를 듭니다.\n:: 그건 이렇게 노트테이킹 하겠죠:\n:: Ex) frog\n:: 그리고 그 밑에 쭉 예시와 관련된 디테일들을 노트테이킹합니다. 하지만 여기서는 frog 만 동그라미 쳐주세요. 전체적으로 예시의 디테일과 설명까지 동그라미 칠 필요전혀 없습니다~ 무엇을 예시로 들었는지만 표시해두면 다시 돌아가서 디테일 보면 되니까요\n\n:- 의견: \"I think ~\" \"I believe~\" \n:: 와 같은식으로 아예 \"I\" 구문을 쓰며 자기 의견을 말하는 교수님이 있습니다. 또는 억양/톤의 차이로 의견을 말하는 거구나! 라고 파악할 수 있죠. 이런 부분도 표시해 놔야 되는데요, 동그라미를 치기 어렵다면 옆에 눈에 띌수 있게 별표를 그립니다.\n\n:- 좋은점/나쁜점: \"There are typically two types of method: crystallization and fragmentation. The former is good in that~ while the latter is bad in that ~\"\n:: 와 같은식으로 좋은점/나쁜점을 언급하는 부분이 자주 등장해요. 그럼 이부분은 반드시 전체적으로 말한 좋은점 나쁜점을 동그라미 쳐둡니다. 문제에 출제될 확률이 80퍼센트거든요\n\n\n\n* 스피킹\n\n\n스피킹이 어떻게 보면 가장 쉬운 파트 일수도 있습니다. 항상 지정된 문제형식이 있어 내용만 다를 뿐 format은 같아요. 즉, 시험전에 문제형식을 자신의 것으로 만들어 완전히 이해하고 간다면 스피킹 고득점은 무난합니다^^. 그리고 또 한가지 더 명심하셔야 될 점은, ETS 점수 매기는 분들은 영어가 제 2외국어인 저희 한국 토플러들에게 점수를 조금이라도 더 주기 위해 노력한다는 걸 기억하고있으세요! (일종의 \"그래 조금의실수는 괜찮아\"라는 마인드 컨트롤이죠) 조금의 문법실수, 더듬거리는 발음실수 등 마이너 실수들은 실질적으로 점수에 영향을 미치지 않습니다. 단, 반드시 점수에 영향을 미치는 요소는 자신감 (목소리 크기), 억양 (모노톤하지않고 감정을 실어 높낮이/강약을 다르게하는), 간단한 complete sentence, 정적 및 시간컨트롤입니다.\n\n\n:- 자신감: 꼭 시험장에 가보시면 마이크랑 컴퓨터에 빨려들어가실 것처럼 작게 속삭이시는 분들 계세요. 물론 \"아 난 영어도 잘 못하는데\" \"다른사람이 듣고 비웃으면 어쩌지\" 이런 생각때문이겠지만 그 자신없는 작은 목소리가 그 분들의 점수를 팍팍 갉아먹어요. 당당하게 크게 말하시는 분들은 무조건, 무조건 점수에서 가산점을 받는다는 것을 기억하세요. 어차피 시험장에 있는 사람들, 99프로는 다시 볼 사람들 아닙니다. 다시 본다 하더라도 스피킹 크게 녹음했다고 부끄러울 필요 전혀 없구요. 20만원 낸 자기 토플, 한번밖에 없는 기회를 쓸데없는 변명으로 낭비하지마세요!\n\n:- 억양: 외국인들의 가장 큰 특징은 모든 단어에 모노톤이 아닌 감정이 실린 높낮이/강약 차이가 있다는 겁니다. 대표적으로 강조하고 싶은 단어나 문장은 그 파트 직전에 0.5초 정도의 뜸을 들이고 더 크게 말해 강조하는 방법이 있습니다. 억양은 강조해도해도 모자란 고득점 요소입니다. 한글에는 잘없는 억양, 나름 사투리라고 생각하고 자유자재로 조절하세요! (저도 가끔 억양을 팍팍 넣다가 제 자신이 너무웃기고 어색해서 빵 터진적있어요...ㅋㅋ)\n\n:- 간단한 complete sentence: 토플러들이 스피킹을 하다가 말문이 턱 막히는 이유 중 가장 큰 이유 하나가 어려운 단어 또는 어려운 문장 구조를 쓰려다 보니 머릿속에선 혼란이 오고 말은 안나오게 되는 경우입니다. 스피킹은 자연스럽게 연결되어야 한다는 점에서 평상시에 아는 단어/문장구조를 사용하는게 유리해요. 어려운 단어/문장구조 한개도 없이 고득점이 가능합니다. 예를 들자면, 도시에 나무가 많은게 좋다 라는 문장을 I believe that the high availability of trees in cities is beneficial to humans. 등 문장구조를 조금이라도 더 complex하게 바꾸려다 보면 당황해서 정적이 흐르는 경우가 생기죠. 그럴땐 In my opinion, having lots of trees in cities is good for humans이라고 짧고 깔끔하게 얘기해주는 게 더 좋습니다~ 무조건 복잡해야지 고득점 할 수있을꺼란 생각을 과감히 버리세요!\n\n:- 정적 및 시간컨트롤: 45초 및 60초 녹음 방식인데요, 정적은 점수를 까먹는 메인 요소 중 하나입니다. 45초짜리 녹음은 최소한 40~41초, 60초짜리 녹음은 최소한 55~56초는 반드시 keep on talking하셔야 됩니다. 만약 10초~15초 쯤 정적이 흐를것 같다! 하시는 분들은 정답을 다 녹음하지못하고 말을 하는 도중에 말이 잘리더라도 좋으니 내용을 한번더 summarize하는 식으로 10초 더 시간끄세요\n\n\n\n일단 이렇게 제 나름의 비법정리해드렸습니다.\n다시 읽어보니 두서도 없고 별것 아닌것 같지만....그래도 제 나름은 도움을 드리려고 정리해봤습니다.\n지금은 시간이 많이 없어서 스피킹과 라이팅은 다시 돌아와서 추가정리해드려야 될것같네요!!! *1차 수정/추가해드렸습니다 & 2차는 추후 예정입니다* (틈나는대로 해커스들어와서 정리해드리는거라서 바쁘네요 ㅠㅠ죄송해요~)\n\n\n제 비법들은 다 어느정도 점수나 실력이 되신다(단어/문법/해석은 공부완료된 상태)는 가정하에 정리해드린거라서 초보분들께는 도움이 될 수 있나 모르겠네요...ㅠㅠ\n고득점을 하시고 싶은 분들, 만점을 바라보시는 분들은 항상 따기 어려운 그 1~2점을 받을 수 있으시면 좋겠네요!!!\n모두 졸업하는 그날까지 꿈의 점수를 이룹시다\n화이팅!!!!\n\n=== 120점 만점 (30, 30, 30, 30) ===\n\n\n\n필자는 작년 TOEFL 만점. 그리고 현재 GRE 독학 중.\n \n나의 만점 비법. 스피킹 x\n\n \n1. 초록이 보카를 외운다. 동의어 나와있는거 다 외울 필요까지는 없음. 3 동의어까지만 외워도 충분하기는 함. 필자는 2 동의어까지 외웠음. 총 3회독. 1달 소요...\n\n \n2. 워드 스마트를 외운다. 통합본 여기서 나온 단어들 토플에도 많이 나와용. 에세티에 많이 나오지만... 이 책 6회독 ~~ 한달에 3회독. 총 2달 소요.\n\n \n3. 카페 웹서핑 하면서 기출단어들 다운 받고 인쇄해서 외운다. 보통 1000여개 됩니다. 난 3회독. 이건 그냥 정규 책이나 실전 책 밑에 있는 단어들 중 중요한 것만 넣은 것이라 생각하시면 됩니다.\n\n \n4. 와 이제 단어의 지존이 되었습니다. 토플에서 전문용어 빼고는 모르는 단어들이 딱히 없을 것입니다. 원래부터 어휘수준이 딸렸으면 모르는 단어야 있겠지만 인터책 수준에선 거의 없을 것이라 개인적으로 생각함.\n\n\n5. 어학연수로 떠납니다 ~~ 어디루요??? 집으로죠 ~~ 맨날 CNN Student news나 AP 뉴스 듣고만 사세요.. 그리고 한국어 쓰지마세요. 영어로만 생각하고 영어로만 말하세요.. 누가 말걸면요??? 사소한 일 (밥 묵어라 같은 거) 이면 씹으세요.. 아님 영어로 말하세요. 혹은 바디랭귀지. 나는 그때 혼자 살았었음..\n \n\n6. 맨날 이것들을 딕테이션 합니다.  너무 빨라요?? 그럼 쓸 수 있을 때 까지 들으세요 ~~ 그리고 쉐도잉을 합니다. CNN은 http://transcripts.cnn.com/TRANSCRIPTS/ 들어가서 뉴스 현지 방송 날짜에 맞춰서 누르고 다운받은 채널 찾아서 인쇄합니다. 이짓을 한달동안 합니다. 15시간 이상을 여기에 쓰세요.\n\n\n7. 리딩입니다. 정규 한권만 정확히 전치사 하나도 놓치지 않고 정확히 해석합니다. 문제 분석도 철저히 합니다. 왜 답이 아닌지 명확한 이유를 쓰고 왜 답인지 지문에 근거해서 해설을 씁니다. 추리 절대 NO 이건 탐정놀이가 아닙니다. 액츄얼 책도 이렇게 풉니다. 그리고 CD로 실전처럼 풉니다.\n \n\n8. 리스닝입니다. 우리는 CNN 공부로 리스닝의 신이 되었습니다. 이제 정규 한권을 잡습니다. 렉처 다 딕테이션 합니다 ^^^ 장난 아닙니다 ;;; 컨버는 렉처만 잘 되면 다 잘 풉니다. 하루에 렉처 2개를 뚫습니다. 보통 개당 1.5시간이나 2시간 걸릴테니 3시간 ~ 4시간이면 됩니다..  해커스 테스트인가?? 그거 하세요. 문제는 절대 ㄴㄴㄴㄴㄴㄴㄴㄴㄴㄴㄴㄴㄴ 이거 다 딕테이션 하는데 한달이면 충분함;;\n\n \n9. 리스닝 2. 그리고 문제를 풉니다. 지문에 근거하여. 왜 답이 되는지 이유를 씁니다. 추리 NO 우리는 탐정이 아닙니다. 모든 지문을 다 그렇게 합니다. 해커스 책 공부 계획표대로 하세요..\n\n \n10. 리스닝 3. 모르는 단어들 다 외웁니다. 컨버에서 특히 많을 것입니다. 해커스 책 뒤에 있는 단어들 모조리 외웁니다. 액츄얼도 이렇게 합니다.\n\n\n11. 라이팅 1. 탬플릿 주워서 외웁니다. 탬플릿은 기본틀입니다. 내가 이렇게 생각하는 이유는 ____ 이다 라고 할때 내가 이렇게 생각하는 이유는 ____ 이다. 이게 탬플릿입니다.\n \n\n12. 라이팅 2. 샘플 에세이 주워서 해부를 합니다. 에세이가 어떻게 전개되는지 보는 것입니다. 이것은 구조를 공부하는 것입니다.\n \n\n13. 라이팅 3. 모범답안을 외웁니다. 하루에 2개씩 외우도록 합니다.\n \n\n14. 라이팅 4. 페러프레이징 해줍니다. 동의어로 바꾸라는 것이 아니라 문장을 비슷한 문장으로 문장 자체를 바꾸라는 것입니다. ex) 나는 ____ 라고 생각한다. 내가 이렇게 생각하는 이유는 ____ 이다 -> 나는 ____ 라고 생각한다 왜냐하면 ____ 이렇게 말입니다. 참고로 절대 이 예시대로 쓰지 마세요. 그냥 즉흥적으로 생각난게 이거여서 이렇게 쓴 것입니다.\n \n\n15, 라이팅 5. 영타 연습을 해줍니다. 영타 안되면 망합니다.\n\n \n스피킹 설명이 없는 이유\n: 나는 스피킹을 학원에서 공부함. 정규와 실전을.. 그니깐 학원에서 배운 걸 알려줄 수 없음.\n \n\n참고로 기출단어 외우라 한 이유는 그래도 단어 암기했던 게 지문에 나오면 좋자나요 ㅋㅋㅋㅋㅋㅋㅋㅋㅋ\n뭐 물론 안외워도 상관은 없음. 지문에서 외우면 되니깐\n\n\n\n== 기타 유용한 정보 ==\n\n\n=== 에빙하우스 암기법 ===\n\n\n\n* 1) 1시간에 100단어 암기법. (일명, 에빙하우스 암기법)\n: 핵심은 집중과 반복이다. 에빙하우스의 복습법대로 학습하면 최소 30단어 외우는 것은 기본이고, 50단어, 100단어까지 암기하는데 도움이 된다.\n\n \n# 5단어씩 외운다. (5~10단어 사이)\n# 쓰면서 외우지 않고, 눈으로 보고 입으로 소리 내면서 외운다.\n# 한 단어를 2~3번만 중얼거리고 (대략 10초, 길어도 20초 이내) 안 외워진 느낌이 들어도 무조건 다음 단어로 넘어간다. (매우 중요!)\n# 전체를 1~2회 반복 후 뜻을 가리고 봤을 때, 즉시 뜻이 안 떠오르면 그 단어에 표시하면서, 동시에 2~3번만 읽고 넘어가면서 계속 반복한다.\n# 다 외워지면, 즉시 다음 5단어를 같은 방식으로 외운다.\n\n \n* 2) 외운 단어 1년 내내 기억하기. (일명, 에빙하우스 복습법)\n\n# 오늘 공부한 것을 오늘 안에 1회 복습한다. (▶ 대략 하루 동안 기억이 유지됨)\n#: 학습후 10분뒤 10분동안 1차복습\n# 하루 뒤에 복습 한다. (▶ 대략 일주일 기억 유지)\n#: 하루뒤 2~4분뒤에 2차복습\n# 일주일 뒤에 복습 한다. (▶ 대략 한달 기억 유지)\n#: 두번째 복습이 있고난뒤 1주일후 2분동안 3차 복습\n# 한달 뒤에 복습한다. (▶대략 6개월 기억 유지)\n#: 한달뒤 4차복습\n# 6개월 뒤에 복습한다. (이 때부터는 시험 직전에 한 번씩 훑어 본다.)','utf-8'),(2043,'\n\n\n\n <pre>\n   November 2013      \nSu Mo Tu We Th Fr Sa  \n                1  2  \n 3  4  5  6  7  8  9  \n10 11 12 13 14 15 16  \n17 18 19 20 21 22 23  \n24 25 26 27 28 29 30  \n</pre>\n\n\n\n\n== ## bNote-2013-11-28 ==\n\n\n\n\n=== NVMe performance analysis (XS-1715) (ver 2.0) ===\n\n: lightweighted ftrace (with compact set_ftrace_filter)\n\n <pre>\nroot@buddy-guy:tracing %1# cat set_ftrace_filter \nsys_read\nsys_write\ndio_await_completion\next3_direct_IO\next4_direct_IO\ngeneric_make_request\nsubmit_bio\nblk_queue_bio\nnvme_make_request [nvme]\next2_direct_IO [ext2]\n</pre>\n\n <pre>\nroot@buddy-guy:trace_kernel %1# cat ft.opt.filter.txt \nsys_read\nsys_write\next2_direct_IO\next3_direct_IO\next4_direct_IO\nsubmit_bio\ngeneric_make_request\nnvme_make_request\ndio_await_completion\nblk_queue_bio\n</pre>\n\n==== command history ====\n\n <pre>\n\nroot@buddy-guy:mnt %1# l\ntotal 36\ndrwxr-xr-x  9 root     root     4096 Nov 25 20:02 ./\ndrwxr-xr-x 24 root     root     4096 Nov 27 15:18 ../\n-rwxr-xr-x  1 root     root      111 Nov 25 18:54 .mount_ramdisk.sh*\ndrwxrwxr-x  4 blusjune blusjune 4096 Oct 17 16:18 nfs_b02/\ndrwxr-xr-x  3 root     root     4096 Nov 27 20:31 nvme_ssd.1/\ndrwxr-xr-x  3 root     root     4096 Nov 25 19:53 nvme_ssd.2/\ndrwxrwxrwt  2 root     root      100 Nov 27 20:37 ramdisk.1/\ndrwxrwxr-x  2 root     root     4096 Nov 25 20:48 sata_hdd.1/\ndrwxr-xr-x  3 root     root     4096 Nov 25 20:29 sata_ssd.1/\ndrwxr-xr-x  3 root     root     4096 Nov 25 19:54 sata_ssd.2/\n\n\n\n\nroot@buddy-guy:mnt %1# sleep 1; taskset -c 0 dd if=ramdisk.1/iot.0 of=nvme_ssd.1/iot.1 bs=4096 oflag=direct \n20480+1 records in\n20480+1 records out\n83886146 bytes (84 MB) copied, 0.895126 s, 93.7 MB/s\n\nroot@buddy-guy:mnt %1# sleep 1; taskset -c 0 dd if=ramdisk.1/iot.0 of=nvme_ssd.1/iot.1 bs=4096 oflag=direct \n20480+1 records in\n20480+1 records out\n83886146 bytes (84 MB) copied, 0.94694 s, 88.6 MB/s\n\nroot@buddy-guy:mnt %1# sleep 1; taskset -c 0 dd if=ramdisk.1/iot.0 of=nvme_ssd.1/iot.1 bs=4096 \n20480+1 records in\n20480+1 records out\n83886146 bytes (84 MB) copied, 0.228975 s, 366 MB/s\n\nroot@buddy-guy:mnt %1# sleep 1; taskset -c 0 dd if=ramdisk.1/iot.0 of=nvme_ssd.1/iot.1 bs=4096 oflag=direct \n20480+1 records in\n20480+1 records out\n83886146 bytes (84 MB) copied, 0.944524 s, 88.8 MB/s\n\nroot@buddy-guy:mnt %1# sleep 1; taskset -c 0 dd if=ramdisk.1/iot.0 of=nvme_ssd.1/iot.1 bs=4096 oflag=direct \n20480+1 records in\n20480+1 records out\n83886146 bytes (84 MB) copied, 0.899773 s, 93.2 MB/s\n\nroot@buddy-guy:mnt %1# sleep 1; taskset -c 0 dd if=ramdisk.1/iot.0 of=nvme_ssd.1/iot.1 bs=4096 oflag=direct \n20480+1 records in\n20480+1 records out\n83886146 bytes (84 MB) copied, 0.891819 s, 94.1 MB/s\n\nroot@buddy-guy:mnt %1# sleep 1; taskset -c 1 dd if=ramdisk.1/iot.0 of=nvme_ssd.1/iot.1 bs=4096 oflag=direct \n20480+1 records in\n20480+1 records out\n83886146 bytes (84 MB) copied, 0.837059 s, 100 MB/s\n\n\n\n\nroot@buddy-guy:mnt %1# sleep 1; taskset -c 1 dd if=ramdisk.1/iot.0 of=sata_ssd.1/iot.1 bs=4096 oflag=direct \n20480+1 records in\n20480+1 records out\n83886146 bytes (84 MB) copied, 1.10278 s, 76.1 MB/s\n\n\n\n\nroot@buddy-guy:mnt %1# sleep 1; taskset -c 1 dd if=ramdisk.1/iot.0 of=sata_hdd.1/iot.1 bs=4096 oflag=direct\n20480+1 records in\n20480+1 records out\n83886146 bytes (84 MB) copied, 3.24473 s, 25.9 MB/s\n\n</pre>\n\n\n==== nvme_ssd profiling data ====\n\n <pre>\nroot@buddy-guy:d.08 %1# cat nvme_ssd.log \nsys_write	ext2_direct_IO	dio_await_completion	submit_bio	generic_make_request	nvme_make_request\n37.138		35.639		28.830			2.628		2.046			0.675\n41.225		38.858		33.791			2.155		1.543			0.678\n37.509		35.967		29.824			2.137		1.503			0.660\n34.511		33.329		27.507			1.983		1.395			0.627\n33.056		31.894		26.217			2.005		1.447			0.597\n33.815		32.659		26.267			2.202		1.311			0.606\n33.707		32.456		26.790			2.134		1.411			0.595\n34.746		33.563		27.579			2.227		1.359			0.606\n34.602		33.166		26.961			2.329		1.596			0.600\n34.151		33.032		27.883			1.839		1.338			0.582\n33.476		32.329		26.583			1.948		1.344			0.579\n37.263		36.135		26.852			2.127		1.611			0.603\n34.446		33.134		27.041			2.133		1.410			0.609\n32.888		31.747		26.201			1.897		1.333			0.606\n33.440		32.276		26.978			1.812		1.335			0.588\n34.206		33.079		27.126			2.058		1.521			0.600\n34.151		32.777		26.670			2.173		1.501			0.606\n32.873		31.727		25.785			1.843		1.375			0.597\n33.641		32.387		26.787			1.903		1.333			0.595\n33.755		32.611		27.309			1.767		1.308			0.591\n</pre>\n\n\n\n\n\n==== sata_ssd profiling data ====\n\n <pre>\nroot@buddy-guy:d.08 %1# cat sata_ssd.log \nsys_write	ext2_direct_IO	dio_await_completion	submit_bio	generic_make_request	blk_queue_bio\n51.317		49.672		38.773			2.803		2.266			1.150\n49.270		48.015		38.499			2.715		2.070			1.002\n48.216		47.019		38.445			2.200		1.698			0.942\n55.635		54.291		44.861			2.362		1.854			0.942\n49.327		47.940		38.872			2.280		1.815			0.969\n48.936		47.649		38.607			2.442		2.013			1.077\n49.252		48.040		39.226			2.296		1.723			0.939\n49.334		48.153		39.013			2.577		1.974			0.951\n48.375		47.223		38.659			2.190		1.764			0.933\n48.973		47.841		38.817			2.347		1.860			0.912\n48.784		47.626		38.946			2.197		1.684			0.922\n48.880		47.443		38.377			2.311		1.726			0.927\n48.553		47.350		38.299			2.680		1.845			0.915\n48.817		47.589		38.929			2.319		1.839			0.909\n48.112		46.926		38.377			2.145		1.707			0.918\n49.021		47.841		38.590			2.241		1.761			0.945\n48.994		47.824		38.634			2.635		1.885			1.006\n48.817		47.599		38.941			2.230		1.780			0.946\n48.049		46.858		38.130			2.161		1.678			0.967\n48.964		47.683		38.578			2.491		2.002			1.093\n</pre>\n\n\n\n\n\n\n==== sata_hdd profiling data ====\n\n <pre>\nroot@buddy-guy:d.08 %1# cat sata_hdd.log \nsys_write	ext4_direct_IO	dio_await_completion	submit_bio	generic_make_request	blk_queue_bio\n136.016		133.730		112.708			5.954		4.801			1.107\n137.583		135.626		117.221			5.108		4.598			1.213\n137.244		135.344		115.763			5.473		4.567			0.981\n132.830		130.380		111.018			5.477		4.714			0.969\n130.756		128.510		110.967			4.408		3.913			0.985\n131.863		130.273		111.598			5.414		4.175			0.973\n132.037		130.014		111.924			4.861		4.027			0.963\n130.273		128.429		111.213			4.399		3.877			0.994\n130.374		128.454		111.091			4.654		3.811			0.990\n131.152		128.934		110.742			5.060		4.156			0.954\n138.087		135.711		116.038			6.278		4.922			0.940\n132.481		130.596		111.819			5.570		4.472			0.955\n131.863		130.048		111.433			5.903		4.913			1.138\n138.516		136.238		116.384			6.239		5.141			0.996\n133.969		132.331		113.590			5.891		4.388			0.985\n137.273		135.149		116.510			5.183		4.085			0.922\n153.167		150.019		111.024			5.426		4.505			1.081\n132.145		129.639		111.213			5.420		4.162			0.984\n132.241		130.606		112.227			5.705		4.300			0.951\n132.148		130.194		113.020			4.261		3.463			0.979\n</pre>\n\n\n\n\n==== R colnames() ====\n\n <pre>\ncolnames(d) <- c(\"sys_write\", \"ext2_direct_IO\", \"dio_await_completion\", \"submit_bio\", \"generic_make_request\", \"nvme_make_request\")\ncolnames(d) <- c(\"sys_write\", \"ext2_direct_IO\", \"dio_await_completion\", \"submit_bio\", \"generic_make_request\", \"blk_queue_bio\")\ncolnames(d) <- c(\"sys_write\", \"ext4_direct_IO\", \"dio_await_completion\", \"submit_bio\", \"generic_make_request\", \"blk_queue_bio\")\n</pre>\n\n=== PCIe System Architecture (book) ===\n\n* [http://www.mindshare.com/files/ebooks/pci%20express%20system%20architecture.pdf PCI Express System Architecture // MindShare // Ravi Budruk, Don Anderson, Tom Shanley]\n\n\n\n\n=== PCIe Revision 3.0 Illustrated ===\n\n\n==== [PCIe_v3.0] Features ====\n\n* In PCIe,\n:- switches can be used to connect a large number of PCIe devices in a system\n:- serial communication over the interconnect uses AND{\n:: packet-based transactions\n:: PCI-X split-transaction protocol\n: }\n:- QoS features provide\n:: differentiated transmission performance for varied applications\n:- hot plug / hot swap support enables\n:: \"always-on\" systems\n:- advanced power management features allow for\n:: low-power (mobile) applications\n:- robust error detection and handling features make\n:: PCIe ideal for high-end server applications\n:- ALL{Hot plug, power management, error handling, interrupt signaling} can all be sent in-band\n:: using packet-based messaging (, rather than side-band signals)\n:: helping reduce pin count and system cost\n:- The configuration address space available per function is extended to 4KB,\n:: allowing designers to define additional registers\n:: (however, new software is required\n:: to access this extended configuration register space)\n\n\n==== [PCIe_v3.0] PCIe Fabric Topology ====\n\n\n*; Hierarchy\n:- the OR{newwork, fabric} of all the AND{devices, links} associated with a root complex\n:: that are either OR{\n::: directly connected to the root complex via its port(s)\n::: indirectly connected via switches and bridges\n:: }\n\n\n===== PCIe Root Complex (RC) =====\n\n*; Root Complex\n:- connects the CPU and memory subsystem to the PCIe fabric\n:- may support several PCIe ports\n:: each port is connected to\n::: an endpoint device\n::: a switch (that then forms a sub-hierarchy)\n:- generates transaction requests on behalf of the CPU\n:- in response to CPU commands, it generates\n:: configuration requests\n:: memory and IO requests\n:: locked transaction requests\n: on the PCIe fabric\n:- transmits packets out of its ports\n:- receives packets into its ports (, which it then forwards to memory or the CPU)\n:- may also optionally route packets from one port to another port (supporting peer-to-peer transactions, in case of multi-port root complex)\n:: but is NOT required by the specification to to so\n:- has a bus number, device number, and function number\n:: which are used to form OR{a requester ID, a completer ID}\n:: for its transactions, and these all initialize to zeroes\n\n\n===== PCIe Endpoints =====\n\n\n===== PCIe Switch =====\n\n\n===== PCIe Root Complex Event Collector (RCEC) =====\n\n\n===== PCIe to PCI/PCI-X Bridge =====\n\n==== [PCIe_v3.0] Fabric Topology Configuration ====\n\n\n==== [PCIe_v3.0] Layering ====\n\n===== PCIe Transaction Layer =====\n\n===== PCIe Data Link Layer =====\n\n===== PCIe Physical Layer =====\n\n* A PCIe interconnect\n:- is referred to as a link\n:: which connects two devices\n\n* A link consists of\n:- either OR{1, 2, 4, 8, 12, 16, 32} signals in each direction\n:: , these signals are referred to as \'\'\'lanes\'\'\'\n:: (note that, because the system uses full-differential signaling,\n:: each signal actually needs two wires)\n\n* A x1 \n\n* A designer determines\n:- how many lanes to implement\n:: based on the targeted performance required on a given link\n\n* (Nomenclature) The width of a link is shown with an \'x\' in front of a number, \n: , where the \'x\' is pronounced as \'by\'\n: , so that a link with 4 signals in each direction, for example, is referred to as \'by four\' link\n\n==== [PCIe_v3.0] Differential signaling ====\n\n* PCIe devices employ\n: differential drivers and receivers at each port\n\n* Characteristics of differential signaling\n:- single-ended signal,\n:: whose voltage is compared with system ground,\n:- \'\'\'differential signal\'\'\'\n:: is compared only with it\'s opposite mate\n:: , so that the difference between them is what is measured.\n\n* Mechanism of differential signaling\n:- a positive voltage difference between the D+ and D- terminals implies Logical 1\n:- a negative voltage difference implies Logical 0\n:- no voltage difference between D+ and D- means that the driver is in the high-impedance tri-state condition\n:: , referred to as the electrical-idle and low-power state of the Link\n\n\n==== [PCIe_v3.0] Root complex (RC) ====\n\n\n\n\n\n==== [PCIe_v3.0] Interrupt model ====\n\n\n\n==== [PCIe_v3.0] Transaction ====\n\n*; PCIe transaction\n\n\n*; Locked transaction\n\n==== [PCIe_v3.0] Virtual circuit (VC) ====\n\n*; Virtual circuit (VC)\n:- \n\n\n==== [PCIe_v3.0] Traffic class (TC) ====\n\n*; Traffic class (TC)\n:- is a 3-bit field that allows\n:: differentiation of transactions into eight traffic classes\n:- is a fundamental element for\n:: enabling differentiated traffic servicing\n:: (, together with the PCIe VC (Virtual Channel) support)\n:- usage\n::- every PCIe TLP (Transaction Layer Packet) uses\n::: TC information as an invariant label\n::: that is carried end to end within the PCIe fabric\n::- as the packet traverses across the fabric,\n:: TC information is used\n::: at every Link and within each Switch element\n::: to make decisions with regards to proper servicing of the traffic\n:- a key aspect of servicing is\n:: the routing of the packets based on their TC labels\n:: through corresponding VCs\n:- definition of TC field encodings\n::- TC field value 000(b)\n::: TC0: best effort service class (general purpose IO)\n::: default TC - must be supported by every PCIe device\n::- TC field value 001(b)-111(b)\n::: TC1-TC7: differentiated service classes\n::: differentiation based on weighted-round-robin and/or priority\n:- the concept of TC applies\n:: only within the PCIe interconnect fabric\n\n\n==== [PCIe_v3.0] Multi-Function Virtual Channel (MFVC) ====\n\n*; Multi-Function Virtual Channel (MFVC) Capability\n\n\n==== [PCIe_v3.0] 6.7.3 PCI Express Hot-Plug Events ====\n\n==== [PCIe_v3.0] Access Control Services (ACS) ====\n\n:- ACS defines\n: a set of control points within a PCIe topology\n: to determine whether a TLP should be routed OR{\n::- normally,\n::- blocked,\n::- redirected\n: }\n\n:- ACS provides\n: the following types of access control\n::- source <u>V</u>alidation (V)\n::- translation <u>B</u>locking (B)\n::- P2P <u>R</u>equest redirect (R)\n::- P2P <u>C</u>ompletion redirect (C)\n::- <u>U</u>pstream forwarding (U)\n::- P2P <u>E</u>gress control (E)\n::- direct <u>T</u>ranslated P2P (T)\n\n==== [PCIe_v3.0] Alternative Routing-ID Interpretation (ARI) ====\n\n:- Routing IDs, Requester IDs, and Completer IDs are\n: 16-bit identifiers traditionally composed of three fields:\n::- an 8-bit Bus Number,\n::- a 5-bit Device Number,\n::- a 3-bit Function Number.\n:- With ARI,\n: the 16-bit field is interpreted as\n: two fields instead of three:\n::- an 8-bit Bus Number\n::- and an 8-bit Function Number\n:: (the Device Number field is eliminated)\n:- This new interpretation enables\n: an ARI Device to support\n::- up to 256 Functions [0..255]\n::- instead of 8 Functions [0..7].\n\n==== [PCIe_v3.0] RCRB ====\n\n*; RCRB\n\n\n\n\n==== [PCIe_v3.0] MSI and MSI-X capability ====\n\n:- All PCI Express device Functions that are capable of generating interrupts must implement MSI or MSI-X or both. MSI, MSI-X, and their Capability structures are defined in the PCI Local Bus Specification.\n\n:- The functionality associated with these structures defined by conventional PCI is also required for PCI Express.\n\n==== [PCIe_v3.0] Capability Structure ====\n\n* PCI Express defines\n:- a Capability structure\n:: in PCI 3.0 compatible Configuration Space (first 256 bytes)\n\n* This structure\n:- allows identification of a PCI Express device Function\n:- and indicates support for new PCI Express features.\n\n* The PCI Express Capability structure is required for\n:- PCI Express device Functions.\n\n\n\n==== [PCIe_v3.0] Isochronous Applications ====\n\n* Two paradigms of PCIe communication are supported\n: by the PCIe isochronous mechanisms\n::- Endpoint-to-Root-Complex communication model\n::- peer-to-peer (Endpoint-to-Endpoint) communication model\n\n* In the Endpoint-to-Root-Complex communication model,\n:- the primary isochronous traffic is \'\'\'memory read\'\'\'\n:- and \'\'\'write requests\'\'\' to the Root Complex \n:- and \'\'\'read completions\'\'\' from the Root Complex\n\n* Figure A-1: An Example Showing Endpoint-to-Root-Complex and Peer-to-Peer \nCommunication Models (http://komposter.com.ua/documents/PCI_Express_Base_Specification_Revision_3.0.pdf)\n\n\n\n==== [PCIe_v3.0] Protocol Multiplexing ====\n\n==== [PCIe_v3.0] Terminologies ====\n\n\n*; Dynamic Power Allocation (DPA)\n\n\n*; Latency Tolerance Reporting (LTR)\n:- The Latency Tolerance Reporting (LTR) mechanism enables\n:: Endpoints to report\n::: their service latency requirements for Memory Reads and Writes\n:: to the Root Complex\n:: , so that power management policies for central platform resources\n::: (such as main memory, RC internal interconnects, and snoop resources)\n::: can be implemented to consider Endpoint service requirements. \n\n\n*; Optimized Buffer Flush/Fill (OBFF)\n: The Optimized Buffer Flush/Fill (OBFF) Mechanism enables a Root Complex to report to Endpoints (throughout a hierarchy) time windows when the ncremental platform power cost for Endpoint bus mastering and/or interrupt activity is relatively low.\n\n\n*; Power Management Event (PME)\n\n\n\n*; TLP Processing Hints (TPH)\n:- is an optional feature\n:: that provides hints in Request TLP headers\n:: to facilitate optimized processing of Requests that target Memory Space.\n:- enable\n:: the system hardware (e.g., the Root Complex and/or Endpoints)\n:: to optimize platform resources\n::: such as system and memory interconnect on a per TLP basis.\n:- processing hints\n::- DWHR: device writes then host reads soon\n::- HWDR: device reads data that the host is believed to have recently written\n::- D*D*: device writes/reads, then device reads/writes soon\n:- steering tags\n\n:-\n\n== ## bNote-2013-11-27 ==\n\n=== Puzzle ===\n\n* [http://ko.wikipedia.org/wiki/%EB%93%B1%EB%B9%84%EC%88%98%EC%97%B4 등비수열]\n* [http://ko.wikipedia.org/wiki/%EB%93%B1%EC%B0%A8%EC%88%98%EC%97%B4 등차수열]\n\n=== PLX PEX 8796 ===\n\nPEX8796 BB (Base Board) RDK (Rapid Development Kit) 요약\n\n* PEX8796 Switch 기반의 Eval. Board (PCIe Gen3, 96-lane) 구조\n:- PEX8796 switch를 품은 base board (20/24-pin ATX power 필요) \n:- Base board를 Host PC에 연결 시 필요한 adapter card\n:- Base board와 adapter card를 연결하는 cable\n\n* Switch 구조 (PEX8796)\n:- 96-lane 중 16-lane은 upstream port로 사용됨 (Station 0)\n:- Downstream port로서는, Station 1과 5가 16x PCIe slot 각각 하나씩, Station 3이 4x PCIe slot 4개에 대응, Station 2, 4가 8x PCIe slot 각각 2개씩 대응\n:- 이렇게 6개의 Station에 의해서 96-lane PCIe switch 역할 수행\n:- 본 eval. board와 host간 연결을 위해, Station 0과 연결되는 PEX8732 Cable Adapter Card 필요\n\n* NT (Non-transparent) 기능 지원\n:- 기본적으로는 NT operation disable 상태이나, DIP Switch제어를 통해 enable 가능 (SW11)\n\n=== DS SW연 미팅 준비 ===\n\n\n* Flash Sled 관련\n:- ARM Server Cluster와 연계되는 Storage 구성은 어떤 형태를 생각하고 있는지? (SAN style? DAS style?) (Disaggregated Architecture와는 독립적인 질문)\n:- Flash sled가 있다면 어떤 용도로 사용되길 원하는지? (예를 들면)\n::- Very-large-amount of rarely-accessed data를 빠른 속도로 제공할 수 있는 cold storage 역할?\n::- VM이 직접 사용하는 random-write에 강한 block storage 역할? \n::- Read-intensive한 key-value store로서의 역할?\n::- Server node에 tight하게 붙는 server-side cache로서의 역할?\n\n\n* HW, NW, Prototyping 보드 관련\n:- PLX evaluation board의 구조? (즉, CPU, DRAM, 각종 peripheral들이 붙어있는 형태인지? 아니면 기존의 ARM board에 extension card 형태로 결합하여 사용하는 형태인지?)\n:- ARM을 Intel x86으로 쉽게 대체할 수 있는 구조인지?\n:- Customized Linux kernel을 쉽게 올릴 수 있는지? 아니면 특정 회사(e.g., Canonical) 지원을 받아야 하는지?\n:- Debugging등은 어떻게 하면 되는지? JTAG 등을 이용하는지? 아니면 별도의 Serial cable을 이용?\n:- Cluster의 network 구성은 어떻게 되어있는지?\n::- Network Topology\n::- Media의 종류 및 Protocol (1GbE 와 10GbE 혼용?)\n\n\n* Server SW Stack 관련\n:- Data center / cloud software로서 어떤 응용들이 구동되고 있는지?\n:- OpenStack을 구동하고 있는지? 그렇다면 물리적인 deployment는 어떻게 되는지? Hypervisor로서 무엇을 사용하는지? (Xen? KVM?)\n:- SSD와 HDD를 혼용해서 사용 중인지? SSD는 전체 architecture에서 어떤(누가 내려주는) IO를 받도록 구성되어 있는지?\n:- SSD의 모델은 무엇인지? (XS-1715?) 이를 위해서 특별히 수정된 SW (IO Stack 혹은 Virtualization 관련)가 존재하는지?\n:- 현재 운영중인 Cluster에서 병목이 되고 있는 부분이 특별히 존재하는지?\n\n== ## bNote-2013-11-26 ==\n\n=== R script for JY HWANG (moving average) ===\n\n <pre>\nd <- 1:100; winsz <- 10; dlen <- length(d); i <- 1; while ((i + winsz - 1) < dlen) { print(mean(d[i:(i+winsz-1)])); i <- i+1; }\n</pre>\n\n== ## bNote-2013-11-25 ==\n\n=== NVMe performance analysis (XS-1715) ===\n\n: NVMe SSD Vs. SATA SSD - IO 처리 방식 비교 분석 (50%)\n:* Linux kernel 내에서의 IO flow 분석\n:* Block layer에서의 IO handling 소요 시간 비교 분석\n\n: Target storage devices\n:* NVMe SSD (Samsung XS-1715)\n:* SATA SSD (Samsung SSD 830)\n:* SATA HDD (Samsung HDD HD502IJ)\n\n: 실험 방식\n:* dd command로 상기 target storage device에 write oper. 수행 (Direct IO, 156MB 크기 파일)\n:* Kernel trace를 통해 각 function 내에서의 소요 시간 측정 (10회 추출 평균값 사용)\n\n\n: Linux kernel function call flow (NVMe vs. SATA)\n <pre>\n\n/* write to NVMe SSD */\nsys_write() {\n	fget_light();\n	vfs_write() {\n		rw_verify_area() {\n			security_file_permission() {\n				apparmor_file_permission() {\n					common_file_perm();\n				};\n			}\n		}\n		do_sync_write() {\n			generic_file_aio_write() {\n				__generic_file_aio_write() {\n					file_update_time() { }\n					generic_file_direct_write() {\n						filemap_write_and_wait_range();\n						ext2_direct_IO() {\n							__blockdev_direct_IO() {\n								kmem_cache_alloc() {};\n								blk_start_plug();\n								do_direct_IO() { };\n								/* ... */\n								_raw_spin_lock_irqsave();\n								_raw_spin_unlock_irqrestore();\n								submit_bio() {\n									generic_make_request() {\n										generic_make_request_checks() {\n											/* ... */\n											bio_integrity_enabled();\n											blk_throtl_bio() {};\n											/* ... */\n										} /* generic_make_request_checks */\n\n										nvme_make_request() [nvme] {\n											_raw_spin_lock_irq();\n											nvme_submit_bio_queue() [nvme] {\n												blk_recount_segments() {};\n												nvme_alloc_iod() [nvme] {\n													__kmalloc() {\n														get_slab();\n													}\n												}\n												alloc_cmdid() [nvme];\n												nvme_map_bio() [nvme];\n												nvme_setup_prps.isra.30() [nvme];\n											} /* nvme_submit_bio_queue */\n										} /* nvme_make_request */\n\n									} /* generic_make_request */\n								} /* submit_bio */\n							} /* __blockdev_direct_IO */\n						} /* ext2_direct_IO */\n					} /* generic_file_direct_write */\n				} /* __generic_file_aio_write */\n			} /* generic_file_aio_write */\n		} /* do_sync_write */\n	} /* vfs_write */\n} /* sys_write */\n\n\n\n\n/* write to SATA SSD */\nsys_write() {\n	fget_light();\n	vfs_write() {\n		rw_verify_area() {\n			security_file_permission() {\n				apparmor_file_permission() {\n					common_file_perm();\n				};\n			}\n		}\n		do_sync_write() {\n			generic_file_aio_write() {\n				__generic_file_aio_write() {\n					file_update_time() { }\n					generic_file_direct_write() {\n						filemap_write_and_wait_range();\n						ext2_direct_IO() {\n							__blockdev_direct_IO() {\n								kmem_cache_alloc() {};\n								blk_start_plug();\n								do_direct_IO() { };\n								/* ... */\n								_raw_spin_lock_irqsave();\n								_raw_spin_unlock_irqrestore();\n\n								submit_bio() { /* line: 460,707 */\n									generic_make_request() {\n										generic_make_request_checks() {\n											/* ... */\n											bio_integrity_enabled();\n											blk_throtl_bio() {};\n											/* ... */\n										} /* generic_make_request_checks */ //# 4.148 us\n\n										blk_queue_bio() {\n											blk_queue_bounce();\n											attempt_plug_merge();\n											_raw_spin_lock_irq();\n											elv_merge() {\n												elv_rqhash_find.isra.8(); //# 0.060 us\n												deadline_merge() {\n													elv_rb_find();\n												} //# 0.531 us\n											} /* elv_merge */ //# 1.471 us\n											get_request() { } //# 4.720 us\n											init_request_from_bio() { } //# 1.458 us\n											ktime_get(); //# 0.099 us\n											drive_stat_acct() { } //# 1.036 us\n\n										} /* blk_queue_bio */ //# + 12.664 us\n\n									} /* generic_make_request */ //# + 18.294 us\n								} /* submit_bio */ //# + 18.861 us\n								blk_finish_plug() {\n								}\n\n							} /* __blockdev_direct_IO */\n						} /* ext2_direct_IO */\n					} /* generic_file_direct_write */\n				} /* __generic_file_aio_write */\n			} /* generic_file_aio_write */\n		} /* do_sync_write */\n	} /* vfs_write */\n} /* sys_write */\n\n</pre>\n\n\n <pre>\nLinux buddy-guy 3.8.0-29-generic #42~precise1-Ubuntu SMP Wed Aug 14 16:19:23 UTC 2013\nFour Intel Unknown 2000MHz processors, 18620.76 total bogomips, 4674M RAM\nSystem library 2.15.0\n\n\nNAME                                                                      MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT\nsda                                                                         8:0    0 465.8G  0 disk\n|-sda1                                                                      8:1    0   243M  0 part /boot\n|-sda2                                                                      8:2    0     1K  0 part\n`-sda5                                                                      8:5    0 465.5G  0 part\n  |-buddy--guy--vg-root (dm-4)                                            252:4    0 460.7G  0 lvm  /\n  `-buddy--guy--vg-swap_1 (dm-5)                                          252:5    0   4.9G  0 lvm  [SWAP]\nsdb                                                                         8:16   0 465.8G  0 disk\n|-cinder--volumes-volume--0401bba0--ee46--441b--9af9--c512cf0902f0 (dm-0) 252:0    0     4G  0 lvm\n|-cinder--volumes-volume--052b4b5e--c8ab--460f--9824--0fbcd405758d (dm-1) 252:1    0     4G  0 lvm\n|-cinder--volumes-volume--f9daff85--ebf5--40c5--af20--ef606445f4e7 (dm-2) 252:2    0     4G  0 lvm\n`-cinder--volumes-volume--19429e60--0027--47dc--9ed0--1748f90aeaaf (dm-3) 252:3    0     2G  0 lvm\nsdc                                                                         8:32   0 119.2G  0 disk\n|-sdc1                                                                      8:33   0    50G  0 part /mnt/sata_ssd.1\n|-sdc2                                                                      8:34   0    50G  0 part /mnt/sata_ssd.2\n`-sdc3                                                                      8:35   0  19.2G  0 part\nsr0                                                                        11:0    1  1024M  0 rom\nnvme0n1                                                                   251:0    0 372.6G  0 disk\n|-nvme0n1p1                                                               251:1    0    50G  0 part /mnt/nvme_ssd.1\n|-nvme0n1p2                                                               251:2    0    50G  0 part /mnt/nvme_ssd.2\n`-nvme0n1p3                                                               251:3    0 272.6G  0 part\n\n\n> nvme_ssd\n   submit_bio() generic_make_request() nvme_make_request()\n1        10.357                  9.937               5.719\n2        11.380                 10.945               6.140\n3        11.407                 10.984               5.927\n4        10.159                  9.724               5.264\n5        10.074                  9.636               5.531\n6        10.167                  9.717               5.393\n7         9.993                  9.552               5.320\n8        10.138                  9.700               5.216\n9        10.200                  9.759               5.636\n10       10.182                  9.744               5.618\n\n> sata_ssd\n   submit_bio() generic_make_request() blk_queue_bio()\n1        18.174                 17.733          12.910\n2        17.537                 17.093          12.667\n3        18.012                 17.565          12.961\n4        17.085                 16.643          12.556\n5        17.394                 16.953          12.817\n6        17.487                 17.037          12.875\n7        17.240                 16.799          12.340\n8        17.712                 17.274          12.745\n9        17.418                 16.971          12.625\n10       17.387                 16.952          12.811\n\n> sata_hdd\n   submit_bio() generic_make_request() blk_queue_bio()\n1        34.547                 34.013          11.977\n2        34.859                 34.421          12.403\n3        33.473                 33.035          11.503\n4        33.986                 33.554          12.010\n5        33.899                 33.467          11.662\n6        40.069                 39.610          13.987\n7        38.791                 38.350          13.769\n8        37.239                 36.801          12.160\n9        35.787                 35.325          12.874\n10       39.037                 38.593          14.504\n\n> mat\n                 NVMe SSD SATA SSD SATA HDD\nsubmit_bio()      10.4057  17.5446  36.1687\nBIO-queuing-func   5.5764  12.7307  12.6849\n\n> barplot(mat, col=rainbow(2), ylim=c(0,60), beside=T, legend=rownames(mat), main=\"Elapsed time in submit_bio() function - dd write w/ DirectIO option\", sub=\"NVMe:nvme_make_request(), SATA=blk_queue_bio()\", ylab=\"elapsed time (microseconds)\")\n\n</pre>\n\n== ## bNote-2013-11-21 ==\n\n=== XS-1715 test plan ===\n\n* Goal of test\n: To identify bottleneck points\n\n* Software stack\n\n* Benchmark method\n\n\n\n=== Study: storage system related technical standards ===\n\n==== NVMe (Non-Volatile Memory Express) ====\n\n: [http://www.nvmexpress.org/wp-content/uploads/NVM-Express-1_1a.pdf NVM Express Revision 1.1a September 23, 2013]\n\n\n===== Introduction to NVMe spec. =====\n\n:; Scope of NVMe specification\n\n:: Defines a register interface\n::: for communication with a non-volatile memory (NVM) subsystem\n\n:: Defines a standard command set\n::: for use with the NVM subsystem\n\n:; Outside of scope of NVMe specification\n\n:: Does not specify the specific usage model\n::: whether the NVM system is used as a SSD, a main memory, a cache memory, a backup memory, a redundant memory, etc.\n\n:: This interface is specified above\n::: any NVM management, like wear leveling (erases and other mgmt. tasks for NVM technologies (like NAND) are abstracted)\n\n:: Does not contain any information on\n::: Caching algorithms or techniques\n\n\n===== NVMe Theory of Operation =====\n\n\'\'\'NVMe\'\'\'\n: is a scalable \'\'\'host controller interface (HCI)\'\'\'\n:: designed to address the needs of Enterprise and Client systems which utilize PCIe based SSDs.\n: provides optimized \'\'\'command submission and completion paths\'\'\'\n: provides support for \'\'\'parallel operation\'\'\'\n:: by supporting up to 65,535 I/O queues with up to 64K(65,535) outstanding commands per I/O queue\n: has the following \'\'\'key attributes\'\'\':\n:* Does not require uncacheable / MMIO register reads in the command submission or completion path\n:* A maximum of one MMIO register write is necessary in the command submission path\n:* Support for up to 65,535 I/O queues, with each I/O queue supporting up to 64K outstanding commands\n:* Priority associated with each I/O queue with well-defined arbitration mechanism\n:* All information to complete a 4KB read request is included in the 64B command itself, ensuring efficient small I/O operation\n:* Efficient and streamlined command set (???)\n:* Support for MSI/MSI-X and interrupt aggregation (???)\n:* Support for multiple namespaces\n:* Efficient support for I/O virtualization architectures like SR-IOV\n:* Robust error reporting and management capabilities\n:* Support for multi-path I/O and namespace sharing\n\n\nThis spec. defines \'\'\'a streamlined set of registers\'\'\' whose functionality includes:\n:* Indication of controller capabilities\n:* Status for controller failures (command status is processed via CQ directly)\n:* Admin Queue configuration (I/O Queue configuration processed via Admin commands)\n:* Doorbell registers for scalable number of Submission and Completion Queues\n\n\nAn NVMe controller is associated with a single PCI Function.\n: The capabilities that a controller supports are indicated\n:: in the \'\'\'Controller Capabilities (CAP) register\'\'\'\n:: and as part of the Controller and Namespace \'\'\'data structures\'\'\' returned by the Identify command\n: The Identify \'\'\'Controller\'\'\' data structure\n:: indicates capabilities and settings that apply to the \'\'\'entire controller\'\'\'\n: The Identify Namespace data structure\n:: indicates capabilities and settings that are specific to a \'\'\'particular namespace\'\'\'\n\n\nNVMe is based on a paired Submission and Completion Queue mechanism.\n:- Commands are placed by host SW into a Submission Queue\n:- Completions are placed into the asociated Completion Queue by the controller\n:- Multiple Submission Queues may utilize the same Completion Queue\n:- Submission and Completion Queues are allocated in host memory\n(SR/MR-IOV로 가게 되면 어떤 기능/부분이 HW로 내려가는지 확인 필요)\n\n==== PCIe (Peripheral Component Interconnect Express) ====\n\n\n==== SCSI (Small Computer System Interface) ====\n\n\n==== FC (Fibre Channel) ====\n\n* [http://hsi.web.cern.ch/HSI/fcs/spec/overview.htm Fibre Channel Overview ((B.GOOD))]\n\n* Fibre Channel related host-side SW (inside Linux kernel)\n\n\n===== Introduction to FC (Fibre Channel) =====\n\n: In recent years several technical developments have converged to a bigger than ever need for extremely fast data links. High performance computers have become the focus of much attention in the data communications industry. Performance improvements have spawned increasingly data-intensive and high-speed networking applications, such as multimedia and scientific visualization. However, the existing network interconnects between computers and I/O devices are unable to run at the speeds needed.\n\n:; Intention of the FC\n: The intention of the Fibre Channel (FC) is to develop practical, inexpensive, yet expendable means of quickly transferring data between workstations, mainframes, supercomputers, desktop computers, storage devices, displays and other peripherials. Fibre Channel is the general name of an integrated set of standards [1] being developed by the American National Standards Institute (ANSI).\n\n:; Channels Vs. Networks\n: There are two basic types of data communication between processors and between processors and peripherials: channels and networks. A channel provides a direct or switched point-to-point connection between the communicating devices. A channel is tipically hardware-intensive and transports data at the high speed with low overhead. In contrast, a Network is an aggregation of distributed nodes (like workstations, file servers or peripherials) with it\'s own protocol that supports interaction among these nodes. A network has relatively high overhead since it is software-intensive, and consequently slower than a channel. Networks can handle a more extensive range of tasks than channels as they operate in an environment of unanticipated connections, while channels operate amongst only a few devices with predefined addresses. Fibre Channel attempts to combine the best of these two methods of communication into a new I/O interface that meets the needs of channel users and also network users.\n\n:; Architecture of FC\n: Although it is called Fibre Channel, it\'s architecture doesn\'t represent neither a channel nor a real network topology. It allows for an active intelligent interconnection scheme, called a \'\'\'Fabric\'\'\', to connect devices. All a Fibre channel port has to do is to manage a simple point-to-point connection between itself and the Fabric.\n\n:; Role and Benefits of FC\n: Fibre channel is a high performance serial link supporting its own, as well as higher level protocols such as the FDDI, SCSI, HIPPI and IPI (see chapter 7). The Fibre Channel standard addresses the need for very fast transfers of large amounts of information. The fast (up to 1 Gbit/s) technology can be converted for Local Area Network technology by adding a switch specified in the Fibre Channel standard, that handles multipoint addressing. There is a perspective as an I/O technology and a Local Area Network technology as well. Another advantage of Fibre Channel is, that it gives users one port that supports both channel and network interfaces, unburdening the computers from large number of I/O ports. FC provides control and complete error checking over the link [2] [3].\n\n\n\n===== FC Topology =====\n\n: In Fibre Channel terms the switch connecting the devices is called \'\'\'Fabric\'\'\'. The \'\'\'link\'\'\' is the two unidirectional fibres transmitting to opposite directions with their associated transmitter and receiver. Each fibre is attached to a transmitter of a port at one end and a receiver of another port at the other end. When a Fabric is present in the configuration, the fibre may attach to a node port (N_Port) and to a port of the Fabric (F_Port).\n\n: Since Fibre channel system relies on ports logging in with each other and the Fabric, it is irrelevant whether the Fabric is a circuit switch, an active hub or a loop. The topology can be selected depending on system performance requirements or packaging options. Possible FC topologies include point-to-point, crosspoint switched or arbitrated loop (Figure 1).\n\n<img src=\"http://hsi.web.cern.ch/HSI/fcs/spec/ov1.gif\" width=\"\"/>\n\n\n\n===== FC-0 Layer =====\n\n: FC is structured as a set of hierarchical functions (Figure 2). The lowest level (FC-0) defines the \'\'\'physical link\'\'\' in the system, including the fibre, connectors, optical and electrical parameters for a variety of data rates. Figure 3 shows the schematic of the Fibre Channel optical link [2].\n\n<img src=\"http://hsi.web.cern.ch/HSI/fcs/spec/ov2.gif\" width=\"\"/>\n\n\n:; Open Fibre Control\n: The FC-0 specifies a safety system - the Open Fibre Control system (OFC) - for SW laser data links, since the optical power levels exceed the limits defined by the laser safety standards. If an open fibre condition occurs in the link, the receiver of the Port the fibre is connected detects it and pulses its laser at a low duty cycle that meets the safety requirements. The receiver of the other port (at the other end of the fibre) detects this pulsing signal and also pulses it\'s transmitter at a low duty cycle. When the open fibre path is restored both ports receive the pulsing signals, and after a double handshaking procedure the connection is automatically restored within a few seconds [1].\n\n<img src=\"http://hsi.web.cern.ch/HSI/fcs/spec/ov3.gif\"/>\n\n\n\n===== FC-1 Layer =====\n\n: FC-1 defines the \'\'\'transmission protocol including serial encoding and decoding rules, special characters and error control\'\'\'. The information transmitted over a fibre is encoded 8 bits at a time into a 10 bit Transmission Character. The primary rationale for use of a transmission code is to improve the transmission characteristic of information across a fibre. The transmission code must be DC balanced to support the electrical requirements of the receiving units. The Transmission Characters ensure, that short run lengths and enough transitions are present in the serial bit stream to make clock recovery possible [1] [2].\n\n===== FC-2 Layer =====\n\n: The Signaling Protocol (FC-2) level serves as the transport mechanism of Fibre Channel. The framing rules of the data to be transferred between ports, the different mechanisms for controlling the three service classes (see chapter 5.7) and the means of managing the sequence of a data transfer are defined by FC-2. To aid in the transport of data across the link, the following building blocks are defined by the standard [1] :\n\n:; Ordered Set\n:: The Ordered Sets are four byte transmission words containing data and special characters which have a special meaning\n\n:; Frame\n:: The basic building blocks of an FC connection are the Frames. The Frames contain the information to be transmitted (Payload), the address of the source and destination ports and link control information (Data frames, Link control frames)\n\n:; Sequence\n:: A Sequence is formed by a set of one or more related Frames transmitted unidirectionally from one N_Port to an other. Each Frame within a sequence is uniquely numbered with a Sequence Count. Error recovery, controlled by an upper protocol layer is usually performed at Sequence boundaries\n\n:; Exchange\n:: An Exchange is composed of one or more nonconcurrent sequences for a single operation. The Exchanges may be unidirectional or bidirectional between two N_Ports. Within a single Exchange, only one sequence may be active at any one time, but Sequences of different Exchanges may be concurrently active.\n\n:; Protocol\n:: The Protocols are related to the services offered by Fibre Channel. Protocols may be specific to higher-layer services, although Fibre Channel provides its own set of protocols to manage its operating environment for data transfer.\n\n:; Flow control\n:: Flow control is the FC-2 control process to pace the flow of Frames between N_Ports and between an N_Port and the Fabric to prevent overrun at the receiver. Flow control is dependent upon the service classes (see chapter 5.7). Class 1 Frames use end-to-end flow control, class 3 uses only buffer-to-buffer, class 2 Frames use both types of flow control.\n\n:; Service classes\n:: To ensure efficient transmission of different types of traffic, FC defines 3 classes of service.\n::- Class 1\n::: Class 1 is a service which provides \'\'\'dedicated connections\'\'\', in effect providing the equivalent of a \'\'\'dedicated physical connection\'\'\'. Once established, a Class 1 connection is retained and guaranteed by the Fabric. This service guarantees the maximum bandwidth between two N_Ports, so this is \'\'\'the best for sustained, high throughput transactions\'\'\'.\n::: <img src=\"http://hsi.web.cern.ch/HSI/fcs/spec/ov5.gif\" width=\"300\"/>\n::- Class 2\n::: Class 2 is a Frame-switched, connectionless service that allows bandwidth to be shared by multiplexing Frames from multiple sources onto the same channel or channels. The Fabric may not guarantee the order of the delivery and \'\'\'Frames may be delivered out of order\'\'\'. This service class can be used, when the \'\'\'connection setup time is greater than the latency of a short message\'\'\'. Both Class 1 and Class 2 send acknowledgment Frames confirming Frame delivery. If delivery cannot be made due to congestion, a Busy frame (see chapter 5.2) is returned and the sender tries again. (Figure 6)\n::: <img src=\"http://hsi.web.cern.ch/HSI/fcs/spec/ov6.gif\" width=\"300\"/>\n::- Class 3\n::: Class 3 service is identical to Class 2, except that the Frame delivery is not confirmed. (Flow control is managed only on buffer level, see Figure 7) This type of transfer, known as datagram provides the \'\'\'quickest transmission\'\'\' by not sending confirmation. This service is useful for real- time broadcasts, where \'\'\'timeliness is key\'\'\' and \'\'\'information not received in time is valueless\'\'\'.\n::: <img src=\"http://hsi.web.cern.ch/HSI/fcs/spec/ov7.gif\" width=\"300\"/>\n\n\n===== FC-3 Layer =====\n\n: The FC-3 level of the FC standard is intended to provide the common services required for advanced features such as:\n\n:* Striping\n:: To multiply bandwidth using multiple N_ports in parallel to transmit a single information unit across multiple links.\n:* Hunt groups\n:: The ability for more than one Port to respond to the same alias address. This improves efficiency by decreasing the chance of reaching a busy N_Port.\n:* Multicast\n:: Multicast delivers a single transmission to multiple destination ports. This includes sending to all N_Ports on a Fabric (broadcast) or to only a subset of the N_Ports on a Fabric. [1]\n\n\n===== FC-4 Layer =====\n\n: FC-4, the highest level in the FC structure defines the \'\'\'application interfaces\'\'\' that can execute over Fibre Channel. It specifies the mapping rules of upper layer protocols using the FC levels below. Fibre Channel is \'\'\'equally adept at transporting both\'\'\' network and channel information and allows both protocol types to be concurrently transported \'\'\'over the same physical interface\'\'\'.\n\nThe following network and channel protocols are currently specified or proposed as FC-4s [2]:\n\n:* Small Computer System Interface (SCSI)\n:* Intelligent Peripheral Interface (IPI)\n:* High Performance Parallel Interface (HIPPI) Framing Protocol\n:* Internet Protocol (IP)\n:* ATM Adaptation Layer for computer data (AAL5)\n:* Link Encapsulation (FC-LE)\n:* Single Byte Command Code Set Mapping (SBCCS)\n:* IEEE 802.2\n\n==== NCQ ====\n\n* [http://exemen.wordpress.com/2011/05/16/enabling-disabling-and-checking-ncq/ Enabling, disabling, and checking NCQ]\n: How do I enable NCQ? How do I disable NCQ? How do I know if NCQ is enabled? Why are only 31 tags used, rather than 32?\n: Linux NCQ (SATA native command queueing) support is enabled automatically, if your SATA drive supports it. At boot, you will see a line in dmesg (or kernel log) like\n ata2.00: ATA-7, max UDMA/133, 321672960 sectors: LBA48 NCQ (depth 31/32)\n: If the line containing the sector count and maximum UDMA speed does not mention NCQ, your drive does not support it.\n: If NCQ is present but disabled, you may see “depth 0″:\n ata2.00: ATA-7, max UDMA/133, 321672960 sectors: LBA48 NCQ (depth 0/32)\n: You may disable NCQ, and use normal READ/WRITE DMA commands, by setting the queue depth to 1:\n $ echo 1 > /sys/block/sdX/device/queue_depth\n: Enabling NCQ, if supported, is the same:\n $ echo 31 > /sys/block/sdX/device/queue_depth\n: Both the host controller and device constrain the number of NCQ commands that can be outstanding. The SATA specification maximum is 32 tags. Most devices support 32 tags, but the standard permits devices to support less. Similarly, most host controllers support 32 tags.\n: However, the ATA standard has a design flaw. The NCQ tag is presumed to be a 32-bit bitmap (32-bit dword). If all 32 tags are asserted, this produces a value (0xffffffff) that is the same value returned by reading a hardware register after the hardware has been hot-unplugged, or suffers a major failure. Thus, to distinguish this condition, libata artificially limits all NCQ configurations to 31 tags rather than 32.\n\n=== Study: virtualization ===\n\n==== KVM ====\n\n* Question: [http://www.linux-kvm.org/page/How_to_assign_devices_with_VT-d_in_KVM How to assign devices with VT-d in KVM?]\n\n: VT-d support\n:- In order to assign devices in KVM, you\'ll need a system which supports VT-d. This has nothing to do with the VT-x support of your CPU, VT-d needs to be supported by both your chipset on your motherboard and by your CPU.\n:- If you are in doubt whether your motherboard or CPU supports VT-d or not, the Xen VT-d wikipage has some pointers of VT-d enabled chipsets, motherboards and CPUs: http://wiki.xensource.com/xenwiki/VTdHowTo\n:- If your hardware doesn\'t have an IOMMU (\"Intel VT-d\" support in case of Intel - \"AMD I/O Virtualization Technology\" support in case of AMD), you\'ll not be able to assign devices in KVM. Some work towards allowing this were done, but the code never made it into KVM, due to various issues with the code. At the moment it doesn\'t seem like device assignment without hardware support, will ever be integrated into KVM.\n:- Assignment of graphics cards are not officially supported at the moment, but there has been some success passing through a secondary Radeon HD 5850 as a VM\'s secondary display.\n\n==== QEMU ====\n\n==== IOMMU ====\n\n* Question: [http://askubuntu.com/questions/85776/what-is-iommu-and-will-it-improve-my-vm-performance What is IOMMU and will it improve my VM performance?]\n: My Motherboard\'s chipset supports this feature IOMMU, i\'ve read (but not really understand) that it improves the VM performance by letting the VM make use of the actual physical hardware instead of the Virtual hardware.\n: Does this really bring a performance improvement in the VM? and if it does how can I make Virtualbox benefit from that?.\n\n* Answer\n: So long story short, the only way an IOMMU will help you is if you start assigning HW resources directly to the VM. Just having it doesn\'t make things faster.\n: It would help to know exactly what Motherboard/CPU is advertising this feature. IOMMU is a system specific IO mapping mechanism and can be used with most devices.\n: IOMMU sounds like a generic name for Intel VT-d and AMD IOV. In which case I don\'t think you can multiplex devices, it\'s a lot like PCI passthrough before all these fancy virtualization instructions existed :). SR-IOV is different, the peripheral itself must carry the support. The HW knows it\'s being virtualized and can delegate a HW slice of itself to the VM. Many VMs can talk to an SR-IOV device concurrently with very low overhead.\n: The only thing faster than SR-IOV is PCI passthrough though in that case only one VM can make use of that device, not even the host operating system can use it. PCI passthrough would be useful for say a VM that runs an intense database that would benefit from being attached to a FiberChannel SAN.\n: Getting closer to the HW does have limitations however, it makes your VMs less portable for deployments that require live migration for example. This applies to both SR-IOV and PCI passthrough.\n: Default virtualized Linux deployments usually use VirtIO which is pretty fast to begin with.\n\n==== VT-x ====\n\n\n==== VT-d ====\n\n== ## bNote-2013-11-15 ==\n\n=== F2FS IO Workload Analysis ===\n\n{| class=\"wikitable sortable\"\n|+ Block IO trace\n|-\n| Topic\n| align=\"center\" | Case 1\n| align=\"center\" | Case 2\n|-\n| Time elapsed\n| align=\"right\" | 13.3 hours\n| align=\"right\" | 27.9 hours\n|-\n| # of IO reqs (all)\n| align=\"right\" | 259,833\n| align=\"right\" | 569,513 \n|-\n| # of reads\n| align=\"right\" | 95,820\n| align=\"right\" | 296,216\n|-\n| # of writes\n| align=\"right\" | 157,519\n| align=\"right\" | 257,133\n|-\n| # of trims\n| align=\"right\" | 6,494\n| align=\"right\" | 16,164\n|-\n|}\n\n\n{| class=\"wikitable sortable\"\n|+ Goodness of Fit Test (for Zipf Dist.) for Case 1\n|-\n| Items || degree of freedom || s value || min X^2 (P-value > 0.05)\n|-\n| All (R+W+T) Interval || 1,491 || 1.83 || 0.167\n|-\n| All (R+W+T) IO Size || 160 || 1.63 || 0.1034\n|-\n| Read Interval || 1,661 || 1.8 || 0.3951\n|-\n| Read IO Size || 84 || 1.64 || 0.0323\n|-\n| Write Interval || 1,505 || 1.7 || 0.1502\n|-\n| Write IO Size || 109 || 1.63 || 0.4085\n|-\n| Trim Interval || 1,180 || 1.07 || 0.1629\n|-\n| Trim IO Size || 124 || 1.85 || 0.0608\n|-\n|}\n\n== ## bNote-2013-11-07 ==\n\n\n=== Flash Sled Architecture ===\n\n==== Facebook Talk ====\n\n* http://youtu.be/twNKM3KJhJ4\n: The Facebook talk on Tue is designed to be a Q&A from this one… so, if you have time, it’s good to watch this…\n\n\n==== EMC XtremIO Array ====\n\n\nPretty conventional. Would be interesting to see how it compares to Pure and SolidFire. It uses separate controller so there may be a scale out issue – plus for SolidFire.\n\nJim\n \n* http://www.theregister.co.uk/2013/11/11/xtremio_array/\n\n \n <pre>\nMega-vendor EMC is going to launch its XtremIO all-flash array with general availability on 14 November. It has been on limited or directed availability for a few months and there\'s a fair amount of information coming out about it.\n\nHere’s what we know so far.\n\nThe array is based on acquired XtremIO technology and features:\n\n·         6U X-Brick nodes with N-way active controllers, 250,000 random 4K read IOPS and sub-millisecond response time; \n\n·         X-Brick has 25 x 400GB eMLC SSDs, 10TB raw capacity, 7TB usable; \n\n·         Controllers are 1U dual-socket servers; \n\n·         High-availability with non-disruptive XIOS software and firmware upgrades, hot-swap upgrades, and no single point of failure; \n\n·         4 x 8 Gbit’s Fibre Channel and 4 x 10Gbit/E iSCSI block access interfaces; \n\n·         \n\nFour X-Bricks in XtremIO array\n\n·         Scalability to 4 clustered X-Bricks, linked by dual InfiniBand, delivers 1 million IOPS; \n\n·         Scalability to 8 X-Bricks has been spoken of, with an implied 2 million IOPS; \n\n·         Future scalability to 16 and beyond X-Bricks; \n\n·         Can be different capacity X-Bricks in cluster; \n\n·         Integrated workload and data balancing across SSDs and controllers; \n\n·         Always-on integrated inline cross-cluster deduplication using 4KB blocks; \n\n·         Thin-provisioning using 4KB allocation and with no fragmentation or reclamation penalty; \n\n·         VMware VAAI integration, VMware multipath I/O support with EMC claiming that the array is “the only all-flash array to fully integrate” with VAAI; \n\n·         Data volumes are thin and wide-striped across whole system; \n\n·         In-memory metadata management with metadata lookups not hitting SSDs; \n\n·         Deduplication-aware snapshot and cloning features - but no replication until 2014 – and then it will be async; and \n\n·         Management through a GUI, vCenter plugin, CLI or REST API. \n\nOddly, two X-Bricks take up 12U of rackspace but four take up only 22U.\n\nFlash-specific XtremIO Data Protection (XDP) is included and, with it, SSDs can fail in-place with no data loss. XDP is “self-healing,” with double-party data protection and needs “just an eight per cent capacity overhead.”\n\nIf an SSD fails the rebuild is distributed across other SSDs and is content-aware. For example, only user data is copied, not free space. XDP doesn’t require any configuration, nor does it need hot spare drives. Instead, we understand, it uses \"hot spaces\" – free space in the array.\n\nData is stored in 4KB chunks using hashes. Hash comparisons are used for deduplication and hash values are used for distributing writes. We understand each controller runs its own copy of XIOS with the hash range distributed across XIOS copies – so hash value affects data placement. Data is only written when a full stripe exists. The idea is to reduce write levels and prevent host-spots developing.\n\nA front-end VPLEX box can be used to provide replication now, along with RecoverPoint. XtremIO may not get synchronous replication as that would affect performance.\n\nWe’re told one X-Brick can support 2,000 or more (Citrix) virtual desktops. A reference architecture for XtremIO-supported virtual desktops can be found here (31-page PDF).\n\nA VMware View VDI reference architecture can be found here (30-page PDF) and it supports 7,000 virtual desktops. The document says 1,000 linked clones were deployed in 75 minutes. Two X-bricks were included in a Vblock Specialized System for Extreme Applications, with an 8-node Isilon S-Series NAS storage system for user data and Horizon View persona data, and 48 Cisco UCS server blades.\n\nThere has been no mention of tiering the XtremIO arrays with back-end VNX/VMAX/Isilon arrays with automated data movement using EMC’s FAST technology. That is most probably a roadmap feature. \n\n</pre>\n\n== ## bNote-2013-11-06 ==\n\n=== Valgrind ===\n\n: valgrind --tool=cachegrind command arg\n <pre>\n\n==19645== I   refs:      152,653,497\n==19645== I1  misses:         25,833\n==19645== L2i misses:          2,475\n==19645== I1  miss rate:        0.01%\n==19645== L2i miss rate:        0.00%\n==19645==\n==19645== D   refs:       56,857,129  (35,838,721 rd + 21,018,408 wr)\n==19645== D1  misses:         14,187  (    12,451 rd +      1,736 wr)\n==19645== L2d misses:          7,701  (     6,325 rd +      1,376 wr)\n==19645== D1  miss rate:         0.0% (       0.0%   +        0.0%  )\n==19645== L2d miss rate:         0.0% (       0.0%   +        0.0%  )\n==19645==\n==19645== L2 refs:            40,020  (    38,284 rd +      1,736 wr)\n==19645== L2 misses:          10,176  (     8,800 rd +      1,376 wr)\n==19645== L2 miss rate:          0.0% (       0.0%   +        0.0%  )\n\n</pre>\n\n\n=== NVMe Study ===\n\n==== NVMe Command Set Overview ====\n\n{| class=\"wikitable sortable\"\n|+ Management Commands for Queues & Transport (Admin Command)\n|-\n| rowspan=\"15\" | \'\'\'Admin Command\'\'\'<br/>Management Commands<br/>for Queues & Transport\n| rowspan=\"5\" | Queue Management\n| Create I/O Submission Queue\n|-\n| Create I/O Completion Queue\n|-\n| Delete I/O Submission Queue\n|-\n| Delete I/O Completion Queue\n|-\n| Abort\n|-\n| rowspan=\"2\" | Status & Event Reporting\n| Asynchronous Event Request\n|-\n| Get Log Page\n|-\n| rowspan=\"3\" | Configuration\n| Identify\n|-\n| Set Features\n|-\n| Get Features\n|-\n| rowspan=\"2\" | Firmware Management\n| (Optional) Firmware Activate\n|-\n| (Optional) Firmware Image Download\n|-\n| rowspan=\"2\" | Security\n| (Optional) Security Send\n|-\n| (Optional) Security Receive\n|-\n| Namespace Management\n| (Optional) Format NVM\n|-\n| rowspan=\"6\" | \'\'\'NVM Command\'\'\'<br/>I/O Commands for<br/>SSD Functionality\n| Data Ordering\n| Flush\n|-\n| rowspan=\"4\" | Data Transfer, including<br/>end-to-end<br/>data protection<br/>& security\n| Read\n|-\n| Write\n|-\n| (Optional) Write Uncorrectable\n|-\n| (Optional) Compare\n|-\n| Data Usage Hints\n| (Optional) Dataset Management\n|-\n|}','utf-8'),(2044,'== Table of Contents ==\n\n# [[Bnote 2013-01]]\n# [[Bnote 2013-02]]\n# [[Bnote 2013-03]]\n# [[Bnote 2013-04]]\n# [[Bnote 2013-05]]\n# [[Bnote 2013-06]]\n# [[Bnote 2013-07]]\n# [[Bnote 2013-08]]\n# [[Bnote 2013-09]]\n# [[Bnote 2013-10]]\n# [[Bnote 2013-11]]\n# [[Bnote 2013-12]]','utf-8'),(2045,'== Wikini (radiohead) Hot Pages ==\n\n* [[Bnote 2014]] | [[Bnote patidea 2014]] | [[Bnote - References ( Papers / Patents / Articles )]]\n* [[Bnote 2013]] | [[Bnote patidea 2013]]\n* [[X intelligence]]\n* [http://kandinsky/wikini/index.php/Special:AllPages AllPages] | [http://kandinsky/wikini/index.php/Special:ListFiles ListFiles] | [http://kandinsky/wikini/index.php?title=Special%3ASearch&search=bnote&go=Go Bnote Search]\n\n----\n* [https://mail.google.com/mail Gmail] [https://www.google.com/calendar/ Gcal] | [http://www.naver.com/ Naver] | [http://github.com/ GitHub] | [http://mobile.olleh.com/index.asp?code=A000000 Olleh_SMS]\n* [http://klimt/ Klimt (Rolling-Stones)]\n\n== Tasks ==\n\n<!--\n# (Due: 2013-07-11) [[IEEE ICCE 2014 Paper]]\n# (~ 2013-07-14) data formatting tool for R FIM (from stdin)\n# (2013-06-08) check [http://www.rstudio.com/shiny/ Shiny], [http://plyr.had.co.nz/ plyr] - [http://www.rstudio.com/projects/ R projects from RStudio team]\n# (2013-06-09) 폐 종이컵 (used) 모아오기\n-->','utf-8'),(2046,'== Wikini (radiohead) Hot Pages ==\n\n* [[Bnote 2014]] | [[Bnote patidea 2014]] | [[Bnote - References ( Papers / Patents / Articles )]]\n* [[Bnote 2013]] | [[Bnote patidea 2013]]\n* [[X intelligence]]\n----\n* [http://kandinsky/wikini/index.php/Special:AllPages AllPages] | [http://kandinsky/wikini/index.php/Special:ListFiles ListFiles] | [http://kandinsky/wikini/index.php?title=Special%3ASearch&search=bnote&go=Go Bnote Search]\n\n----\n* [https://mail.google.com/mail Gmail] [https://www.google.com/calendar/ Gcal] | [http://www.naver.com/ Naver] | [http://github.com/ GitHub] | [http://mobile.olleh.com/index.asp?code=A000000 Olleh_SMS]\n* [http://klimt/ Klimt (Rolling-Stones)]\n\n== Tasks ==\n\n<!--\n# (Due: 2013-07-11) [[IEEE ICCE 2014 Paper]]\n# (~ 2013-07-14) data formatting tool for R FIM (from stdin)\n# (2013-06-08) check [http://www.rstudio.com/shiny/ Shiny], [http://plyr.had.co.nz/ plyr] - [http://www.rstudio.com/projects/ R projects from RStudio team]\n# (2013-06-09) 폐 종이컵 (used) 모아오기\n-->','utf-8'),(2047,'== Wikini (radiohead) Hot Pages ==\n\n* [http://kandinsky/wikini/index.php/Special:AllPages AllPages] | [http://kandinsky/wikini/index.php/Special:ListFiles ListFiles] | [http://kandinsky/wikini/index.php?title=Special%3ASearch&search=bnote&go=Go Bnote Search]\n----\n* [[Bnote 2014]] | [[Bnote patidea 2014]] | [[Bnote - References ( Papers / Patents / Articles )]]\n* [[Bnote 2013]] | [[Bnote patidea 2013]]\n* [[X intelligence]]\n----\n* [https://mail.google.com/mail Gmail] [https://www.google.com/calendar/ Gcal] | [http://www.naver.com/ Naver] | [http://github.com/ GitHub] | [http://mobile.olleh.com/index.asp?code=A000000 Olleh_SMS]\n* [http://klimt/ Klimt (Rolling-Stones)]\n\n== Tasks ==\n\n<!--\n# (Due: 2013-07-11) [[IEEE ICCE 2014 Paper]]\n# (~ 2013-07-14) data formatting tool for R FIM (from stdin)\n# (2013-06-08) check [http://www.rstudio.com/shiny/ Shiny], [http://plyr.had.co.nz/ plyr] - [http://www.rstudio.com/projects/ R projects from RStudio team]\n# (2013-06-09) 폐 종이컵 (used) 모아오기\n-->','utf-8'),(2048,'== ## bNote-2013-10-28 ==\n\n=== Study how to study TOEFL ===\n\n* [[How to study TOEFL]]\n\n\n== ## bNote-2013-10-16 ==\n\n=== Memo ===\n\n* 10월달 들어서 첫 Wiki질.\n\n\n=== VNAND study ===\n\n* 용어에 익숙해져야 하겠음\n* Cells\n: NAND - Fermat\n: VNAND - Maxwell\n\n* \n\n==== Differences between PNAND vs VNAND ====\n\n{| class=\"wikitable sortable\"\n|+ comparison table: PNAND vs VNAND\n|-\n| NAND type\n| -\n| PNAND <br/>(2bit, 64Gb 기준)\n| VNAND <br/>(2bit, 64Gb/128Gb 기준)\n|-\n| Cell\n| TR\n| Floating Gate\n| CTF\n|-\n| rowspan=\"4\" | Dimension\n| D\n| Planar (2D)\n| Vertical (3D)\n|-\n| x\n| WL\n| SSL\n|-\n| y\n| BL\n| BL\n|-\n| z\n| -\n| WL\n|-\n| rowspan=\"8\" | Structure\n| Plane\n| 4\n| 2\n|-\n| rowspan=\"2\" | Block\n| 8192\n| 2732 / 5462\n|-\n| 1MB\n| 3MB\n|-\n| WL\n| 64\n| 24\n|-\n| SSL\n| 1\n| 8\n|-\n| rowspan=\"2\" | Page\n| 128\n| 384\n|-\n| 8 KB + 768 B\n| 8 KB + 640 B\n|-\n| Page address\n| Shadow\n| Simple\n|-\n| rowspan=\"2\" | Firmware\n| Program\n| Shadow\n| HSP\n|-\n| LSB backup\n| O\n| X\n|-\n|}\n\n\n==== Address map ====\n\n\n{| class=\"wikitable sortable\"\n|+ PNAND address map (64GB, 2b)\n|-\n| rowspan=\"20\" | Pass TR\n| dummy block 3 (mat1)\n| rowspan=\"20\" | X-Decoder\n|-\n| dummy block 2 (mat1)\n|-\n| block 4084\n|-\n| block 4080\n|-\n| ...\n|-\n| block 0\n|-\n| block 8188\n|-\n| repair 0 (mat1)\n|-\n| PE cycling\n|-\n| Security\n|-\n| block 8184\n|-\n| block 8180\n|-\n| information (main)\n|-\n| dummy block 1\n|-\n| block 8176\n|-\n| ...\n|-\n| block 4096\n|-\n| block 4092\n|-\n| block 4088\n|-\n| dummy block 0 (mat1)\n|-\n|}\n\n\n== ## bNote-2013-10-14 ==\n\n=== Jonathan 2 TF ===','utf-8'),(2049,'\n\n <pre>\n   November 2013      \nSu Mo Tu We Th Fr Sa  \n                1  2  \n 3  4  5  6  7  8  9  \n10 11 12 13 14 15 16  \n17 18 19 20 21 22 23  \n24 25 26 27 28 29 30  \n</pre>\n\n\n\n\n== ## bNote-2013-11-28 ==\n\n\n\n\n=== NVMe performance analysis (XS-1715) (ver 2.0) ===\n\n: lightweighted ftrace (with compact set_ftrace_filter)\n\n <pre>\nroot@buddy-guy:tracing %1# cat set_ftrace_filter \nsys_read\nsys_write\ndio_await_completion\next3_direct_IO\next4_direct_IO\ngeneric_make_request\nsubmit_bio\nblk_queue_bio\nnvme_make_request [nvme]\next2_direct_IO [ext2]\n</pre>\n\n <pre>\nroot@buddy-guy:trace_kernel %1# cat ft.opt.filter.txt \nsys_read\nsys_write\next2_direct_IO\next3_direct_IO\next4_direct_IO\nsubmit_bio\ngeneric_make_request\nnvme_make_request\ndio_await_completion\nblk_queue_bio\n</pre>\n\n==== command history ====\n\n <pre>\n\nroot@buddy-guy:mnt %1# l\ntotal 36\ndrwxr-xr-x  9 root     root     4096 Nov 25 20:02 ./\ndrwxr-xr-x 24 root     root     4096 Nov 27 15:18 ../\n-rwxr-xr-x  1 root     root      111 Nov 25 18:54 .mount_ramdisk.sh*\ndrwxrwxr-x  4 blusjune blusjune 4096 Oct 17 16:18 nfs_b02/\ndrwxr-xr-x  3 root     root     4096 Nov 27 20:31 nvme_ssd.1/\ndrwxr-xr-x  3 root     root     4096 Nov 25 19:53 nvme_ssd.2/\ndrwxrwxrwt  2 root     root      100 Nov 27 20:37 ramdisk.1/\ndrwxrwxr-x  2 root     root     4096 Nov 25 20:48 sata_hdd.1/\ndrwxr-xr-x  3 root     root     4096 Nov 25 20:29 sata_ssd.1/\ndrwxr-xr-x  3 root     root     4096 Nov 25 19:54 sata_ssd.2/\n\n\n\n\nroot@buddy-guy:mnt %1# sleep 1; taskset -c 0 dd if=ramdisk.1/iot.0 of=nvme_ssd.1/iot.1 bs=4096 oflag=direct \n20480+1 records in\n20480+1 records out\n83886146 bytes (84 MB) copied, 0.895126 s, 93.7 MB/s\n\nroot@buddy-guy:mnt %1# sleep 1; taskset -c 0 dd if=ramdisk.1/iot.0 of=nvme_ssd.1/iot.1 bs=4096 oflag=direct \n20480+1 records in\n20480+1 records out\n83886146 bytes (84 MB) copied, 0.94694 s, 88.6 MB/s\n\nroot@buddy-guy:mnt %1# sleep 1; taskset -c 0 dd if=ramdisk.1/iot.0 of=nvme_ssd.1/iot.1 bs=4096 \n20480+1 records in\n20480+1 records out\n83886146 bytes (84 MB) copied, 0.228975 s, 366 MB/s\n\nroot@buddy-guy:mnt %1# sleep 1; taskset -c 0 dd if=ramdisk.1/iot.0 of=nvme_ssd.1/iot.1 bs=4096 oflag=direct \n20480+1 records in\n20480+1 records out\n83886146 bytes (84 MB) copied, 0.944524 s, 88.8 MB/s\n\nroot@buddy-guy:mnt %1# sleep 1; taskset -c 0 dd if=ramdisk.1/iot.0 of=nvme_ssd.1/iot.1 bs=4096 oflag=direct \n20480+1 records in\n20480+1 records out\n83886146 bytes (84 MB) copied, 0.899773 s, 93.2 MB/s\n\nroot@buddy-guy:mnt %1# sleep 1; taskset -c 0 dd if=ramdisk.1/iot.0 of=nvme_ssd.1/iot.1 bs=4096 oflag=direct \n20480+1 records in\n20480+1 records out\n83886146 bytes (84 MB) copied, 0.891819 s, 94.1 MB/s\n\nroot@buddy-guy:mnt %1# sleep 1; taskset -c 1 dd if=ramdisk.1/iot.0 of=nvme_ssd.1/iot.1 bs=4096 oflag=direct \n20480+1 records in\n20480+1 records out\n83886146 bytes (84 MB) copied, 0.837059 s, 100 MB/s\n\n\n\n\nroot@buddy-guy:mnt %1# sleep 1; taskset -c 1 dd if=ramdisk.1/iot.0 of=sata_ssd.1/iot.1 bs=4096 oflag=direct \n20480+1 records in\n20480+1 records out\n83886146 bytes (84 MB) copied, 1.10278 s, 76.1 MB/s\n\n\n\n\nroot@buddy-guy:mnt %1# sleep 1; taskset -c 1 dd if=ramdisk.1/iot.0 of=sata_hdd.1/iot.1 bs=4096 oflag=direct\n20480+1 records in\n20480+1 records out\n83886146 bytes (84 MB) copied, 3.24473 s, 25.9 MB/s\n\n</pre>\n\n\n==== nvme_ssd profiling data ====\n\n <pre>\nroot@buddy-guy:d.08 %1# cat nvme_ssd.log \nsys_write	ext2_direct_IO	dio_await_completion	submit_bio	generic_make_request	nvme_make_request\n37.138		35.639		28.830			2.628		2.046			0.675\n41.225		38.858		33.791			2.155		1.543			0.678\n37.509		35.967		29.824			2.137		1.503			0.660\n34.511		33.329		27.507			1.983		1.395			0.627\n33.056		31.894		26.217			2.005		1.447			0.597\n33.815		32.659		26.267			2.202		1.311			0.606\n33.707		32.456		26.790			2.134		1.411			0.595\n34.746		33.563		27.579			2.227		1.359			0.606\n34.602		33.166		26.961			2.329		1.596			0.600\n34.151		33.032		27.883			1.839		1.338			0.582\n33.476		32.329		26.583			1.948		1.344			0.579\n37.263		36.135		26.852			2.127		1.611			0.603\n34.446		33.134		27.041			2.133		1.410			0.609\n32.888		31.747		26.201			1.897		1.333			0.606\n33.440		32.276		26.978			1.812		1.335			0.588\n34.206		33.079		27.126			2.058		1.521			0.600\n34.151		32.777		26.670			2.173		1.501			0.606\n32.873		31.727		25.785			1.843		1.375			0.597\n33.641		32.387		26.787			1.903		1.333			0.595\n33.755		32.611		27.309			1.767		1.308			0.591\n</pre>\n\n\n\n\n\n==== sata_ssd profiling data ====\n\n <pre>\nroot@buddy-guy:d.08 %1# cat sata_ssd.log \nsys_write	ext2_direct_IO	dio_await_completion	submit_bio	generic_make_request	blk_queue_bio\n51.317		49.672		38.773			2.803		2.266			1.150\n49.270		48.015		38.499			2.715		2.070			1.002\n48.216		47.019		38.445			2.200		1.698			0.942\n55.635		54.291		44.861			2.362		1.854			0.942\n49.327		47.940		38.872			2.280		1.815			0.969\n48.936		47.649		38.607			2.442		2.013			1.077\n49.252		48.040		39.226			2.296		1.723			0.939\n49.334		48.153		39.013			2.577		1.974			0.951\n48.375		47.223		38.659			2.190		1.764			0.933\n48.973		47.841		38.817			2.347		1.860			0.912\n48.784		47.626		38.946			2.197		1.684			0.922\n48.880		47.443		38.377			2.311		1.726			0.927\n48.553		47.350		38.299			2.680		1.845			0.915\n48.817		47.589		38.929			2.319		1.839			0.909\n48.112		46.926		38.377			2.145		1.707			0.918\n49.021		47.841		38.590			2.241		1.761			0.945\n48.994		47.824		38.634			2.635		1.885			1.006\n48.817		47.599		38.941			2.230		1.780			0.946\n48.049		46.858		38.130			2.161		1.678			0.967\n48.964		47.683		38.578			2.491		2.002			1.093\n</pre>\n\n\n\n\n\n\n==== sata_hdd profiling data ====\n\n <pre>\nroot@buddy-guy:d.08 %1# cat sata_hdd.log \nsys_write	ext4_direct_IO	dio_await_completion	submit_bio	generic_make_request	blk_queue_bio\n136.016		133.730		112.708			5.954		4.801			1.107\n137.583		135.626		117.221			5.108		4.598			1.213\n137.244		135.344		115.763			5.473		4.567			0.981\n132.830		130.380		111.018			5.477		4.714			0.969\n130.756		128.510		110.967			4.408		3.913			0.985\n131.863		130.273		111.598			5.414		4.175			0.973\n132.037		130.014		111.924			4.861		4.027			0.963\n130.273		128.429		111.213			4.399		3.877			0.994\n130.374		128.454		111.091			4.654		3.811			0.990\n131.152		128.934		110.742			5.060		4.156			0.954\n138.087		135.711		116.038			6.278		4.922			0.940\n132.481		130.596		111.819			5.570		4.472			0.955\n131.863		130.048		111.433			5.903		4.913			1.138\n138.516		136.238		116.384			6.239		5.141			0.996\n133.969		132.331		113.590			5.891		4.388			0.985\n137.273		135.149		116.510			5.183		4.085			0.922\n153.167		150.019		111.024			5.426		4.505			1.081\n132.145		129.639		111.213			5.420		4.162			0.984\n132.241		130.606		112.227			5.705		4.300			0.951\n132.148		130.194		113.020			4.261		3.463			0.979\n</pre>\n\n\n\n\n==== R colnames() ====\n\n <pre>\ncolnames(d) <- c(\"sys_write\", \"ext2_direct_IO\", \"dio_await_completion\", \"submit_bio\", \"generic_make_request\", \"nvme_make_request\")\ncolnames(d) <- c(\"sys_write\", \"ext2_direct_IO\", \"dio_await_completion\", \"submit_bio\", \"generic_make_request\", \"blk_queue_bio\")\ncolnames(d) <- c(\"sys_write\", \"ext4_direct_IO\", \"dio_await_completion\", \"submit_bio\", \"generic_make_request\", \"blk_queue_bio\")\n</pre>\n\n=== PCIe System Architecture (book) ===\n\n* [http://www.mindshare.com/files/ebooks/pci%20express%20system%20architecture.pdf PCI Express System Architecture // MindShare // Ravi Budruk, Don Anderson, Tom Shanley]\n\n\n\n\n=== PCIe Revision 3.0 Illustrated ===\n\n\n==== [PCIe_v3.0] Features ====\n\n* In PCIe,\n:- switches can be used to connect a large number of PCIe devices in a system\n:- serial communication over the interconnect uses AND{\n:: packet-based transactions\n:: PCI-X split-transaction protocol\n: }\n:- QoS features provide\n:: differentiated transmission performance for varied applications\n:- hot plug / hot swap support enables\n:: \"always-on\" systems\n:- advanced power management features allow for\n:: low-power (mobile) applications\n:- robust error detection and handling features make\n:: PCIe ideal for high-end server applications\n:- ALL{Hot plug, power management, error handling, interrupt signaling} can all be sent in-band\n:: using packet-based messaging (, rather than side-band signals)\n:: helping reduce pin count and system cost\n:- The configuration address space available per function is extended to 4KB,\n:: allowing designers to define additional registers\n:: (however, new software is required\n:: to access this extended configuration register space)\n\n\n==== [PCIe_v3.0] PCIe Fabric Topology ====\n\n\n*; Hierarchy\n:- the OR{newwork, fabric} of all the AND{devices, links} associated with a root complex\n:: that are either OR{\n::: directly connected to the root complex via its port(s)\n::: indirectly connected via switches and bridges\n:: }\n\n\n===== PCIe Root Complex (RC) =====\n\n*; Root Complex\n:- connects the CPU and memory subsystem to the PCIe fabric\n:- may support several PCIe ports\n:: each port is connected to\n::: an endpoint device\n::: a switch (that then forms a sub-hierarchy)\n:- generates transaction requests on behalf of the CPU\n:- in response to CPU commands, it generates\n:: configuration requests\n:: memory and IO requests\n:: locked transaction requests\n: on the PCIe fabric\n:- transmits packets out of its ports\n:- receives packets into its ports (, which it then forwards to memory or the CPU)\n:- may also optionally route packets from one port to another port (supporting peer-to-peer transactions, in case of multi-port root complex)\n:: but is NOT required by the specification to to so\n:- has a bus number, device number, and function number\n:: which are used to form OR{a requester ID, a completer ID}\n:: for its transactions, and these all initialize to zeroes\n\n\n===== PCIe Endpoints =====\n\n\n===== PCIe Switch =====\n\n\n===== PCIe Root Complex Event Collector (RCEC) =====\n\n\n===== PCIe to PCI/PCI-X Bridge =====\n\n==== [PCIe_v3.0] Fabric Topology Configuration ====\n\n\n==== [PCIe_v3.0] Layering ====\n\n===== PCIe Transaction Layer =====\n\n===== PCIe Data Link Layer =====\n\n===== PCIe Physical Layer =====\n\n* A PCIe interconnect\n:- is referred to as a link\n:: which connects two devices\n\n* A link consists of\n:- either OR{1, 2, 4, 8, 12, 16, 32} signals in each direction\n:: , these signals are referred to as \'\'\'lanes\'\'\'\n:: (note that, because the system uses full-differential signaling,\n:: each signal actually needs two wires)\n\n* A x1 \n\n* A designer determines\n:- how many lanes to implement\n:: based on the targeted performance required on a given link\n\n* (Nomenclature) The width of a link is shown with an \'x\' in front of a number, \n: , where the \'x\' is pronounced as \'by\'\n: , so that a link with 4 signals in each direction, for example, is referred to as \'by four\' link\n\n==== [PCIe_v3.0] Differential signaling ====\n\n* PCIe devices employ\n: differential drivers and receivers at each port\n\n* Characteristics of differential signaling\n:- single-ended signal,\n:: whose voltage is compared with system ground,\n:- \'\'\'differential signal\'\'\'\n:: is compared only with it\'s opposite mate\n:: , so that the difference between them is what is measured.\n\n* Mechanism of differential signaling\n:- a positive voltage difference between the D+ and D- terminals implies Logical 1\n:- a negative voltage difference implies Logical 0\n:- no voltage difference between D+ and D- means that the driver is in the high-impedance tri-state condition\n:: , referred to as the electrical-idle and low-power state of the Link\n\n\n==== [PCIe_v3.0] Root complex (RC) ====\n\n\n\n\n\n==== [PCIe_v3.0] Interrupt model ====\n\n\n\n==== [PCIe_v3.0] Transaction ====\n\n*; PCIe transaction\n\n\n*; Locked transaction\n\n==== [PCIe_v3.0] Virtual circuit (VC) ====\n\n*; Virtual circuit (VC)\n:- \n\n\n==== [PCIe_v3.0] Traffic class (TC) ====\n\n*; Traffic class (TC)\n:- is a 3-bit field that allows\n:: differentiation of transactions into eight traffic classes\n:- is a fundamental element for\n:: enabling differentiated traffic servicing\n:: (, together with the PCIe VC (Virtual Channel) support)\n:- usage\n::- every PCIe TLP (Transaction Layer Packet) uses\n::: TC information as an invariant label\n::: that is carried end to end within the PCIe fabric\n::- as the packet traverses across the fabric,\n:: TC information is used\n::: at every Link and within each Switch element\n::: to make decisions with regards to proper servicing of the traffic\n:- a key aspect of servicing is\n:: the routing of the packets based on their TC labels\n:: through corresponding VCs\n:- definition of TC field encodings\n::- TC field value 000(b)\n::: TC0: best effort service class (general purpose IO)\n::: default TC - must be supported by every PCIe device\n::- TC field value 001(b)-111(b)\n::: TC1-TC7: differentiated service classes\n::: differentiation based on weighted-round-robin and/or priority\n:- the concept of TC applies\n:: only within the PCIe interconnect fabric\n\n\n==== [PCIe_v3.0] Multi-Function Virtual Channel (MFVC) ====\n\n*; Multi-Function Virtual Channel (MFVC) Capability\n\n\n==== [PCIe_v3.0] 6.7.3 PCI Express Hot-Plug Events ====\n\n==== [PCIe_v3.0] Access Control Services (ACS) ====\n\n:- ACS defines\n: a set of control points within a PCIe topology\n: to determine whether a TLP should be routed OR{\n::- normally,\n::- blocked,\n::- redirected\n: }\n\n:- ACS provides\n: the following types of access control\n::- source <u>V</u>alidation (V)\n::- translation <u>B</u>locking (B)\n::- P2P <u>R</u>equest redirect (R)\n::- P2P <u>C</u>ompletion redirect (C)\n::- <u>U</u>pstream forwarding (U)\n::- P2P <u>E</u>gress control (E)\n::- direct <u>T</u>ranslated P2P (T)\n\n==== [PCIe_v3.0] Alternative Routing-ID Interpretation (ARI) ====\n\n:- Routing IDs, Requester IDs, and Completer IDs are\n: 16-bit identifiers traditionally composed of three fields:\n::- an 8-bit Bus Number,\n::- a 5-bit Device Number,\n::- a 3-bit Function Number.\n:- With ARI,\n: the 16-bit field is interpreted as\n: two fields instead of three:\n::- an 8-bit Bus Number\n::- and an 8-bit Function Number\n:: (the Device Number field is eliminated)\n:- This new interpretation enables\n: an ARI Device to support\n::- up to 256 Functions [0..255]\n::- instead of 8 Functions [0..7].\n\n==== [PCIe_v3.0] RCRB ====\n\n*; RCRB\n\n\n\n\n==== [PCIe_v3.0] MSI and MSI-X capability ====\n\n:- All PCI Express device Functions that are capable of generating interrupts must implement MSI or MSI-X or both. MSI, MSI-X, and their Capability structures are defined in the PCI Local Bus Specification.\n\n:- The functionality associated with these structures defined by conventional PCI is also required for PCI Express.\n\n==== [PCIe_v3.0] Capability Structure ====\n\n* PCI Express defines\n:- a Capability structure\n:: in PCI 3.0 compatible Configuration Space (first 256 bytes)\n\n* This structure\n:- allows identification of a PCI Express device Function\n:- and indicates support for new PCI Express features.\n\n* The PCI Express Capability structure is required for\n:- PCI Express device Functions.\n\n\n\n==== [PCIe_v3.0] Isochronous Applications ====\n\n* Two paradigms of PCIe communication are supported\n: by the PCIe isochronous mechanisms\n::- Endpoint-to-Root-Complex communication model\n::- peer-to-peer (Endpoint-to-Endpoint) communication model\n\n* In the Endpoint-to-Root-Complex communication model,\n:- the primary isochronous traffic is \'\'\'memory read\'\'\'\n:- and \'\'\'write requests\'\'\' to the Root Complex \n:- and \'\'\'read completions\'\'\' from the Root Complex\n\n* Figure A-1: An Example Showing Endpoint-to-Root-Complex and Peer-to-Peer \nCommunication Models (http://komposter.com.ua/documents/PCI_Express_Base_Specification_Revision_3.0.pdf)\n\n\n\n==== [PCIe_v3.0] Protocol Multiplexing ====\n\n==== [PCIe_v3.0] Terminologies ====\n\n\n*; Dynamic Power Allocation (DPA)\n\n\n*; Latency Tolerance Reporting (LTR)\n:- The Latency Tolerance Reporting (LTR) mechanism enables\n:: Endpoints to report\n::: their service latency requirements for Memory Reads and Writes\n:: to the Root Complex\n:: , so that power management policies for central platform resources\n::: (such as main memory, RC internal interconnects, and snoop resources)\n::: can be implemented to consider Endpoint service requirements. \n\n\n*; Optimized Buffer Flush/Fill (OBFF)\n: The Optimized Buffer Flush/Fill (OBFF) Mechanism enables a Root Complex to report to Endpoints (throughout a hierarchy) time windows when the ncremental platform power cost for Endpoint bus mastering and/or interrupt activity is relatively low.\n\n\n*; Power Management Event (PME)\n\n\n\n*; TLP Processing Hints (TPH)\n:- is an optional feature\n:: that provides hints in Request TLP headers\n:: to facilitate optimized processing of Requests that target Memory Space.\n:- enable\n:: the system hardware (e.g., the Root Complex and/or Endpoints)\n:: to optimize platform resources\n::: such as system and memory interconnect on a per TLP basis.\n:- processing hints\n::- DWHR: device writes then host reads soon\n::- HWDR: device reads data that the host is believed to have recently written\n::- D*D*: device writes/reads, then device reads/writes soon\n:- steering tags\n\n:-\n\n== ## bNote-2013-11-27 ==\n\n=== Puzzle ===\n\n* [http://ko.wikipedia.org/wiki/%EB%93%B1%EB%B9%84%EC%88%98%EC%97%B4 등비수열]\n* [http://ko.wikipedia.org/wiki/%EB%93%B1%EC%B0%A8%EC%88%98%EC%97%B4 등차수열]\n\n=== PLX PEX 8796 ===\n\nPEX8796 BB (Base Board) RDK (Rapid Development Kit) 요약\n\n* PEX8796 Switch 기반의 Eval. Board (PCIe Gen3, 96-lane) 구조\n:- PEX8796 switch를 품은 base board (20/24-pin ATX power 필요) \n:- Base board를 Host PC에 연결 시 필요한 adapter card\n:- Base board와 adapter card를 연결하는 cable\n\n* Switch 구조 (PEX8796)\n:- 96-lane 중 16-lane은 upstream port로 사용됨 (Station 0)\n:- Downstream port로서는, Station 1과 5가 16x PCIe slot 각각 하나씩, Station 3이 4x PCIe slot 4개에 대응, Station 2, 4가 8x PCIe slot 각각 2개씩 대응\n:- 이렇게 6개의 Station에 의해서 96-lane PCIe switch 역할 수행\n:- 본 eval. board와 host간 연결을 위해, Station 0과 연결되는 PEX8732 Cable Adapter Card 필요\n\n* NT (Non-transparent) 기능 지원\n:- 기본적으로는 NT operation disable 상태이나, DIP Switch제어를 통해 enable 가능 (SW11)\n\n=== DS SW연 미팅 준비 ===\n\n\n* Flash Sled 관련\n:- ARM Server Cluster와 연계되는 Storage 구성은 어떤 형태를 생각하고 있는지? (SAN style? DAS style?) (Disaggregated Architecture와는 독립적인 질문)\n:- Flash sled가 있다면 어떤 용도로 사용되길 원하는지? (예를 들면)\n::- Very-large-amount of rarely-accessed data를 빠른 속도로 제공할 수 있는 cold storage 역할?\n::- VM이 직접 사용하는 random-write에 강한 block storage 역할? \n::- Read-intensive한 key-value store로서의 역할?\n::- Server node에 tight하게 붙는 server-side cache로서의 역할?\n\n\n* HW, NW, Prototyping 보드 관련\n:- PLX evaluation board의 구조? (즉, CPU, DRAM, 각종 peripheral들이 붙어있는 형태인지? 아니면 기존의 ARM board에 extension card 형태로 결합하여 사용하는 형태인지?)\n:- ARM을 Intel x86으로 쉽게 대체할 수 있는 구조인지?\n:- Customized Linux kernel을 쉽게 올릴 수 있는지? 아니면 특정 회사(e.g., Canonical) 지원을 받아야 하는지?\n:- Debugging등은 어떻게 하면 되는지? JTAG 등을 이용하는지? 아니면 별도의 Serial cable을 이용?\n:- Cluster의 network 구성은 어떻게 되어있는지?\n::- Network Topology\n::- Media의 종류 및 Protocol (1GbE 와 10GbE 혼용?)\n\n\n* Server SW Stack 관련\n:- Data center / cloud software로서 어떤 응용들이 구동되고 있는지?\n:- OpenStack을 구동하고 있는지? 그렇다면 물리적인 deployment는 어떻게 되는지? Hypervisor로서 무엇을 사용하는지? (Xen? KVM?)\n:- SSD와 HDD를 혼용해서 사용 중인지? SSD는 전체 architecture에서 어떤(누가 내려주는) IO를 받도록 구성되어 있는지?\n:- SSD의 모델은 무엇인지? (XS-1715?) 이를 위해서 특별히 수정된 SW (IO Stack 혹은 Virtualization 관련)가 존재하는지?\n:- 현재 운영중인 Cluster에서 병목이 되고 있는 부분이 특별히 존재하는지?\n\n== ## bNote-2013-11-26 ==\n\n=== R script for JY HWANG (moving average) ===\n\n <pre>\nd <- 1:100; winsz <- 10; dlen <- length(d); i <- 1; while ((i + winsz - 1) < dlen) { print(mean(d[i:(i+winsz-1)])); i <- i+1; }\n</pre>\n\n== ## bNote-2013-11-25 ==\n\n=== NVMe performance analysis (XS-1715) ===\n\n: NVMe SSD Vs. SATA SSD - IO 처리 방식 비교 분석 (50%)\n:* Linux kernel 내에서의 IO flow 분석\n:* Block layer에서의 IO handling 소요 시간 비교 분석\n\n: Target storage devices\n:* NVMe SSD (Samsung XS-1715)\n:* SATA SSD (Samsung SSD 830)\n:* SATA HDD (Samsung HDD HD502IJ)\n\n: 실험 방식\n:* dd command로 상기 target storage device에 write oper. 수행 (Direct IO, 156MB 크기 파일)\n:* Kernel trace를 통해 각 function 내에서의 소요 시간 측정 (10회 추출 평균값 사용)\n\n\n: Linux kernel function call flow (NVMe vs. SATA)\n <pre>\n\n/* write to NVMe SSD */\nsys_write() {\n	fget_light();\n	vfs_write() {\n		rw_verify_area() {\n			security_file_permission() {\n				apparmor_file_permission() {\n					common_file_perm();\n				};\n			}\n		}\n		do_sync_write() {\n			generic_file_aio_write() {\n				__generic_file_aio_write() {\n					file_update_time() { }\n					generic_file_direct_write() {\n						filemap_write_and_wait_range();\n						ext2_direct_IO() {\n							__blockdev_direct_IO() {\n								kmem_cache_alloc() {};\n								blk_start_plug();\n								do_direct_IO() { };\n								/* ... */\n								_raw_spin_lock_irqsave();\n								_raw_spin_unlock_irqrestore();\n								submit_bio() {\n									generic_make_request() {\n										generic_make_request_checks() {\n											/* ... */\n											bio_integrity_enabled();\n											blk_throtl_bio() {};\n											/* ... */\n										} /* generic_make_request_checks */\n\n										nvme_make_request() [nvme] {\n											_raw_spin_lock_irq();\n											nvme_submit_bio_queue() [nvme] {\n												blk_recount_segments() {};\n												nvme_alloc_iod() [nvme] {\n													__kmalloc() {\n														get_slab();\n													}\n												}\n												alloc_cmdid() [nvme];\n												nvme_map_bio() [nvme];\n												nvme_setup_prps.isra.30() [nvme];\n											} /* nvme_submit_bio_queue */\n										} /* nvme_make_request */\n\n									} /* generic_make_request */\n								} /* submit_bio */\n							} /* __blockdev_direct_IO */\n						} /* ext2_direct_IO */\n					} /* generic_file_direct_write */\n				} /* __generic_file_aio_write */\n			} /* generic_file_aio_write */\n		} /* do_sync_write */\n	} /* vfs_write */\n} /* sys_write */\n\n\n\n\n/* write to SATA SSD */\nsys_write() {\n	fget_light();\n	vfs_write() {\n		rw_verify_area() {\n			security_file_permission() {\n				apparmor_file_permission() {\n					common_file_perm();\n				};\n			}\n		}\n		do_sync_write() {\n			generic_file_aio_write() {\n				__generic_file_aio_write() {\n					file_update_time() { }\n					generic_file_direct_write() {\n						filemap_write_and_wait_range();\n						ext2_direct_IO() {\n							__blockdev_direct_IO() {\n								kmem_cache_alloc() {};\n								blk_start_plug();\n								do_direct_IO() { };\n								/* ... */\n								_raw_spin_lock_irqsave();\n								_raw_spin_unlock_irqrestore();\n\n								submit_bio() { /* line: 460,707 */\n									generic_make_request() {\n										generic_make_request_checks() {\n											/* ... */\n											bio_integrity_enabled();\n											blk_throtl_bio() {};\n											/* ... */\n										} /* generic_make_request_checks */ //# 4.148 us\n\n										blk_queue_bio() {\n											blk_queue_bounce();\n											attempt_plug_merge();\n											_raw_spin_lock_irq();\n											elv_merge() {\n												elv_rqhash_find.isra.8(); //# 0.060 us\n												deadline_merge() {\n													elv_rb_find();\n												} //# 0.531 us\n											} /* elv_merge */ //# 1.471 us\n											get_request() { } //# 4.720 us\n											init_request_from_bio() { } //# 1.458 us\n											ktime_get(); //# 0.099 us\n											drive_stat_acct() { } //# 1.036 us\n\n										} /* blk_queue_bio */ //# + 12.664 us\n\n									} /* generic_make_request */ //# + 18.294 us\n								} /* submit_bio */ //# + 18.861 us\n								blk_finish_plug() {\n								}\n\n							} /* __blockdev_direct_IO */\n						} /* ext2_direct_IO */\n					} /* generic_file_direct_write */\n				} /* __generic_file_aio_write */\n			} /* generic_file_aio_write */\n		} /* do_sync_write */\n	} /* vfs_write */\n} /* sys_write */\n\n</pre>\n\n\n <pre>\nLinux buddy-guy 3.8.0-29-generic #42~precise1-Ubuntu SMP Wed Aug 14 16:19:23 UTC 2013\nFour Intel Unknown 2000MHz processors, 18620.76 total bogomips, 4674M RAM\nSystem library 2.15.0\n\n\nNAME                                                                      MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT\nsda                                                                         8:0    0 465.8G  0 disk\n|-sda1                                                                      8:1    0   243M  0 part /boot\n|-sda2                                                                      8:2    0     1K  0 part\n`-sda5                                                                      8:5    0 465.5G  0 part\n  |-buddy--guy--vg-root (dm-4)                                            252:4    0 460.7G  0 lvm  /\n  `-buddy--guy--vg-swap_1 (dm-5)                                          252:5    0   4.9G  0 lvm  [SWAP]\nsdb                                                                         8:16   0 465.8G  0 disk\n|-cinder--volumes-volume--0401bba0--ee46--441b--9af9--c512cf0902f0 (dm-0) 252:0    0     4G  0 lvm\n|-cinder--volumes-volume--052b4b5e--c8ab--460f--9824--0fbcd405758d (dm-1) 252:1    0     4G  0 lvm\n|-cinder--volumes-volume--f9daff85--ebf5--40c5--af20--ef606445f4e7 (dm-2) 252:2    0     4G  0 lvm\n`-cinder--volumes-volume--19429e60--0027--47dc--9ed0--1748f90aeaaf (dm-3) 252:3    0     2G  0 lvm\nsdc                                                                         8:32   0 119.2G  0 disk\n|-sdc1                                                                      8:33   0    50G  0 part /mnt/sata_ssd.1\n|-sdc2                                                                      8:34   0    50G  0 part /mnt/sata_ssd.2\n`-sdc3                                                                      8:35   0  19.2G  0 part\nsr0                                                                        11:0    1  1024M  0 rom\nnvme0n1                                                                   251:0    0 372.6G  0 disk\n|-nvme0n1p1                                                               251:1    0    50G  0 part /mnt/nvme_ssd.1\n|-nvme0n1p2                                                               251:2    0    50G  0 part /mnt/nvme_ssd.2\n`-nvme0n1p3                                                               251:3    0 272.6G  0 part\n\n\n> nvme_ssd\n   submit_bio() generic_make_request() nvme_make_request()\n1        10.357                  9.937               5.719\n2        11.380                 10.945               6.140\n3        11.407                 10.984               5.927\n4        10.159                  9.724               5.264\n5        10.074                  9.636               5.531\n6        10.167                  9.717               5.393\n7         9.993                  9.552               5.320\n8        10.138                  9.700               5.216\n9        10.200                  9.759               5.636\n10       10.182                  9.744               5.618\n\n> sata_ssd\n   submit_bio() generic_make_request() blk_queue_bio()\n1        18.174                 17.733          12.910\n2        17.537                 17.093          12.667\n3        18.012                 17.565          12.961\n4        17.085                 16.643          12.556\n5        17.394                 16.953          12.817\n6        17.487                 17.037          12.875\n7        17.240                 16.799          12.340\n8        17.712                 17.274          12.745\n9        17.418                 16.971          12.625\n10       17.387                 16.952          12.811\n\n> sata_hdd\n   submit_bio() generic_make_request() blk_queue_bio()\n1        34.547                 34.013          11.977\n2        34.859                 34.421          12.403\n3        33.473                 33.035          11.503\n4        33.986                 33.554          12.010\n5        33.899                 33.467          11.662\n6        40.069                 39.610          13.987\n7        38.791                 38.350          13.769\n8        37.239                 36.801          12.160\n9        35.787                 35.325          12.874\n10       39.037                 38.593          14.504\n\n> mat\n                 NVMe SSD SATA SSD SATA HDD\nsubmit_bio()      10.4057  17.5446  36.1687\nBIO-queuing-func   5.5764  12.7307  12.6849\n\n> barplot(mat, col=rainbow(2), ylim=c(0,60), beside=T, legend=rownames(mat), main=\"Elapsed time in submit_bio() function - dd write w/ DirectIO option\", sub=\"NVMe:nvme_make_request(), SATA=blk_queue_bio()\", ylab=\"elapsed time (microseconds)\")\n\n</pre>\n\n== ## bNote-2013-11-21 ==\n\n=== XS-1715 test plan ===\n\n* Goal of test\n: To identify bottleneck points\n\n* Software stack\n\n* Benchmark method\n\n\n\n=== Study: storage system related technical standards ===\n\n==== NVMe (Non-Volatile Memory Express) ====\n\n: [http://www.nvmexpress.org/wp-content/uploads/NVM-Express-1_1a.pdf NVM Express Revision 1.1a September 23, 2013]\n\n\n===== Introduction to NVMe spec. =====\n\n:; Scope of NVMe specification\n\n:: Defines a register interface\n::: for communication with a non-volatile memory (NVM) subsystem\n\n:: Defines a standard command set\n::: for use with the NVM subsystem\n\n:; Outside of scope of NVMe specification\n\n:: Does not specify the specific usage model\n::: whether the NVM system is used as a SSD, a main memory, a cache memory, a backup memory, a redundant memory, etc.\n\n:: This interface is specified above\n::: any NVM management, like wear leveling (erases and other mgmt. tasks for NVM technologies (like NAND) are abstracted)\n\n:: Does not contain any information on\n::: Caching algorithms or techniques\n\n\n===== NVMe Theory of Operation =====\n\n\'\'\'NVMe\'\'\'\n: is a scalable \'\'\'host controller interface (HCI)\'\'\'\n:: designed to address the needs of Enterprise and Client systems which utilize PCIe based SSDs.\n: provides optimized \'\'\'command submission and completion paths\'\'\'\n: provides support for \'\'\'parallel operation\'\'\'\n:: by supporting up to 65,535 I/O queues with up to 64K(65,535) outstanding commands per I/O queue\n: has the following \'\'\'key attributes\'\'\':\n:* Does not require uncacheable / MMIO register reads in the command submission or completion path\n:* A maximum of one MMIO register write is necessary in the command submission path\n:* Support for up to 65,535 I/O queues, with each I/O queue supporting up to 64K outstanding commands\n:* Priority associated with each I/O queue with well-defined arbitration mechanism\n:* All information to complete a 4KB read request is included in the 64B command itself, ensuring efficient small I/O operation\n:* Efficient and streamlined command set (???)\n:* Support for MSI/MSI-X and interrupt aggregation (???)\n:* Support for multiple namespaces\n:* Efficient support for I/O virtualization architectures like SR-IOV\n:* Robust error reporting and management capabilities\n:* Support for multi-path I/O and namespace sharing\n\n\nThis spec. defines \'\'\'a streamlined set of registers\'\'\' whose functionality includes:\n:* Indication of controller capabilities\n:* Status for controller failures (command status is processed via CQ directly)\n:* Admin Queue configuration (I/O Queue configuration processed via Admin commands)\n:* Doorbell registers for scalable number of Submission and Completion Queues\n\n\nAn NVMe controller is associated with a single PCI Function.\n: The capabilities that a controller supports are indicated\n:: in the \'\'\'Controller Capabilities (CAP) register\'\'\'\n:: and as part of the Controller and Namespace \'\'\'data structures\'\'\' returned by the Identify command\n: The Identify \'\'\'Controller\'\'\' data structure\n:: indicates capabilities and settings that apply to the \'\'\'entire controller\'\'\'\n: The Identify Namespace data structure\n:: indicates capabilities and settings that are specific to a \'\'\'particular namespace\'\'\'\n\n\nNVMe is based on a paired Submission and Completion Queue mechanism.\n:- Commands are placed by host SW into a Submission Queue\n:- Completions are placed into the asociated Completion Queue by the controller\n:- Multiple Submission Queues may utilize the same Completion Queue\n:- Submission and Completion Queues are allocated in host memory\n(SR/MR-IOV로 가게 되면 어떤 기능/부분이 HW로 내려가는지 확인 필요)\n\n==== PCIe (Peripheral Component Interconnect Express) ====\n\n\n==== SCSI (Small Computer System Interface) ====\n\n\n==== FC (Fibre Channel) ====\n\n* [http://hsi.web.cern.ch/HSI/fcs/spec/overview.htm Fibre Channel Overview ((B.GOOD))]\n\n* Fibre Channel related host-side SW (inside Linux kernel)\n\n\n===== Introduction to FC (Fibre Channel) =====\n\n: In recent years several technical developments have converged to a bigger than ever need for extremely fast data links. High performance computers have become the focus of much attention in the data communications industry. Performance improvements have spawned increasingly data-intensive and high-speed networking applications, such as multimedia and scientific visualization. However, the existing network interconnects between computers and I/O devices are unable to run at the speeds needed.\n\n:; Intention of the FC\n: The intention of the Fibre Channel (FC) is to develop practical, inexpensive, yet expendable means of quickly transferring data between workstations, mainframes, supercomputers, desktop computers, storage devices, displays and other peripherials. Fibre Channel is the general name of an integrated set of standards [1] being developed by the American National Standards Institute (ANSI).\n\n:; Channels Vs. Networks\n: There are two basic types of data communication between processors and between processors and peripherials: channels and networks. A channel provides a direct or switched point-to-point connection between the communicating devices. A channel is tipically hardware-intensive and transports data at the high speed with low overhead. In contrast, a Network is an aggregation of distributed nodes (like workstations, file servers or peripherials) with it\'s own protocol that supports interaction among these nodes. A network has relatively high overhead since it is software-intensive, and consequently slower than a channel. Networks can handle a more extensive range of tasks than channels as they operate in an environment of unanticipated connections, while channels operate amongst only a few devices with predefined addresses. Fibre Channel attempts to combine the best of these two methods of communication into a new I/O interface that meets the needs of channel users and also network users.\n\n:; Architecture of FC\n: Although it is called Fibre Channel, it\'s architecture doesn\'t represent neither a channel nor a real network topology. It allows for an active intelligent interconnection scheme, called a \'\'\'Fabric\'\'\', to connect devices. All a Fibre channel port has to do is to manage a simple point-to-point connection between itself and the Fabric.\n\n:; Role and Benefits of FC\n: Fibre channel is a high performance serial link supporting its own, as well as higher level protocols such as the FDDI, SCSI, HIPPI and IPI (see chapter 7). The Fibre Channel standard addresses the need for very fast transfers of large amounts of information. The fast (up to 1 Gbit/s) technology can be converted for Local Area Network technology by adding a switch specified in the Fibre Channel standard, that handles multipoint addressing. There is a perspective as an I/O technology and a Local Area Network technology as well. Another advantage of Fibre Channel is, that it gives users one port that supports both channel and network interfaces, unburdening the computers from large number of I/O ports. FC provides control and complete error checking over the link [2] [3].\n\n\n\n===== FC Topology =====\n\n: In Fibre Channel terms the switch connecting the devices is called \'\'\'Fabric\'\'\'. The \'\'\'link\'\'\' is the two unidirectional fibres transmitting to opposite directions with their associated transmitter and receiver. Each fibre is attached to a transmitter of a port at one end and a receiver of another port at the other end. When a Fabric is present in the configuration, the fibre may attach to a node port (N_Port) and to a port of the Fabric (F_Port).\n\n: Since Fibre channel system relies on ports logging in with each other and the Fabric, it is irrelevant whether the Fabric is a circuit switch, an active hub or a loop. The topology can be selected depending on system performance requirements or packaging options. Possible FC topologies include point-to-point, crosspoint switched or arbitrated loop (Figure 1).\n\n<img src=\"http://hsi.web.cern.ch/HSI/fcs/spec/ov1.gif\" width=\"\"/>\n\n\n\n===== FC-0 Layer =====\n\n: FC is structured as a set of hierarchical functions (Figure 2). The lowest level (FC-0) defines the \'\'\'physical link\'\'\' in the system, including the fibre, connectors, optical and electrical parameters for a variety of data rates. Figure 3 shows the schematic of the Fibre Channel optical link [2].\n\n<img src=\"http://hsi.web.cern.ch/HSI/fcs/spec/ov2.gif\" width=\"\"/>\n\n\n:; Open Fibre Control\n: The FC-0 specifies a safety system - the Open Fibre Control system (OFC) - for SW laser data links, since the optical power levels exceed the limits defined by the laser safety standards. If an open fibre condition occurs in the link, the receiver of the Port the fibre is connected detects it and pulses its laser at a low duty cycle that meets the safety requirements. The receiver of the other port (at the other end of the fibre) detects this pulsing signal and also pulses it\'s transmitter at a low duty cycle. When the open fibre path is restored both ports receive the pulsing signals, and after a double handshaking procedure the connection is automatically restored within a few seconds [1].\n\n<img src=\"http://hsi.web.cern.ch/HSI/fcs/spec/ov3.gif\"/>\n\n\n\n===== FC-1 Layer =====\n\n: FC-1 defines the \'\'\'transmission protocol including serial encoding and decoding rules, special characters and error control\'\'\'. The information transmitted over a fibre is encoded 8 bits at a time into a 10 bit Transmission Character. The primary rationale for use of a transmission code is to improve the transmission characteristic of information across a fibre. The transmission code must be DC balanced to support the electrical requirements of the receiving units. The Transmission Characters ensure, that short run lengths and enough transitions are present in the serial bit stream to make clock recovery possible [1] [2].\n\n===== FC-2 Layer =====\n\n: The Signaling Protocol (FC-2) level serves as the transport mechanism of Fibre Channel. The framing rules of the data to be transferred between ports, the different mechanisms for controlling the three service classes (see chapter 5.7) and the means of managing the sequence of a data transfer are defined by FC-2. To aid in the transport of data across the link, the following building blocks are defined by the standard [1] :\n\n:; Ordered Set\n:: The Ordered Sets are four byte transmission words containing data and special characters which have a special meaning\n\n:; Frame\n:: The basic building blocks of an FC connection are the Frames. The Frames contain the information to be transmitted (Payload), the address of the source and destination ports and link control information (Data frames, Link control frames)\n\n:; Sequence\n:: A Sequence is formed by a set of one or more related Frames transmitted unidirectionally from one N_Port to an other. Each Frame within a sequence is uniquely numbered with a Sequence Count. Error recovery, controlled by an upper protocol layer is usually performed at Sequence boundaries\n\n:; Exchange\n:: An Exchange is composed of one or more nonconcurrent sequences for a single operation. The Exchanges may be unidirectional or bidirectional between two N_Ports. Within a single Exchange, only one sequence may be active at any one time, but Sequences of different Exchanges may be concurrently active.\n\n:; Protocol\n:: The Protocols are related to the services offered by Fibre Channel. Protocols may be specific to higher-layer services, although Fibre Channel provides its own set of protocols to manage its operating environment for data transfer.\n\n:; Flow control\n:: Flow control is the FC-2 control process to pace the flow of Frames between N_Ports and between an N_Port and the Fabric to prevent overrun at the receiver. Flow control is dependent upon the service classes (see chapter 5.7). Class 1 Frames use end-to-end flow control, class 3 uses only buffer-to-buffer, class 2 Frames use both types of flow control.\n\n:; Service classes\n:: To ensure efficient transmission of different types of traffic, FC defines 3 classes of service.\n::- Class 1\n::: Class 1 is a service which provides \'\'\'dedicated connections\'\'\', in effect providing the equivalent of a \'\'\'dedicated physical connection\'\'\'. Once established, a Class 1 connection is retained and guaranteed by the Fabric. This service guarantees the maximum bandwidth between two N_Ports, so this is \'\'\'the best for sustained, high throughput transactions\'\'\'.\n::: <img src=\"http://hsi.web.cern.ch/HSI/fcs/spec/ov5.gif\" width=\"300\"/>\n::- Class 2\n::: Class 2 is a Frame-switched, connectionless service that allows bandwidth to be shared by multiplexing Frames from multiple sources onto the same channel or channels. The Fabric may not guarantee the order of the delivery and \'\'\'Frames may be delivered out of order\'\'\'. This service class can be used, when the \'\'\'connection setup time is greater than the latency of a short message\'\'\'. Both Class 1 and Class 2 send acknowledgment Frames confirming Frame delivery. If delivery cannot be made due to congestion, a Busy frame (see chapter 5.2) is returned and the sender tries again. (Figure 6)\n::: <img src=\"http://hsi.web.cern.ch/HSI/fcs/spec/ov6.gif\" width=\"300\"/>\n::- Class 3\n::: Class 3 service is identical to Class 2, except that the Frame delivery is not confirmed. (Flow control is managed only on buffer level, see Figure 7) This type of transfer, known as datagram provides the \'\'\'quickest transmission\'\'\' by not sending confirmation. This service is useful for real- time broadcasts, where \'\'\'timeliness is key\'\'\' and \'\'\'information not received in time is valueless\'\'\'.\n::: <img src=\"http://hsi.web.cern.ch/HSI/fcs/spec/ov7.gif\" width=\"300\"/>\n\n\n===== FC-3 Layer =====\n\n: The FC-3 level of the FC standard is intended to provide the common services required for advanced features such as:\n\n:* Striping\n:: To multiply bandwidth using multiple N_ports in parallel to transmit a single information unit across multiple links.\n:* Hunt groups\n:: The ability for more than one Port to respond to the same alias address. This improves efficiency by decreasing the chance of reaching a busy N_Port.\n:* Multicast\n:: Multicast delivers a single transmission to multiple destination ports. This includes sending to all N_Ports on a Fabric (broadcast) or to only a subset of the N_Ports on a Fabric. [1]\n\n\n===== FC-4 Layer =====\n\n: FC-4, the highest level in the FC structure defines the \'\'\'application interfaces\'\'\' that can execute over Fibre Channel. It specifies the mapping rules of upper layer protocols using the FC levels below. Fibre Channel is \'\'\'equally adept at transporting both\'\'\' network and channel information and allows both protocol types to be concurrently transported \'\'\'over the same physical interface\'\'\'.\n\nThe following network and channel protocols are currently specified or proposed as FC-4s [2]:\n\n:* Small Computer System Interface (SCSI)\n:* Intelligent Peripheral Interface (IPI)\n:* High Performance Parallel Interface (HIPPI) Framing Protocol\n:* Internet Protocol (IP)\n:* ATM Adaptation Layer for computer data (AAL5)\n:* Link Encapsulation (FC-LE)\n:* Single Byte Command Code Set Mapping (SBCCS)\n:* IEEE 802.2\n\n==== NCQ ====\n\n* [http://exemen.wordpress.com/2011/05/16/enabling-disabling-and-checking-ncq/ Enabling, disabling, and checking NCQ]\n: How do I enable NCQ? How do I disable NCQ? How do I know if NCQ is enabled? Why are only 31 tags used, rather than 32?\n: Linux NCQ (SATA native command queueing) support is enabled automatically, if your SATA drive supports it. At boot, you will see a line in dmesg (or kernel log) like\n ata2.00: ATA-7, max UDMA/133, 321672960 sectors: LBA48 NCQ (depth 31/32)\n: If the line containing the sector count and maximum UDMA speed does not mention NCQ, your drive does not support it.\n: If NCQ is present but disabled, you may see “depth 0″:\n ata2.00: ATA-7, max UDMA/133, 321672960 sectors: LBA48 NCQ (depth 0/32)\n: You may disable NCQ, and use normal READ/WRITE DMA commands, by setting the queue depth to 1:\n $ echo 1 > /sys/block/sdX/device/queue_depth\n: Enabling NCQ, if supported, is the same:\n $ echo 31 > /sys/block/sdX/device/queue_depth\n: Both the host controller and device constrain the number of NCQ commands that can be outstanding. The SATA specification maximum is 32 tags. Most devices support 32 tags, but the standard permits devices to support less. Similarly, most host controllers support 32 tags.\n: However, the ATA standard has a design flaw. The NCQ tag is presumed to be a 32-bit bitmap (32-bit dword). If all 32 tags are asserted, this produces a value (0xffffffff) that is the same value returned by reading a hardware register after the hardware has been hot-unplugged, or suffers a major failure. Thus, to distinguish this condition, libata artificially limits all NCQ configurations to 31 tags rather than 32.\n\n=== Study: virtualization ===\n\n==== KVM ====\n\n* Question: [http://www.linux-kvm.org/page/How_to_assign_devices_with_VT-d_in_KVM How to assign devices with VT-d in KVM?]\n\n: VT-d support\n:- In order to assign devices in KVM, you\'ll need a system which supports VT-d. This has nothing to do with the VT-x support of your CPU, VT-d needs to be supported by both your chipset on your motherboard and by your CPU.\n:- If you are in doubt whether your motherboard or CPU supports VT-d or not, the Xen VT-d wikipage has some pointers of VT-d enabled chipsets, motherboards and CPUs: http://wiki.xensource.com/xenwiki/VTdHowTo\n:- If your hardware doesn\'t have an IOMMU (\"Intel VT-d\" support in case of Intel - \"AMD I/O Virtualization Technology\" support in case of AMD), you\'ll not be able to assign devices in KVM. Some work towards allowing this were done, but the code never made it into KVM, due to various issues with the code. At the moment it doesn\'t seem like device assignment without hardware support, will ever be integrated into KVM.\n:- Assignment of graphics cards are not officially supported at the moment, but there has been some success passing through a secondary Radeon HD 5850 as a VM\'s secondary display.\n\n==== QEMU ====\n\n==== IOMMU ====\n\n* Question: [http://askubuntu.com/questions/85776/what-is-iommu-and-will-it-improve-my-vm-performance What is IOMMU and will it improve my VM performance?]\n: My Motherboard\'s chipset supports this feature IOMMU, i\'ve read (but not really understand) that it improves the VM performance by letting the VM make use of the actual physical hardware instead of the Virtual hardware.\n: Does this really bring a performance improvement in the VM? and if it does how can I make Virtualbox benefit from that?.\n\n* Answer\n: So long story short, the only way an IOMMU will help you is if you start assigning HW resources directly to the VM. Just having it doesn\'t make things faster.\n: It would help to know exactly what Motherboard/CPU is advertising this feature. IOMMU is a system specific IO mapping mechanism and can be used with most devices.\n: IOMMU sounds like a generic name for Intel VT-d and AMD IOV. In which case I don\'t think you can multiplex devices, it\'s a lot like PCI passthrough before all these fancy virtualization instructions existed :). SR-IOV is different, the peripheral itself must carry the support. The HW knows it\'s being virtualized and can delegate a HW slice of itself to the VM. Many VMs can talk to an SR-IOV device concurrently with very low overhead.\n: The only thing faster than SR-IOV is PCI passthrough though in that case only one VM can make use of that device, not even the host operating system can use it. PCI passthrough would be useful for say a VM that runs an intense database that would benefit from being attached to a FiberChannel SAN.\n: Getting closer to the HW does have limitations however, it makes your VMs less portable for deployments that require live migration for example. This applies to both SR-IOV and PCI passthrough.\n: Default virtualized Linux deployments usually use VirtIO which is pretty fast to begin with.\n\n==== VT-x ====\n\n\n==== VT-d ====\n\n== ## bNote-2013-11-15 ==\n\n=== F2FS IO Workload Analysis ===\n\n{| class=\"wikitable sortable\"\n|+ Block IO trace\n|-\n| Topic\n| align=\"center\" | Case 1\n| align=\"center\" | Case 2\n|-\n| Time elapsed\n| align=\"right\" | 13.3 hours\n| align=\"right\" | 27.9 hours\n|-\n| # of IO reqs (all)\n| align=\"right\" | 259,833\n| align=\"right\" | 569,513 \n|-\n| # of reads\n| align=\"right\" | 95,820\n| align=\"right\" | 296,216\n|-\n| # of writes\n| align=\"right\" | 157,519\n| align=\"right\" | 257,133\n|-\n| # of trims\n| align=\"right\" | 6,494\n| align=\"right\" | 16,164\n|-\n|}\n\n\n{| class=\"wikitable sortable\"\n|+ Goodness of Fit Test (for Zipf Dist.) for Case 1\n|-\n| Items || degree of freedom || s value || min X^2 (P-value > 0.05)\n|-\n| All (R+W+T) Interval || 1,491 || 1.83 || 0.167\n|-\n| All (R+W+T) IO Size || 160 || 1.63 || 0.1034\n|-\n| Read Interval || 1,661 || 1.8 || 0.3951\n|-\n| Read IO Size || 84 || 1.64 || 0.0323\n|-\n| Write Interval || 1,505 || 1.7 || 0.1502\n|-\n| Write IO Size || 109 || 1.63 || 0.4085\n|-\n| Trim Interval || 1,180 || 1.07 || 0.1629\n|-\n| Trim IO Size || 124 || 1.85 || 0.0608\n|-\n|}\n\n== ## bNote-2013-11-07 ==\n\n\n=== Flash Sled Architecture ===\n\n==== Facebook Talk ====\n\n* http://youtu.be/twNKM3KJhJ4\n: The Facebook talk on Tue is designed to be a Q&A from this one… so, if you have time, it’s good to watch this…\n\n\n==== EMC XtremIO Array ====\n\n\nPretty conventional. Would be interesting to see how it compares to Pure and SolidFire. It uses separate controller so there may be a scale out issue – plus for SolidFire.\n\nJim\n \n* http://www.theregister.co.uk/2013/11/11/xtremio_array/\n\n \n <pre>\nMega-vendor EMC is going to launch its XtremIO all-flash array with general availability on 14 November. It has been on limited or directed availability for a few months and there\'s a fair amount of information coming out about it.\n\nHere’s what we know so far.\n\nThe array is based on acquired XtremIO technology and features:\n\n·         6U X-Brick nodes with N-way active controllers, 250,000 random 4K read IOPS and sub-millisecond response time; \n\n·         X-Brick has 25 x 400GB eMLC SSDs, 10TB raw capacity, 7TB usable; \n\n·         Controllers are 1U dual-socket servers; \n\n·         High-availability with non-disruptive XIOS software and firmware upgrades, hot-swap upgrades, and no single point of failure; \n\n·         4 x 8 Gbit’s Fibre Channel and 4 x 10Gbit/E iSCSI block access interfaces; \n\n·         \n\nFour X-Bricks in XtremIO array\n\n·         Scalability to 4 clustered X-Bricks, linked by dual InfiniBand, delivers 1 million IOPS; \n\n·         Scalability to 8 X-Bricks has been spoken of, with an implied 2 million IOPS; \n\n·         Future scalability to 16 and beyond X-Bricks; \n\n·         Can be different capacity X-Bricks in cluster; \n\n·         Integrated workload and data balancing across SSDs and controllers; \n\n·         Always-on integrated inline cross-cluster deduplication using 4KB blocks; \n\n·         Thin-provisioning using 4KB allocation and with no fragmentation or reclamation penalty; \n\n·         VMware VAAI integration, VMware multipath I/O support with EMC claiming that the array is “the only all-flash array to fully integrate” with VAAI; \n\n·         Data volumes are thin and wide-striped across whole system; \n\n·         In-memory metadata management with metadata lookups not hitting SSDs; \n\n·         Deduplication-aware snapshot and cloning features - but no replication until 2014 – and then it will be async; and \n\n·         Management through a GUI, vCenter plugin, CLI or REST API. \n\nOddly, two X-Bricks take up 12U of rackspace but four take up only 22U.\n\nFlash-specific XtremIO Data Protection (XDP) is included and, with it, SSDs can fail in-place with no data loss. XDP is “self-healing,” with double-party data protection and needs “just an eight per cent capacity overhead.”\n\nIf an SSD fails the rebuild is distributed across other SSDs and is content-aware. For example, only user data is copied, not free space. XDP doesn’t require any configuration, nor does it need hot spare drives. Instead, we understand, it uses \"hot spaces\" – free space in the array.\n\nData is stored in 4KB chunks using hashes. Hash comparisons are used for deduplication and hash values are used for distributing writes. We understand each controller runs its own copy of XIOS with the hash range distributed across XIOS copies – so hash value affects data placement. Data is only written when a full stripe exists. The idea is to reduce write levels and prevent host-spots developing.\n\nA front-end VPLEX box can be used to provide replication now, along with RecoverPoint. XtremIO may not get synchronous replication as that would affect performance.\n\nWe’re told one X-Brick can support 2,000 or more (Citrix) virtual desktops. A reference architecture for XtremIO-supported virtual desktops can be found here (31-page PDF).\n\nA VMware View VDI reference architecture can be found here (30-page PDF) and it supports 7,000 virtual desktops. The document says 1,000 linked clones were deployed in 75 minutes. Two X-bricks were included in a Vblock Specialized System for Extreme Applications, with an 8-node Isilon S-Series NAS storage system for user data and Horizon View persona data, and 48 Cisco UCS server blades.\n\nThere has been no mention of tiering the XtremIO arrays with back-end VNX/VMAX/Isilon arrays with automated data movement using EMC’s FAST technology. That is most probably a roadmap feature. \n\n</pre>\n\n== ## bNote-2013-11-06 ==\n\n=== Valgrind ===\n\n: valgrind --tool=cachegrind command arg\n <pre>\n\n==19645== I   refs:      152,653,497\n==19645== I1  misses:         25,833\n==19645== L2i misses:          2,475\n==19645== I1  miss rate:        0.01%\n==19645== L2i miss rate:        0.00%\n==19645==\n==19645== D   refs:       56,857,129  (35,838,721 rd + 21,018,408 wr)\n==19645== D1  misses:         14,187  (    12,451 rd +      1,736 wr)\n==19645== L2d misses:          7,701  (     6,325 rd +      1,376 wr)\n==19645== D1  miss rate:         0.0% (       0.0%   +        0.0%  )\n==19645== L2d miss rate:         0.0% (       0.0%   +        0.0%  )\n==19645==\n==19645== L2 refs:            40,020  (    38,284 rd +      1,736 wr)\n==19645== L2 misses:          10,176  (     8,800 rd +      1,376 wr)\n==19645== L2 miss rate:          0.0% (       0.0%   +        0.0%  )\n\n</pre>\n\n\n=== NVMe Study ===\n\n==== NVMe Command Set Overview ====\n\n{| class=\"wikitable sortable\"\n|+ Management Commands for Queues & Transport (Admin Command)\n|-\n| rowspan=\"15\" | \'\'\'Admin Command\'\'\'<br/>Management Commands<br/>for Queues & Transport\n| rowspan=\"5\" | Queue Management\n| Create I/O Submission Queue\n|-\n| Create I/O Completion Queue\n|-\n| Delete I/O Submission Queue\n|-\n| Delete I/O Completion Queue\n|-\n| Abort\n|-\n| rowspan=\"2\" | Status & Event Reporting\n| Asynchronous Event Request\n|-\n| Get Log Page\n|-\n| rowspan=\"3\" | Configuration\n| Identify\n|-\n| Set Features\n|-\n| Get Features\n|-\n| rowspan=\"2\" | Firmware Management\n| (Optional) Firmware Activate\n|-\n| (Optional) Firmware Image Download\n|-\n| rowspan=\"2\" | Security\n| (Optional) Security Send\n|-\n| (Optional) Security Receive\n|-\n| Namespace Management\n| (Optional) Format NVM\n|-\n| rowspan=\"6\" | \'\'\'NVM Command\'\'\'<br/>I/O Commands for<br/>SSD Functionality\n| Data Ordering\n| Flush\n|-\n| rowspan=\"4\" | Data Transfer, including<br/>end-to-end<br/>data protection<br/>& security\n| Read\n|-\n| Write\n|-\n| (Optional) Write Uncorrectable\n|-\n| (Optional) Compare\n|-\n| Data Usage Hints\n| (Optional) Dataset Management\n|-\n|}','utf-8'),(2050,'\n\n <pre>\n   December 2013\nSu Mo Tu We Th Fr Sa\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n</pre>\n\n\n== ## bNote-2013-12-06 ==\n\n\n=== All Pages ===\n\n\n\n\n <pre>\nblusjune@rolling-stones:~ %1$ cat /tmp/log.2 \n(News) ???? ?? \"????, ?????\"\n(News) ????, \"CDN ?? ????????\"\n(News) ????, \"????/?? ???? ??? ????\"\n(News) ????, \"?? ???? ????\"\n(News) ????, \'????\' ?? - ????? ??? ??\n(News) ????, CDN ?? ??? ... ??? ???\nAcademia intelligence\nArtificial Neural Network\nArtificial neural network\nBcode python cache lru\nBnote - References ( Papers / Patents / Articles )\nBnote 2013\nBnote 2013-01\nBnote 2013-02\nBnote 2013-03\nBnote 2013-04\nBnote 2013-05\nBnote 2013-06\nBnote 2013-07\nBnote 2013-08\nBnote 2013-09\nBnote 2013-10\nBnote 2013-11\nBnote 2013-12\nBnote Frequent Itemset Mining (FIM) / Association Rule Mining (ARM)\nBnote R\nBnote patidea 2013\nBnote patidea 2013-001\nBnote patidea 2013-002\nBnote patidea 2013-003\nBnote python\nBnote scratchpad\nBrian Myungjune JUNG\nByung-Gon Chun\nCache algorithms\nConference: ACM SIGMOD 2013\nCurriculum vitae - Brian Myungjune JUNG\nCurriculum vitae - Brian Myungjune JUNG (CV Brian)\nDIMM\nData analytics\nData mining\nDeep learning\nDefense Logic -- Big Data Platform Research in SAIT\nDm-cache\nExemplary .gnuplot configuration file for beautiful gnuplot graphs\nFoobar\nGRUB 2\nGit server on my local machine\nHidden Markov model (HMM)\nHierarchical temporal memory\nI/O Workload Analysis\nI/O tracing on Microsoft Windows using xperf\nIBM GPFS\nIEEE ICCE 2014 Paper\nIOWA.data.tpcc 250gb 48h.mysql.R.addr:: Offset 100K, Len 1K\nIndustry intelligence - Flash Memory Summit 2013\nIndustry intelligence - big data\nIndustry intelligence - storage\nIntelligent Battery Management System\nKworker\nLecture: Neural Networks for Machine Learning (by Geoffrey Hinton)\nLecture notes and online courses\nLinux kernel\nLinux kernel - block layer plug/unplug\nList of English stop words\nList of Meta Files in Windows NTFS\nList of important processes in Microsoft Windows operating systems\nMain Page\nMaster File Table in NTFS\nMixture model\nNVM express\nNimble Storage\nOnline courses\nOpenStack\nOperating systems - Linux kernel\nPCI Express\nPaperStudy // An Analysis of Traces from a Production MapReduce Cluster // CCGrid 2010\nPeriodicity transform\nPure Storage\nRapidIO\nRestricted Boltzmann machines\nStatistical computing software\nSystem info 16-node cluster\nTPC-C\nTemplate patidea\nText summarization\nTf-idf\nThoughts on In Memory Databases (Part 1)\nTrick mode\nTutorial -- SSD caching using dm-cache\nUSENIX FAST 2013\nWhy In-Memory Computing Needs Flash\nWindows Programming on Linux with MinGW\nWorkload analysis-driven system architecture design\nWriting guide - software patent\nX intelligence\nXen hypervisor\nblusjune@rolling-stones:~ %1$ \n</pre>\n\n\n\n\n <pre>\n\n(News) 네트워크 업계 \"기다렸다, 런던올림픽\"	(News) 아카마이, \"CDN 넘어 하이퍼커넥티드로\"	(News) 아카마이, \"스트리밍/보안 서비스를 빠르고 안전하게\"\n(News) 아카마이, \"쌩쌩 웹사이트 만들려면\"	(News) 아카마이, \'블레이즈\' 인수 - 인텔리전트 플랫폼 강화	(News) 아카마이, CDN 장악 가속화 ... 코텐도 인수설\nAcademia intelligence	Artificial Neural Network	Artificial neural network\nBcode python cache lru	Bnote - References ( Papers / Patents / Articles )	Bnote 2013\nBnote 2013-01	Bnote 2013-02	Bnote 2013-03\nBnote 2013-04	Bnote 2013-05	Bnote 2013-06\nBnote 2013-07	Bnote 2013-08	Bnote 2013-09\nBnote 2013-10	Bnote 2013-11	Bnote 2013-12\nBnote Frequent Itemset Mining (FIM) / Association Rule Mining (ARM)	Bnote R	Bnote patidea 2013\nBnote patidea 2013-001	Bnote patidea 2013-002	Bnote patidea 2013-003\nBnote python	Bnote scratchpad	Brian Myungjune JUNG\nByung-Gon Chun	Cache algorithms	Conference: ACM SIGMOD 2013\nCurriculum vitae - Brian Myungjune JUNG	Curriculum vitae - Brian Myungjune JUNG (CV Brian)	DIMM\nData analytics	Data mining	Deep learning\nDefense Logic -- Big Data Platform Research in SAIT	Dm-cache	Exemplary .gnuplot configuration file for beautiful gnuplot graphs\nFoobar	GRUB 2	Git server on my local machine\nHidden Markov model (HMM)	Hierarchical temporal memory	I/O Workload Analysis\nI/O tracing on Microsoft Windows using xperf	IBM GPFS	IEEE ICCE 2014 Paper\nIOWA.data.tpcc 250gb 48h.mysql.R.addr:: Offset 100K, Len 1K	Industry intelligence - Flash Memory Summit 2013	Industry intelligence - big data\nIndustry intelligence - storage	Intelligent Battery Management System	Kworker\nLecture: Neural Networks for Machine Learning (by Geoffrey Hinton)	Lecture notes and online courses	Linux kernel\nLinux kernel - block layer plug/unplug	List of English stop words	List of Meta Files in Windows NTFS\nList of important processes in Microsoft Windows operating systems	Main Page	Master File Table in NTFS\nMixture model	NVM express	Nimble Storage\nOnline courses	OpenStack	Operating systems - Linux kernel\nPCI Express	PaperStudy // An Analysis of Traces from a Production MapReduce Cluster // CCGrid 2010	Periodicity transform\nPure Storage	RapidIO	Restricted Boltzmann machines\nStatistical computing software	System info 16-node cluster	TPC-C\nTemplate patidea	Text summarization	Tf-idf\nThoughts on In Memory Databases (Part 1)	Trick mode	Tutorial -- SSD caching using dm-cache\nUSENIX FAST 2013	Why In-Memory Computing Needs Flash	Windows Programming on Linux with MinGW\nWorkload analysis-driven system architecture design	Writing guide - software patent	X intelligence\nXen hypervisor\n\n\n</pre>\n\n=== KVM/QEMU Architecture and IO Stack ===\n\n* [https://www.google.co.kr/search?q=why+is+qemu+windows+so+slow&rlz=1C1OPRB_enKR556KR556&oq=why+is+qemu+windows+so+slow&aqs=chrome..69i57.14138j0j4&sourceid=chrome&espv=210&es_sm=122&ie=UTF-8#es_sm=122&espv=210&newwindow=1&q=IO+stack+qemu Google{IO stack qemu}]\n\n* [http://pic.dhe.ibm.com/infocenter/lnxinfo/v3r0m0/topic/liaav/LPCKVMSSPV2.1.pdf \"KVM / QEMU Storage Stack Performance Discussion,\" IBM, Linux Plumbers Conference 2010]\n\n* [http://events.linuxfoundation.org/slides/2011/linuxcon-japan/lcj2011_hajnoczi.pdf \"An Updated Overview of the QEMU Storage Stack,\" IBM, LinuxCon Japan 2011]\n\n* [http://www.linuxplumbersconf.org/2010/ocw/system/presentations/651/original/Optimizing_the_QEMU_Storage_Stack.pdf \"Optimizing the QEMU Storage Stack,\" IBM, Linux Plumbers Conference 2010]\n\n* [http://www.fujitsu.com/downloads/MAG/vol47-3/paper18.pdf \"Kernel-based Virtual Machine Technology\", Yoshihito Goro, Fujitsu Journal 2011]\n\n\n\n=== NVMe DAS test bed architecture ===\n\n{| class=\'wikitable sortable\'\n|-\n| LVol-00 || LVol-01 || LVol-02 || LVol-03 || LVol-04 || LVol-05 || LVol-06 || LVol-07\n|-\n|-\n| colspan=5 | nvme0n1p1 (484.61 GiB)\n| colspan=3 | nvme1n1p1 (260.61 GiB)\n|-\n| colspan=4 | /dev/nvme0n1 (372.61 GiB)\n| colspan=4 | /dev/nvme1n1 (372.61 GiB)\n|-\n|}\n\n== ## bNote-2013-12-04 ==\n\n\n=== OpenStack quota-update ===\n\n <pre>\n\nroot@grant-green:work %1# keystone tenant-list\n+----------------------------------+---------+---------+\n|                id                |   name  | enabled |\n+----------------------------------+---------+---------+\n| df7559de417a4968ad34f95b9dda5a4e |  admin  |   True  |\n| ad4662d7ec1249789feb2fad24e9f2e5 | service |   True  |\n+----------------------------------+---------+---------+\n\nroot@grant-green:work %1# nova quota-show\n+-----------------------------+-------+\n| Quota                       | Limit |\n+-----------------------------+-------+\n| instances                   | 48    |\n| cores                       | 96    |\n| ram                         | 51200 |\n| floating_ips                | 10    |\n| fixed_ips                   | -1    |\n| metadata_items              | 128   |\n| injected_files              | 5     |\n| injected_file_content_bytes | 10240 |\n| injected_file_path_bytes    | 255   |\n| key_pairs                   | 100   |\n| security_groups             | 10    |\n| security_group_rules        | 20    |\n+-----------------------------+-------+\n\nroot@grant-green:work %1# nova quota-update --instance 48 --cores 96 df7559de417a4968ad34f95b9dda5a4e\n\nroot@grant-green:work %1# nova quota-show\n+-----------------------------+-------+\n| Quota                       | Limit |\n+-----------------------------+-------+\n| instances                   | 48    |\n| cores                       | 96    |\n| ram                         | 51200 |\n| floating_ips                | 10    |\n| fixed_ips                   | -1    |\n| metadata_items              | 128   |\n| injected_files              | 5     |\n| injected_file_content_bytes | 10240 |\n| injected_file_path_bytes    | 255   |\n| key_pairs                   | 100   |\n| security_groups             | 10    |\n| security_group_rules        | 20    |\n+-----------------------------+-------+\n\n</pre>\n\n=== Linux kernel debugging using QEMU ===\n\n* [http://files.meetup.com/1590495/debugging-with-qemu.pdf Debugging Linux systems using GDB and QEMU]\n* [http://elinux.org/Debugging_The_Linux_Kernel_Using_Gdb Debugging the Linux Kernel Using GDB]\n\n\n\n=== Linux kernel (3.8.0) NVMe stack ===\n\n\n==== include/linux/nvme.h ====\n\n <pre>\n 24 struct nvme_bar {\n 25         __u64                   cap;    /* Controller Capabilities */\n 26         __u32                   vs;     /* Version */\n 27         __u32                   intms;  /* Interrupt Mask Set */\n 28         __u32                   intmc;  /* Interrupt Mask Clear */\n 29         __u32                   cc;     /* Controller Configuration */\n 30         __u32                   rsvd1;  /* Reserved */\n 31         __u32                   csts;   /* Controller Status */\n 32         __u32                   rsvd2;  /* Reserved */\n 33         __u32                   aqa;    /* Admin Queue Attributes */\n 34         __u64                   asq;    /* Admin SQ Base Address */\n 35         __u64                   acq;    /* Admin CQ Base Address */\n 36 };\n</pre>\n\n\n\n <pre>\n 42 \n 43 enum {\n 44         NVME_CC_ENABLE          = 1 << 0,\n 45         NVME_CC_CSS_NVM         = 0 << 4,\n 46         NVME_CC_MPS_SHIFT       = 7,\n 47         NVME_CC_ARB_RR          = 0 << 11,\n 48         NVME_CC_ARB_WRRU        = 1 << 11,\n 49         NVME_CC_ARB_VS          = 7 << 11,\n 50         NVME_CC_SHN_NONE        = 0 << 14,\n 51         NVME_CC_SHN_NORMAL      = 1 << 14,\n 52         NVME_CC_SHN_ABRUPT      = 2 << 14,\n 53         NVME_CC_IOSQES          = 6 << 16,\n 54         NVME_CC_IOCQES          = 4 << 20,\n 55         NVME_CSTS_RDY           = 1 << 0,\n 56         NVME_CSTS_CFS           = 1 << 1,\n 57         NVME_CSTS_SHST_NORMAL   = 0 << 2,\n 58         NVME_CSTS_SHST_OCCUR    = 1 << 2,\n 59         NVME_CSTS_SHST_CMPLT    = 2 << 2,\n 60 };\n 61 \n</pre>\n\n\n\n <pre>\n109 \n110 struct nvme_lbaf {\n111         __le16                  ms;\n112         __u8                    ds;\n113         __u8                    rp;\n114 };\n115 \n116 struct nvme_id_ns {\n117         __le64                  nsze;\n118         __le64                  ncap;\n119         __le64                  nuse;\n120         __u8                    nsfeat;\n121         __u8                    nlbaf;\n122         __u8                    flbas;\n123         __u8                    mc;\n124         __u8                    dpc;\n125         __u8                    dps;\n126         __u8                    rsvd30[98];\n127         struct nvme_lbaf        lbaf[16];\n128         __u8                    rsvd192[192];\n129         __u8                    vs[3712];\n130 };\n131 \n132 enum {\n133         NVME_NS_FEAT_THIN       = 1 << 0,\n134         NVME_LBAF_RP_BEST       = 0,\n135         NVME_LBAF_RP_BETTER     = 1,\n136         NVME_LBAF_RP_GOOD       = 2,\n137         NVME_LBAF_RP_DEGRADED   = 3,\n138 };\n139 \n140 struct nvme_lba_range_type {\n141         __u8                    type;\n142         __u8                    attributes;\n143         __u8                    rsvd2[14];\n144         __u64                   slba;\n145         __u64                   nlb;\n146         __u8                    guid[16];\n147         __u8                    rsvd48[16];\n148 };\n149 \n150 enum {\n151         NVME_LBART_TYPE_FS      = 0x01,\n152         NVME_LBART_TYPE_RAID    = 0x02,\n153         NVME_LBART_TYPE_CACHE   = 0x03,\n154         NVME_LBART_TYPE_SWAP    = 0x04,\n155 \n156         NVME_LBART_ATTRIB_TEMP  = 1 << 0,\n157         NVME_LBART_ATTRIB_HIDE  = 1 << 1,\n158 };\n159 \n\n</pre>\n\n\n\n <pre>\n159 \n160 /* I/O commands */\n161 \n162 enum nvme_opcode {\n163         nvme_cmd_flush          = 0x00,\n164         nvme_cmd_write          = 0x01,\n165         nvme_cmd_read           = 0x02,\n166         nvme_cmd_write_uncor    = 0x04,\n167         nvme_cmd_compare        = 0x05,\n168         nvme_cmd_dsm            = 0x09,\n169 };\n170 \n171 struct nvme_common_command {\n172         __u8                    opcode;\n173         __u8                    flags;\n174         __u16                   command_id;\n175         __le32                  nsid;\n176         __u32                   cdw2[2];\n177         __le64                  metadata;\n178         __le64                  prp1;\n179         __le64                  prp2;\n180         __u32                   cdw10[6];\n181 };\n182 \n183 struct nvme_rw_command {\n184         __u8                    opcode;\n185         __u8                    flags;\n186         __u16                   command_id;\n187         __le32                  nsid;\n188         __u64                   rsvd2;\n189         __le64                  metadata;\n190         __le64                  prp1;\n191         __le64                  prp2;\n192         __le64                  slba;\n193         __le16                  length;\n194         __le16                  control;\n195         __le32                  dsmgmt;\n196         __le32                  reftag;\n197         __le16                  apptag;\n198         __le16                  appmask;\n199 };\n200 \n201 enum {\n202         NVME_RW_LR                      = 1 << 15,\n203         NVME_RW_FUA                     = 1 << 14,\n204         NVME_RW_DSM_FREQ_UNSPEC         = 0,\n205         NVME_RW_DSM_FREQ_TYPICAL        = 1,\n206         NVME_RW_DSM_FREQ_RARE           = 2,\n207         NVME_RW_DSM_FREQ_READS          = 3,\n208         NVME_RW_DSM_FREQ_WRITES         = 4,\n209         NVME_RW_DSM_FREQ_RW             = 5,\n210         NVME_RW_DSM_FREQ_ONCE           = 6,\n211         NVME_RW_DSM_FREQ_PREFETCH       = 7,\n212         NVME_RW_DSM_FREQ_TEMP           = 8,\n213         NVME_RW_DSM_LATENCY_NONE        = 0 << 4,\n214         NVME_RW_DSM_LATENCY_IDLE        = 1 << 4,\n215         NVME_RW_DSM_LATENCY_NORM        = 2 << 4,\n216         NVME_RW_DSM_LATENCY_LOW         = 3 << 4,\n217         NVME_RW_DSM_SEQ_REQ             = 1 << 6,\n218         NVME_RW_DSM_COMPRESSED          = 1 << 7,\n219 };\n220 \n221 /* Admin commands */\n222 \n223 enum nvme_admin_opcode {\n224         nvme_admin_delete_sq            = 0x00,\n225         nvme_admin_create_sq            = 0x01,\n226         nvme_admin_get_log_page         = 0x02,\n227         nvme_admin_delete_cq            = 0x04,\n228         nvme_admin_create_cq            = 0x05,\n229         nvme_admin_identify             = 0x06,\n230         nvme_admin_abort_cmd            = 0x08,\n231         nvme_admin_set_features         = 0x09,\n232         nvme_admin_get_features         = 0x0a,\n233         nvme_admin_async_event          = 0x0c,\n234         nvme_admin_activate_fw          = 0x10,\n235         nvme_admin_download_fw          = 0x11,\n236         nvme_admin_format_nvm           = 0x80,\n237         nvme_admin_security_send        = 0x81,\n238         nvme_admin_security_recv        = 0x82,\n239 };\n240 \n241 enum {\n242         NVME_QUEUE_PHYS_CONTIG  = (1 << 0),\n243         NVME_CQ_IRQ_ENABLED     = (1 << 1),\n244         NVME_SQ_PRIO_URGENT     = (0 << 1),\n245         NVME_SQ_PRIO_HIGH       = (1 << 1),\n246         NVME_SQ_PRIO_MEDIUM     = (2 << 1),\n247         NVME_SQ_PRIO_LOW        = (3 << 1),\n248         NVME_FEAT_ARBITRATION   = 0x01,\n249         NVME_FEAT_POWER_MGMT    = 0x02,\n250         NVME_FEAT_LBA_RANGE     = 0x03,\n251         NVME_FEAT_TEMP_THRESH   = 0x04,\n252         NVME_FEAT_ERR_RECOVERY  = 0x05,\n253         NVME_FEAT_VOLATILE_WC   = 0x06,\n254         NVME_FEAT_NUM_QUEUES    = 0x07,\n255         NVME_FEAT_IRQ_COALESCE  = 0x08,\n256         NVME_FEAT_IRQ_CONFIG    = 0x09,\n257         NVME_FEAT_WRITE_ATOMIC  = 0x0a,\n258         NVME_FEAT_ASYNC_EVENT   = 0x0b,\n259         NVME_FEAT_SW_PROGRESS   = 0x0c,\n260 };\n261 \n</pre>\n\n\n\n\n <pre>\n261 \n262 struct nvme_identify {\n263         __u8                    opcode;\n264         __u8                    flags;\n265         __u16                   command_id;\n266         __le32                  nsid;\n267         __u64                   rsvd2[2];\n268         __le64                  prp1;\n269         __le64                  prp2;\n270         __le32                  cns;\n271         __u32                   rsvd11[5];\n272 };\n273 \n274 struct nvme_features {\n275         __u8                    opcode;\n276         __u8                    flags;\n277         __u16                   command_id;\n278         __le32                  nsid;\n279         __u64                   rsvd2[2];\n280         __le64                  prp1;\n281         __le64                  prp2;\n282         __le32                  fid;\n283         __le32                  dword11;\n284         __u32                   rsvd12[4];\n285 };\n286 \n287 struct nvme_create_cq {\n288         __u8                    opcode;\n289         __u8                    flags;\n290         __u16                   command_id;\n291         __u32                   rsvd1[5];\n292         __le64                  prp1;\n293         __u64                   rsvd8;\n294         __le16                  cqid;\n295         __le16                  qsize;\n296         __le16                  cq_flags;\n297         __le16                  irq_vector;\n298         __u32                   rsvd12[4];\n299 };\n300 \n301 struct nvme_create_sq {\n302         __u8                    opcode;\n303         __u8                    flags;\n304         __u16                   command_id;\n305         __u32                   rsvd1[5];\n306         __le64                  prp1;\n307         __u64                   rsvd8;\n308         __le16                  sqid;\n309         __le16                  qsize;\n310         __le16                  sq_flags;\n311         __le16                  cqid;\n312         __u32                   rsvd12[4];\n313 };\n314 \n315 struct nvme_delete_queue {\n316         __u8                    opcode;\n317         __u8                    flags;\n318         __u16                   command_id;\n319         __u32                   rsvd1[9];\n320         __le16                  qid;\n321         __u16                   rsvd10;\n322         __u32                   rsvd11[5];\n323 };\n324 \n325 struct nvme_download_firmware {\n326         __u8                    opcode;\n327         __u8                    flags;\n328         __u16                   command_id;\n329         __u32                   rsvd1[5];\n330         __le64                  prp1;\n331         __le64                  prp2;\n332         __le32                  numd;\n333         __le32                  offset;\n334         __u32                   rsvd12[4];\n335 };\n336 \n</pre>\n\n\n\n\n <pre>\n336 \n337 struct nvme_command {\n338         union {\n339                 struct nvme_common_command common;\n340                 struct nvme_rw_command rw;\n341                 struct nvme_identify identify;\n342                 struct nvme_features features;\n343                 struct nvme_create_cq create_cq;\n344                 struct nvme_create_sq create_sq;\n345                 struct nvme_delete_queue delete_queue;\n346                 struct nvme_download_firmware dlfw;\n347         };\n348 };\n349 \n350 enum {\n351         NVME_SC_SUCCESS                 = 0x0,\n352         NVME_SC_INVALID_OPCODE          = 0x1,\n353         NVME_SC_INVALID_FIELD           = 0x2,\n354         NVME_SC_CMDID_CONFLICT          = 0x3,\n355         NVME_SC_DATA_XFER_ERROR         = 0x4,\n356         NVME_SC_POWER_LOSS              = 0x5,\n357         NVME_SC_INTERNAL                = 0x6,\n358         NVME_SC_ABORT_REQ               = 0x7,\n359         NVME_SC_ABORT_QUEUE             = 0x8,\n360         NVME_SC_FUSED_FAIL              = 0x9,\n361         NVME_SC_FUSED_MISSING           = 0xa,\n362         NVME_SC_INVALID_NS              = 0xb,\n363         NVME_SC_LBA_RANGE               = 0x80,\n364         NVME_SC_CAP_EXCEEDED            = 0x81,\n365         NVME_SC_NS_NOT_READY            = 0x82,\n366         NVME_SC_CQ_INVALID              = 0x100,\n367         NVME_SC_QID_INVALID             = 0x101,\n368         NVME_SC_QUEUE_SIZE              = 0x102,\n369         NVME_SC_ABORT_LIMIT             = 0x103,\n370         NVME_SC_ABORT_MISSING           = 0x104,\n371         NVME_SC_ASYNC_LIMIT             = 0x105,\n372         NVME_SC_FIRMWARE_SLOT           = 0x106,\n373         NVME_SC_FIRMWARE_IMAGE          = 0x107,\n374         NVME_SC_INVALID_VECTOR          = 0x108,\n375         NVME_SC_INVALID_LOG_PAGE        = 0x109,\n376         NVME_SC_INVALID_FORMAT          = 0x10a,\n377         NVME_SC_BAD_ATTRIBUTES          = 0x180,\n378         NVME_SC_WRITE_FAULT             = 0x280,\n379         NVME_SC_READ_ERROR              = 0x281,\n380         NVME_SC_GUARD_CHECK             = 0x282,\n381         NVME_SC_APPTAG_CHECK            = 0x283,\n382         NVME_SC_REFTAG_CHECK            = 0x284,\n383         NVME_SC_COMPARE_FAILED          = 0x285,\n384         NVME_SC_ACCESS_DENIED           = 0x286,\n385 };\n386 \n</pre>\n\n\n\n\n <pre>\n386 \n387 struct nvme_completion {\n388         __le32  result;         /* Used by admin commands to return data */\n389         __u32   rsvd;\n390         __le16  sq_head;        /* how much of this queue may be reclaimed */\n391         __le16  sq_id;          /* submission queue that generated this entry */\n392         __u16   command_id;     /* of the command which completed */\n393         __le16  status;         /* did the command fail, and if so, why? */\n394 };\n395 \n396 struct nvme_user_io {\n397         __u8    opcode;\n398         __u8    flags;\n399         __u16   control;\n400         __u16   nblocks;\n401         __u16   rsvd;\n402         __u64   metadata;\n403         __u64   addr;\n404         __u64   slba;\n405         __u32   dsmgmt;\n406         __u32   reftag;\n407         __u16   apptag;\n408         __u16   appmask;\n409 };\n410 \n411 struct nvme_admin_cmd {\n412         __u8    opcode;\n413         __u8    flags;\n414         __u16   rsvd1;\n415         __u32   nsid;\n416         __u32   cdw2;\n417         __u32   cdw3;\n418         __u64   metadata;\n419         __u64   addr;\n420         __u32   metadata_len;\n421         __u32   data_len;\n422         __u32   cdw10;\n423         __u32   cdw11;\n424         __u32   cdw12;\n425         __u32   cdw13;\n426         __u32   cdw14;\n427         __u32   cdw15;\n428         __u32   timeout_ms;\n429         __u32   result;\n430 };\n431 \n432 #define NVME_IOCTL_ID           _IO(\'N\', 0x40)\n433 #define NVME_IOCTL_ADMIN_CMD    _IOWR(\'N\', 0x41, struct nvme_admin_cmd)\n434 #define NVME_IOCTL_SUBMIT_IO    _IOW(\'N\', 0x42, struct nvme_user_io)\n435 \n\n</pre>\n\n\n==== drivers/block/nvme.c ====\n\n\n <pre>\n  44 \n  45 #define NVME_Q_DEPTH 1024\n  46 #define SQ_SIZE(depth)          (depth * sizeof(struct nvme_command))\n  47 #define CQ_SIZE(depth)          (depth * sizeof(struct nvme_completion))\n  48 #define NVME_MINORS 64\n  49 #define NVME_IO_TIMEOUT (5 * HZ)\n  50 #define ADMIN_TIMEOUT   (60 * HZ)\n  51 \n  52 static int nvme_major;\n  53 module_param(nvme_major, int, 0);\n  54 \n  55 static int use_threaded_interrupts;\n  56 module_param(use_threaded_interrupts, int, 0);\n  57 \n  58 static DEFINE_SPINLOCK(dev_list_lock);\n  59 static LIST_HEAD(dev_list);\n  60 static struct task_struct *nvme_thread;\n  61 \n</pre>\n\n\n\n\n <pre>\n  62 /*\n  63  * Represents an NVM Express device.  Each nvme_dev is a PCI function.\n  64  */\n  65 struct nvme_dev {\n  66         struct list_head node; \n  67         struct nvme_queue **queues;    \n  68         u32 __iomem *dbs;      \n  69         struct pci_dev *pci_dev;\n  70         struct dma_pool *prp_page_pool;\n  71         struct dma_pool *prp_small_pool;\n  72         int instance;\n  73         int queue_count;       \n  74         int db_stride;         \n  75         u32 ctrl_config;       \n  76         struct msix_entry *entry;\n  77         struct nvme_bar __iomem *bar;\n  78         struct list_head namespaces;\n  79         char serial[20];\n  80         char model[40];\n  81         char firmware_rev[8];\n  82         u32 max_hw_sectors;\n  83 };\n  84 \n  85 /*     \n  86  * An NVM Express namespace is equivalent to a SCSI LUN\n  87  */    \n  88 struct nvme_ns {\n  89         struct list_head list; \n  90        \n  91         struct nvme_dev *dev;  \n  92         struct request_queue *queue;\n  93         struct gendisk *disk;  \n  94        \n  95         int ns_id;\n  96         int lba_shift;         \n  97 };     \n  98 \n  99 /*     \n 100  * An NVM Express queue.  Each device has at least two (one for admin\n 101  * commands and one for I/O commands).\n 102  */\n 103 struct nvme_queue {\n 104         struct device *q_dmadev;\n 105         struct nvme_dev *dev;\n 106         spinlock_t q_lock;\n 107         struct nvme_command *sq_cmds;\n 108         volatile struct nvme_completion *cqes;\n 109         dma_addr_t sq_dma_addr;\n 110         dma_addr_t cq_dma_addr;\n 111         wait_queue_head_t sq_full;\n 112         wait_queue_t sq_cong_wait;\n 113         struct bio_list sq_cong;\n 114         u32 __iomem *q_db;\n 115         u16 q_depth;\n 116         u16 cq_vector;\n 117         u16 sq_head;\n 118         u16 sq_tail;\n 119         u16 cq_head;\n 120         u16 cq_phase;\n 121         unsigned long cmdid_data[];\n 122 };\n 123 \n</pre>\n\n== ## bNote-2013-12-03 ==\n\n=== Linux kernel IO stack: Block Layer ===\n\n==== Linux Documentation ====\n\n; Documentation/block/queue-sysfs.txt\n\n <pre>\n1	Queue sysfs files\n2	=================\n3	\n4	This text file will detail the queue files that are located in the sysfs tree\n5	for each block device. Note that stacked devices typically do not export\n6	any settings, since their queue merely functions are a remapping target.\n7	These files are the ones found in the /sys/block/xxx/queue/ directory.\n8	\n9	Files denoted with a RO postfix are readonly and the RW postfix means\n10	read-write.\n11	\n12	add_random (RW)\n13	----------------\n14	This file allows to trun off the disk entropy contribution. Default\n15	value of this file is \'1\'(on).\n16	\n17	discard_granularity (RO)\n18	-----------------------\n19	This shows the size of internal allocation of the device in bytes, if\n20	reported by the device. A value of \'0\' means device does not support\n21	the discard functionality.\n22	\n23	discard_max_bytes (RO)\n24	----------------------\n25	Devices that support discard functionality may have internal limits on\n26	the number of bytes that can be trimmed or unmapped in a single operation.\n27	The discard_max_bytes parameter is set by the device driver to the maximum\n28	number of bytes that can be discarded in a single operation. Discard\n29	requests issued to the device must not exceed this limit. A discard_max_bytes\n30	value of 0 means that the device does not support discard functionality.\n31	\n32	discard_zeroes_data (RO)\n33	------------------------\n34	When read, this file will show if the discarded block are zeroed by the\n35	device or not. If its value is \'1\' the blocks are zeroed otherwise not.\n36	\n37	hw_sector_size (RO)\n38	-------------------\n39	This is the hardware sector size of the device, in bytes.\n40	\n41	iostats (RW)\n42	-------------\n43	This file is used to control (on/off) the iostats accounting of the\n44	disk.\n45	\n46	logical_block_size (RO)\n47	-----------------------\n48	This is the logcal block size of the device, in bytes.\n49	\n50	max_hw_sectors_kb (RO)\n51	----------------------\n52	This is the maximum number of kilobytes supported in a single data transfer.\n53	\n54	max_integrity_segments (RO)\n55	---------------------------\n56	When read, this file shows the max limit of integrity segments as\n57	set by block layer which a hardware controller can handle.\n58	\n59	max_sectors_kb (RW)\n60	-------------------\n61	This is the maximum number of kilobytes that the block layer will allow\n62	for a filesystem request. Must be smaller than or equal to the maximum\n63	size allowed by the hardware.\n64	\n65	max_segments (RO)\n66	-----------------\n67	Maximum number of segments of the device.\n68	\n69	max_segment_size (RO)\n70	---------------------\n71	Maximum segment size of the device.\n72	\n73	minimum_io_size (RO)\n74	--------------------\n75	This is the smallest preferred io size reported by the device.\n76	\n77	nomerges (RW)\n78	-------------\n79	This enables the user to disable the lookup logic involved with IO\n80	merging requests in the block layer. By default (0) all merges are\n81	enabled. When set to 1 only simple one-hit merges will be tried. When\n82	set to 2 no merge algorithms will be tried (including one-hit or more\n83	complex tree/hash lookups).\n84	\n85	nr_requests (RW)\n86	----------------\n87	This controls how many requests may be allocated in the block layer for\n88	read or write requests. Note that the total allocated number may be twice\n89	this amount, since it applies only to reads or writes (not the accumulated\n90	sum).\n91	\n92	To avoid priority inversion through request starvation, a request\n93	queue maintains a separate request pool per each cgroup when\n94	CONFIG_BLK_CGROUP is enabled, and this parameter applies to each such\n95	per-block-cgroup request pool.  IOW, if there are N block cgroups,\n96	each request queue may have up to N request pools, each independently\n97	regulated by nr_requests.\n98	\n99	optimal_io_size (RO)\n100	--------------------\n101	This is the optimal io size reported by the device.\n102	\n103	physical_block_size (RO)\n104	------------------------\n105	This is the physical block size of device, in bytes.\n106	\n107	read_ahead_kb (RW)\n108	------------------\n109	Maximum number of kilobytes to read-ahead for filesystems on this block\n110	device.\n111	\n112	rotational (RW)\n113	---------------\n114	This file is used to stat if the device is of rotational type or\n115	non-rotational type.\n116	\n117	rq_affinity (RW)\n118	----------------\n119	If this option is \'1\', the block layer will migrate request completions to the\n120	cpu \"group\" that originally submitted the request. For some workloads this\n121	provides a significant reduction in CPU cycles due to caching effects.\n122	\n123	For storage configurations that need to maximize distribution of completion\n124	processing setting this option to \'2\' forces the completion to run on the\n125	requesting cpu (bypassing the \"group\" aggregation logic).\n126	\n127	scheduler (RW)\n128	--------------\n129	When read, this file will display the current and available IO schedulers\n130	for this block device. The currently active IO scheduler will be enclosed\n131	in [] brackets. Writing an IO scheduler name to this file will switch\n132	control of this block device to that new IO scheduler. Note that writing\n133	an IO scheduler name to this file will attempt to load that IO scheduler\n134	module, if it isn\'t already present in the system.\n135	\n136	\n137	\n138	Jens Axboe <jens.axboe@oracle.com>, February 2009\n</pre>\n\n\n\n\n==== Linux kernel 3.8.0 source code ====\n\n; block/blk-settings.c: blk_queue_make_request()\n <pre>\n\n152 /**\n153  * blk_queue_make_request - define an alternate make_request function for a device\n154  * @q:  the request queue for the device to be affected\n155  * @mfn: the alternate make_request function\n156  *\n157  * Description:\n158  *    The normal way for &struct bios to be passed to a device\n159  *    driver is for them to be collected into requests on a request\n160  *    queue, and then to allow the device driver to select requests\n161  *    off that queue when it is ready.  This works well for many block\n162  *    devices. However some block devices (typically virtual devices\n163  *    such as md or lvm) do not benefit from the processing on the\n164  *    request queue, and are served best by having the requests passed\n165  *    directly to them.  This can be achieved by providing a function\n166  *    to blk_queue_make_request().\n167  *\n168  * Caveat:\n169  *    The driver that does this *must* be able to deal appropriately\n170  *    with buffers in \"highmemory\". This can be accomplished by either calling\n171  *    __bio_kmap_atomic() to get a temporary kernel mapping, or by calling\n172  *    blk_queue_bounce() to create a buffer in normal memory.\n173  **/\n174 void blk_queue_make_request(struct request_queue *q, make_request_fn *mfn)\n175 {\n176         /*\n177          * set defaults\n178          */\n179         q->nr_requests = BLKDEV_MAX_RQ;\n180 \n181         q->make_request_fn = mfn;\n182         blk_queue_dma_alignment(q, 511);\n183         blk_queue_congestion_threshold(q);\n184         q->nr_batching = BLK_BATCH_REQ;\n185 \n186         blk_set_default_limits(&q->limits);\n187 \n188         /*\n189          * by default assume old behaviour and bounce for any highmem page\n190          */\n191         blk_queue_bounce_limit(q, BLK_BOUNCE_HIGH);\n192 }\n193 EXPORT_SYMBOL(blk_queue_make_request);\n\n</pre>\n\n\n\n\n; include/linux/blkdev.h: BLKDEV_MAX_RQ\n <pre>\n  38 #define BLKDEV_MAX_RQ   128     /* Default maximum */\n</pre>\n\n\n\n\n; block/blk-sysfs.c: /* Functions related to sysfs handling */\n <pre>\n 40 \n 41 static ssize_t queue_requests_show(struct request_queue *q, char *page)\n 42 {\n 43         return queue_var_show(q->nr_requests, (page));\n 44 }\n 45 \n 46 static ssize_t\n 47 queue_requests_store(struct request_queue *q, const char *page, size_t count)\n 48 {\n 49         struct request_list *rl;\n 50         unsigned long nr;\n 51         int ret;\n 52 \n 53         if (!q->request_fn)\n 54                 return -EINVAL;\n 55 \n 56         ret = queue_var_store(&nr, page, count);\n 57         if (ret < 0)\n 58                 return ret;\n 59 \n 60         if (nr < BLKDEV_MIN_RQ)\n 61                 nr = BLKDEV_MIN_RQ;\n 62 \n 63         spin_lock_irq(q->queue_lock);\n 64         q->nr_requests = nr;\n 65         blk_queue_congestion_threshold(q);\n 66 \n 67         /* congestion isn\'t cgroup aware and follows root blkcg for now */\n 68         rl = &q->root_rl;\n 69 \n 70         if (rl->count[BLK_RW_SYNC] >= queue_congestion_on_threshold(q))\n 71                 blk_set_queue_congested(q, BLK_RW_SYNC);\n 72         else if (rl->count[BLK_RW_SYNC] < queue_congestion_off_threshold(q))\n 73                 blk_clear_queue_congested(q, BLK_RW_SYNC);\n 74 \n 75         if (rl->count[BLK_RW_ASYNC] >= queue_congestion_on_threshold(q))\n 76                 blk_set_queue_congested(q, BLK_RW_ASYNC);\n 77         else if (rl->count[BLK_RW_ASYNC] < queue_congestion_off_threshold(q))\n 78                 blk_clear_queue_congested(q, BLK_RW_ASYNC);\n 79 \n 80         blk_queue_for_each_rl(rl, q) {\n 81                 if (rl->count[BLK_RW_SYNC] >= q->nr_requests) {\n 82                         blk_set_rl_full(rl, BLK_RW_SYNC);\n 83                 } else {\n 84                         blk_clear_rl_full(rl, BLK_RW_SYNC);\n 85                         wake_up(&rl->wait[BLK_RW_SYNC]);\n 86                 }\n 87 \n 88                 if (rl->count[BLK_RW_ASYNC] >= q->nr_requests) {\n 89                         blk_set_rl_full(rl, BLK_RW_ASYNC);\n 90                 } else {\n 91                         blk_clear_rl_full(rl, BLK_RW_ASYNC);\n 92                         wake_up(&rl->wait[BLK_RW_ASYNC]);\n 93                 }\n 94         }\n 95 \n 96         spin_unlock_irq(q->queue_lock);\n 97         return ret;\n 98 }\n 99 \n\n</pre>\n\n\n\n; drivers/block/nvme.c: NVME_Q_DEPTH\n <pre>\n  44 \n  45 #define NVME_Q_DEPTH 1024\n  46 #define SQ_SIZE(depth)          (depth * sizeof(struct nvme_command))\n  47 #define CQ_SIZE(depth)          (depth * sizeof(struct nvme_completion))\n  48 #define NVME_MINORS 64\n  49 #define NVME_IO_TIMEOUT (5 * HZ)\n  50 #define ADMIN_TIMEOUT   (60 * HZ)\n  51 \n</pre>\n\n== ## bNote-2013-12-02 ==\n\n=== XS-1715 Specification ===\n\n==== Key features ====\n\n* Performance\n: Optimized for 4KB random read and write workloads\n:- Performance Target\n::- More than 700K IOPS for 4KB random reads\n::- More than 200K IOPS for 4KB random writes (sustained)\n\n* Mapping Algorithm\n:- 4KB full page mapping\n:- FN21 4-planes program support \n:- FN21 4KB fast read support\n:- Hot/cold data separtion (ESP_MM_Mapping.c)\n:- Concurrent garbage collection during user page writes\n:- Non-blocking DRAM access to avoid pipeline bubbles of CPU\n:- No hardware register access at all during user read/write request processing\n:- Journal log information reduction for fast power-down and fast recovery at boot-up\n:- Flash RAID-5 support\n\n\n\n=== Admin/Misc ===\n\n: DS 인사 (전배관련): 정영민 대리, 박필 사원\n:-> 정영민 대리에게 확인. (OK)\n\n<!--\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:57]:\n  정대리님, 안녕하세요?\n  이번 10월 1일자로 기술원에서 SW개발팀으로 전배 온\n  정명준 책임입니다. \n  내년 승격 관련해서\n  문의드리고자 연락 드렸습니다\n  잠시 시간 되시는지요?\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:00]:\n  네\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:00]:\n  안녕하세요? 혹시 기술원의 김경진 차장으로부터\n  차년도 승격 관련해서\n  연락 받으셨던 것이 있으신지 궁금해서요~\n  제가 기술원 기준으로는 차년도 승격이 되는데\n  여기 전배를 오게 되면서, 승격 예외 대상자로 \n  예외 승격 대상자\n  로 분류해서 내년에 수석 진급이 보장될 수 있도록\n  해주겠다는 이야기를 들었었거든요\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:02]:\n  네 예전에 관련 결재를 통보받았으나, 책임님 명단이 있는지는 확인해봐야겠습니다\n  잠시만요\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:02]:\n  네~\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:05]:\n  네 확인했습니다. 책임님 승격되십니다\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:05]:\n  아 감사합니다~\n  이번에 저와 같이 오셨던\n  신현정 책임도 같이\n  승격 되는 것 맞죠?\n  저희 2명이 \n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:06]:\n  넵\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:06]:\n  된다고 들었었거든요\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:06]:\n  2명입니다\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:06]:\n  확인해주셔서 감사합니다. 그럼 저희 2명이 특별히\n  따로 더 할 일이\n  할 일은 없는 건지요?\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:06]:\n  넵\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:06]:\n  아, 잘 알겠습니다. \n  감사합니다. 좋은 오후 보내세요  \n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:07]:\n  네 수고하셔요~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:07]:\n  넵 감사합니다 ^^\n-->\n\n<!--\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:53]:\n  김과장님, 안녕하세요? 10월 1일자로 기술원에서 메모리사 S/W 개발팀으로 전배 온 정명준 책임입니다.\n  승격 관련해서 여쭙고자 연락 드렸습니다\n  잠시 시간 되시는지요?\n‎‎김효근(G5(과장)/담당과장/삼성전자)‎‎ [오후 1:54]:\n  아 네...\n  담당자는 박필 사원이나 \n  정영민 대리입니다. \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:55]:\n  아하 \n‎‎김효근(G5(과장)/담당과장/삼성전자)‎‎ [오후 1:55]:\n  정영민 대리는 지금 통화중이네요... \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:55]:\n  아, 그럼 잠시 후 정영민 대리에게 연락해보겠습니다 알려주셔서 감사합니다 ^_^\n‎‎김효근(G5(과장)/담당과장/삼성전자)‎‎ [오후 1:57]:\n  전 인력운영 담당자라 \n  승격에 대해서는 제가 정확한 답변을 못 드릴 것 같습니다. \n  정대리 전화 끊었네요\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:57]:\n  아, 감사합니다 ^^\n  연락해보겠습니다  \n-->\n\n: <strike>DS 인사 담당: 김효근 과장, 이창익 대리 (인력 이동 관련)</strike>\n: 10/17 김경진 차장 - 내년 승격 대상자는 기술원 인사팀에서 본사에 얘기해놓았으며, 11.1일자 인력들과 같이 해서 예외 대상자들 품의를 받아 사업부에 뿌릴 예정이라고 함','utf-8'),(2051,'\n\n<!--\nhttp://www.bloter.net/wp-content/uploads/2013/09/Table_Flash_MNA_List-1H13_thumb-500x378.png\n<ref>[주간스토리지] 새로운 플래시 기술 ‘NVMe’ http://www.bloter.net/archives/163450</ref>\n-->\n\n\n== Big & Medium Players ==\n\n=== General information table ===\n\n{| class=\"wikitable sortable\"\n! Name\n! width=\"\" | Logo\n! Description\n! Products\n! Founded\n! HQ\n! Employee\n! Key people\n! Note\n|-\n| EMC\n| <img src=\"http://s3.amazonaws.com/crunchbase_prod_assets/assets/images/resized/0002/1658/21658v2-max-250x250.png\" width=\"100\"/>\n| EMC descr\n| EMC products\n| EMC founded\n| EMC HQ\n| EMC employee\n| EMC key people\n| EMC note\n|-\n| Fusion IO\n| logo\n| descr\n| products\n| founded\n| HQ\n| employee\n| key people\n| note\n|-\n| Intel\n| logo\n| descr\n| products\n| founded\n| HQ\n| employee\n| key people\n| note\n|-\n| LSI\n| logo\n| descr\n| products\n| founded\n| HQ\n| employee\n| key people\n| note\n|-\n| Micron\n| logo\n| descr\n| products\n| founded\n| HQ\n| employee\n| key people\n| note\n|-\n| Netapp\n| logo\n| descr\n| products\n| founded\n| HQ\n| employee\n| key people\n| note\n|-\n| OCZ\n| logo\n| descr\n| products\n| founded\n| HQ\n| employee\n| key people\n| note\n|-\n| SanDisk name\n| logo\n| descr\n| products\n| founded\n| HQ\n| employee\n| key people\n| note\n|-\n| Seagate\n| logo\n| descr\n| products\n| founded\n| HQ\n| employee\n| key people\n| note\n|-\n| SK Hynix\n| logo\n| descr\n| products\n| founded\n| HQ\n| employee\n| key people\n| note\n|-\n| Western Digital\n| logo\n| descr\n| products\n| founded\n| HQ\n| employee\n| key people\n| note\n|-\n|}\n\n=== EMC ===\n\n==== EMC의 Xtrem-X 전략 (Itzikr\'s Blog, 2013-03-15) <ref>[http://itzikr.wordpress.com/2013/03/15/taking-advantage-of-flash/ Taking Advantage Of FLASH (2013-03-15)]</ref> ====\n\n* Flash 관점에서 본 HW의 종류 및 SW의 역할\n: <img src=\"http://itzikr.files.wordpress.com/2013/03/image_thumb15.png?w=500&h=281\" width=\"500\"/>\n\n* Xtrem-X lineup\n: <img src=\"http://itzikr.files.wordpress.com/2013/03/image_thumb16.png?w=500&h=250\" width=\"500\"/><br/>\n\n{| class=\"wikitable sortable\" width=\"500\"\n|+ Deployment position of Xtrem-X products (Server Vs. Storage)\n| width=\"\" | XtremSF Flash Cards\n| Rowspan=\"2\" | Server side\n|-\n| XtremSW Suite\n|-\n| XtremIO Array\n| Storage Side\n|-\n|}\n\n\n* XtremIO position in EMC\'s product space <ref>[http://www.theregister.co.uk/2012/04/24/emc_xtremio/ XtremIO buy to spark flash array startup-gobbling frenzy]</ref>\n: <img src=\"http://regmedia.co.uk/2012/04/24/xtremio_in_emc_product_space.jpg\" width=\"500\"/>\n\n=== Fusion IO (PCIe SSD) ===\n\nFusion-io is a leading provider of enterprise solid-state technology and high-performance I/O solutions that unlock a world of possibilities for performance-starved applications, closing the gap between processing power and storage performance. <ref>[http://www.crunchbase.com/company/fusion-io Fusion-io - CrunchBase Profile]</ref>\n\n=== Intel ===\n\n=== LSI ===\n\n\n=== Micron (DRAM, NAND Flash) ===\n\nFounded in 1978, Micron manufactures DRAM components and modules and NAND Flash. <ref>[http://www.crunchbase.com/company/micron-technology Micron Technology - CrunchBase Profile]</ref>\n\n=== NetApp ===\n\n=== OCZ ===\n\n\n=== SanDisk (NAND Flash) ===\n\n=== SeaGate ===\n\n==== 씨게이트, 태블릿용 HDD 공개 (Bloter.net, 2013-09-10) <ref>http://www.bloter.net/archives/163629</ref> ====\n\n* Seagate는, \'13년 6월 발표했던 ‘랩톱 울트라씬’이라는 5mm 두께의 하드디스크에 이어, \'13년 9월 10일, 태블릿 환경에 최적화한 ‘울트라 모바일 HDD’ 발표. <ref>[http://www.seagate.com/internal-hard-drives/laptop-hard-drives/ultra-mobile-hdd/?cmpid=friendly-_-internal-mobilekit--us Seagate Ultra Mobile HDD - 5mm HDD with 7x more tablet system capacity]</ref>\n* 전력 소비나 속도는 기존 플래시 메모리와 비슷하지만, 용량은 500GB임.\n\n{| class=\"wikitable sortable\"\n|+ SeaGate 울트라 모바일 HDD\n|\n<img src=\"http://www.bloter.net/wp-content/uploads/2013/09/seagate_04.jpg\" width=\"400\"/>\n|\n<img src=\"http://www.seagate.com/files/www-content/product-content/seagate-laptop-fam/ultra-mobile-hdd/_shared/images/hero-banner-left-570x375.png\" width=\"400\"/>\n|-\n|}\n\n* HDD의 용량과 Flash의 속도를 동시에 제공케 하는 동작 메커니즘\n:- 두께는 5mm, 2.5인치 플래터에 최대 500GB의 저장 공간 보유.\n:- ‘다이내믹 데이터 드라이버’라는 소프트웨어를 이용, 태블릿의 플래시 메모리와 하드디스크를 유기적으로 결합. 이전에 내놓은 하이브리드 하드디스크 ‘모멘터스XT’처럼 하드디스크의 데이터 일부를 이용 빈도에 따라 플래시 메모리에 캐싱하는 것과 비슷한 효과를 낼 수 있음. 따라서 태블릿은 8GB 혹은 그보다 더 작은 플래시 메모리만 있어도 됨.\n\n* Hybrid HDD, \'모멘터스XT\' 시리즈\n:- 씨게이트는 몇년 전부터 하드디스크의 경쟁력을 높이기 위해 하드디스크에 플래시 메모리를 접목하는 노력을 해 왔음.\n:- 4~8GB의 플래시 메모리를 장착한 후, 자주 읽고 쓰는 파일들을 플래시 메모리에 스스로 할당. 주로 운영체제의 파일들이나 라이브러리가 보관되는데, 8GB 정도면 안드로이드를 통으로 깔아도 넉넉한 용량임.\n:- 이 울트라 모바일 HDD도 이용자가 직접 플래시 메모리 영역에 접근하지는 못하지만 실질적으로 성능에 영향을 끼칠 수 있는 운영체제 파일들이 태블릿의 플래시 메모리에 캐시되기 때문에 반응 속도가 빠를 수 있음.\n:- 씨게이트는 기존 태블릿에 쓰이던 가장 큰 용량인 64GB 플래시 메모리에 비해 성능은 거의 같고 용량은 7배 이상이라고 설명.\n:- Momentus XT SSHD Data Sheet <ref>[http://www.seagate.com/files/staticfiles/docs/pdf/datasheet/disc/momentus-xt-data-sheet-ds-1704-5-1209us.pdf Momentus XT SSHD Data Sheet]<br/>Momentus XT SSHD 중, 750GB짜리 제품(ST750LX003)에는 SLC/8GB가, 500GB짜리 제품(ST95005620AS)에는 SLC/4GB가 장착되어 있음.</ref>\n:- Seagate Momentus XT SSHD Review by AnandTech <ref>[http://www.anandtech.com/show/3734/seagates-momentus-xt-review-finally-a-good-hybrid-hdd Seagate\'s Momentus XT Reviewed, Finally a Good Hybrid HDD (AnandTech, 2010-05-24)]</ref>\n\n=== SK Hynix (DRAM, NAND Flash, System IC) ===\n\nSK Hynix is the global leader in producing semiconductor, such as DRAM and NAND flash and System IC including CMOS Image Sensors. Since pilot production of Korea’s first 16Kb SRAM in 1984, SK Hynix consistently led the industry with smaller, faster and lower power semiconductor.\n\n<ref>[http://www.crunchbase.com/company/sk-hynix SK Hynix - CrunchBase Profile]</ref>\n\n\n=== Western Digital (HDD, SSD) ===\n\nWestern Digital Corporation engages in the design, development, manufacture, and sale of hard drives worldwide. It offers hard drives, including 3.5-inch, 2.5-inch, 1.8-inch, and 1.0-inch form factor drives under the Western Digital, WD, the WD logo, WD Caviar, WD Raptor, WD VelociRaptor, WD Scorpio, WD Elements, My Passport, My Book, My DVR Expander, and GreenPower brand names. <ref>[http://www.crunchbase.com/company/western-digital Western Digital - CrunchBase Profile]</ref>\n\n\n* 원래는 HDD 회사이지만, 최근 NAND Flash SSD 업체를 공격적으로 인수 및 투자하고 있음.\n: [http://www.silicontap.com/virident_acquired_for_68_m_by_western_digital/s-0051251.html Western Digital acquired Virident Systems for $685M. 2013-09-09]\n: [http://pevc.dowjones.com/article?an=DJFVW00020130807e987r1u1u&from=alert&pid=32&ReturnUrl=http%3a%2f%2fpevc.dowjones.com%2farticle%3fan%3dDJFVW00020130807e987r1u1u%26from%3dalert%26pid%3d32 Western Digital invested in Tegile Systems. 2013-08-07]\n: [http://www.finsmes.com/2013/02/skyera-closes-51-6m-financing.html Western Digital invested in Skyera. 2013-02-21]\n\n== Start-ups ==\n\n\n=== Anobit (Fabless Semiconductor Company, Acquired by Apple) ===\n\nAnobit Technologies, Ltd., a fabless semiconductor company, developed solutions for the Flash memory market. Its technology optimized Flash memory devices for storage solutions.\nThe company was founded in 2006 and was based in Pituach, Israel. In December 2011, the company was acquired by Apple. <ref>[http://www.crunchbase.com/company/anobit-technologies Anobit Technologies - CrunchBase Profile]</ref>\n\n<br/>\n\n=== BiTMICRO (PCIe/FC/SATA SSD) ===\n\n* A pioneer in the solid state storage industry, BiTMICRO has built its reputation on providing high performance solid state storage solutions used in enterprise and industrial applications.\n\n* BiTMICRO has always been driven to provide storage hardware with the highest level of efficiency, superior speed, and round-the-clock reliability.\n\n* Headquartered in Fremont, California, BiTMICRO’s core is its Research and Development Group that enables the company to continually address ever-evolving customer needs. <ref>[http://www.reuters.com/article/2012/06/05/idUS122210+05-Jun-2012+BW20120605 BiTMICRO Acquires QualCore`s Intellectual Property (2012-06-05)]</ref>\n\n{| class=\"wikitable sortable\"\n|+ General information <ref>[http://www.crunchbase.com/company/bitmicronetworks BitMicro - CrunchBase Profile]</ref>\n|-\n| Logo || <img src=\"http://s3.amazonaws.com/crunchbase_prod_assets/assets/images/resized/0003/3658/33658v3-max-250x250.jpg\" width=\"200\"/>\n|-\n| Website || http://bitmicro.com/\n|-\n| Description || Develops high performance flash drives\n|-\n| Products || PCIe/FC/SATA SSD\n|-\n| Founded || 1995\n|-\n| Employees || 400\n|-\n| Headquarters || Fremont, CA, USA\n|-\n| Key people ||\n* Rudy Bruce\n: Founder and CEO\n|-\n|}\n\n<br/>\n\n=== FlashSoft (SSD Cache SW, Acquired by SanDisk) ===\n\n* Commodity SSD를 고성능 read-write cache로 동작할 수 있게 함으로써, 응용의 performance 및 scalability를 경제적으로 향상할 수 있게 하는 SW 기술 보유. \n\n* Sunnyvale, CA에 HQ가 있으며 Ted Sanford가 CEO임. \n\n* 2012-02-15에 SanDisk에 인수되었음.\n\n<br/>\n\n=== HGST (HDD, SSD, External Storage, Acquired by Western Digital) ===\n\n* 설립 이후 두 번의 M&A\n:- HGST (formerly Hitachi Global Storage Technologies)는 2003년에 IBM의 HDD 부문을 Hitachi가 $2.05B (약 2조5백억원)에 인수하여 설립되었으나, 다시 2012년 3월 8일에 Western Digital (WD)가 $3.9B (약 4조원)의 현금과 $0.9B (약 1조원) 규모의 WD 통상주를 주고 인수함에 따라, HGST는 Western Digital의 완전 자회사가 되었음.\n:- HGST와 WD의 모회사/자회사 관계가 있음에도 불구하고 시장에서는 별도의 브랜드와 제품 라인업을 가지고 서로 경쟁할 수 있는 형태로 정리되었다는 점이 흥미로움.\n\n* HQ는 San Jose, CA에 있으며 현재 45,000명의 직원이 근무하고 있음\n\n<br/>\n\n\n=== IDT ===\n\n=== Kaminario ===\n\n{| style=\"wikitable sortable\"\n| <img src=\"http://kaminario.com/img/flash-array/architecture-graph-2.jpg\" width=\"300\"/>\n| <img src=\"http://kaminario.com/img/flash-array/architecture-graph-1.jpg\" width=\"300\"/>\n|-\n|}\n\n: Kaminario K-Block array\n\n==== Kaminario 제품의 특징 ====\n\nKaminario의 K2 scale-out all-flash array는 SPEAR (Scale-out Performance and Resilience)라 불리는 architecture를 가지며, consistent한 3D performance 뿐만 아니라 enterprise-class resiliency를 제공. <ref>[http://kaminario.com/flash-array/ 4th Generation Scale-out All-flash - Kaminario]</ref>\n\n* Performance\n: Latency (OLTP), Bandwidth (for OLAP/DW), IOPS (for Virtualization)의 세 측면의 성능이 모두 우수. (Kaminario에서는 이것을 3D performance라고 부르고 있음)\n\n* Scalability\n: K2는 성능과 용량을 linear하게 scale하는 것이 쉽게 가능하도록 구현되어있음. (node scaling을 하더라도 0.3msec 미만의 수준으로 latency가 유지된다고 함)\n\n* Resiliency\n: K2의 HW component들은 모두 redundant 하며 single point of failure가 없도록 함으로써 high availability를 달성. Kaminario의 built-in failover and recovery 기능으로 인해 시스템 failure 상황에서도 성능 저하 수준이 25% 이하가 되도록 하고 있음. System SW upgrade는 non-disruptive 방식으로 이루어지기 때문에 system 사용성에 중단이 업도록 하고 있음. 또한 모든 HW component들은 hot-swappable함. System failure 시에는 자동으로 system 관리자에게 알리고, 그동안 internal backup flash로부터 data를 access하도록 조치됨.\n\n* Manageability\n: 특별한 이야기는 없음.\n\n(그런데 이 모든 것들을 가능케 하는 구체적 메커니즘은?)\n\n==== SPC-1 benchmark for K2-D product ====\n\nSolid state storage supplier Kaminario has grabbed the SPC-1 storage benchmark with the first million-plus IOPS score, a full 134 per cent faster than previous king-of-the-heap IBM.\n\nKaminario provides a \'\'\'K2 line of clusterable solid state storage systems\'\'\' using \'\'\'DRAM (K2-D)\'\'\', \'\'\'NAND (K2-F) with Fusion-io PCIe flash cards\'\'\', or \'\'\'a hybrid DRAM-NAND system (K2-H)\'\'\'. The K2-D is for write-intensive and latency-sensitive applications. (DRAM이니까 당연함)\n\n<img src=\"http://regmedia.co.uk/2012/07/27/kaminario_million_plus_spc_1_iops.jpg\" width=\"\"/>\n\n벤치마크 수치를 보면 1,219,973.91 IOPS를 보여준 Kaminario 제품 (K2-D)이 520,043.99 IOPS를 보인 IBM 제품 (SVC and Storwize)에게 큰 격차의 IOPS 값으로 이긴 것으로 보이나 (average response time은 Kaminario가 3.44msec이고 IBM이 7.39msec임), 실상은 1.2TB mirrored, all-DRAM storage array (Kaminario)가 282TB disk-based 스토리지 시스템 (IBM)과 비교된 것으로서, apples and oranges comparison에 해당한다고 볼 수 있음. 벤치마킹에 사용된 시스템은 K2-D 로서, 3개의 K2-D enclosure들이 하나의 array로 엮여 있는 형태임. 15개의 IO director들과 33개의 DataNote들 (30 active)이 포함되어 있으며, 각각은 그 자체의 solid state media 및 backup module을 가지고 있는 하나의 server임. SPC-1 workload를 구동하는 10개의 host server들과는 FC (Fibre Channel)을 통해 연결되어 있음. 참고로, 벤치마크에 사용되었던 Kaminario kit은 $490,760 이고, IBM SVC/Storwize setup은 $3,598,956 으로서 약 7배의 가격 차이가 있음. <ref>[http://www.theregister.co.uk/2012/07/30/kaminario_spc_1/ Million-plus IOPS: Kaminario smashes IBM in DRAM decimation; \'\'\'But apples-and-oranges storage test not the fairest of them all\'\'\']</ref>\n\n<br/>\n\n=== Marvell ===\n\n\n=== Nimble Storage (Hybrid Storage System) ===\n\n<br/>\n\n=== Nutanix (Converged System) ===\n\nFounded in 2009, Nutanix is \'\'\'the first company\'\'\' to offer a radically simple compute and storage infrastructure for implementing \'\'\'enterprise-class virtualization\'\'\' without complex and expensive network storage (SAN or NAS). <ref>[http://www.crunchbase.com/company/nutanix Nutanix - CrunchBase Profile]</ref>\n\n{| class=\"wikitable sortable\"\n|+ General information <ref>[http://www.crunchbase.com/company/nutanix Nutanix - CrunchBase Profile]</ref>\n|-\n| Logo || <img src=\"http://s3.amazonaws.com/crunchbase_prod_assets/assets/images/resized/0013/1172/131172v3-max-250x250.png\" width=\"200\"/>\n|-\n| Website || http://nutanix.com/\n|-\n| Description || Offers converged compute and storage system\n|-\n| Products || Converged storage system\n|-\n| Founded || 2009\n|-\n| Employees || about 150\n|-\n| Headquarters || San Jose, CA, 95110, USA\n|-\n| Key people ||\n* Dheeraj Pandey\n: Co-Founder, President and CEO, BOD\n|-\n|}\n\n* Articles\n:- [http://www.theregister.co.uk/2013/08/20/nutanix_os_converged_system_update/ \"Nutanix adds memory and flash de-dupe on server-storage halfbloods,\" The Register, 2013-08-20]\n:: Nutanix가 Memory, Flash에 저장된 데이터에 대한 Dedupe 기능을 추가한다는 소식.\n:- [http://www.idgconnect.com/abstract/1764/nutanix-gains-demand-google-datacentres \"Nutanix Gains from Demand for Google-like Datacentres,\" IDG CONNECT, 2013-05-22]\n\n* Notes\n:- NDFS (Nutanix Distributed File System)\n:: formerly called SOCS (Scale-Out Converged Storage)\n:- virtual disk controller.\n:- hockey-stick curve\n:: 처음에는 완만하지만 나중에 급하게 휘어지는 하키 스틱처럼, 초반에는 서서히 이루어지지만 곧 속도가 붙는 현상을 지칭\n\n<br/>\n\n=== NVELO (SSD Cache SW, Acquired by Samsung) ===\n\n\n=== Pliant Technology ===\n\n<ref>[http://www.crunchbase.com/company/pliant-technology Pliant Technology - CrunchBase Profile]</ref>\n\n=== Pure Storage (All Flash Storage System) ===\n\n=== QualCore Logic ===\n\n=== SANRAD (iSCSI Storage Virtualization, HA Disaster Recovery, Acquired by OCZ) ===\n\nSANRAD is an Internet Small Computer Systems Interface (iSCSI) storage virtualization company. SANRAD specializes in high-availability disaster recovery, storage virtualization, management and disaster recovery. <ref>[http://www.crunchbase.com/company/sanrad SANRAD - CrunchBase Profile]</ref>\n\n<img src=\"http://www.sanrad.com/images/VXL.gif\" width=\"400\"/>\n: SANRAD VXL SW - Accelerate Virtual Machines with Host Based Flash\n\n=== ScaleIO (Storage SW, Acquired by EMC) ===\n\n\n=== Skyera (All Flash Storage System) ===\n\nFounded in 2010, Skyera is bringing affordable flash memory to enterprise solid-state storage systems. Skyhawk series of all flash enterprise solid-state storage systems is designed to enable a large class of applications with extraordinarily high performance, exceptionally lower power consumption and the lowest cost relative to existing enterprise storage systems. <ref>[http://www.crunchbase.com/company/skyera Skyera - CrunchBase Profile]</ref>\n\n* Headquarters: San Jose, CA, 95131 USA\n* Key People: Radoslav Danilak (CEO), Rod Mullendore (CTO), Tony Barbagallo (VP Marketing)\n* Employees: about 40\n\n=== SMART Storage Systems (SAS, SATA, DDR3 type SSD, Acquired by SanDisk) ===\n\nSMART Storage Systems is a technology leader in the design, development and deployment of current and next-generation enterprise solid-state storage products. <ref>[http://www.crunchbase.com/company/smart-storage-systems SMART Storage Systems - CrunchBase Profile]</ref>\n\n* ULLtraDIMM\n: 7월에 SanDisk에 인수된 <ref>SMART Storage Systems was acquired by SanDisk for $307M. 2013-07-02 http://venturebeat.com/2013/07/02/sandisk-buys-smart-storage-systems/</ref> SMART Storage Systems의 제품 중, [http://smartstoragesys.com/products/ulltradimm.asp ULLtraDIMM]은 Ultra Low Latency (5us for Write)를 제공하는 DIMM 인터페이스의 MLC NAND Flash 제품. (용량: 200GB ~ 400GB)\n\n:: The ULLtraDIMM is the result of a close partnership between SMART Storage Systems and Diablo Technologies, utilizing our combined expertise of the \'\'\'memory bus\'\'\' and \'\'\'flash storage\'\'\' to create a new tier of \'\'\'ultra-low latency storage\'\'\'.\n:: The ULLtraDIMM closes the last performance gap in current storage infrastructures by \'\'\'placing flash as close as possible to the CPU\'\'\' and applications. The ULLtraDIMM\'s innovative design connects flash storage to the memory bus \'\'\'using the DIMM form factor\'\'\'. \n:: This enables a new generation of applications that require ultra-low latency access to cost effective storage devices.\n:: The ULLtraDIMM achieves an astounding \'\'\'5 microsecond write latency\'\'\', outperforming all existing flash storage devices on the market, including PCIe-based drives. The ULLtraDIMM comes in \'\'\'capacities of 200GB and 400GB\'\'\', and utilizes \'\'\'1xnm MLC flash\'\'\'.\n:: SMART Storage Systems\' Guardian Technology Platform allows the ULLtraDIMM to leverage the lowest-cost MLC flash available on the market, while providing up to 10 Drive Writes Per Day to meet the endurance needs of write intensive and mixed-workload applications.\n\n=== SolidFire (All Flash Storage System) ===\n\nSolidFire is building the first and only primary storage system designed specifically \'\'\'for cloud service providers\'\'\'. Using an \'\'\'all-solid-state, scale-out architecture\'\'\' with patented efficiency technologies for dramatically reduced power, cooling, and capacity consumption, our high-performance and high-efficiency storage solution lets cloud providers guarantee sustained performance to thousands of servers from a single storage system. <ref>[http://www.crunchbase.com/company/solidfire SolidFire - CrunchBase Profile]</ref>\n\n=== Texas Memory Systems (SSD Arrays, PCIe SSD, Acquired by IBM) ===\n\n1978년 Houston, Texas에서 설립된 Texas Memory Systems (TMS)는 SSD 및 DSP 업체로서, 주로 high bandwith, low latency enterprise storage 및 DSP 시스템에 focus되어 있음. DRAM Array (Rackmount), Flash Array (Rackmount), 그리고 PCIe SSD 제품을 포함하는 RamSan 시리즈를 제공하고 있음 (대기업 및 정부 기관 상대로 직판 뿐만 아니라 OEM 형태로도 영업). 2012년 8월 16일, IBM의 TMS 인수 소식이 발표되었음. <ref>[http://www.crunchbase.com/company/texas-memory-systems Texas Memory Systems - CrunchBase Profile]</ref>\n\n\n==== Texas Memory Systems Products (RamSan) ====\n\n{| class=\"wikitable sortable\"\n|+ TMS RamSan Product Series <ref>[http://en.wikipedia.org/wiki/Texas_Memory_Systems Texas Memory Systems - Wikipedia]</ref>\n| 제품명\n| Form Factor\n| Storage Medium\n| Capacity (GB) <ref>Max Usable Capacity</ref>\n| Speed (IOPS)\n| Latency (us)\n| Bandwidth (GB/s)\n|-\n| RamSan-440 || 4U rackmount || DRAM || 512 || 600,000 || 15 || 4.5\n|-\n| RamSan-70 || PCIe || SLC Flash || 900 || 1,500,000 || 30 || 2.5\n|-\n| RamSan-630 || 3U rackmount || SLC Flash || 10,000 || 1,000,000 || 80 || 10\n|-\n| RamSan-710 || 1U rackmount || SLC Flash || 5,000 || 400,000 || 35 || 5\n|-\n| RamSan-720 || 1U rackmount || SLC Flash || 12,000 || 500,000 || 25 || 5\n|-\n| RamSan-810 || 1U rackmount || eMLC Flash || 10,000 || 400,000 || 25 || 4\n|-\n| RamSan-820 <ref>[http://www.nexstor.co.uk/prod_pdfs/TMS%20RamSan-820%20Data%20Sheet.pdf Texas Memory Systems RamSan-820]</ref> || 1U rackmount || eMLC Flash || 24,000 || 450,000 || 25 || 4\n|-\n|}\n\n* TMS RamSan-400 (DRAM Array) (Image from Wikipedia)\n: <img src=\"http://upload.wikimedia.org/wikipedia/commons/d/de/RamSan-400.jpg\" width=\"300\"/> \n\n* TMS RamSan-70 (PCIe SLC Flash) (Image from Wikipedia)\n: <img src=\"http://upload.wikimedia.org/wikipedia/commons/e/e7/RamSan-70.png\" width=\"300\"/>\n\n* TMS RamSan-810 (1U eMLC Flash Array) (Image from Wikipedia)\n: <img src=\"http://upload.wikimedia.org/wikipedia/commons/6/63/RamSan-810.png\" width=\"300\"/>\n\n=== Tintri (SSD-HDD Hybrid Storage System) ===\n\n=== VeloBit (SSD Cache SW, Acquired by HGST) ===\n\n=== Violin Memory (All Flash Storage System) ===\n\n\n=== Virident Systems (PCIe SSD, Acquired by Western Digital 2013-09-09) ===\n\nVirident Systems builds enterprise-class solutions based on Storage Class Memory (SCM), a class of disruptive technologies which includes flash memory, that can revolutionize the data center and cloud computing by redefining the memory-storage hierarchy. Virident Systems was founded by notable Silicon Valley veterans from Google, Sun Microsystems, Cisco, SGI, and Intel. <ref>[http://www.crunchbase.com/company/virident-systems Virident Systems - CrunchBase Profile]</ref>\n\n* PCIe SSD 제품 (FlashMAX, FlashMAX Connect 등) 보유. 특히 FlashMAX Connect의 concept이 재미있음. Deep Dive 필요.\n\n\n==== Virident FlashMAX Connect ====\n\n* [http://www.virident.com/products/flashmax-connect/ FlashMAX Connect]\n: FlashMAX Connect SW는 FlashMAX II HW 플랫폼을 기반으로 flash-aware network-level storage capabilities를 구성하여, server side에 Virtual Flash Storage Networks를 생성할 수 있음. 이를 통해, server들 간의 shared block-level access 및 high availability가 제공되는 flash storage를 구축 가능하며, PCIe flash의 low-latency 성능 이득을 그대로(?) 가져갈 수 있음.\n\n\n* Key Benefits\n:- Achieve low-latency sharing and replication of PCIe flash storage across network using Remote Direct Memory Access.\n:- Scale flash storage capacity with or independently of compute resources. Scale up or scale out.\n:- No proprietary storage boxes are needed, Use standard servers of your choice.\n\n\n* FlashMAX Connect - \'\'\'High Availability\'\'\'\n: vHA provides high-throughput, low-latency synchronous mirroring across servers for data residing on FlashMAX II SCM devices. Create fail-over clusters without sacrificing the performance or latency benefits of PCIe-attached flash.\n: <img src=\"http://www.virident.com/default/assets/Image/Vha-flashmax-connect.jpg\" width=\"300\"/>\n\n\n* FlashMAX Connect - \'\'\'Block-level Shared Access\'\'\'\n: vShare enables block-level shared access to FlashMAX II SCM devices from multiple server nodes. Build your application clusters using low-latency shared flash storage network. Easily scale flash storage capacity and performance as application needs grow.\n: <img src=\"http://www.virident.com/default/assets/Image/Vshare-flashmax-connect.jpg\" width=\"300\"/>\n\n\n* FlashMAX Connect - \'\'\'Caching\'\'\'\n: Use vCache to accelerate SAN or DAS storage by using FlashMAX II SCM devices as high-performance PCIe-attached flash cache. vCache eliminates double mapping of block addresses and provides up to six-times higher performance and longer flash lifetime compared to third-party caching solutions built on SSDs. Choose between write-back, write-through and write-around caching modes to fit the needs of your applications.\n: <img src=\"http://www.virident.com/default/assets/Image/vcache-flashmax-connect.jpg\" width=\"300\"/>\n\n\n=== VirtenSys (PCIe Sharing, IO Virtualization, Acquired by Micron) ===\n\n* PCIe sharing 기술을 통해 HBA 혹은 NIC 장비를 server간 공유시킨다는 아이디어를 기반으로, Xyratex 출신인 Marek Piekarski가 2005년에 Manchester, UK에서 VirtenSys 설립 (이를 통해, 모든 server들이 전부 HBA/NIC을 가지고 있지 않아도 되고, 공유되는 HBA/NIC의 utilization/optimization rate을 높일 수 있게 됨).\n\n* 가상화된 server들이 증가하면서, 각 server들이 NICs, HBAs에 IO 부담이 가중되기 시작하고 VirtenSys의 아이디어가 큰 관심을 끌게 되었음. 그러나, Data Center의 server IO 동작 방식을 바꾼다는 것이 쉽지 않았으며, Xsigo와의 제품 비교에서도 뒤쳐지는 등, 기술적 뿐만 아니라 기술외적인 어려움을 겪으면서 투자받은 금액을 소진하게 되었음.\n\n* Micron이 VirtenSys 인수에 얼마의 금액을 썼는지는 비밀로 부쳐졌으나, 대략 $160M (약 1600억원) 정도일 것으로 추정됨. 총 4 차례에 걸쳐서 A, B, C, C Funding을 통해 $56M (약 600억원) 정도 투자를 받았으나 최종적으로 2012년 1월에 Micron에 인수되었음.<ref>[http://www.crunchbase.com/company/virtensys VirtenSys - CrunchBase Profile]</ref>\n\n\n==== VirtenSys approach ====\n\n{| class=\"wikitable sortable\"\n|+ Traditional deployment Vs. VirtenSys approach\n|\n<img src=\"http://www.virtualdataproducts.com/_/rsrc/1279205474002/virtensys/Virtensys%20VIO%204000%20without.JPG?height=400&width=367\" width=\"300\"/> <br/>&uarr; Traditional deployment\n|\n<img src=\"http://www.virtualdataproducts.com/_/rsrc/1279203267806/virtensys/Virtensys%20VIO%204000%20Datasheet_Page_1_Image_0005.jpg?height=400&width=363\" width=\"300\"/> <br/>&uarr; VirtenSys approach\n|-\n|}\n\n=== Xsio (??PCIe Sharing) ===\n\n\n=== XtremIO (All Flash Storage System, Acquired by EMC) ===\n\n2009년에 설립된 Israel 출신의 All flash scale-out enterprise storage arrays 업체. Cupertino, CA와 Herzelyia, Israel 에 Office가 있음.\n\n==== XtremIO 설립 멤버 ====\n\nXtremIO was founded by a group of Israeli high tech veterans including Aryeh Margi, a co-founder of M-Systems; Shuki Bruck, Yaron Segev, and CEO Ehud Rokach, a former senior executive at Orckit and CEO Corrigent. <ref>[http://www.globes.co.il/serveen/globes/docview.asp?did=1000747655&fid=1725 EMC buys XtremIO for $430M]</ref>\n\n==== XtremIO 제품 특징 ====\n\n* Scale-out clustered design\n: building block 추가를 통한 cluster 확장 시, XIOS (XtremIO의 storage OS)에 의해 자동적으로 workload balance가 맞춰지도록 (system의 모든 SSD들이 evenly loaded 되도록) 함.\n* Cost effective all-flash array\n: XtremIO system은 thin provision을 적용하고 있으며, 실시간으로 globally dedupe을 수행하기 때문에 all flash array임에도 불구하고 cost-effective할 수 있는 구조임.\n* Automatic fault management\n: XtremIO system에서는 spare drive를 가지고 있을 필요가 없음. Data를 failed drive로부터 array 상의 free space로 재배치하면서, 여전히 writes가 fully redundant한 방식으로 일어나도록 함. (특허 출원 중인 adaptive data protection 기법이 사용된다고 함). 관리자는 아무 때나 편리한 시간에 failed drive를 교체하면 됨.\n* No single point of failure (No-SPOF)\n: each cluster building block은 HA, high-performance, full active/active 방식으로 no-SPOF를 가능케 함.\n* Deploy in minutes (just in three simple steps)\n: (1) create volumes, (2) define hosts, (3) map volumes to hosts - that\'s all\n\n{| class=\"wikitable sortable\" width=\"500\"\n|\n<img src=\"http://itzikr.files.wordpress.com/2013/03/image_thumb23.png?w=500&h=202\" width=\"500\"/>\n|-\n|\n<img src=\"http://itzikr.files.wordpress.com/2013/03/image_thumb24.png?w=500&h=244\" width=\"500\"/>\n|-\n|}\n\n==== EMC의 XtremIO 인수 ====\n\n* XtremIO 인수에 대해 EMC가 언급한 내용\n: “The addition of XtremIO complements the range of EMC Flash-based systems and software stemming from EMC’s early entry into the Flash storage market in 2008 when it became the first to integrate Flash drives into enterprise storage arrays. In 2011, EMC shipped to customers over 24 PBs of Flash drive capacity,” EMC stated in the news release. <ref>[http://www.bizjournals.com/boston/blog/mass-high-tech/2012/05/emc-acquires-flash-storage-startup-xtremio.html EMC acquires flash storage startup XtremIO]</ref>\n\n== M&A ==\n\n{| class=\"wikitable sortable\"\n! width=\"60\" | 시기\n! 인수기업 !! 인수대상기업 !! 대상기업분야\n! width=\"50%\" | Notes\n|-\n| 2013-07 || EMC || SaleIO || Storage SW\n|-\n| 2013-07 || HGST || VeloBit || SSD Cache SW\n|-\n| 2013-07-02 || SanDisk || SMART Storage System || Storage HW || \n* SanDisk는 Enterprise 및 Data Center 스케일의 Business 역량을 강화하고자, SMART Storage System을 인수.\n* SATA 및 SAS 기반의 SSD 제품을 보유한 SMART Storage System은 인수 전 마지막 분기에 $25M(약 300억원) 매출 달성. <ref>[http://venturebeat.com/2013/07/02/sandisk-buys-smart-storage-systems/ SanDisk scoops up Smart Storage Systems for $307M to infiltrate data centers (2013-07-02)]<br/>SanDisk does well in consumer markets, but it wants to do better with enterprise and data center sales. Smart Storage Systems (SSS) already makes SSDs based on the SATA and SAS storage protocols and generated about $25 million in revenue in its latest quarter. So the marriage could be good for SanDisk if it can continue converting customers.\n“This acquisition enables SanDisk to address a $1.6 billion market opportunity in enterprise SATA products and complements our strong enterprise SAS product portfolio,” Sumit Sadana, EVP & chief strategy officer of SanDisk, said in a statement. “With this combination, SanDisk will have products qualified with six of the top seven storage OEMs worldwide.”</ref>\n|-\n| 2013-06-24 || WD || sTec || Storage HW || \n* Western Digital이 sTec을 $340M 현금에 인수한다고 발표. Western Digital이 인수한 sTec은 HGST에 통합될 예정, HGST의 SSD 역량 강화 위함.\n* sTec은 enterprise SSD 시장에서 초기부터 활동해왔던 player이나, Intel, Samsung, Toshiba등의 SSD 시장 진입으로 인해 매출이 감소하게 되었음. Enterprise SSD 역량을 가진 sTec은 최근 들어 심화되는 매출 감소 문제를 해결할 수 있게 되고, HGST (acquired by WD)는 Enterprise SSD 역량 (900명이 넘는 기술자들과 100건이 넘는 특허들)을 얻을 수 있게 되어 쌍방 모두에게 이득이 될 것으로 보임.\n* HGST는 Intel과 SSD controller를 위한 joint-operation을 진행하고 있으나, 금번 sTec 인수를 통해 SSD controller에 대한 Intel로부터의 독립성을 키울 수 있게 되었음. <ref>[http://www.anandtech.com/show/7100/western-digital-acquires-stec Western Digital Acquires STEC (AnandTech, 2013-06-24)]</ref>\n* 인수 작업 완료 (2013-09-12) <ref>[http://www.wdc.com/en/company/pressroom/releases/?release=e7e8a0f2-b89f-4b85-8b1b-387f9a4b0818 Western Digital Completes Acquisition of sTec, Inc. (2013-09-12)] <br/>IRVINE, Calif. – Sept. 12, 2013 – Western Digital® Corp. (NASDAQ: WDC) announced today that it has completed the acquisition of sTec, Inc., an early innovator in enterprise solid-state drives (SSDs). \'\'\'sTec will be integrated into HGST\'\'\', a wholly owned subsidiary of Western Digital. The acquisition \'\'\'augments HGST’s existing solid-state storage capabilities\'\'\', accelerating its ability to expand its participation in the rapidly growing area of enterprise SSDs.</ref>\n|-\n| 2013-04 || Fusion IO || NexGen Storage || Storage HW\n|-\n| 2013-03 || Fusion IO || ID7 || SSD Cache SW\n|-\n| 2013-01 || Violin Memory || GridIron || Storage HW\n|-\n| 2013-01 || Imation || Nexsan || Storage HW\n|-\n| 2012-12 || Samsung || Nvelo || SSD Cache SW\n|-\n| 2012-11 || Intel || Nevex Virtual Technologies, Inc. || SSD Cache SW\n|-\n| 2012-08-16 || IBM || Texas Memory Systems || Storage HW ||\n* RamSan SSD arrays 및 PCIe cards 업체인 Texas Memory Systems를 IBM이 비공개 가격으로 인수.\n* 이를 통해 IBM의 middleware 제품을 RamSan HW에서 구동할 수 있게 되었으며, IBM의 Intel 및 POWER chip 계열의 server 제품에 flash 기술을 적용 가능하게 되었음.\n* 본 인수 건은 Violin Memory 나 Fusion-IO의 IBM 고객 잠식 대응책으로 해석 가능 <ref>[http://www.theregister.co.uk/2012/08/16/ibm_buys_tms/ RamSan flash cram: IBM snaps up Texas Memory Systems (The Register, 2012-08-16)]</ref>\n|-\n| 2012-06-19 || SK Hynix || Link_A_Media || NAND Flash Controller ||\n* SK Hynix는 LAMD (Link A Media Devices)를 $248M (약 2,500억원)에 인수.\n* (\'12년 당시로부터) 8년 전 설립된 LAMD는 그동안 주목을 받지 못하다가 최근에 Corsair가 Neutron SSD 시리즈를 발표하면서 주목을 받게되었음. 참고로, Neutron SSD 시리즈는 LAMD controller에 기반한 첫번째 consumer SSD임. <ref>[http://www.anandtech.com/show/6024/hynix-to-acquire-link-a-media-devices-lamd Hynix to Acquire Link A Media Devices (LAMD) (2012-06-19)] <br/>LAMD will be joining Hynix as a NAND focused business unit, but right now there is no confirmation whether the LAMD name will stay. (Update: Hynix acquired LAMD for $248 million.) LAMD was actually founded over eight years ago, but it has not received much publicity until earlier this month when Corsair announced their Neutron SSD series, which is the first consumer SSD to be based on a LAMD controller. LAMD has been more concentrated on the enterprise storage market in the past.</ref>\n|-\n| 2012-06 || SanDisk || Schooner Information Technology || Storage HW\n|-\n| 2012-06-05 || BitMicro Networks || QualCore Logic || NAND Flash Controller ||\n* Enterprise향 SSD 업체인 BiTMICRO가 600개가 넘는 QualCore Logic의 IP를 매입하였음. <ref>[http://www.reuters.com/article/2012/06/05/idUS122210+05-Jun-2012+BW20120605 BiTMICRO Acquires QualCore`s Intellectual Property]</ref>\n* 매입된 IP는 BiTMICRO의 차세대 SSD 제품 (MaxIO SSD)에 기여할 것으로 보임.\n* QualCore의 IP portfolio는 analog, digital, 그리고 mixed-signal IC design을 커버하고 있음. <ref>About QualCore Logic\n* QualCore Logic is the recognized leader of \'\'\'silicon-proven Analog, Mixed-signal, and Digital IP for SoC designs\'\'\' for the past 15 years.\n* QualCore’s IP portfolio includes: (1) high performance PHYs (DDRs, SerDes etc.), (2) ADCs, (3) DACs, (4) PLLs, (5) DLLs, (6) Special IO’s, (7) Power Management Solutions, (8) and various Analog and Digital building blocks.\n* The company is headquartered in Sunnyvale, California and has its design center in Hyderabad, India.\n* For more information, visit www.qualcorelogic.com\n</ref> BiTMICRO는 이 기술들을 TALINO, ISIP chip <ref>BiTMICRO의 TALINO, ISIP chip은 MaxIO의 SuperScalar 아키텍처의 backbone에 해당</ref>들에 통합/적용할 계획.\n* 금번 인수를 통해, BiTMICRO는 ASIC design에서부터 characterization testing에 이르는 전 개발 cycle을 in-house로 할 수 있게 되었음. \n|-\n| 2012-05-10 || EMC || XtremIO || Storage HW ||\n* EMC가 Israeli flash storage startup XtremIO를 $430M에 인수. <ref>[http://www.globes.co.il/serveen/globes/docview.asp?did=1000747655&fid=1725 EMC buys XtremIO for $430m; The storage systems company is EMC\'s sixth acquisition in Israel. (Globes, 2012-05-10)]</ref>\n|-\n| 2012-02-15 || SanDisk || FlashSoft || SSD Cache SW ||\n* Sunnyvale, CA 출신의 SSD Cache SW 업체인 FlashSoft를 SanDisk가 인수.\n* SanDisk는 FlashSoft의 SSD Cache SW를 standalone 뿐 아니라 bundle로도 판매할 계획임.\n* FlashSoft의 Cache SW는 HDD에 대한 Cache로서 SSD를 사용하여 IO 성능을 향상시키는 기술로서, Windows, Linux, 그리고 VMWare를 지원하고 있음. <ref>[http://techcrunch.com/2012/02/15/sandisk-acquires-flashsoft-to-expand-enterprise-lineup/ SanDisk Acquires FlashSoft To Expand Enterprise Lineup (TechCrunch, 2012-02-15)]</ref>\n|-\n| 2012-01-20 || Micron || VirtenSys || Storage HW ||\n* Micron은 PCIe flash array 기술 및 PCIe sharing 기술을 확보, Fusion-IO, TMS, OCZ 등 PCIe flash array vendor들과의 경쟁력을 갖추게 되었음.\n* Micron이 어떤 기술을 확보했는지의 의미도 중요하지만, VirtenSys가 끝내 이륙하지 못하고 crash될 수 밖에 없었던 배경을 이해하는 것도 중요.<ref>[http://www.theregister.co.uk/2012/01/20/micron_buys_virtensys/ Micron buys PCIe extender Virtensys, backers trouser hefty payout (The Register, 2012-01-20)]<br/>(VirtenSys를 인수한 Micron의 의도) Edward Doller, Micron VP and Chief Memory Systems Architect, said: \"Virtensys\' PCIe-sharing technology has helped change the way data center operators manage and deploy their virtualized I/O resources, and Micron\'s enterprise PCIe drive delivers market-leading speed, reliability and power efficiency. This agreement would enable a combination of enterprise technology solutions that have the opportunity to virtualize SSD storage on the path to a \'\'\'more flexible and dynamic data center\'\'\'.\" That\'s the key. A bunch of Micron SSDs could be shared by servers and form a subsidiary tier of memory. Software will be needed to populate the SSDs with data and farm out their capacity to servers in some optimised way. \'\'\'Fusion-io\'\'\' has its ioTurbine caching software to do this, but only on a per-server basis, and \'\'\'Dell\'\'\' is working with its RNA software on server flash storage. \'\'\'OCZ\'\'\' has acquired SANRAD for its server flash caching functionality.</ref> <ref>[http://www.theregister.co.uk/2012/01/23/virtensys_crash/ Micron bought the ashes of crashed Virtensys (The Register, 2012-01-23)]<br/>PCIe sharing 기술을 통해 HBA 혹은 NIC 장비를 server간 공유시킨다는 아이디어를 기반으로, Xyratex 출신인 Marek Piekarski가 2005년에 Manchester, UK에서 VirtenSys 설립 (이를 통해, 모든 server들이 전부 HBA/NIC을 가지고 있지 않아도 되고, 공유되는 HBA/NIC의 utilization/optimization rate을 높일 수 있게 됨). 가상화된 server들이 증가하면서, 각 server들이 NICs, HBAs에 IO 부담이 가중되기 시작하고 VirtenSys의 아이디어가 큰 관심을 끌게 되었음. 그러나, Data Center의 server IO 동작 방식을 바꾼다는 것이 쉽지 않았으며, Xsigo와의 제품 비교에서도 뒤쳐지는 등, 기술적 뿐만 아니라 기술외적인 어려움을 겪으면서 투자받은 금액을 소진하게 되었음. Micron이 VirtenSys 인수에 얼마의 금액을 썼는지는 비밀로 부쳐졌으나, 대략 $160M (약 1600억원) 정도일 것으로 추정됨.</ref>\n|-\n| 2012-01-09 || OCZ || SANRAD || SSD Caching, Virtualization SW || \n* 이스라엘 기반의 flash caching 및 virtualization SW/HW 업체인 SANRAD를 OCZ가 $15M (약 150억원)에 인수. \n* 이를 통해 VMware와 Citrix Xen 가상화 환경에서의 PCIe SSD 솔루션 적용 확대 모색.<ref>[http://www.storagereview.com/ocz_acquires_sanrad OCZ Acquires SANRAD (2012-01-09)]<br/>OCZ Technology has announced the acquisition of SANRAD Inc., an Israel-based provider of flash caching and virtualization software and hardware. The addition of this intellectual property to OCZ\'s portfolio is expected to increase the adoption of PCIe SSD storage solutions specifically in VMware and Citrix Xen environments. SANRAD currently sells its flash caching and virtualization software to OEMs like NEXSAN and Brocade. The deal value was approximately $15M, comprised of approximately 2.1 million shares of OCZ stock. </ref>\n|-\n| 2011-12-11 || Apple || Anobit || NAND Flash Controller ||\n* Apple의 iPhone, iPad, MacBook Air에 들어가던 flash memory를 만들던 이스라엘의 fabless semiconductor 업체 Anobit을 Apple이 <strike>약 $390M에</strike> $450M에 인수.\n* 이를 통해 Apple은 자사 제품의 key components들을 안정적으로 공급받을 수 있게 되었음. 또한 삼성과의 관계를 정리할 수 있는 카드를 확보했다고 볼 수 있음. <ref>[http://www.bloomberg.com/news/2012-01-11/apple-is-said-to-acquire-israeli-component-maker-anobit-for-390-million.html Apple Said to Acquire Israel’s Anobit Technologies for About $390 Million (2012-01-12)]<br/>Apple Inc. (AAPL) acquired Anobit Technologies Ltd. for about $390 million, paying below the price sought by the Israeli maker of a flash-memory drive part for the iPhone. The deal helps Apple secure supplies of a key component for its top-selling devices. Anobit makes high-performance controllers used to optimize the memory capabilities inside products such as the iPhone and iPad. Apple is the world’s largest buyer of NAND flash memory, accounting for about 23 percent of consumption last quarter, according to a Jan. 6 report from Sanford C. Bernstein & Co.</ref>\n|-\n| 2011-10-26 || LSI || SandForce || NAND Flash Controller ||\n* SSD Controller 역량을 지닌 SandForce를 LSI가 $322M (약 3천억원)에 인수.\n* SandForce가 필요했던 우수한 validation 방법론 및 SandForce 제품을 테스트할 수 있는 자원을 LSI가 제공하고, LSI는 막강한 SSD Controller 기술을 가지게 되었음.\n* 참고로, ANANTECH에서 수행했던 Intel SSD 710 Review에서는 SandForce 아키텍쳐가 Database Workload에 대해서 얼마나 강점을 가지고 있는지를 확인할 수 있었음. <ref>[http://www.anandtech.com/show/5017/lsi-announces-agreement-to-acquire-sandforce LSI Announces Agreement to Acquire SandForce (2011-10-26)]<br/>SandForce\'s biggest issue? It needed a partner that would bring sound validation methodology and the resources to actually test SF drives. I mentioned to many players in the SSD and HDD space that they should simply buy SandForce and make this easier on everyone. Today LSI announced that it would be the company to try and do just that. Pending the typical closing conditions and regulatory approvals, LSI will acquire SandForce for $322M in cash plus assume another $48M in unvested SF stock options. LSI isn\'t much of a player in the consumer space but it hopes to use SandForce\'s controllers in a go at the enterprise market. A look back at the Vertex 3 in our Intel SSD 710 review shows just how strong SandForce\'s architecture can be in database server workloads. As I\'ve written before, the enterprise space is where the high margin sales are and as a result many players in the SSD space are focusing on it. For now don\'t expect anything to change with regards to SF drives in the client space, but OCZ\'s timing with Octane probably couldn\'t have been any better. <br/><img src=\"http://images.anandtech.com/doci/5017/sf-2000.jpg\"/></ref>\n|-\n| 2011-05-16 || SanDisk || Pliant Technology || Storage HW ||\n* SanDisk가 Pliant Technology를 $327M (약 3,500억원)에 인수.\n* Enterprise SSD 개발 업체인 Pliant Technology의 본사는 CA Milpitas, 직원은 80명.<ref>[http://techcrunch.com/2011/05/16/sandisk-acquires-flash-disk-maker-pliant-technology-for-more-than-327-million/ SanDisk Acquires Flash Disk Maker Pliant Technology For $327M Plus Earn-out (2011-05-16)]<br/> Flash memory storage solutions provider SanDisk has acquired Pliant Technology, a developer of enterprise solid state drives, the company announced this morning. Under the terms of the agreement, SanDisk will pay approximately $327 million in cash and provide certain equity-based incentives. Pliant Technology offers SSDs that integrate into enterprise information systems. The company has approximately 80 employees and is based in Milpitas, California. The company raised over $50 million since its founding in 2006.</ref>\n|-\n| 2011-04-20 || STEC || KQ Infotech || ?? ||\n* sTec은 system SW 개발 및 가상화 기술 역량 강화를 위해 KQ Infotech의 핵심 멤버 30명을 흡수. <ref>[http://www.storagenewsletter.com/news/business/stec-acquires-assets-of-kq-infotech Stec Acquires Assets of KQ Infotech (2011-04-20)] <br/>The portfolio of acquired assets includes KQI\'s intellectual property rights. In addition, STEC has hired approximately 30 key employees of KQI to augment its existing software development team. The financial terms of this transaction are not disclosed. \"The team of skilled software engineers from KQI has significant experience in such areas as \'\'\'system software development and virtualization\'\'\',\" said CEO of sTec.</ref>\n|-\n| 2011-03-14 || OCZ || Indilinx || NAND Flash Controllers ||\n* OCZ가 SSD Controller 전문 업체인 Indilinx 인수.\n* OCZ는 SandForce Controller의 Retail/Channel로 역할을 하고 있었지만, SandForce는  OCZ 뿐만 아니라 OCZ의 경쟁자들에게도 Controller를 판매하고 있었음. 이에 대한 위기 의식으로, 이전부터 밀접한 관계를 가져오던 Indilinx를 인수한 것으로 보이며, 이로 인해 OCZ는 SandForce SSD Controller 의존도를 낮추고 자립성을 높일 수 있게 됨. <ref>[http://www.anandtech.com/show/4220/ocz-grows-up-signs-definitive-agreement-to-acquire-indilinx OCZ Grows Up, Signs Definitive Agreement to Acquire Indilinx (2011-03-14)]<br/>Why would OCZ acquire Indilinx? To be honest, it\'s the only way to ensure growth in the future. While OCZ is currently the retail/channel face of SandForce, SF also happens to sell to all of OCZ\'s competitors. OCZ may get early access to SandForce hardware, but so could anyone else who shows up with a big enough check. Ultimately to stick around in this business OCZ needs to be able to build its own controller and that\'s what the Indilinx acquisition is designed to allow. Indilinx was working on its first 6Gbps controller codenamed Jet Stream, however the design never surfaced. Delays do happen in chip design and I\'m guessing Indilinx just couldn\'t make it happen with Jet Stream.</ref>\n|-\n|}\n\n== Notes ==\n\n* http://www.theregister.co.uk/2012/04/24/emc_xtremio/\n: EMC XtremIO\n\n* http://itzikr.wordpress.com/2013/03/15/taking-advantage-of-flash/\n: EMC\'s Flash strategy\n\n* http://en.wikipedia.org/wiki/Remote_direct_memory_access\n: RDMA\n\n* http://www.storagestory.com/461\n: 주간 스토리지 소식 - 2013 가상화 및 운영 환경 현재\n\n== See also ==\n\n* [[X intelligence]]\n\n== References ==\n\n<references/>','utf-8'),(2052,'\n== Big Data Analytics ==\n\n=== Twitter의 Storm, Apache 재단 Incubator에 등록 (datanami, 2013-09-19) <ref>[http://www.datanami.com/datanami/2013-09-19/apache_takes_storm_into_incubation.html Apache Takes Storm Into Incubation (datanami, 2013-09-19)]</ref> ===\n\n* Twitter가 개발한 실시간 데이터 프로세싱 기술인 [http://storm-project.net/ Storm]이 Apache 재단 인큐베이터 프로그램에 등록되었음.\n\n* Storm은 Hadoop의 실시간 분석 성능 부족을 보완하기 위해 Twitter 내 개발자조직이 제작하여 \'12년 9월 내놓은 오픈소스 SW로서, 대용량 데이터를 실시간으로 분석할 수 있게 해주는 기술임. 하둡이 배치분석에 특화된 대용량 분산처리 시스템이라면, 스톰은 실시간 분석에 특화된 분산처리 시스템으로 볼 수 있음.\n\n<img src=\"http://storm-project.net/images/topology.png\" width=\"400\"/>\n\n=== DataShift, Tumblr 데이터 판매 시작 (DataShift Blog, 2013-09-16) <ref>[http://blog.datasift.com/datasift-powers-real-time-and-historic-analysis-of-consumer-engagement-on-tumblr/#.UkARSYYya24 DataSift Powers Real-Time and Historic Analysis of Consumer Engagement on Tumblr (2013-09-16)]</ref> ===\n\n* 데이터시프트가 Tumblr<ref>Tumblr는 Yahoo!가 2013년 5월 11억달러에 인수한 블로그 서비스로, 모바일에서 쓰기 좋다는 평가를 받고 있음.</ref>의 데이터를 판매한다고 9월16일 발표.\n\n* Tumblr가 DataShift와 계약을 맺었다는 건, Tumblr에 그동안 이용자가 올린 모든 글과 지금 바로 검색할 수 있는 데이터를 제공한다는 것을 의미.\n\n* Yahoo!가 Tumblr를 마케팅 장으로 유도할려는 의도가 보임 (Tumblr를 통해 여론 동향을 살피게 되는 상황 기대). Twitter도 데이터를 DataShift 뿐 아니라 외부에 제공, 마케터가 Twitter를 활용하게 유도한 바 있음. Yahoo!도 이와 비슷한 효과를 노리는 것으로 보임.\n\n=== Splunk, mobile analytics 플랫폼 업체 버그센스 인수 (TechCrunch, 2013-09-16) <ref>[http://techcrunch.com/2013/09/16/splunk-acquires-bugsense-a-platform-for-analyzing-mobile-data/ Splunk Acquires BugSense, A Platform For Analyzing Mobile Data]</ref> ===\n\n* 대용량 데이터 처리 및 분석 업체 스플렁크 (Splunk)가 모바일 기기를 비롯한 사물 데이터를 분석하는 업체인 버그센스 (BugSense)를 인수.\n* 버그센스 기술을 이용, 모바일 데이터를 분석 플랫폼을 제작할 것으로 보임.\n\n== See also ==\n\n* [[X intelligence]]\n\n== References ==\n\n<references/>','utf-8'),(2053,'\n\n* [http://www.sigmod.org/2013/index.shtml ACM SIGMOD 2013]\n: ACM SIGMOD/PODS Conference, June 22-27, 2013, New York, New York, USA\n\n== Important Dates ==\n\n* SIGMOD Deadlines\n:- September 28, 2012: Submissions deadline for workshop proposals\n:- November 13, 2012, 5pm Pacific Standard Time: Submission deadline for research, industrial papers and demos\n:- December 15, 2012: Submission deadline for tutorial proposals\n:- February 5, 2013: Notification of acceptance, rejection, revision\n:- March 5, 2013: Submission deadline for revised papers\n:- April 9, 2013: Notification of acceptance, rejection for revised papers\n:- April 16, 2013: Camera-ready deadline\n\n== Research Sessions ==\n\n=== Data analytics ===\n: Session Chair: Phillip B. Gibbons (Intel Research)\n\n* Cumulon: Optimizing Statistical Data Analysis in the Cloud\n: Botong Huang, Duke University; Shivnath Babu, Duke University; Jun Yang, Duke University\n\n* Shark: SQL and Rich Analytics at Scale\n: Reynold S Xin, UC Berkeley; Josh Rosen, UC Berkeley; Matei Zaharia, UC Berkeley; Michael J Franklin, UC Berkeley; Scott Shenker, UC Berkeley; Ion Stoica, UC Berkeley\n\n* Parallel Analytics as a Service \n: Petrie Wong, The Hong Kong Polytechnic University; Zhian He, The Hong Kong Polytechnic University; Eric Lo, The Hong Kong Polytechnic University\n\n=== XML ===\n: Session Chair: Ioana Manolescu (INRIA)\n\n* MESSIAH: Missing Element-Conscious SLCA Nodes Search in XML Data\n: Ba Quan Truong, Nanyang Technological University; Sourav S Bhowmick, Nanyang Technological University; Curtis Dyreson, Utah State University; Aixin Sun, Nanyang Technological University\n\n* Indexing for Subtree Similarity-Search using Edit Distance\n: Sara Cohen, The Hebrew University of Jerusalem\n\n* Discovering XSD Keys from XML Data\n: Marcelo Arenas, PUC Chile & University of Oxford; Jonny Daenen, Hasselt University & Transnational University of Limburg; Frank Neven, Hasselt University & Transnational University of Limburg; Martin Ugarte,PUC Chile; Jan Van den Bussche, Hasselt University & Transnational University of Limburg; Stijn Vansummeren Université Libre de Bruxelles (ULB)\n\n=== Transactions ===\n: Session Chair: Paul Larson (Microsoft)\n\n* A Scalable Lock Manager for Multicores\n: Hyungsoo Jung, NICTA; Hyuck Han, Samsung Electronics; Alan Fekete, University of Sdyney; Gernot Heiser, NICTA and UNSW; Heon Yeom, Seoul National University\n: <span style=\"color:#ff0000\">!Check this out</span> <ref>A Scalable Lock Manager for Multicores</ref>\n\n* Controlled Lock Violation\n: Goetz Graefe, Hewlett-Packard Laboratories; Mark Lillibridge, Hewlett-Packard Laboratories; Harumi Kuno, Hewlett-Packard Laboratories; Joseph Tucek, HewlettPackard Laboratories; Alistair Veitch, Hewlett-Packard Laboratories\n\n* X-FTL: Transactional FTL for SQLite Databases\n: Woon-Hak Kang, Sungkyunkwan University; Sang-Won Lee, Sungkyunkwan University; Bongki Moon, Seoul National University; Gi-Hwan Oh, Sungkyunkwan University; Changwoo Min, Sungkyunkwan University\n: <span style=\"color:#ff0000\">!Check this out</span> <ref>X-FTL: Transactional FTL for SQLite Databases</ref>\n\n=== Data Storage ===\n: Session Chair: Panagiotis Karras (Rutgers University)\n\n* Optimal Splitters for Temporal and Multi-version Databases\n: Wangchao Le, University of Utah; Feifei Li, University of Utah; Yufei Tao, CUHK; Robert Christensen, University of Utah\n\n* Building an Efficient RDF Store Over a Relational Database\n: Mihaela A Bornea, IBM Research; Julian Dolby, IBM Research; Anastasios    Kementsietsidis, IBM Research; Kavitha Srinivas, IBM Research; Patrick Dantressangle, IBM Software Group; Octavian Udrea, IBM Research; Bishwaranjan Bhattacharjee, IBM Research\n\n* Automatic Synthesis of Out-of-Core Algorithms \n: Yannis Klonatos, EPFL; Andres Nötzli EPFL; Andrej Spielmann, EPFL; Christoph Koch, EPFL; Viktor Kuncak, EPFL\n\n=== Schema Matching and Spatial Databases I ===\n: Session Chair: Carlo Curino (Microsoft)\n\n* InfoGather+: Semantic Matching and Annotation of Numeric and Time-Varying Attributes in Web Tables\n: Meihui Zhang, NUS; Kaushik Chakrabarti, Microsoft Research\n\n* Value Invention in Data Exchange\n: Patricia Arocena, University of Toronto; Boris Glavic, Illinois Institute of Technology; Renee Miller, University of Toronto\n\n* Indexing Methods for Moving Object Databases: Games and Other Applications\n: Hanan Samet, University of Maryland; Jagan Sankaranarayanan, NEC Labs America; Michael Auerbach, University of Maryland, College Park\n\n=== Spatial Databases II ===\n\n* Collective Spatial Keyword Queries: A Distance Owner-Driven Approach\n: Cheng Long, HKUST; Raymond Chi-Wing Wong, HKUST; Ke Wang, SFU; Ada Fu, Chinese University of Hong Kong \n\n* TOUCH: In-Memory Spatial Join by Hierarchical Data-Oriented Partitioning\n: Sadegh Nobari, National University of Singapore; Farhan Tauheed, EPFL; Thomas Heinis, EPFL; Panagiotis Karras, Rutgers University; Stephane Bressan, National University of Singapore; Anastasia Ailamaki, EPFL\n\n* Finding Time Period-Based Most Frequent Path in Big Trajectory Data\n: Wuman Luo, HKUST; Haoyu Tan, HKUST; Lei Chen, HKUST; Lionel M. Ni, HKUST\n\n=== Graph Connectivity ===\n: Session Chair: Hanghang Tong (IBM Research)\n\n* I/O Efficient: Computing SCCs in Massive Graphs\n: Zhiwei Zhang, Chinese University of HK; Jeffrey Xu Yu, Chinese University of HK; Lu Qin, Chinese University of HK; Lijun Chang, CUHK; Xuemin Lin, The University of New South Wales\n\n* TF-Label: a Topological-Folding Labeling Scheme for Reachability Querying in a Large Graph\n: James Cheng, Chinese University of HK; Silu Huang, Chinese University of HK; Huanhuan Wu, Chinese University of HK; Ada Fu, Chinese University of Hong Kong\n\n* Efficiently Computing k-Edge Connected Components via Graph Decomposition\n: Lijun Chang, East China Normal University, University of New South Wales; Jeffrey Yu, Chinese University of HK; Lu Qin, Chinese University of HK; Xuemin Lin, UNSW; Chengfei Liu, Swinburne University of Technology; Weifa Liang, Australian National University\n\n=== Crowdsourcing ===\n: Session Chair: Lei Chen (HKUST)\n\n* An Online Cost Sensitive Decision-Making Method in Crowdsourcing Systems\n: Jinyang Gao, National Univ. of Singapore; Xuan Liu, National Univ. of Singapore; Beng Chin Ooi, National Univ. of Singapore; Haixun Wang, Microsoft Research Asia; Gang Chen, Zhejiang University\n\n* Leveraging Transitive Relations for Crowdsourced Joins\n: Jiannan Wang, Tsinghua University; Guoliang Li, Tsinghua University; Tim Kraska, Brown University; Michael Franklin, AMPLab, UC Berkeley; Jianhua Feng, Tsinghua University\n\n* Crowd Mining \n: Yael Amsterdamer, Tel Aviv University; Yael Grossman, Tel Aviv University; Tova Milo, Tel Aviv University; Pierre Senellart, Télécom ParisTech\n\n=== Social Media ===\nSession Chair: Ilaria Bartolini (University of Bologna)\n\n* Efficient Sentiment Correlation for Large-scale Demographics\n: Mikalai Tsytsarau, University of Trento; Sihem Amer-Yahia, Laboratoire d\'Informatique de Grenoble; Themis Palpanas, University of Trento\n\n* EBM - An Entropy-Based Model to Infer Social Strength from Spatiotemporal Data\n: Huy Pham, USC; Cyrus Shahabi, USC; Yan Liu, USC\n\n* Online Search of Overlapping Communities\n: Wanyun Cui, Fudan University; Yanghua Xiao, Fudan University; Haixun Wang, Microsoft Research Asia; Yiqi Lu, Fudan University; Wei Wang, Fudan University \n\n=== Systems, Performance I ===\n: Session Chair: Wook-Sin Han (Kyungpook National University)\n\n* BitWeaving: Fast Scans for Main Memory Data Processing \n: Yinan Li, Univ. of Wisconsin-Madison; Jignesh M. Patel, University of Wisconsin-Madison\n\n* Performance and Resource Modeling in Highly-Concurrent OLTP Workloads \n: Barzan Mozafari, MIT; Carlo Curino, Microsoft; Alekh Jindal, MIT, MIT; Samuel Madden, MIT\n\n* ODYS: An Approach to Building a Massively-Parallel Search Engine Using a DB-IR Tightly-Integrated Parallel DBMS for Higher-Level Functionality\n: Kyu-Young Whang, KAIST; Tae-Seob Yun, KAIST; Yeon-Mi Yeo, KAIST; Il-Yeol Song, Drexel University; Hyuk-Yoon Kwon, KAIST; In-Joong Kim, KAIST\n\n=== Systems, Performance II ===\n: Session Chair: Ashraf Aboulnaga (University of Waterloo)\n\n* Towards High-Throughput Gibbs Sampling at Scale: A Study across Storage Managers\n: Ce Zhang, University of Wisconsin-Madison; Feng Niu, University of Wisconsin-Madison; Christopher Re, University of Wisconsin Madison\n\n* Latch-Free Data Structures for DBMS\n: Takashi Horikawa, NEC Corporation \n\n* DBMS Metrology: Measuring Query Time \n: Sabah Currim, University of Arizona; Richard T. Snodgrass, University of Arizona; Young-Kyoon Suh, University of Arizona; Rui Zhang, Teradata Corporation; Matthew Wong Johnson, UCSD; Cheng Yi, University of Arizona\n\n=== Systems, Performance III ===\n\n* Toward Practical Query Pricing with QueryMarket\n: Paraschos Koutris, University of Washington; Prasang Upadhyaya, University of Washington; Magdalena Balazinska, University of Washington; Bill Howe, University of Washington; Dan Suciu, University of Washington\n\n* Generalized Scale Independence Through Incremental Precomputation\n: Michael Armbrust, Google, Inc; Eric Liang, UC Berkeley; Tim Kraska, Brown University; Armando Fox, UC Berkeley; Michael J. Franklin, UC Berkeley; David A. Patterson, UC Berkeley\n: <span style=\"color:#ff0000\">!Check this out</span> <ref>Generalized Scale Independence Through Incremental Precomputation</ref>\n\n* Simulation of Database-Valued Markov Chains Using SimSQL\n: Zhuhua Cai, Rice University; Zografoula Vagena, LogicBlox; Luis Perez, Rice University; Subramanian Arumugam, Rice University; Peter J. Haas, IBM Almaden; Christopher Jermaine, Rice University\n\n=== Graph Management ===\n: Session Chair: Xuemin Lin (University of New South Wales)\n\n* Massive Graph Triangulation\n: Xiaocheng Hu, CUHK; Yufei Tao, CUHK; Chin-Wan Chung, KAIST \n\n* TurboISO: Towards Ultrafast and Robust Subgraph Isomorphism Search in Large Graph Databases \n: Wook-Shin Han, Kyungpook National University; Jinsoo Lee, Kyungpook National University; Jeong-Hoon Lee, Kyungpook National University \n\n* Fast Exact Shortest-Path Distance Queries on Large Networks by Pruned Landmark Labeling \n: Takuya Akiba, University of Tokyo; Yoichi Iwata, The University of Tokyo; Yuichi Yoshida, National Institute of Informatics & Preferred Infrastructure, Inc.\n\n=== Text Databases ===\n: Session Chair: Yasin Silva (Arizona State University)\n\n* Improving Regular-Expression Matching on Strings Using Negative Factors\n: Xiaochun Yang, Northeastern University; Bin Wang, Northeastern University; Tao Qiu, Northeastern University; Yaoshu Wang, Northeastern University; Chen Li, UC Irvine\n\n* String Similarity Measures and Joins with Synonyms \n: Jiaheng Lu, Renmin University of China; Chunbin Lin, Renmin University of China; Wei Wang, University of New South Wales; Chen Li, University of California, Irvine; Haiyong Wang, Renmin University of China\n\n* Efficient Top-k Algorithms for Approximate Substring Matching \n: Younghoon Kim, Seoul National University; Kyuseok Shim, Seoul National University\n\n=== Information Extraction ===\n: Session Chair: Pierre Selelart (Telecom ParisTech and HKU)\n\n* Quality and Efficiency for Kernel Density Estimates in Large Data\n: Yan Zheng, University of Utah; Jeffrey Jestes, University of Utah; Jeff M. Phillips, University of Utah; Feifei Li, University of Utah\n\n* Efficient Ad-hoc Search for Personalized PageRank \n: Yasuhiro Fujiwara, NTT; Makoto Nakatsuji, NTT; Hiroaki Shiokawa, NTT; Takeshi Mishima, NTT; Makoto Onizuka, NTT\n\n* Provenance-based Dictionary Refinement in Information Extraction\n: Sudeepa Roy, University of Washington; Laura Chiticariu, IBM Research, Almaden; Vitaly Feldman, IBM Research, Almaden; Frederick R. Reiss, IBM Research, Almaden; Huaiyu Zhu, IBM Research, Almaden \n\n=== Query Processing and Optimization ===\n: Session Chair: Mohamed Eltabakh (WPI)\n\n* CS2: A New Database Synopsis for Query Estimation\n: Feng Yu, Southern Illinois University; Wen-Chi Hou, Southern Illinois University; Cheng    Luo, Coppin State University; Dunren Che, Southern Illinois University; Mengxia Zhu, Southern Illinois University \n\n* Branch-and-Bound Algorithm for Reverse Top-k Queries\n: Akrivi Vlachou, Norwegian University of Science and Technology (NTNU); Christos Doulkeridis, University of Piraeus; Kjetil Nørvåg, NTNU; Yannis Kotidis, Athens University of Economics and Business (AUEB)\n\n* On the Correct and Complete Enumeration of the Core Search Space\n: Guido Moerkotte, University of Mannheim; Pit Fender, University of Mannheim; Marius Eich, University of Mannheim\n\n=== Cloud Computing ===\n\n* Trinity: A Distributed Graph Engine on a Memory Cloud \n: Bin Shao, Microsoft Research; Haixun Wang, Microsoft Research Asia; Yatao Li, HKUST\n: <span style=\"color:#ff0000\">!Check this out</span> <ref>Trinity: A Distributed Graph Engine on a Memory Cloud</ref>\n\n* Characterizing Tenant Behavior for Placement and Crisis Mitigation in Multitenant DBMSs\n: Aaron J. Elmore, UC Santa Barbara; Sudipto Das, Microsoft Research; Alexander Pucher, UCSB; Divyakant Agrawal, UCSB; Amr El Abbadi, UCSB; Xifeng Yan, UCSB\n: <span style=\"color:#ff0000\">!Check this out</span> <ref>Characterizing Tenant Behavior for Placement and Crisis Mitigation in Multitenant DBMSs</ref>\n\n* Minimal MapReduce Algorithms\n: Yufei Tao, CUHK; Wenqing Lin, Nanyang Technological University; Xiaokui Xiao, Nanyang Technological University\n: <span style=\"color:#ff0000\">!Check this out</span> <ref>Minimal MapReduce Algorithms</ref>\n\n=== Data Cleaning ===\n\n* NADEEF: A Commodity Data Cleaning System\n: Michele Dallachiesa, University of Trento; Amr Ebaid, Purdue Universify; Ahmed Eldawy, University of Minnesota; Ahmed Elmagarmid, QCRI; Ihab F. Ilyas, Qatar Computing Research Institute; Mourad Ouzzani, Qatar Computing Res. Inst.; Nan Tang, QCRI \n\n* Don\'t be SCAREd: Use SCalable Automatic REpairing with Maximal Likelihood and Bounded Changes \n: Mohamed Yakout, Microsoft Corp.; Laure Berti-Equille, Institut de Recherche pour le Développement; Ahmed Elmagarmid, QCRI \n\n* Determining the Relative Accuracy of Attributes\n: Yang Cao, Beihang University; Wenfei Fan, University of Edinburgh; Wenyuan Yu, University of Edinburgh\n\n=== Complex Event Processing ===\n\n* Photon: Fault-tolerant and Scalable Joining of Continuous Data Streams\n: Rajagopal Ananthanarayanan, Google; Venkatesh Basker, Google; Sumit Das, Google; Ashish Gupta, Google; Haifeng Jiang, Google; Tianhao Qiu, Google; Alexey Reznichenko, Max Planck Institute for Software Systems; Deomid Ryabkov, Google; Manpreet Singh, Google; Shivakumar Venkataraman, Google\n\n* Utility-Maximizing Event Stream Suppression\n: Di Wang, Worcester Polytechnic Institut; Yeye He, Microsoft; Elke Rundensteiner, Worcester Polytechnic Institute; Jefferey F. Naughton University of Wisconsin-Madison\n\n* E-Matching: Event Processing over Noisy Sequences in Real Time\n: Zheng Li, University of Massachusetts, Lowell; Tingjian Ge, Univ. of Massachusetts, Lowell; Cindy X. Chen, University of Massachusetts, Lowell\n\n=== Privacy ===\n\n* Recursive Mechanism: Towards Node Differential Privacy and Unrestricted Joins\n: Shixi Chen, Fudan University; Shuigeng Zhou, Fudan University\n\n* PrivGene: Differentilly Private Model Fitting Using Genetic Algorithms\n: Jun Zhang, Nanyang Technological Univ.; Xiaokui Xiao, Nanyang Technological University; Yin Yang, ADSC; Zhenjie Zhang, ADSC; Marianne Winslett, University of Illinois at Urbana-Champaign\n\n* Information Preservation in Statistical Privacy and Bayesian Estimation of Unattributed Histograms\n: Bing-Rong Lin, Penn State; Daniel Kifer , Penn State \n\n=== Data Streams ===\n\n* Integrating Scale Out and Fault Tolerance in Stream Processing using Operator State Management\n: Raul Castro Fernandez, Imperial College London; Matteo Migliavacca, University of Kent; Evangelia Kalyvianaki, Imperial College London; Peter Pietzuch, Imperial College London \n\n* Quantiles over Data Streams: An Experimental Study\n: Lu Wang, HKUST; Ge Luo, HKUST; Ke Yi, HKUST; Graham Cormode, AT&T Research\n\n* An Efficient Query Indexing Mechanism for Filtering Geo-Textual Data\n: Lisi Chen, NTU; Gao Cong, NTU, Singapore; Xin Cao, NTU \n\n=== Distributed Systems ===\n\n* Bolt-on Casual Consistency\n: Peter Bailis, UC Berkeley; Ali Ghodsi, UC Berkeley, KTH; Joseph M. Hellerstein, UC Berkeley; Ion Stoica, UC Berkeley\n: <span style=\"color:#ff0000\">!Check this out</span> <ref>Bolt-on Casual Consistency</ref>\n\n* RTP: Robust Tenant Placement for Elastic In-Memory Database Clusters\n: Jan Schaffner, Hasso Plattner Institute; Tim Januschowski, SAP AG; Megan Kercher, SAP AG; Tim Kraska, Brown University; Hasso Plattner, Hasso Plattner Institute; Michael J. Franklin, UC Berkeley; Dean Jacobs, SAP AG\n: <span style=\"color:#ff0000\">!Check this out</span> <ref>RTP: Robust Tenant Placement for Elastic In-Memory Database Clusters</ref>\n\n* Inter-Media Hashing for Large-scale Retrieval from Heterogeneous Data Sources\n: Jingkuan Song, The University of Queensland; Yang Yang, The University of Queensland; Yi Yang, CMU; Zi Huang, The University of Queensland; Heng Tao Shen, The University of Queensland \n: <span style=\"color:#ff0000\">!Check this out</span> <ref>Inter-Media Hashing for Large-scale Retrieval from Heterogeneous Data Sources</ref>\n\n=== Data Mining ===\n\n* Mind the Gap: Large-Scale Frequent Sequence Mining\n: Iris Miliaraki, Max Planck Institute; Klaus Berberich, Max-Planck Institute; Rainer Gemulla, Max Planck Institute for Informatics; Spyros Zoupanos, Max Planck Institute for Informatics\n: <span style=\"color:#ff0000\">!Check this out</span> <ref>Mind the Gap: Large-Scale Frequent Sequence Mining</ref>\n\n* Reverse Engineering Complex Join Queries\n: Meihui Zhang, NUS; Hazem Elmeleegy, Turn, Inc.; Cecilia M Procopiuc, AT&T Labs-Research; Divesh Srivastava, AT&T Labs-Research \n\n* A Direct Mining Approach To Efficient Constrained Graph Pattern Discovery\n: Feida Zhu, Singapore Management University; Zequn Zhang, Singapore Management University; Qiang Qu, Aarhus University\n\n=== Road Networks and Trajectories ===\n\n* Calibrating Trajectory Data for Similarity-based Analysis\n: Han Su, University of Queensland; Kai Zheng, university of queensland; Haozhou Wang, University of Queensland; Jiamin Huang, Nanjing University; Xiaofang Zhou, U. of Queensland \n\n* On Optimal Worst-Case Matching\n: Cheng Long, HKUST; Raymond Chi-Wing Wong, HKUST; Philip S. Yu, UIC \n\n* Shortest Path and Distance Queries on Road Networks: Towards Bridging Theory and Practice\n: Andy Diwen Zhu, Nanyang Technological University; Hui Ma, Nanyang Technological University; Xiaokui Xiao, Nanyang Technological University; Siqiang Luo, Fudan University; Youze Tang, Nanyang Technological University; Shuigeng Zhou, Fudan University \n\n=== Security ===\n\n* Fine-Grained Disclosure Control for App Ecosystems\n: Gabriel Bender, Cornell University; Lucja Kot, Cornell University; Johannes Gehrke, Cornell University; Christoph Koch, EPFL\n\n* Lightweight Authentication of Linear Algebraic Queries on Data Streams\n: Stavros Papadopoulos, Hong Kong University of Science and Technology; Graham Cormode, AT&T Research; Antonios Deligiannakis, Technical University of Crete; Minos Garofalakis, Technical University of Crete \n\n=== Indexing ===\n\n* Column Imprints: A Secondary Index Structure\n: Lefteris Sidirourgos, CWI; Martin Kersten, CWI\n\n* DeltaNI: An Efficient Labeling Scheme for Versioned Hierarchical Data\n: Jan Finis, Technische Universität München; Robert Brunel, SAP; Alfons Kemper, Technische Universität München; Thomas Neumann, Technische Universität München; Franz Faerber, SAP AG; Norman May, SAP A\n\n== Tutorial Sessions ==\n\n* Tutorial 2: Workload Management for Big Data Analytics\n: Presenters: Ashraf Aboulnaga, Shivnath Babu\n\n* Tutorial 3: Knowledge Harvesting in the Big-Data Era\n: Presenters: Fabian Suchanek, Gerhard Weikum\n\n* Tutorial 4: Machine Learning on Big Data\n: Presenters: Neoklis Polyzotis, Tyson Condie, Paul Mineiro, Markus Weimer\n\n== Industry Sessions ==\n\n=== Big Data I ===\n\n* The \"Big Data\" Ecosystem at LinkedIn\n: LinkedIn\n: <span style=\"color:#ff0000\">!Check this out</span> <ref>The \"Big Data\" Ecosystem at LinkedIn</ref>\n\n* On Brewing Fresh Espresso: LinkedIn\'s Distributed Data Serving Platform\n: LinkedIn\n: <span style=\"color:#ff0000\">!Check this out</span> <ref>On Brewing Fresh Espresso: LinkedIn\'s Distributed Data Serving Platform</ref>\n\n* Fast Data in the Era of Big Data: Twitter\'s Real-Time Related Query Suggestion Architecture\n: Twitter\n: <span style=\"color:#ff0000\">!Check this out</span> <ref>Fast Data in the Era of Big Data: Twitter\'s Real-Time Related Query Suggestion Architecture</ref>\n\n=== Big Data II & Web ===\n\n* LinkBench: a Database Benchmark Based on the Facebook Social Graph\n: University of Chicago, Facebook\n: <span style=\"color:#ff0000\">!Check this out</span> <ref>LinkBench: a Database Benchmark Based on the Facebook Social Graph</ref>\n\n* BigBench: Towards an Industry Standard Benchmark for Big Data Analytics\n: Teradata Corp., University of Toronto; InfoSizing, Inc., Oracle Corp.\n: <span style=\"color:#ff0000\">!Check this out</span> <ref>BigBench: Towards an Industry Standard Benchmark for Big Data Analytics</ref>\n\n* Building, Maintaining, and Using Knowledge Bases: A Report from the Trenches\n: @WalmartLabs, University of Wisconsin-Madison\n: <span style=\"color:#ff0000\">!Check this out</span> <ref>Building, Maintaining, and Using Knowledge Bases: A Report from the Trenches</ref>\n\n=== Big Data III & More ===\n\n* Split Query Processing in Polybase\n: Microsoft Corp.\n\n* Petabyte Scale Databases and Storage Systems at Facebook\n: Dhruba Borthakur, Facebook\n: <span style=\"color:#ff0000\">!Check this out</span> <ref>Petabyte Scale Databases and Storage Systems at Facebook</ref>\n\n* Incremental Mapping Compilation in an Object-to-Relational Mapping System\n: Microsoft Corp., University of Pennsylvania, Universidad de Chile\n\n=== Enterprise Data Management ===\n\n* Enhancements to SQL Server Column Stores\n: Microsoft\n: <span style=\"color:#ff0000\">!Check this out</span> <ref>Enhancements to SQL Server Column Stores</ref>\n\n* Query Containment in Entity SQL\n: Universitat Politècnica de Catalunya, Microsoft Research, European Microsoft Innovation Center, UCSD, Google\n: <span style=\"color:#ff0000\">!Check this out</span> <ref>Query Containment in Entity SQL</ref>\n\n* Timeline Index: A Unified Data Structure for Processing Queries on Temporal Data in SAP HANA\n: ETH Zurich, SAP AG\n: <span style=\"color:#ff0000\">!Check this out</span> <ref>Timeline Index: A Unified Data Structure for Processing Queries on Temporal Data in SAP HANA</ref>\n\n=== Systems & New Hardware Trends ===\n\n* Query Processing on Smart SSDs: Opportunities and Challenges\n: Jaeyong Do, Microsoft; Yang-Suk Kee, Samsung; Jignesh M. Patel, University of Wisconsin-Madison; Chanik Park, Samsung; Kwanghyun Park, University of Wisconsin-Madison; David J. DeWitt, Microsoft\n: <span style=\"color:#ff0000\">!Check this out</span> <ref>Query Processing on Smart SSDs: Opportunities and Challenges</ref>\n\n* Hekaton: SQL Server\'s Memory-Optimized OLTP Engine\n: Microsoft\n\n== Demonstration Sessions ==\n\n=== Data Intensive Applications ===\n\n* Data-driven Neuroscience: Enabling Breakthroughs Via Innovative Data Management\n: Alexandros Stougiannis, EPFL; Mirjana Pavlovic, EPFL; Farhan Tauheed, EPFL; Thomas Heinis, EPFL; Anastasia Ailamaki, EPFL\n: <span style=\"color:#ff0000\">!Check this out</span> <ref>Data-driven Neuroscience: Enabling Breakthroughs Via Innovative Data Management -- Demonstration from EPFL</ref>\n\n* TsingNUS: A Location-Based Service System Towards Live City\n: Guoliang Li, Tsinghua University; Nan Zhang, Tsinghua University; Ruicheng Zhong, Tsinghua University; Sitong Liu, Tsinghua University; Weihuang Huang, Tsinghua University; Ju Fan, NUS; Kian-Lee Tan, NUS; Lizhu Zhou, Tsinghua University; Jianhua Feng, Tsinghua University\n: <span style=\"color:#ff0000\">!Check this out</span> <ref>TsingNUS: A Location-Based Service System Towards Live City -- Demonstration from Tsinghua University</ref>\n\n* WoW: What the World of (Data) Warehousing Can Learn from the World of Warcraft\n: Rene Mueller, IBM Research - Almaden\n: <span style=\"color:#ff0000\">!Check this out</span> <ref>WoW: What the World of (Data) Warehousing Can Learn from the World of Warcraft -- Demonstration from IBM Research - Almaden</ref>\n\n* Speeding up Database Applications with Pyxis\n: Alvin Cheung, MIT CSAIL; Owen Arden, Cornel University; \n: <span style=\"color:#ff0000\">!Check this out</span> <ref>Speeding up Database Applications with Pyxis -- Demonstration from MIT CSAIL</ref>\n\n* Peckalytics: Analyzing Experts and Interests on Twitter\n: Alex Cheng, University of Toronto;\n: <span style=\"color:#ff0000\">!Check this out</span> <ref>Peckalytics: Analyzing Experts and Interests on Twitter -- Demonstration from University of Toronto</ref>\n\n* CHIC: A Combination-based Recommendation System\n: Manasi Vartak, MIT CSAIL\n: <span style=\"color:#ff0000\">!Check this out</span> <ref>CHIC: A Combination-based Recommendation System -- Demonstration from MIT CSAIL</ref>\n\n=== Data Analysis and Mining; Privacy; Security ===\n\n* Fact Checking and Analyzing the Web\n: François Goasdoué, LRI, Université Paris-Sud & Inria Saclay\n\n* Data Mining Algorithms as a Service in the Cloud Exploiting Relational Database Systems\n:\n\n== References ==\n\n<references/>','utf-8'),(2054,'\n\n\n\n\n <pre>\n   December 2013\nSu Mo Tu We Th Fr Sa\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n</pre>\n\n\n\n\n\n== ## bNote-2013-12-12 ==\n\n=== MySQL handling ===\n\n* mysql> show status like \'innodb_%\'\n\n <pre>\nmysql> show status like \'innodb_%\';\n+---------------------------------------+---------+\n| Variable_name                         | Value   |\n+---------------------------------------+---------+\n| Innodb_buffer_pool_pages_data         | 389     |\n| Innodb_buffer_pool_bytes_data         | 6373376 |\n| Innodb_buffer_pool_pages_dirty        | 0       |\n| Innodb_buffer_pool_bytes_dirty        | 0       |\n| Innodb_buffer_pool_pages_flushed      | 0       |\n| Innodb_buffer_pool_pages_free         | 5119611 |\n| Innodb_buffer_pool_pages_misc         | 0       |\n| Innodb_buffer_pool_pages_total        | 5120000 |\n| Innodb_buffer_pool_read_ahead_rnd     | 0       |\n| Innodb_buffer_pool_read_ahead         | 0       |\n| Innodb_buffer_pool_read_ahead_evicted | 0       |\n| Innodb_buffer_pool_read_requests      | 5600    |\n| Innodb_buffer_pool_reads              | 390     |\n| Innodb_buffer_pool_wait_free          | 0       |\n| Innodb_buffer_pool_write_requests     | 0       |\n| Innodb_data_fsyncs                    | 3       |\n| Innodb_data_pending_fsyncs            | 0       |\n...\n</pre>\n\n== ## bNote-2013-12-11 ==\n\n=== Xian SSD Benchmark Test ===\n\n==== Environment ====\n <pre>\nHardware Server	HP DL380p Gen8\nCPU: 2xIntel XeonE5-2665@2.40GHz;\nMemory: 128GB\nStorage	Seagate HDD, 1TB, 7200rpm\nIntel SSD S3500, 480G\nSamsung SSD SM843Tns, 960G\n\nSoftware\nOS Centos 6.4 (2.6.32-358.el6.x86_64)\nI/O Scheduler: CFQ/Noop\nFile system	EXT4/XFS\nMySQL DB	Percona Server 5.6.14\n\nConfiguration:\nskip-grant-tables\ninnodb_buffer_pool_size = 80000M\ninnodb_thread_concurrency = 32 \ninnodb_spin_wait_delay = 30 \ninnodb_sync_spin_loops = 100\ninnodb_max_dirty_pages_pct = 90\ninnodb_lock_wait_timeout = 120\ninnodb_doublewrite = 0\ninnodb_flush_method = O_DIRECT\ninnodb_log_buffer_size = 256M\ninnodb_log_file_size = 8192M\ninnodb_log_block_size=4096\ninnodb_write_io_threads=16\ninnodb_read_io_threads=16\ninnodb_io_capacity=20000\ninnodb_file_format=barracuda\nmax_connections=3000\nquery_cache_size=0\nskip-name-resolve\n	tpcc-mysql	Revision 48. \nConfigurations\nThe CentOS is installed on HDD, filesystem is EXT4.\nThe Percona database is also installed on HDD, but the datadir is a directory on Samsung SSD.\nSamsung SSD SM843Tns 960GB is divided into two 480G partitions, XFS format. Only one partition is used for benchmarking, the other partition is fully written with unused data.\n\nPercona Server Installation\nResource: http://www.percona.com/downloads/Percona-Server-5.6/LATEST/RPM/rhel6/x86_64/\n\nInstall Step:\n1.Download Percona Server, client and shared rpm packages.\n2.Remove old mysql packages: \nyum –y remove mysql, mysql-server, mysql-libs-*.\n3.Install Percona shared, client, server packages:\n	rpm –ivhPercona-Server-shared-XXX.rpm\nrpm –ivhPercona-Server-client-XXX.rpm\nrpm –ivhPercona-Server-server-XXX.rpm\n4. Mysql secure installation: \nRun /usr/bin/mysql_secure_installation (default root user password is NULL)\n\nStart and Stop MySQL:\n	service mysql start/stop\n/etc/init.d/mysqlstart/stop\n\nLogin MySQL:\nmysql -uroot –p\n\nModify password:\nmysqladmin -uroot -p password\n\ntpcc-mysql installation\nResource:\nhttps://code.launchpad.net/~percona-dev/perconatools/tpcc-mysql\n\nInstall Step:\ncdsrc\nmake\n\nFAQ:\n1.	Can’t find header file\nexport C_INCLUDE_PATH=$MYSQL_HOME/include\n2.	Can’t find mysql_config\nexport PATH=$MYSQL_HOME/bin:$PATH\n3.	Can’t find mysql lib\nexport LD_LIBRARY_PATH=$MYSQL_HOME/lib\n\nLoad data:\n1.	Create database\nshell>mysqladmin create tpcc2500\nmysql> create database tpcc2500;\n2.	Create tables\nshell> mysql –uroot –p tpcc2500 <create_table.sql\n3.	Create indexes and FK\nshell> mysql –uroot –p tpcc2500 <add_fkey_idx.sql\n4.	Populate data (long time needed)\nsimple step:\nshell>./tpcc_loadlocalhost tpcc2500 root xxxx2500\nUsage:  tpcc_load [server] [DBname] [user] [pass] [warehouse]\nref. tpcc_load --help for all options\nload data in parallel (Recommanded)\nshell>./load.sh tpcc2500 2500\ncheck load.sh script, need to modify, add password\n\nStart benchmark:\n1.	Usage\ntpcc_start -h server_host -P port -d database_name -u mysql_user -p mysql_password -w warehouses -c connections -r warmup_time -l running_time -ireport_interval -f report_file -t trx_file\n2.	Example\n./tpcc_start -hlocalhost–dtpcc2500 -uroot -pxxxx–w2500 –c128 -r0 –l10800–i10\n\nBenchmarking parameters:\n2500 warehouses\n128 connections\nWarm up time: 0\nRunning time: 10800\nReport interval: 10 \n</pre>\n\n\n=== SSD initialization ===\n\n==== ATA secure erase ====\n\n* [http://www.manualslib.com/manual/490034/Dell-Poweredge-External-Media-System-1434.html?page=14 Intel 320 SSD ATA Instant Secure Erase Functionality]\n: Intel 320 SSDs support cryptography-based Instant ATA secure erase functionality. The Intel 320 SSD Instant ATA secure ease feature is non-TCG (Trusted Computing Group) based. It supports two modes of crypto secure erase:\n\n:* Normal secure erase—Clears the encryption keys and erases NAND\n:* Enhanced secure erase—Generates new keys and clears NAND.\n\n: The PERC solution only supports the \"crypto erase\" function on TCG-compliant Enterprise SED (Self Encrypting Drive)drives. When an Intel 320 drive is connected to a PERC, there is an incompatibility between PERC TCG method of crypto erase and Intel 320 supported non-TCG based ATA instant secure erase.\n: <span style=\"background:gold\">As a result, the instant secure erase functionality can\'t be used with PERC based solution.</span> The only way to run instant ATA secure ease and use Intel 320 drive secure wiping feature is to connect the drives directly into the motherboard chipset\'s ATA port and issue secure erase command. Intel provides a free utility (Intel SSDToolbox) to instant secure erase the drive, which you can download from www.intel.com/go/ssdtoolbox\n\n==== Talk with JinJin ====\n <pre>\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:42]:\n  Hi, Jinjin  \n  My name is M.J. JUNG (brian.m.jung@samsung.com)\n  introduced by M.S. Kwon in recent mails\n  ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:42]:\n  Hi~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:42]:\n  Ni Hao~ ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:43]:\n  Can I call you Brian or MyungJune?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:43]:\n  Oh, Brian is preferred ! ^^\n  just call me brian  \n  can I call you JinJin?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:43]:\n  yes, sure\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:43]:\n  oh, great ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:43]:\n   \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:43]:\n  I\'ve got your mail regarding the benchmark ~\n  and could I ask you something on that issue? \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:44]:\n  of course\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:44]:\n  oh, thank you  \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:44]:\n  you\'re welcome \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:44]:\n  wow ^___^ \n  is there any reason to use percona version of mysql? ^^\n  actually my current system is Ubuntu running MySQL (original)\n  so, if I should make a test bed \n  exactly same as yours ~\n  I should remove my old DB (mysql) ^^;;;;\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:46]:\n  so special reason, mysql is also Ok, I think, but I\'m not sure whether you can reproduce it with mysql\n  no special reason\n  sorry, typo\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:46]:\n  oh, got your point!\n  (no need to say sorry  ^^ I\'m the king of typo generation hahah)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:47]:\n  haha, so nice of you\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:47]:\n  wow ^^ it\'s great for me to talk to you too!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:47]:\n  i think you can try it on your system first\n  if you can\'t reproduce, then use percona \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:48]:\n  oh, great! and then if I could not generate that same situation on my old system, then I SHOULD change my system, ^^\n  GOT IT!\n   \n  and one more thing to ask !\n  ^^\n  what about the Intel case? \n  I\'ve seen that the red line\n  in your graph~\n  Could you see the same type of red line \n  every time you tested?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:50]:\n  I just test once with Intel case\n  because of time limit\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:50]:\n  ok~ got it ^^\n  then, I can repeat the test for intel case to make it more complete test~ can this help you?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:51]:\n  I think intel case is ok since it\'s stable after one hour test\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:51]:\n  oh,\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:51]:\n  sure\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:51]:\n  did you make the SSD (intel, Samsung) in the  steady-state before each test?\n  (great ^^)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:52]:\n  I\'m not sure \n  i just remove all data on the disk\n  didn\'t erase \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:52]:\n  a-ha! ^^\n  got some point!  \n  we usually\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:52]:\n  maybe that\'s the reason\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:52]:\n  make the SSDs be in the \'steady-state\' before each test, \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:53]:\n  yes, i learn it today\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:53]:\n  because \'steady-state\' makes the performance of SSD be in the stable state\n  Oh great  ^^\n  You may find good article regarding \'steady state\' \n  in the SNIA\n  site\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:54]:\n  thank you! \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:54]:\n  http://www.snia.org/sites/default/education/tutorials/2011/fall/SolidState/EstherSpanjer_The_Why_How_SSD_Performance_Benchmarking.pdf\n  (oh, you\'re quite welcome)\n  oh, this is more updated version.\n  http://www.snia.org/sites/default/files/SNIASSSI.SSDPerformance-APrimer2013.pdf\n  And, maybe HJ Lim send you the script\n  to perform an operation to make \'steady-state\' SSD\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:55]:\n  thank you! I can open it \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:55]:\n  great!^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:56]:\n  yes, he did!\n  I also have one question\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:56]:\n  Please let me know any question or let me get your comments regarding this collaboration - Benchmark test -\n  ok, i\'m ready!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:56]:\n  should I use \"security erase\" or \"Enhanced security erase\" ?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:56]:\n  ah, physically, you mean?\n  maybe not, only if you perform the script HJ Lim gave. \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:57]:\n  in HJ Lim\'s guide, there are two kinds of security erase\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:57]:\n  to be sure, Could you send me the copy of the script that HJ Lim gave to you?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:57]:\n  I don\'t know which one to use\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:58]:\n  Let me check and then answer to you \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:58]:\n  ok, i will send to you\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:58]:\n  ok! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:00]:\n  I have sent it to you\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:00]:\n  Ok, I\'ll check it right now ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:01]:\n   \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:04]:\n  Oh, this way with \'hdparm\', let you have the SSD of clean state (at the virgin state when SSD is manufactured)\n  so, it is preferred  \n  If you have any problem with this, please let me know  \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:05]:\n  so what\'s the difference of steady state and virgin state?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:06]:\n  oh, great question!\n  usually state state means:\n  very bad condition to SSD\n  - because we introduce very harsh IOs to SSD to make the performance of SSD stable (sequential writes and then random writes to SSD for a long time)\n  but virgin state itself can give us the good performance (reportedly)\n  So, I proper to proceed like this.\n  firstly, make the SSD at the virgin state (manufactured state)\n  and then, make the SSD be in the steady-state (by introducing some harsh IO requests - there are well-known script to do this)\n  --- Regarding this way (two steps)\n  , I\'ll check the preferred script to use in this benchmark\n  and then let you know  \n  (also send it to you, if required)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:11]:\n  thank you! your answer is so good!\n  I got your point\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:11]:\n  oh, it\'s my honour to hear that from you\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:11]:\n  so do you have some script to do harsh IO requests?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:12]:\n  yes, my version ^^\n  using FIO\n  you know FIO?\n  (Flexible IO benchmark program)\n  http://freecode.com/projects/fio\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:12]:\n  yes, i have heard of it, but never use it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:13]:\n  But i\'m not sure that script is enough for our benchmark, so I SHOULD check it out to MS KWON.\n  wait a second, please. let me check   I\'ll be back. \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:14]:\n  ok, thank you. I will wait for you...\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:18]:\n  Oh, Jinjin, Long time no see! ^^\n  I\'m back! ^^\n  with a clear answer for you!\n  Ready to talk? ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:19]:\n  haha^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:19]:\n  seems you are ready ^^\n  ok~\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:20]:\n  yes, i\'m ready^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:20]:\n  ^^ yes!!!\n  We will go with Two cases!\n  first case is:\n  using only virgin state. (good for performance, maybe)\n  second case is:\n  make virgin state and then also dirtify script to make it steady state ^^\n  (this is preferred way that SNIA recommends - to make the performance test fair)\n  ----- was my explanation clear ?\n  if not, please ask ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:23]:\n  yes, very clear!\n  I got your point\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:23]:\n  oh, you \'re super smart!!!!!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:23]:\n  thank you !\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:24]:\n  thank you !!! ^___^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:24]:\n  haha^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:24]:\n  (actually, my English is not good~ so I\'ve worried that my talk was unclear -_-; \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:24]:\n  it\'s very happy to talk with you!!!\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:24]:\n  oh~ great for me! TOOO!!!!\n  let\'s have a talk from time to time, any time welcomed!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:25]:\n  I think your english is very good! your type much faster than me\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:25]:\n  oh~~~~~~~~~ ^^;;;\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:25]:\n  sure\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:26]:\n  sure, great!!! i\'ll get back to you when I get some progress! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:26]:\n  ok, thank you again for your help!!\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:26]:\n  oh, you\'re quite welcom!\n  my pleasure!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:27]:\n  any time any questions are welcomed!!!\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:27]:\n  wow, great!!!!^^\n  Ok, CU!! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:27]:\n  CU!\n   \n</pre>\n\n\n <pre>\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:40]:\n  Hi, Jinjin!!! ^^\n  any problem to use the FIO script?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:41]:\n  morning, Brian\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  wow~ Good morning, Jinjin!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  I haven\'t tried it yet\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  oh, no problem~ ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  yesterday, we tried the hdparm\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  if you need any help regarding that, please feel free to tell me ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  seems it doesn\'t work\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  ooops~\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  we are still trying to fix it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:43]:\n  i\'ve also heard sometimes it does not work on some types of SSD\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:43]:\n  there will be some errors when we use hdparm -I /dev/sdc\n  /dev/sdc:\nSG_IO: bad/missing sense data, sb[]:  70 00 05 00 00 00 00 0a 00 00 00 00 20 00                                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  do you have any idea about it?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:44]:\n  oh, did you check the capability with \'hdparm -I /dev/sdc\'\n  ?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:44]:\n  yes\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:44]:\n  large i option\n  oh~\n  what about the report from that command?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:45]:\n  [root@ds-me jinjin]# hdparm -I /dev/sdc\n\n/dev/sdc:\nSG_IO: bad/missing sense data, sb[]:  70 00 05 00 00 00 00 0a 00 00 00 00 20 00                                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n\nATA device, with non-removable media\nStandards:\n        Likely used: 1\nConfiguration:\n        Logical         max     current\n        cylinders       0       0\n        heads           0       0\n        sectors/track   0       0\n        --\n        Logical/Physical Sector size:           512 bytes\n        device size with M = 1024*1024:           0 MBytes\n        device size with M = 1000*1000:           0 MBytes\n        cache/buffer size  = unknown\nCapabilities:\n        IORDY not likely\n        Cannot perform double-word IO\n        R/W multiple sector transfer: not supported\n        DMA: not supported\n        PIO: pio0\n  that\'s the whole output, can you see it?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:46]:\n  oh, seems there\'s no section \'Security\'\n  you might also refer to the site http://tinyapps.org/docs/wipe_drives_hdparm.html\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:47]:\n  ok, thank you! i\'ll read it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:47]:\n  Ok, hope to hear good news from you ^__^\n  ah~\n  one more question ^^\n  Could I ask you how much is the DB file size (in GB) when population is completed?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:49]:\n  sure^^\n  if you populate 2500 warehouses\n  it\'s about 247GB\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:49]:\n  oh~ !!!\n  the place of the 9 DB files must be under /var/lib/mysql/tpcc...\n  right?\n  and one problematic thing for my case is, currently we have no such a super machine with over 128GB DRAM ~ -_-;;\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:52]:\n  yes, the default datadir path is /var/lib/mysql/tpcc...\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:52]:\n  so I could not configure db buffer pool size as 80GB yet \n  Ok, got it!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:53]:\n  you may need to store the tpcc2500 on the SSD for testing\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:53]:\n  you\'re right!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:53]:\n  that\'s ok, just set the db buffer pool size to about 70%~80% of your memory size\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:54]:\n  ok~ good advice! ^^\n  did you configure the place to store TPCC DB in /etc/mysql/my.cnf?\n  or, just using load.sh ?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:54]:\n  yes, you can using /etc/mysql/my.cnf\n  just write the following in my.cnf\n\n [mysqld]\ndatadir=/your/path\n\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:56]:\n  thank you so much, Jinjin! ^^\n  Ok, CU soon! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:57]:\n  you are welcome~~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:57]:\n  hahahah ^^ so nice of you!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:57]:\n  any questions, just let me know^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:58]:\n  oh, great!!!! thank you Jinjin, You Too!!!! (anytime welcomed!) ^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:49]:\n  hi, Jinjin~\n  ^^\n  some small update for you~\n  regarding secure erase failure you mentioned\n  reply anytime when you\'re ready to talk ^__^\n  (maybe you already found this info.)\n  http://www.manualslib.com/manual/490034/Dell-Poweredge-External-Media-System-1434.html?page=14\n  Please see the section \"Intel 320 SSD ATA Instant Secure Erase Functionality\"\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:52]:\n  Hi, Brian~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:52]:\n  Wow! Jinjin!\n  ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:52]:\n  thanks for the info\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:52]:\n  oh, you\'re welcome!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:52]:\n  our server is HP, not Dell\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:53]:\n  oh, I see!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:53]:\n  I\'m still looking for servier configuration\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:53]:\n  what about the HW RAID on your system?\n  do you use HW RAID to access that SSD?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:53]:\n  I think it\'s the server\'s smart array card \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:53]:\n  oh!\n  that\'s the point! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:54]:\n  so now i\'m looking for how to change it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:54]:\n  maybe, that means, your application access to your SSDs through that \"smart array card (HW RAID)\" ~\n  right?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:54]:\n  yes\n  we need to let app access ssd directly\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:55]:\n  yes!!! exactly ^^\n  If your HP system does not allow that bypassing,\n  then, we can try the Plan B.\n  Plan B means, \n  maybe that RAID card controlling screen (during boot? ) support direct Secure Erase (or something like that)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:56]:\n  sorry, brian, i have an urgent issue, i will be back in 15 min\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:56]:\n  ok!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:56]:\n  CU soon\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:56]:\n  no prob!\n  CU soon!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 6:23]:\n  Hi~ brian\n  i\'m back~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 6:24]:\n  Oh~~ ^^ Welcome back!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 6:25]:\n  yes, the plan B can be supported, I see in the guide they have a tool to do secure erase druing boot\n  but I haven\'t tried it\n  it\'s not convienent because we can\'t use script to do it\n  i\'ll try to find the way to bypass raid\n  thank you agian for your advice^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 6:46]:\n  Sorry Jinjin for no response (been away from my desk), ^^;;;;  Ok, I\'ll also check another way to work around  \n  Thank you for your kind explanation ^__^, and let\'s talk again tomorrow~  \n</pre>\n\n== ## bNote-2013-12-10 ==\n\n=== NVMe Tutorial ===\n\n: [http://www.flashmemorysummit.com/English/Collaterals/Proceedings/2013/20130812_PreConfD_Marks.pdf By Kevin Marks, Dell, Inc. Flash Memory Summit 2013 Santa Clara, CA]\n\n\n* NVMe defines an optimized queuing interface, command set, feature set for PCIe SSDs\n\n\n* NVMe release timeline\n:- NVMe 1.0 release (2011-03-01)\n::- Queuing interface\n::- NVM command set, admin command set\n::- End-to-end protection (DIF/DIX), security\n::- Physical region pages (PRPs)\n:- NVMe 1.1 release (2012-10-11)\n::- General Scatter/Gather Lists (SGLs)\n::- Multi-path I/O & namespace sharing\n::- Reservations\n::- Autonomous power transitions during idle\n\n\n* advanced points of NVMe relative to AHCI\n:- Remove uncacheable reads from command issue/completion\n::- ??? uncacheable reads? why so bad to remove?\n:- Minimize MIMO writes in command issue/completion path\n::- ??? MIMO? why bad to minimize?\n:- Support for deep command queues and to simplify command decoding and processing\n::- ??? what method to simplify?\n:- Support MSI-X / flexible interrupt aggregation\n::- ??? what is flexible interrupt aggregation? is it different from MSI-X?\n:- Support for many core systems\n::- ??? concretely how?\n:- Support enterprise features\n::- ??? exactly what?\n:- Comprehensive statistics / health status reporting / robust error reporting & handling\n::- ???\n\n\n* NVMe usage model\n:- Server caching\n::- used to reduce memory footprint\n::- for temporary data\n:- Server storage\n::- for persistent data\n::- Redundant (i.e., RAID\'ed)\n::- commonly used as tier-0 storage\n:- Client storage\n::- used for boot/os-partition/HDD-cache\n::- non-redundant\n::- power optimized\n:- External storage\n::- used for metadata or data\n::- multi-ported device\n::- redundancy based on usage\n\n\n* NVMe queues\n:- NVMe uses circular queues to pass messages (e.g., commands and command completion notifications.)\n:- The queues may be located anywhere in PCIe memory\n::- Typically queues are located in host memory\n::- Queues may consist of a contiguous block of physical memory\n::  or optionally a non-contiguous set of physical memory pages (defined by a PRP List)\n:- A Queue consists of set of fixed sized elements\n:- Tail\n::- Points to next free element\n::- If an element is added to the element pointed to by the tail,\n::  the tail is incremented to point to next free element taking wrapping into consideration\n:- Head\n::- Points to next entry to be pulled off, if queue is not empty\n::- If an element is removed from the element pointed to by the head,\n::  the head is incremented to point to the next element taking wrapping into consideration\n:- Queue Size (Usable)\n::- Number of entries in the queue - 1\n::- Minimum size is 2, Maximum is ~ 64K for IO  Queues and 4K for Admin Queue\n:- Queue Empty\n::- Head == Tail\n:- Queue Full\n::- Head == Tail + 1 (mod # of queue entries)\n\n\n* Types of queues\n:- Admin queue for admin command set\n::- One per NVMe controller with up to 4K elements per queue\n::- Used to configure IO queues and controller/feature management\n:- IO queues for IO command sets (e.g., NVM command set)\n::- Up to 64K queues per NVMe controller with up to 64K elements per queue\n::- Used to submit/complete IO commands\n:- , where each type of queue (admin queue, IO queues) has\n::- Submission queue (SQ)\n:::- Queues messages from host to controller\n:::- Used to submit commands\n:::- Identified by SQ ID\n::- Completion queue (CQ)\n:::- Queues messages from controller to host\n:::- Used to post command completions\n:::- Identified by CQ ID\n:::- May have an independent MSI-X interrupt per completion queue\n: /* NVMe queues are messaging queues, not command queues -- What does this mean? */\n\n\n\n* Scalable queuing interface\n:- Enables NUMA optimized drivers\n::- Per core: one or more SQ, one CQ, and one MSI-X interrupt\n::- High performance and low latency command issue\n::- No locking between cores\n:- Up to ~2^32 outstanding commands\n::- Support for up to ~64K IO submission and completion queues\n::- Each queue supports up to ~64K outstanding commands\n\n\n\n* Command arbitration\n:- All controllers support round robin (RR) arbitration\n::- RR{ASQ, SQ, SQ, ..., SQ}\n:- An NVMe controller may support weighted round robin (WRR) with urgent priority class arbitration\n::- Priority{Strict_Priority_1, Strict_Priority_2, Strict_Priority_3}\n:::- Strict_Priority_1{ASQ}\n:::- Strict_Priority_2{RR{SQ.urgent, SQ.urgent}}\n:::- Strict_Priority_3{WRR{\n::::- Weight_High.RR{SQ.high, SQ.high, SQ.high},\n::::- Weight_Medium.RR{SQ.medium, SQ.medium, SQ.medium},\n::::- Weight_Low.RR{SQ.low, SQ.low, SQ.low}\n::: }}\n\n\n\n* Arbitration primitives\n:- Priority Arb. Vs. WRR Arb.\n::- Example above shown with an arbitration burst of no limit\n::- NVMe supports an arbitration burst of 1, 2, 4, 8, 16, 32, 64 and no limit\n::- NVMe supports 8-bit WRR weights\n\n\n\n* NVMe controller register map\n{| class=\"wikitable sortable\"\n|-\n| Start || End || Symbol || Description\n|-\n| 00h || 07h || CAP || Controller Capabilities\n|-\n|}\n\n\n\n* Controller initialization\n\n\n\n* SQ element with PRBs (64B)\n\n\n\n* Physical Region Pages (PRBs)\n\n\n\n* Example: PRP, PRP list\n\n\n\n* SQ element with SGLs (64B)\n\n\n\n* Scatter Gather List (SGL)\n\n\n\n* CQ element (16B)\n\n\n\n* Phase tag operation\n\n\n\n* NVMe command sets\n:- Command set = { Admin Command Set, IO Command Set = { NVM Cmd Set, Rsvd #1, Rsvd #2, Rsvd #3 } }\n\n\n\n* Admin commands\n{| class=\"wikitable sortable\"\n|-\n| Category || Command || Required/Optional\n|-\n| rowspan=\"4\" | Queue Management\n| Create IO Submission Queue\n| Required\n|-\n| Delete IO Submission Queue\n| Required\n|-\n| Create IO Completion Queue\n| Required\n|-\n| Delete IO Completion Queue\n| Required\n|-\n| rowspan=\"3\" | Configuration\n| Identify\n| Required\n|-\n| Get Features\n| Required\n|-\n| Set Features\n| Required\n|-\n| rowspan=\"2\" | Status Reporting\n| Get Log Pages\n| Required\n|-\n| Asynchronous Event Request\n| Required\n|-\n| Abort Command\n| Abort\n| Required\n|-\n| rowspan=\"2\" | Firmware Update/Management\n| Firmware Image Download\n| Optional\n|-\n| Firmware Activate\n| Optional\n|-\n| IO Command Set Specific\n| IO Command Set Specific Commands\n| Optional\n|-\n| Vendor Specific\n| Vendor Specific Commands\n| Optional\n|-\n|}\n: All admin commands use PRPs\n\n\n\n* Create IO SQ\n:- Queue Priority (OPRIO)\n:- Physically Contiguous (PC)\n\n\n\n* Create IO CQ\n:- Interrupt Enable (IEN)\n:- Physically Contiguous (PC)\n\n\n\n* Identify\n\n\n\n* Active namespace reporting\n\n\n\n* Identify controller data structure\n\n== ## bNote-2013-12-09 ==\n\n\n\n=== NVMe IO stack analysis ===\n\n\n==== nvme source code ====\n\n\n <pre>\n\nblusjune@buddy-guy:~ %1$ cat /x/t/nvme_iostack_analysis.c\n\n\nnvme_probe(struct pci_dev *pdev, const struct pci_device_id *id)\n{\n        struct nvme_dev * dev;\n        /*\n         * memory space will be allocated to \'dev\'\n         * and then\n         * \'dev->entry\' will have memory space\n         *      proportional to the \'num_possible_cpus()\'\n         * \'dev->queues\' will have memory space\n         *      proportional to the \'num_possible_cpus() + 1\' <- why \'+1\' here?\n         * , where num_possible_cpus() means\n         *      number of cpus populatable (fixed at boot time),\n         *      i.e., set of CPU id\'s possible to be plugged in\n         *      at anytime during the life of system boot\n         */\n\n\n        // ...\n\n\n        dev->pci_dev = pdev; // pdev argument will be assigned to \'dev->pci_dev\'\n\n\n        result = nvme_set_instance(dev);\n        /*\n         * allocate new integer ID to dev->instance\n         *\n         * Internally, this uses Idr (integer ID management)\n         * , where Idr is a set of library functions\n         *      for the management of small integer ID numbers.\n         *      In essence, an idr object can be thought of\n         *      as a sparse array mapping integer IDs onto arbitrary pointers,\n         *      with a \"get me an available entry\" function as well.\n         *\n         * URL: http://lwn.net/Articles/103209/\n         */\n\n\n        result = nvme_setup_prp_pools(dev);\n        /*\n         * dev->prp_page_pool = dma_pool_create(\"prp list page\",\n         *      &dev->pci_dev->dev, PAGE_SIZE, PAGE_SIZE, 0)\n         *\n         * and the comment says that there is an optimization\n         * for I/Os between 4k and 128k (is it still 128k? not 256k?)\n         * by the following code:\n         * dev->prp_small_pool = dma_pool_create(\"prp list 256\",\n         *      &dev->pci_dev->dev, 256, 256, 0);\n         *\n         * PRPs (Physical Region Pages) contains\n         * the 64-bit physical memory page address.\n         * The lower bits (n:2) of this field indicate\n         * the offset within the memory page\n         * n is defined by the memory page size (CC.MPS)\n         *\n         * PRP list contains a list of PRPs with generally no offsets\n         * which means non-contiguous set of physical memory pages\n         *\n         * mm/dmapool.c:dma_pool_create(const char * name, struct device *dev, sizt_t size, size_t align, size_t boundary)\n         *\n         */\n\n\n        result = nvme_dev_start(dev);\n        /*\n         * nvme_dev_start() {\n         *      nvme_dev_map(dev);\n         *      nvme_configure_admin_queue(dev);\n         *      list_add(&dev->node, &dev_list);\n         *      nvme_setup_io_queues(dev);\n         * }\n         */\n\n\n        result = nvme_dev_add(dev);\n\n\n}\n\n\ndrivers/block/nvme-core.c:nvme_setup_io_queues()\n{\n        (int) nr_io_queues = num_online_cpus();\n\n}\n\n</pre>\n\n\n <pre>\nroot@buddy-guy:src %1# cat /x/t/nvme_iostack_analysis.c \n\n\nnvme_probe(struct pci_dev *pdev, const struct pci_device_id *id)\n{\n	struct nvme_dev * dev;\n	/*\n	 * memory space will be allocated to \'dev\'\n	 * and then\n	 * \'dev->entry\' will have memory space\n	 * 	proportional to the \'num_possible_cpus()\'\n	 * \'dev->queues\' will have memory space\n	 *	proportional to the \'num_possible_cpus() + 1\' <- why \'+1\' here?\n	 * , where num_possible_cpus() means\n	 *	number of cpus populatable (fixed at boot time),\n	 *	i.e., set of CPU id\'s possible to be plugged in\n	 *	at anytime during the life of system boot\n	 */\n\n\n	// ...\n\n\n	dev->pci_dev = pdev; // pdev argument will be assigned to \'dev->pci_dev\'\n\n\n	result = nvme_set_instance(dev);\n	/*\n	 * allocate new integer ID to dev->instance\n	 *\n	 * Internally, this uses Idr (integer ID management)\n	 * , where Idr is a set of library functions\n	 *	for the management of small integer ID numbers.\n	 *	In essence, an idr object can be thought of\n	 *	as a sparse array mapping integer IDs onto arbitrary pointers,\n	 *	with a \"get me an available entry\" function as well.\n	 *\n	 * URL: http://lwn.net/Articles/103209/\n	 */\n\n\n	result = nvme_setup_prp_pools(dev);\n	/*\n	 * dev->prp_page_pool = dma_pool_create(\"prp list page\",\n	 *	&dev->pci_dev->dev, PAGE_SIZE, PAGE_SIZE, 0)\n	 *\n	 * and the comment says that there is an optimization\n	 * for I/Os between 4k and 128k (is it still 128k? not 256k?)\n	 * by the following code:\n	 * dev->prp_small_pool = dma_pool_create(\"prp list 256\",\n	 *	&dev->pci_dev->dev, 256, 256, 0);\n	 *\n	 * PRPs (Physical Region Pages) contains\n	 * the 64-bit physical memory page address.\n	 * The lower bits (n:2) of this field indicate\n	 * the offset within the memory page\n	 * n is defined by the memory page size (CC.MPS)\n	 *	\n	 * PRP list contains a list of PRPs with generally no offsets\n	 * which means non-contiguous set of physical memory pages\n	 *\n	 * mm/dmapool.c:dma_pool_create(const char * name, struct device *dev, sizt_t size, size_t align, size_t boundary)\n	 * \n	 */\n\n\n	result = nvme_dev_start(dev);\n	/*\n	 * \n	 *\n	 *\n	 *\n	 */\n\n\n	result = nvme_dev_add(dev);\n\n\n}\n\n\ndrivers/block/nvme-core.c:nvme_setup_io_queues()\n{\n	(int) nr_io_queues = num_online_cpus();\n\n}\n\n\n\n</pre>\n\n\n\n==== Vectored I/O (a.k.a scatter/gather I/O) ====\n\n* <span style=\"background:gold\">Why vectored I/O in NVMe and DMA?</span>\n\n\n* Vectored I/O (a.k.a scatter/gather I/O) is a method of input and output by which a single procedure call sequentially writes data from multiple buffers to a single data stream or reads data from a data stream to multiple buffers.\n\n* The buffers are given in a vector of buffers. Scatter/gather refers to the process of gathering data from, or scattering data into, the given set of buffers.\n\n* Vectored I/O can operate synchronously or asynchronously.\n\n* The main reasons for using vectored I/O are efficiency and convenience.\n\n\n\n* Several usages for vectored I/O:\n\n:* Atomicity\n:: If the particular vectored I/O implementation supports atomicity, a process can write into or read from a set of buffers to or from a file without risk that another thread or process might perform I/O on the same file between the first process\' reads or writes, thereby corrupting the file or compromising the integrity of the input\n\n:* Concatenating output\n:: An application that wants to write non-sequentially placed data in memory can do so in one vectored I/O operation. For example, writing a fixed-size header and its associated payload data that are placed non-sequentially in memory can be done by a single vectored I/O operation without first concatenating the header and the payload to another buffer\n\n:* Efficiency\n:: One vectored I/O read or write can replace many ordinary reads or writes, and thus save on the overhead involved in syscalls\n\n:* Splitting input\n:: When reading data that is in a format that defines a fixed-size header, one can use a vector of buffers in which the first buffer is the size of that header; and the second buffer will contain the data associated with the header\n\n\n\n\n* Implementation cases as system calls\n: readv() and writev()\n\n=== Barrier option in Ext3/Ext4 file system ===\n\n\n* Article 1 (kernelnewbies.org) <ref>http://kernelnewbies.org/Ext4</ref>\nThis is an option that improves the integrity of the filesystem at the cost of some performance (you can disable it with \"mount -o barrier=0\", recommended trying it if you\'re benchmarking). From this LWN article: \"The filesystem code must, before writing the [journaling] commit record, be absolutely sure that all of the transaction\'s information has made it to the journal. Just doing the writes in the proper order is insufficient; contemporary drives maintain large internal caches and will reorder operations for better performance. So the filesystem must explicitly instruct the disk to get all of the journal data onto the media before writing the commit record; if the commit record gets written first, the journal may be corrupted. The kernel\'s block I/O subsystem makes this capability available through the use of barriers; in essence, a barrier forbids the writing of any blocks after the barrier until all blocks written before the barrier are committed to the media. \'\'\'By using barriers, filesystems can make sure that their on-disk structures remain consistent at all times.\"\'\'\'\n\n\n* Article 2 (Redhat) <ref>https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Storage_Administration_Guide/writebarrieronoff.html</ref>\nTo mitigate the risk of data corruption during power loss, some storage devices use battery-backed write caches. Generally, high-end arrays and some hardware controllers use battery-backed write caches. However, because the cache\'s volatility is not visible to the kernel, Red Hat Enterprise Linux 6 enables write barriers by default on all supported journaling file systems.\n\n:- Performance issues\n:: Write caches are designed to increase I/O performance. However, enabling write barriers means constantly flushing these caches, which can significantly reduce performance.\n\n:- How to disable barrier option?\n:: For devices with non-volatile, battery-backed write caches and those with write-caching disabled, you can safely disable write barriers at mount time using the -o nobarrier option for mount. However, some devices do not support write barriers; such devices will log an error message to /var/log/messages (refer to Table 22.1, “Write barrier error messages per file system”).\n\n:- Write barrier error messages per file system\n{| class=\"wikitable sortable\"\n|-\n| File system || Error Message\n|-\n| ext3/ext4 || JBD: barrier-based sync failed on device - disabling barriers\n|-\n| XFS || Filesystem device - Disabling barriers, trial barrier write failed\n|-\n| btrfs || btrfs: disabling barriers on dev device\n|-\n|}\n\n\n\n=== Virtualization (KVM/QEMU/Xen) & IO Management ===\n\n\n==== KVM and QEMU ====\n* KVM과 QEMU 간의 역할 분담?\n\n==== Xen and QEMU ====\n* Xen이 QEMU를 어떻게 사용하는가?\n\n\n==== KVM/QEMU Storage Stack Performance Discussion (2010 Linux Plumbers Conference) ====\n\n* The State of KVM Block I/O Performance: Where We Are\n: The 50,000-foot View – QEMU Storage Stack\n: Where We Are Against Another “Popular” Hypervisor\n\n* Discussion: KVM / QEMU Settings\n: VirtIO vs. IDE emulation\n: KVM caching (cache=none vs. cache=writethrough)\n: Linux AIO support\n: No Barrier (barrier is enabled by default in ext4)\n: IO Schedulers: Deadline vs. CFQ\n: x2APIC support\n: AIO vs. threads\n: File Systems\n\n* Discussion: KVM Block I/O Performance Issues\n: Low Throughput\n: High (Virtual) CPU Usage In KVM Guests\n: Virtual Disk Image Formats\n: Others ?\n\n== ## bNote-2013-12-07 ==\n\n# [[NVMe Vs. AHCI]]\n# NVMe queue management mechanism\n# NVMe problem statement (PCI1320 Bus fatal error on bus 0 device 2 function 0 Power cycle system)\n# [[NVMe stack in Linux kernel (3.13.0-rc2, 2013-12-05)]]\n# [[Mediawiki color map]]\n\n== ## bNote-2013-12-06 ==\n\n\n<!--\n=== All pages at Wikini as of 2013-12-06 ===\n\n <pre>\n\n(News) 네트워크 업계 \"기다렸다, 런던올림픽\"	(News) 아카마이, \"CDN 넘어 하이퍼커넥티드로\"	(News) 아카마이, \"스트리밍/보안 서비스를 빠르고 안전하게\"\n(News) 아카마이, \"쌩쌩 웹사이트 만들려면\"	(News) 아카마이, \'블레이즈\' 인수 - 인텔리전트 플랫폼 강화	(News) 아카마이, CDN 장악 가속화 ... 코텐도 인수설\nAcademia intelligence	Artificial Neural Network	Artificial neural network\nBcode python cache lru	Bnote - References ( Papers / Patents / Articles )	Bnote 2013\nBnote 2013-01	Bnote 2013-02	Bnote 2013-03\nBnote 2013-04	Bnote 2013-05	Bnote 2013-06\nBnote 2013-07	Bnote 2013-08	Bnote 2013-09\nBnote 2013-10	Bnote 2013-11	Bnote 2013-12\nBnote Frequent Itemset Mining (FIM) / Association Rule Mining (ARM)	Bnote R	Bnote patidea 2013\nBnote patidea 2013-001	Bnote patidea 2013-002	Bnote patidea 2013-003\nBnote python	Bnote scratchpad	Brian Myungjune JUNG\nByung-Gon Chun	Cache algorithms	Conference: ACM SIGMOD 2013\nCurriculum vitae - Brian Myungjune JUNG	Curriculum vitae - Brian Myungjune JUNG (CV Brian)	DIMM\nData analytics	Data mining	Deep learning\nDefense Logic -- Big Data Platform Research in SAIT	Dm-cache	Exemplary .gnuplot configuration file for beautiful gnuplot graphs\nFoobar	GRUB 2	Git server on my local machine\nHidden Markov model (HMM)	Hierarchical temporal memory	I/O Workload Analysis\nI/O tracing on Microsoft Windows using xperf	IBM GPFS	IEEE ICCE 2014 Paper\nIOWA.data.tpcc 250gb 48h.mysql.R.addr:: Offset 100K, Len 1K	Industry intelligence - Flash Memory Summit 2013	Industry intelligence - big data\nIndustry intelligence - storage	Intelligent Battery Management System	Kworker\nLecture: Neural Networks for Machine Learning (by Geoffrey Hinton)	Lecture notes and online courses	Linux kernel\nLinux kernel - block layer plug/unplug	List of English stop words	List of Meta Files in Windows NTFS\nList of important processes in Microsoft Windows operating systems	Main Page	Master File Table in NTFS\nMixture model	NVM express	Nimble Storage\nOnline courses	OpenStack	Operating systems - Linux kernel\nPCI Express	PaperStudy // An Analysis of Traces from a Production MapReduce Cluster // CCGrid 2010	Periodicity transform\nPure Storage	RapidIO	Restricted Boltzmann machines\nStatistical computing software	System info 16-node cluster	TPC-C\nTemplate patidea	Text summarization	Tf-idf\nThoughts on In Memory Databases (Part 1)	Trick mode	Tutorial -- SSD caching using dm-cache\nUSENIX FAST 2013	Why In-Memory Computing Needs Flash	Windows Programming on Linux with MinGW\nWorkload analysis-driven system architecture design	Writing guide - software patent	X intelligence\nXen hypervisor\n\n</pre>\n-->\n\n=== KVM/QEMU Architecture and IO Stack ===\n\n* [https://www.google.co.kr/search?q=why+is+qemu+windows+so+slow&rlz=1C1OPRB_enKR556KR556&oq=why+is+qemu+windows+so+slow&aqs=chrome..69i57.14138j0j4&sourceid=chrome&espv=210&es_sm=122&ie=UTF-8#es_sm=122&espv=210&newwindow=1&q=IO+stack+qemu Google{IO stack qemu}]\n\n* [http://pic.dhe.ibm.com/infocenter/lnxinfo/v3r0m0/topic/liaav/LPCKVMSSPV2.1.pdf \"KVM / QEMU Storage Stack Performance Discussion,\" IBM, Linux Plumbers Conference 2010]\n\n* [http://events.linuxfoundation.org/slides/2011/linuxcon-japan/lcj2011_hajnoczi.pdf \"An Updated Overview of the QEMU Storage Stack,\" IBM, LinuxCon Japan 2011]\n\n* [http://www.linuxplumbersconf.org/2010/ocw/system/presentations/651/original/Optimizing_the_QEMU_Storage_Stack.pdf \"Optimizing the QEMU Storage Stack,\" IBM, Linux Plumbers Conference 2010]\n\n* [http://www.fujitsu.com/downloads/MAG/vol47-3/paper18.pdf \"Kernel-based Virtual Machine Technology\", Yoshihito Goro, Fujitsu Journal 2011]\n\n\n=== NVMe DAS test bed architecture ===\n\n{| class=\'wikitable sortable\'\n|-\n| LVol-00 || LVol-01 || LVol-02 || LVol-03 || LVol-04 || LVol-05 || LVol-06 || LVol-07\n|-\n|-\n| colspan=5 | nvme0n1p1 (484.61 GiB)\n| colspan=3 | nvme1n1p1 (260.61 GiB)\n|-\n| colspan=4 | /dev/nvme0n1 (372.61 GiB)\n| colspan=4 | /dev/nvme1n1 (372.61 GiB)\n|-\n|}\n\n== ## bNote-2013-12-04 ==\n\n\n=== OpenStack quota-update ===\n\n <pre>\n\nroot@grant-green:work %1# keystone tenant-list\n+----------------------------------+---------+---------+\n|                id                |   name  | enabled |\n+----------------------------------+---------+---------+\n| df7559de417a4968ad34f95b9dda5a4e |  admin  |   True  |\n| ad4662d7ec1249789feb2fad24e9f2e5 | service |   True  |\n+----------------------------------+---------+---------+\n\nroot@grant-green:work %1# nova quota-show\n+-----------------------------+-------+\n| Quota                       | Limit |\n+-----------------------------+-------+\n| instances                   | 48    |\n| cores                       | 96    |\n| ram                         | 51200 |\n| floating_ips                | 10    |\n| fixed_ips                   | -1    |\n| metadata_items              | 128   |\n| injected_files              | 5     |\n| injected_file_content_bytes | 10240 |\n| injected_file_path_bytes    | 255   |\n| key_pairs                   | 100   |\n| security_groups             | 10    |\n| security_group_rules        | 20    |\n+-----------------------------+-------+\n\nroot@grant-green:work %1# nova quota-update --instance 48 --cores 96 df7559de417a4968ad34f95b9dda5a4e\n\nroot@grant-green:work %1# nova quota-show\n+-----------------------------+-------+\n| Quota                       | Limit |\n+-----------------------------+-------+\n| instances                   | 48    |\n| cores                       | 96    |\n| ram                         | 51200 |\n| floating_ips                | 10    |\n| fixed_ips                   | -1    |\n| metadata_items              | 128   |\n| injected_files              | 5     |\n| injected_file_content_bytes | 10240 |\n| injected_file_path_bytes    | 255   |\n| key_pairs                   | 100   |\n| security_groups             | 10    |\n| security_group_rules        | 20    |\n+-----------------------------+-------+\n\n</pre>\n\n=== Linux kernel debugging using QEMU ===\n\n* [http://files.meetup.com/1590495/debugging-with-qemu.pdf Debugging Linux systems using GDB and QEMU]\n* [http://elinux.org/Debugging_The_Linux_Kernel_Using_Gdb Debugging the Linux Kernel Using GDB]\n\n\n\n=== Linux kernel (3.8.0) NVMe stack ===\n\n\n==== include/linux/nvme.h ====\n\n <pre>\n 24 struct nvme_bar {\n 25         __u64                   cap;    /* Controller Capabilities */\n 26         __u32                   vs;     /* Version */\n 27         __u32                   intms;  /* Interrupt Mask Set */\n 28         __u32                   intmc;  /* Interrupt Mask Clear */\n 29         __u32                   cc;     /* Controller Configuration */\n 30         __u32                   rsvd1;  /* Reserved */\n 31         __u32                   csts;   /* Controller Status */\n 32         __u32                   rsvd2;  /* Reserved */\n 33         __u32                   aqa;    /* Admin Queue Attributes */\n 34         __u64                   asq;    /* Admin SQ Base Address */\n 35         __u64                   acq;    /* Admin CQ Base Address */\n 36 };\n</pre>\n\n\n\n <pre>\n 42 \n 43 enum {\n 44         NVME_CC_ENABLE          = 1 << 0,\n 45         NVME_CC_CSS_NVM         = 0 << 4,\n 46         NVME_CC_MPS_SHIFT       = 7,\n 47         NVME_CC_ARB_RR          = 0 << 11,\n 48         NVME_CC_ARB_WRRU        = 1 << 11,\n 49         NVME_CC_ARB_VS          = 7 << 11,\n 50         NVME_CC_SHN_NONE        = 0 << 14,\n 51         NVME_CC_SHN_NORMAL      = 1 << 14,\n 52         NVME_CC_SHN_ABRUPT      = 2 << 14,\n 53         NVME_CC_IOSQES          = 6 << 16,\n 54         NVME_CC_IOCQES          = 4 << 20,\n 55         NVME_CSTS_RDY           = 1 << 0,\n 56         NVME_CSTS_CFS           = 1 << 1,\n 57         NVME_CSTS_SHST_NORMAL   = 0 << 2,\n 58         NVME_CSTS_SHST_OCCUR    = 1 << 2,\n 59         NVME_CSTS_SHST_CMPLT    = 2 << 2,\n 60 };\n 61 \n</pre>\n\n\n\n <pre>\n109 \n110 struct nvme_lbaf {\n111         __le16                  ms;\n112         __u8                    ds;\n113         __u8                    rp;\n114 };\n115 \n116 struct nvme_id_ns {\n117         __le64                  nsze;\n118         __le64                  ncap;\n119         __le64                  nuse;\n120         __u8                    nsfeat;\n121         __u8                    nlbaf;\n122         __u8                    flbas;\n123         __u8                    mc;\n124         __u8                    dpc;\n125         __u8                    dps;\n126         __u8                    rsvd30[98];\n127         struct nvme_lbaf        lbaf[16];\n128         __u8                    rsvd192[192];\n129         __u8                    vs[3712];\n130 };\n131 \n132 enum {\n133         NVME_NS_FEAT_THIN       = 1 << 0,\n134         NVME_LBAF_RP_BEST       = 0,\n135         NVME_LBAF_RP_BETTER     = 1,\n136         NVME_LBAF_RP_GOOD       = 2,\n137         NVME_LBAF_RP_DEGRADED   = 3,\n138 };\n139 \n140 struct nvme_lba_range_type {\n141         __u8                    type;\n142         __u8                    attributes;\n143         __u8                    rsvd2[14];\n144         __u64                   slba;\n145         __u64                   nlb;\n146         __u8                    guid[16];\n147         __u8                    rsvd48[16];\n148 };\n149 \n150 enum {\n151         NVME_LBART_TYPE_FS      = 0x01,\n152         NVME_LBART_TYPE_RAID    = 0x02,\n153         NVME_LBART_TYPE_CACHE   = 0x03,\n154         NVME_LBART_TYPE_SWAP    = 0x04,\n155 \n156         NVME_LBART_ATTRIB_TEMP  = 1 << 0,\n157         NVME_LBART_ATTRIB_HIDE  = 1 << 1,\n158 };\n159 \n\n</pre>\n\n\n\n <pre>\n159 \n160 /* I/O commands */\n161 \n162 enum nvme_opcode {\n163         nvme_cmd_flush          = 0x00,\n164         nvme_cmd_write          = 0x01,\n165         nvme_cmd_read           = 0x02,\n166         nvme_cmd_write_uncor    = 0x04,\n167         nvme_cmd_compare        = 0x05,\n168         nvme_cmd_dsm            = 0x09,\n169 };\n170 \n171 struct nvme_common_command {\n172         __u8                    opcode;\n173         __u8                    flags;\n174         __u16                   command_id;\n175         __le32                  nsid;\n176         __u32                   cdw2[2];\n177         __le64                  metadata;\n178         __le64                  prp1;\n179         __le64                  prp2;\n180         __u32                   cdw10[6];\n181 };\n182 \n183 struct nvme_rw_command {\n184         __u8                    opcode;\n185         __u8                    flags;\n186         __u16                   command_id;\n187         __le32                  nsid;\n188         __u64                   rsvd2;\n189         __le64                  metadata;\n190         __le64                  prp1;\n191         __le64                  prp2;\n192         __le64                  slba;\n193         __le16                  length;\n194         __le16                  control;\n195         __le32                  dsmgmt;\n196         __le32                  reftag;\n197         __le16                  apptag;\n198         __le16                  appmask;\n199 };\n200 \n201 enum {\n202         NVME_RW_LR                      = 1 << 15,\n203         NVME_RW_FUA                     = 1 << 14,\n204         NVME_RW_DSM_FREQ_UNSPEC         = 0,\n205         NVME_RW_DSM_FREQ_TYPICAL        = 1,\n206         NVME_RW_DSM_FREQ_RARE           = 2,\n207         NVME_RW_DSM_FREQ_READS          = 3,\n208         NVME_RW_DSM_FREQ_WRITES         = 4,\n209         NVME_RW_DSM_FREQ_RW             = 5,\n210         NVME_RW_DSM_FREQ_ONCE           = 6,\n211         NVME_RW_DSM_FREQ_PREFETCH       = 7,\n212         NVME_RW_DSM_FREQ_TEMP           = 8,\n213         NVME_RW_DSM_LATENCY_NONE        = 0 << 4,\n214         NVME_RW_DSM_LATENCY_IDLE        = 1 << 4,\n215         NVME_RW_DSM_LATENCY_NORM        = 2 << 4,\n216         NVME_RW_DSM_LATENCY_LOW         = 3 << 4,\n217         NVME_RW_DSM_SEQ_REQ             = 1 << 6,\n218         NVME_RW_DSM_COMPRESSED          = 1 << 7,\n219 };\n220 \n221 /* Admin commands */\n222 \n223 enum nvme_admin_opcode {\n224         nvme_admin_delete_sq            = 0x00,\n225         nvme_admin_create_sq            = 0x01,\n226         nvme_admin_get_log_page         = 0x02,\n227         nvme_admin_delete_cq            = 0x04,\n228         nvme_admin_create_cq            = 0x05,\n229         nvme_admin_identify             = 0x06,\n230         nvme_admin_abort_cmd            = 0x08,\n231         nvme_admin_set_features         = 0x09,\n232         nvme_admin_get_features         = 0x0a,\n233         nvme_admin_async_event          = 0x0c,\n234         nvme_admin_activate_fw          = 0x10,\n235         nvme_admin_download_fw          = 0x11,\n236         nvme_admin_format_nvm           = 0x80,\n237         nvme_admin_security_send        = 0x81,\n238         nvme_admin_security_recv        = 0x82,\n239 };\n240 \n241 enum {\n242         NVME_QUEUE_PHYS_CONTIG  = (1 << 0),\n243         NVME_CQ_IRQ_ENABLED     = (1 << 1),\n244         NVME_SQ_PRIO_URGENT     = (0 << 1),\n245         NVME_SQ_PRIO_HIGH       = (1 << 1),\n246         NVME_SQ_PRIO_MEDIUM     = (2 << 1),\n247         NVME_SQ_PRIO_LOW        = (3 << 1),\n248         NVME_FEAT_ARBITRATION   = 0x01,\n249         NVME_FEAT_POWER_MGMT    = 0x02,\n250         NVME_FEAT_LBA_RANGE     = 0x03,\n251         NVME_FEAT_TEMP_THRESH   = 0x04,\n252         NVME_FEAT_ERR_RECOVERY  = 0x05,\n253         NVME_FEAT_VOLATILE_WC   = 0x06,\n254         NVME_FEAT_NUM_QUEUES    = 0x07,\n255         NVME_FEAT_IRQ_COALESCE  = 0x08,\n256         NVME_FEAT_IRQ_CONFIG    = 0x09,\n257         NVME_FEAT_WRITE_ATOMIC  = 0x0a,\n258         NVME_FEAT_ASYNC_EVENT   = 0x0b,\n259         NVME_FEAT_SW_PROGRESS   = 0x0c,\n260 };\n261 \n</pre>\n\n\n\n\n <pre>\n261 \n262 struct nvme_identify {\n263         __u8                    opcode;\n264         __u8                    flags;\n265         __u16                   command_id;\n266         __le32                  nsid;\n267         __u64                   rsvd2[2];\n268         __le64                  prp1;\n269         __le64                  prp2;\n270         __le32                  cns;\n271         __u32                   rsvd11[5];\n272 };\n273 \n274 struct nvme_features {\n275         __u8                    opcode;\n276         __u8                    flags;\n277         __u16                   command_id;\n278         __le32                  nsid;\n279         __u64                   rsvd2[2];\n280         __le64                  prp1;\n281         __le64                  prp2;\n282         __le32                  fid;\n283         __le32                  dword11;\n284         __u32                   rsvd12[4];\n285 };\n286 \n287 struct nvme_create_cq {\n288         __u8                    opcode;\n289         __u8                    flags;\n290         __u16                   command_id;\n291         __u32                   rsvd1[5];\n292         __le64                  prp1;\n293         __u64                   rsvd8;\n294         __le16                  cqid;\n295         __le16                  qsize;\n296         __le16                  cq_flags;\n297         __le16                  irq_vector;\n298         __u32                   rsvd12[4];\n299 };\n300 \n301 struct nvme_create_sq {\n302         __u8                    opcode;\n303         __u8                    flags;\n304         __u16                   command_id;\n305         __u32                   rsvd1[5];\n306         __le64                  prp1;\n307         __u64                   rsvd8;\n308         __le16                  sqid;\n309         __le16                  qsize;\n310         __le16                  sq_flags;\n311         __le16                  cqid;\n312         __u32                   rsvd12[4];\n313 };\n314 \n315 struct nvme_delete_queue {\n316         __u8                    opcode;\n317         __u8                    flags;\n318         __u16                   command_id;\n319         __u32                   rsvd1[9];\n320         __le16                  qid;\n321         __u16                   rsvd10;\n322         __u32                   rsvd11[5];\n323 };\n324 \n325 struct nvme_download_firmware {\n326         __u8                    opcode;\n327         __u8                    flags;\n328         __u16                   command_id;\n329         __u32                   rsvd1[5];\n330         __le64                  prp1;\n331         __le64                  prp2;\n332         __le32                  numd;\n333         __le32                  offset;\n334         __u32                   rsvd12[4];\n335 };\n336 \n</pre>\n\n\n\n\n <pre>\n336 \n337 struct nvme_command {\n338         union {\n339                 struct nvme_common_command common;\n340                 struct nvme_rw_command rw;\n341                 struct nvme_identify identify;\n342                 struct nvme_features features;\n343                 struct nvme_create_cq create_cq;\n344                 struct nvme_create_sq create_sq;\n345                 struct nvme_delete_queue delete_queue;\n346                 struct nvme_download_firmware dlfw;\n347         };\n348 };\n349 \n350 enum {\n351         NVME_SC_SUCCESS                 = 0x0,\n352         NVME_SC_INVALID_OPCODE          = 0x1,\n353         NVME_SC_INVALID_FIELD           = 0x2,\n354         NVME_SC_CMDID_CONFLICT          = 0x3,\n355         NVME_SC_DATA_XFER_ERROR         = 0x4,\n356         NVME_SC_POWER_LOSS              = 0x5,\n357         NVME_SC_INTERNAL                = 0x6,\n358         NVME_SC_ABORT_REQ               = 0x7,\n359         NVME_SC_ABORT_QUEUE             = 0x8,\n360         NVME_SC_FUSED_FAIL              = 0x9,\n361         NVME_SC_FUSED_MISSING           = 0xa,\n362         NVME_SC_INVALID_NS              = 0xb,\n363         NVME_SC_LBA_RANGE               = 0x80,\n364         NVME_SC_CAP_EXCEEDED            = 0x81,\n365         NVME_SC_NS_NOT_READY            = 0x82,\n366         NVME_SC_CQ_INVALID              = 0x100,\n367         NVME_SC_QID_INVALID             = 0x101,\n368         NVME_SC_QUEUE_SIZE              = 0x102,\n369         NVME_SC_ABORT_LIMIT             = 0x103,\n370         NVME_SC_ABORT_MISSING           = 0x104,\n371         NVME_SC_ASYNC_LIMIT             = 0x105,\n372         NVME_SC_FIRMWARE_SLOT           = 0x106,\n373         NVME_SC_FIRMWARE_IMAGE          = 0x107,\n374         NVME_SC_INVALID_VECTOR          = 0x108,\n375         NVME_SC_INVALID_LOG_PAGE        = 0x109,\n376         NVME_SC_INVALID_FORMAT          = 0x10a,\n377         NVME_SC_BAD_ATTRIBUTES          = 0x180,\n378         NVME_SC_WRITE_FAULT             = 0x280,\n379         NVME_SC_READ_ERROR              = 0x281,\n380         NVME_SC_GUARD_CHECK             = 0x282,\n381         NVME_SC_APPTAG_CHECK            = 0x283,\n382         NVME_SC_REFTAG_CHECK            = 0x284,\n383         NVME_SC_COMPARE_FAILED          = 0x285,\n384         NVME_SC_ACCESS_DENIED           = 0x286,\n385 };\n386 \n</pre>\n\n\n\n\n <pre>\n386 \n387 struct nvme_completion {\n388         __le32  result;         /* Used by admin commands to return data */\n389         __u32   rsvd;\n390         __le16  sq_head;        /* how much of this queue may be reclaimed */\n391         __le16  sq_id;          /* submission queue that generated this entry */\n392         __u16   command_id;     /* of the command which completed */\n393         __le16  status;         /* did the command fail, and if so, why? */\n394 };\n395 \n396 struct nvme_user_io {\n397         __u8    opcode;\n398         __u8    flags;\n399         __u16   control;\n400         __u16   nblocks;\n401         __u16   rsvd;\n402         __u64   metadata;\n403         __u64   addr;\n404         __u64   slba;\n405         __u32   dsmgmt;\n406         __u32   reftag;\n407         __u16   apptag;\n408         __u16   appmask;\n409 };\n410 \n411 struct nvme_admin_cmd {\n412         __u8    opcode;\n413         __u8    flags;\n414         __u16   rsvd1;\n415         __u32   nsid;\n416         __u32   cdw2;\n417         __u32   cdw3;\n418         __u64   metadata;\n419         __u64   addr;\n420         __u32   metadata_len;\n421         __u32   data_len;\n422         __u32   cdw10;\n423         __u32   cdw11;\n424         __u32   cdw12;\n425         __u32   cdw13;\n426         __u32   cdw14;\n427         __u32   cdw15;\n428         __u32   timeout_ms;\n429         __u32   result;\n430 };\n431 \n432 #define NVME_IOCTL_ID           _IO(\'N\', 0x40)\n433 #define NVME_IOCTL_ADMIN_CMD    _IOWR(\'N\', 0x41, struct nvme_admin_cmd)\n434 #define NVME_IOCTL_SUBMIT_IO    _IOW(\'N\', 0x42, struct nvme_user_io)\n435 \n\n</pre>\n\n\n==== drivers/block/nvme.c ====\n\n\n <pre>\n  44 \n  45 #define NVME_Q_DEPTH 1024\n  46 #define SQ_SIZE(depth)          (depth * sizeof(struct nvme_command))\n  47 #define CQ_SIZE(depth)          (depth * sizeof(struct nvme_completion))\n  48 #define NVME_MINORS 64\n  49 #define NVME_IO_TIMEOUT (5 * HZ)\n  50 #define ADMIN_TIMEOUT   (60 * HZ)\n  51 \n  52 static int nvme_major;\n  53 module_param(nvme_major, int, 0);\n  54 \n  55 static int use_threaded_interrupts;\n  56 module_param(use_threaded_interrupts, int, 0);\n  57 \n  58 static DEFINE_SPINLOCK(dev_list_lock);\n  59 static LIST_HEAD(dev_list);\n  60 static struct task_struct *nvme_thread;\n  61 \n</pre>\n\n\n\n\n <pre>\n  62 /*\n  63  * Represents an NVM Express device.  Each nvme_dev is a PCI function.\n  64  */\n  65 struct nvme_dev {\n  66         struct list_head node; \n  67         struct nvme_queue **queues;    \n  68         u32 __iomem *dbs;      \n  69         struct pci_dev *pci_dev;\n  70         struct dma_pool *prp_page_pool;\n  71         struct dma_pool *prp_small_pool;\n  72         int instance;\n  73         int queue_count;       \n  74         int db_stride;         \n  75         u32 ctrl_config;       \n  76         struct msix_entry *entry;\n  77         struct nvme_bar __iomem *bar;\n  78         struct list_head namespaces;\n  79         char serial[20];\n  80         char model[40];\n  81         char firmware_rev[8];\n  82         u32 max_hw_sectors;\n  83 };\n  84 \n  85 /*     \n  86  * An NVM Express namespace is equivalent to a SCSI LUN\n  87  */    \n  88 struct nvme_ns {\n  89         struct list_head list; \n  90        \n  91         struct nvme_dev *dev;  \n  92         struct request_queue *queue;\n  93         struct gendisk *disk;  \n  94        \n  95         int ns_id;\n  96         int lba_shift;         \n  97 };     \n  98 \n  99 /*     \n 100  * An NVM Express queue.  Each device has at least two (one for admin\n 101  * commands and one for I/O commands).\n 102  */\n 103 struct nvme_queue {\n 104         struct device *q_dmadev;\n 105         struct nvme_dev *dev;\n 106         spinlock_t q_lock;\n 107         struct nvme_command *sq_cmds;\n 108         volatile struct nvme_completion *cqes;\n 109         dma_addr_t sq_dma_addr;\n 110         dma_addr_t cq_dma_addr;\n 111         wait_queue_head_t sq_full;\n 112         wait_queue_t sq_cong_wait;\n 113         struct bio_list sq_cong;\n 114         u32 __iomem *q_db;\n 115         u16 q_depth;\n 116         u16 cq_vector;\n 117         u16 sq_head;\n 118         u16 sq_tail;\n 119         u16 cq_head;\n 120         u16 cq_phase;\n 121         unsigned long cmdid_data[];\n 122 };\n 123 \n</pre>\n\n== ## bNote-2013-12-03 ==\n\n=== Linux kernel IO stack: Block Layer ===\n\n==== Linux Documentation ====\n\n; Documentation/block/queue-sysfs.txt\n\n <pre>\n1	Queue sysfs files\n2	=================\n3	\n4	This text file will detail the queue files that are located in the sysfs tree\n5	for each block device. Note that stacked devices typically do not export\n6	any settings, since their queue merely functions are a remapping target.\n7	These files are the ones found in the /sys/block/xxx/queue/ directory.\n8	\n9	Files denoted with a RO postfix are readonly and the RW postfix means\n10	read-write.\n11	\n12	add_random (RW)\n13	----------------\n14	This file allows to trun off the disk entropy contribution. Default\n15	value of this file is \'1\'(on).\n16	\n17	discard_granularity (RO)\n18	-----------------------\n19	This shows the size of internal allocation of the device in bytes, if\n20	reported by the device. A value of \'0\' means device does not support\n21	the discard functionality.\n22	\n23	discard_max_bytes (RO)\n24	----------------------\n25	Devices that support discard functionality may have internal limits on\n26	the number of bytes that can be trimmed or unmapped in a single operation.\n27	The discard_max_bytes parameter is set by the device driver to the maximum\n28	number of bytes that can be discarded in a single operation. Discard\n29	requests issued to the device must not exceed this limit. A discard_max_bytes\n30	value of 0 means that the device does not support discard functionality.\n31	\n32	discard_zeroes_data (RO)\n33	------------------------\n34	When read, this file will show if the discarded block are zeroed by the\n35	device or not. If its value is \'1\' the blocks are zeroed otherwise not.\n36	\n37	hw_sector_size (RO)\n38	-------------------\n39	This is the hardware sector size of the device, in bytes.\n40	\n41	iostats (RW)\n42	-------------\n43	This file is used to control (on/off) the iostats accounting of the\n44	disk.\n45	\n46	logical_block_size (RO)\n47	-----------------------\n48	This is the logcal block size of the device, in bytes.\n49	\n50	max_hw_sectors_kb (RO)\n51	----------------------\n52	This is the maximum number of kilobytes supported in a single data transfer.\n53	\n54	max_integrity_segments (RO)\n55	---------------------------\n56	When read, this file shows the max limit of integrity segments as\n57	set by block layer which a hardware controller can handle.\n58	\n59	max_sectors_kb (RW)\n60	-------------------\n61	This is the maximum number of kilobytes that the block layer will allow\n62	for a filesystem request. Must be smaller than or equal to the maximum\n63	size allowed by the hardware.\n64	\n65	max_segments (RO)\n66	-----------------\n67	Maximum number of segments of the device.\n68	\n69	max_segment_size (RO)\n70	---------------------\n71	Maximum segment size of the device.\n72	\n73	minimum_io_size (RO)\n74	--------------------\n75	This is the smallest preferred io size reported by the device.\n76	\n77	nomerges (RW)\n78	-------------\n79	This enables the user to disable the lookup logic involved with IO\n80	merging requests in the block layer. By default (0) all merges are\n81	enabled. When set to 1 only simple one-hit merges will be tried. When\n82	set to 2 no merge algorithms will be tried (including one-hit or more\n83	complex tree/hash lookups).\n84	\n85	nr_requests (RW)\n86	----------------\n87	This controls how many requests may be allocated in the block layer for\n88	read or write requests. Note that the total allocated number may be twice\n89	this amount, since it applies only to reads or writes (not the accumulated\n90	sum).\n91	\n92	To avoid priority inversion through request starvation, a request\n93	queue maintains a separate request pool per each cgroup when\n94	CONFIG_BLK_CGROUP is enabled, and this parameter applies to each such\n95	per-block-cgroup request pool.  IOW, if there are N block cgroups,\n96	each request queue may have up to N request pools, each independently\n97	regulated by nr_requests.\n98	\n99	optimal_io_size (RO)\n100	--------------------\n101	This is the optimal io size reported by the device.\n102	\n103	physical_block_size (RO)\n104	------------------------\n105	This is the physical block size of device, in bytes.\n106	\n107	read_ahead_kb (RW)\n108	------------------\n109	Maximum number of kilobytes to read-ahead for filesystems on this block\n110	device.\n111	\n112	rotational (RW)\n113	---------------\n114	This file is used to stat if the device is of rotational type or\n115	non-rotational type.\n116	\n117	rq_affinity (RW)\n118	----------------\n119	If this option is \'1\', the block layer will migrate request completions to the\n120	cpu \"group\" that originally submitted the request. For some workloads this\n121	provides a significant reduction in CPU cycles due to caching effects.\n122	\n123	For storage configurations that need to maximize distribution of completion\n124	processing setting this option to \'2\' forces the completion to run on the\n125	requesting cpu (bypassing the \"group\" aggregation logic).\n126	\n127	scheduler (RW)\n128	--------------\n129	When read, this file will display the current and available IO schedulers\n130	for this block device. The currently active IO scheduler will be enclosed\n131	in [] brackets. Writing an IO scheduler name to this file will switch\n132	control of this block device to that new IO scheduler. Note that writing\n133	an IO scheduler name to this file will attempt to load that IO scheduler\n134	module, if it isn\'t already present in the system.\n135	\n136	\n137	\n138	Jens Axboe <jens.axboe@oracle.com>, February 2009\n</pre>\n\n\n\n\n==== Linux kernel 3.8.0 source code ====\n\n; block/blk-settings.c: blk_queue_make_request()\n <pre>\n\n152 /**\n153  * blk_queue_make_request - define an alternate make_request function for a device\n154  * @q:  the request queue for the device to be affected\n155  * @mfn: the alternate make_request function\n156  *\n157  * Description:\n158  *    The normal way for &struct bios to be passed to a device\n159  *    driver is for them to be collected into requests on a request\n160  *    queue, and then to allow the device driver to select requests\n161  *    off that queue when it is ready.  This works well for many block\n162  *    devices. However some block devices (typically virtual devices\n163  *    such as md or lvm) do not benefit from the processing on the\n164  *    request queue, and are served best by having the requests passed\n165  *    directly to them.  This can be achieved by providing a function\n166  *    to blk_queue_make_request().\n167  *\n168  * Caveat:\n169  *    The driver that does this *must* be able to deal appropriately\n170  *    with buffers in \"highmemory\". This can be accomplished by either calling\n171  *    __bio_kmap_atomic() to get a temporary kernel mapping, or by calling\n172  *    blk_queue_bounce() to create a buffer in normal memory.\n173  **/\n174 void blk_queue_make_request(struct request_queue *q, make_request_fn *mfn)\n175 {\n176         /*\n177          * set defaults\n178          */\n179         q->nr_requests = BLKDEV_MAX_RQ;\n180 \n181         q->make_request_fn = mfn;\n182         blk_queue_dma_alignment(q, 511);\n183         blk_queue_congestion_threshold(q);\n184         q->nr_batching = BLK_BATCH_REQ;\n185 \n186         blk_set_default_limits(&q->limits);\n187 \n188         /*\n189          * by default assume old behaviour and bounce for any highmem page\n190          */\n191         blk_queue_bounce_limit(q, BLK_BOUNCE_HIGH);\n192 }\n193 EXPORT_SYMBOL(blk_queue_make_request);\n\n</pre>\n\n\n\n\n; include/linux/blkdev.h: BLKDEV_MAX_RQ\n <pre>\n  38 #define BLKDEV_MAX_RQ   128     /* Default maximum */\n</pre>\n\n\n\n\n; block/blk-sysfs.c: /* Functions related to sysfs handling */\n <pre>\n 40 \n 41 static ssize_t queue_requests_show(struct request_queue *q, char *page)\n 42 {\n 43         return queue_var_show(q->nr_requests, (page));\n 44 }\n 45 \n 46 static ssize_t\n 47 queue_requests_store(struct request_queue *q, const char *page, size_t count)\n 48 {\n 49         struct request_list *rl;\n 50         unsigned long nr;\n 51         int ret;\n 52 \n 53         if (!q->request_fn)\n 54                 return -EINVAL;\n 55 \n 56         ret = queue_var_store(&nr, page, count);\n 57         if (ret < 0)\n 58                 return ret;\n 59 \n 60         if (nr < BLKDEV_MIN_RQ)\n 61                 nr = BLKDEV_MIN_RQ;\n 62 \n 63         spin_lock_irq(q->queue_lock);\n 64         q->nr_requests = nr;\n 65         blk_queue_congestion_threshold(q);\n 66 \n 67         /* congestion isn\'t cgroup aware and follows root blkcg for now */\n 68         rl = &q->root_rl;\n 69 \n 70         if (rl->count[BLK_RW_SYNC] >= queue_congestion_on_threshold(q))\n 71                 blk_set_queue_congested(q, BLK_RW_SYNC);\n 72         else if (rl->count[BLK_RW_SYNC] < queue_congestion_off_threshold(q))\n 73                 blk_clear_queue_congested(q, BLK_RW_SYNC);\n 74 \n 75         if (rl->count[BLK_RW_ASYNC] >= queue_congestion_on_threshold(q))\n 76                 blk_set_queue_congested(q, BLK_RW_ASYNC);\n 77         else if (rl->count[BLK_RW_ASYNC] < queue_congestion_off_threshold(q))\n 78                 blk_clear_queue_congested(q, BLK_RW_ASYNC);\n 79 \n 80         blk_queue_for_each_rl(rl, q) {\n 81                 if (rl->count[BLK_RW_SYNC] >= q->nr_requests) {\n 82                         blk_set_rl_full(rl, BLK_RW_SYNC);\n 83                 } else {\n 84                         blk_clear_rl_full(rl, BLK_RW_SYNC);\n 85                         wake_up(&rl->wait[BLK_RW_SYNC]);\n 86                 }\n 87 \n 88                 if (rl->count[BLK_RW_ASYNC] >= q->nr_requests) {\n 89                         blk_set_rl_full(rl, BLK_RW_ASYNC);\n 90                 } else {\n 91                         blk_clear_rl_full(rl, BLK_RW_ASYNC);\n 92                         wake_up(&rl->wait[BLK_RW_ASYNC]);\n 93                 }\n 94         }\n 95 \n 96         spin_unlock_irq(q->queue_lock);\n 97         return ret;\n 98 }\n 99 \n\n</pre>\n\n\n\n; drivers/block/nvme.c: NVME_Q_DEPTH\n <pre>\n  44 \n  45 #define NVME_Q_DEPTH 1024\n  46 #define SQ_SIZE(depth)          (depth * sizeof(struct nvme_command))\n  47 #define CQ_SIZE(depth)          (depth * sizeof(struct nvme_completion))\n  48 #define NVME_MINORS 64\n  49 #define NVME_IO_TIMEOUT (5 * HZ)\n  50 #define ADMIN_TIMEOUT   (60 * HZ)\n  51 \n</pre>\n\n== ## bNote-2013-12-02 ==\n\n=== XS-1715 Specification ===\n\n==== Key features ====\n\n* Performance\n: Optimized for 4KB random read and write workloads\n:- Performance Target\n::- More than 700K IOPS for 4KB random reads\n::- More than 200K IOPS for 4KB random writes (sustained)\n\n* Mapping Algorithm\n:- 4KB full page mapping\n:- FN21 4-planes program support \n:- FN21 4KB fast read support\n:- Hot/cold data separtion (ESP_MM_Mapping.c)\n:- Concurrent garbage collection during user page writes\n:- Non-blocking DRAM access to avoid pipeline bubbles of CPU\n:- No hardware register access at all during user read/write request processing\n:- Journal log information reduction for fast power-down and fast recovery at boot-up\n:- Flash RAID-5 support\n\n\n\n=== Admin/Misc ===\n\n* DS 인사 (전배관련): \'\'\'정영민 대리\'\'\', 박필 사원\n:-> 정영민 대리에게 확인. (OK)\n\n<!--\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:57]:\n  정대리님, 안녕하세요?\n  이번 10월 1일자로 기술원에서 SW개발팀으로 전배 온\n  정명준 책임입니다. \n  내년 승격 관련해서\n  문의드리고자 연락 드렸습니다\n  잠시 시간 되시는지요?\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:00]:\n  네\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:00]:\n  안녕하세요? 혹시 기술원의 김경진 차장으로부터\n  차년도 승격 관련해서\n  연락 받으셨던 것이 있으신지 궁금해서요~\n  제가 기술원 기준으로는 차년도 승격이 되는데\n  여기 전배를 오게 되면서, 승격 예외 대상자로 \n  예외 승격 대상자\n  로 분류해서 내년에 수석 진급이 보장될 수 있도록\n  해주겠다는 이야기를 들었었거든요\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:02]:\n  네 예전에 관련 결재를 통보받았으나, 책임님 명단이 있는지는 확인해봐야겠습니다\n  잠시만요\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:02]:\n  네~\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:05]:\n  네 확인했습니다. 책임님 승격되십니다\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:05]:\n  아 감사합니다~\n  이번에 저와 같이 오셨던\n  신현정 책임도 같이\n  승격 되는 것 맞죠?\n  저희 2명이 \n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:06]:\n  넵\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:06]:\n  된다고 들었었거든요\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:06]:\n  2명입니다\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:06]:\n  확인해주셔서 감사합니다. 그럼 저희 2명이 특별히\n  따로 더 할 일이\n  할 일은 없는 건지요?\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:06]:\n  넵\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:06]:\n  아, 잘 알겠습니다. \n  감사합니다. 좋은 오후 보내세요  \n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:07]:\n  네 수고하셔요~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:07]:\n  넵 감사합니다 ^^\n-->\n\n<!--\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:53]:\n  김과장님, 안녕하세요? 10월 1일자로 기술원에서 메모리사 S/W 개발팀으로 전배 온 정명준 책임입니다.\n  승격 관련해서 여쭙고자 연락 드렸습니다\n  잠시 시간 되시는지요?\n‎‎김효근(G5(과장)/담당과장/삼성전자)‎‎ [오후 1:54]:\n  아 네...\n  담당자는 박필 사원이나 \n  정영민 대리입니다. \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:55]:\n  아하 \n‎‎김효근(G5(과장)/담당과장/삼성전자)‎‎ [오후 1:55]:\n  정영민 대리는 지금 통화중이네요... \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:55]:\n  아, 그럼 잠시 후 정영민 대리에게 연락해보겠습니다 알려주셔서 감사합니다 ^_^\n‎‎김효근(G5(과장)/담당과장/삼성전자)‎‎ [오후 1:57]:\n  전 인력운영 담당자라 \n  승격에 대해서는 제가 정확한 답변을 못 드릴 것 같습니다. \n  정대리 전화 끊었네요\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:57]:\n  아, 감사합니다 ^^\n  연락해보겠습니다  \n-->\n\n<!--\n: <strike>DS 인사 담당: 김효근 과장, 이창익 대리 (인력 이동 관련)</strike> Updated: 정영민대리가 담당임.\n: 10/17 김경진 차장 - 내년 승격 대상자는 기술원 인사팀에서 본사에 얘기해놓았으며, 11.1일자 인력들과 같이 해서 예외 대상자들 품의를 받아 사업부에 뿌릴 예정이라고 함\n-->\n\n== References ==\n\n<references/>','utf-8'),(2055,'\n\n\n\n\n <pre>\n   December 2013\nSu Mo Tu We Th Fr Sa\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n</pre>\n\n\n\n\n\n== ## bNote-2013-12-12 ==\n\n=== MySQL handling ===\n\n* mysql> show status like \'innodb_%\'\n\n <pre>\nmysql> show status like \'innodb_%\';\n+---------------------------------------+---------+\n| Variable_name                         | Value   |\n+---------------------------------------+---------+\n| Innodb_buffer_pool_pages_data         | 389     |\n| Innodb_buffer_pool_bytes_data         | 6373376 |\n| Innodb_buffer_pool_pages_dirty        | 0       |\n| Innodb_buffer_pool_bytes_dirty        | 0       |\n| Innodb_buffer_pool_pages_flushed      | 0       |\n| Innodb_buffer_pool_pages_free         | 5119611 |\n| Innodb_buffer_pool_pages_misc         | 0       |\n| Innodb_buffer_pool_pages_total        | 5120000 |\n| Innodb_buffer_pool_read_ahead_rnd     | 0       |\n| Innodb_buffer_pool_read_ahead         | 0       |\n| Innodb_buffer_pool_read_ahead_evicted | 0       |\n| Innodb_buffer_pool_read_requests      | 5600    |\n| Innodb_buffer_pool_reads              | 390     |\n| Innodb_buffer_pool_wait_free          | 0       |\n| Innodb_buffer_pool_write_requests     | 0       |\n| Innodb_data_fsyncs                    | 3       |\n| Innodb_data_pending_fsyncs            | 0       |\n...\n</pre>\n\n== ## bNote-2013-12-11 ==\n\n=== Xian SSD Benchmark Test ===\n\n==== Environment ====\n <pre>\nHardware Server	HP DL380p Gen8\nCPU: 2xIntel XeonE5-2665@2.40GHz;\nMemory: 128GB\nStorage	Seagate HDD, 1TB, 7200rpm\nIntel SSD S3500, 480G\nSamsung SSD SM843Tns, 960G\n\nSoftware\nOS Centos 6.4 (2.6.32-358.el6.x86_64)\nI/O Scheduler: CFQ/Noop\nFile system	EXT4/XFS\nMySQL DB	Percona Server 5.6.14\n\nConfiguration:\nskip-grant-tables\ninnodb_buffer_pool_size = 80000M\ninnodb_thread_concurrency = 32 \ninnodb_spin_wait_delay = 30 \ninnodb_sync_spin_loops = 100\ninnodb_max_dirty_pages_pct = 90\ninnodb_lock_wait_timeout = 120\ninnodb_doublewrite = 0\ninnodb_flush_method = O_DIRECT\ninnodb_log_buffer_size = 256M\ninnodb_log_file_size = 8192M\ninnodb_log_block_size=4096\ninnodb_write_io_threads=16\ninnodb_read_io_threads=16\ninnodb_io_capacity=20000\ninnodb_file_format=barracuda\nmax_connections=3000\nquery_cache_size=0\nskip-name-resolve\n	tpcc-mysql	Revision 48. \nConfigurations\nThe CentOS is installed on HDD, filesystem is EXT4.\nThe Percona database is also installed on HDD, but the datadir is a directory on Samsung SSD.\nSamsung SSD SM843Tns 960GB is divided into two 480G partitions, XFS format. Only one partition is used for benchmarking, the other partition is fully written with unused data.\n\nPercona Server Installation\nResource: http://www.percona.com/downloads/Percona-Server-5.6/LATEST/RPM/rhel6/x86_64/\n\nInstall Step:\n1.Download Percona Server, client and shared rpm packages.\n2.Remove old mysql packages: \nyum –y remove mysql, mysql-server, mysql-libs-*.\n3.Install Percona shared, client, server packages:\n	rpm –ivhPercona-Server-shared-XXX.rpm\nrpm –ivhPercona-Server-client-XXX.rpm\nrpm –ivhPercona-Server-server-XXX.rpm\n4. Mysql secure installation: \nRun /usr/bin/mysql_secure_installation (default root user password is NULL)\n\nStart and Stop MySQL:\n	service mysql start/stop\n/etc/init.d/mysqlstart/stop\n\nLogin MySQL:\nmysql -uroot –p\n\nModify password:\nmysqladmin -uroot -p password\n\ntpcc-mysql installation\nResource:\nhttps://code.launchpad.net/~percona-dev/perconatools/tpcc-mysql\n\nInstall Step:\ncdsrc\nmake\n\nFAQ:\n1.	Can’t find header file\nexport C_INCLUDE_PATH=$MYSQL_HOME/include\n2.	Can’t find mysql_config\nexport PATH=$MYSQL_HOME/bin:$PATH\n3.	Can’t find mysql lib\nexport LD_LIBRARY_PATH=$MYSQL_HOME/lib\n\nLoad data:\n1.	Create database\nshell>mysqladmin create tpcc2500\nmysql> create database tpcc2500;\n2.	Create tables\nshell> mysql –uroot –p tpcc2500 <create_table.sql\n3.	Create indexes and FK\nshell> mysql –uroot –p tpcc2500 <add_fkey_idx.sql\n4.	Populate data (long time needed)\nsimple step:\nshell>./tpcc_loadlocalhost tpcc2500 root xxxx2500\nUsage:  tpcc_load [server] [DBname] [user] [pass] [warehouse]\nref. tpcc_load --help for all options\nload data in parallel (Recommanded)\nshell>./load.sh tpcc2500 2500\ncheck load.sh script, need to modify, add password\n\nStart benchmark:\n1.	Usage\ntpcc_start -h server_host -P port -d database_name -u mysql_user -p mysql_password -w warehouses -c connections -r warmup_time -l running_time -ireport_interval -f report_file -t trx_file\n2.	Example\n./tpcc_start -hlocalhost–dtpcc2500 -uroot -pxxxx–w2500 –c128 -r0 –l10800–i10\n\nBenchmarking parameters:\n2500 warehouses\n128 connections\nWarm up time: 0\nRunning time: 10800\nReport interval: 10 \n</pre>\n\n\n=== SSD initialization ===\n\n==== ATA secure erase ====\n\n* [http://www.manualslib.com/manual/490034/Dell-Poweredge-External-Media-System-1434.html?page=14 Intel 320 SSD ATA Instant Secure Erase Functionality]\n: Intel 320 SSDs support cryptography-based Instant ATA secure erase functionality. The Intel 320 SSD Instant ATA secure ease feature is non-TCG (Trusted Computing Group) based. It supports two modes of crypto secure erase:\n\n:* Normal secure erase—Clears the encryption keys and erases NAND\n:* Enhanced secure erase—Generates new keys and clears NAND.\n\n: The PERC solution only supports the \"crypto erase\" function on TCG-compliant Enterprise SED (Self Encrypting Drive)drives. When an Intel 320 drive is connected to a PERC, there is an incompatibility between PERC TCG method of crypto erase and Intel 320 supported non-TCG based ATA instant secure erase.\n: <span style=\"background:gold\">As a result, the instant secure erase functionality can\'t be used with PERC based solution.</span> The only way to run instant ATA secure ease and use Intel 320 drive secure wiping feature is to connect the drives directly into the motherboard chipset\'s ATA port and issue secure erase command. Intel provides a free utility (Intel SSDToolbox) to instant secure erase the drive, which you can download from www.intel.com/go/ssdtoolbox\n\n==== Talk with JinJin ====\n <pre>\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:42]:\n  Hi, Jinjin  \n  My name is M.J. JUNG (brian.m.jung@samsung.com)\n  introduced by M.S. Kwon in recent mails\n  ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:42]:\n  Hi~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:42]:\n  Ni Hao~ ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:43]:\n  Can I call you Brian or MyungJune?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:43]:\n  Oh, Brian is preferred ! ^^\n  just call me brian  \n  can I call you JinJin?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:43]:\n  yes, sure\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:43]:\n  oh, great ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:43]:\n   \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:43]:\n  I\'ve got your mail regarding the benchmark ~\n  and could I ask you something on that issue? \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:44]:\n  of course\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:44]:\n  oh, thank you  \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:44]:\n  you\'re welcome \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:44]:\n  wow ^___^ \n  is there any reason to use percona version of mysql? ^^\n  actually my current system is Ubuntu running MySQL (original)\n  so, if I should make a test bed \n  exactly same as yours ~\n  I should remove my old DB (mysql) ^^;;;;\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:46]:\n  so special reason, mysql is also Ok, I think, but I\'m not sure whether you can reproduce it with mysql\n  no special reason\n  sorry, typo\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:46]:\n  oh, got your point!\n  (no need to say sorry  ^^ I\'m the king of typo generation hahah)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:47]:\n  haha, so nice of you\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:47]:\n  wow ^^ it\'s great for me to talk to you too!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:47]:\n  i think you can try it on your system first\n  if you can\'t reproduce, then use percona \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:48]:\n  oh, great! and then if I could not generate that same situation on my old system, then I SHOULD change my system, ^^\n  GOT IT!\n   \n  and one more thing to ask !\n  ^^\n  what about the Intel case? \n  I\'ve seen that the red line\n  in your graph~\n  Could you see the same type of red line \n  every time you tested?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:50]:\n  I just test once with Intel case\n  because of time limit\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:50]:\n  ok~ got it ^^\n  then, I can repeat the test for intel case to make it more complete test~ can this help you?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:51]:\n  I think intel case is ok since it\'s stable after one hour test\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:51]:\n  oh,\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:51]:\n  sure\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:51]:\n  did you make the SSD (intel, Samsung) in the  steady-state before each test?\n  (great ^^)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:52]:\n  I\'m not sure \n  i just remove all data on the disk\n  didn\'t erase \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:52]:\n  a-ha! ^^\n  got some point!  \n  we usually\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:52]:\n  maybe that\'s the reason\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:52]:\n  make the SSDs be in the \'steady-state\' before each test, \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:53]:\n  yes, i learn it today\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:53]:\n  because \'steady-state\' makes the performance of SSD be in the stable state\n  Oh great  ^^\n  You may find good article regarding \'steady state\' \n  in the SNIA\n  site\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:54]:\n  thank you! \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:54]:\n  http://www.snia.org/sites/default/education/tutorials/2011/fall/SolidState/EstherSpanjer_The_Why_How_SSD_Performance_Benchmarking.pdf\n  (oh, you\'re quite welcome)\n  oh, this is more updated version.\n  http://www.snia.org/sites/default/files/SNIASSSI.SSDPerformance-APrimer2013.pdf\n  And, maybe HJ Lim send you the script\n  to perform an operation to make \'steady-state\' SSD\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:55]:\n  thank you! I can open it \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:55]:\n  great!^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:56]:\n  yes, he did!\n  I also have one question\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:56]:\n  Please let me know any question or let me get your comments regarding this collaboration - Benchmark test -\n  ok, i\'m ready!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:56]:\n  should I use \"security erase\" or \"Enhanced security erase\" ?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:56]:\n  ah, physically, you mean?\n  maybe not, only if you perform the script HJ Lim gave. \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:57]:\n  in HJ Lim\'s guide, there are two kinds of security erase\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:57]:\n  to be sure, Could you send me the copy of the script that HJ Lim gave to you?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:57]:\n  I don\'t know which one to use\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:58]:\n  Let me check and then answer to you \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:58]:\n  ok, i will send to you\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:58]:\n  ok! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:00]:\n  I have sent it to you\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:00]:\n  Ok, I\'ll check it right now ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:01]:\n   \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:04]:\n  Oh, this way with \'hdparm\', let you have the SSD of clean state (at the virgin state when SSD is manufactured)\n  so, it is preferred  \n  If you have any problem with this, please let me know  \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:05]:\n  so what\'s the difference of steady state and virgin state?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:06]:\n  oh, great question!\n  usually state state means:\n  very bad condition to SSD\n  - because we introduce very harsh IOs to SSD to make the performance of SSD stable (sequential writes and then random writes to SSD for a long time)\n  but virgin state itself can give us the good performance (reportedly)\n  So, I proper to proceed like this.\n  firstly, make the SSD at the virgin state (manufactured state)\n  and then, make the SSD be in the steady-state (by introducing some harsh IO requests - there are well-known script to do this)\n  --- Regarding this way (two steps)\n  , I\'ll check the preferred script to use in this benchmark\n  and then let you know  \n  (also send it to you, if required)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:11]:\n  thank you! your answer is so good!\n  I got your point\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:11]:\n  oh, it\'s my honour to hear that from you\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:11]:\n  so do you have some script to do harsh IO requests?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:12]:\n  yes, my version ^^\n  using FIO\n  you know FIO?\n  (Flexible IO benchmark program)\n  http://freecode.com/projects/fio\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:12]:\n  yes, i have heard of it, but never use it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:13]:\n  But i\'m not sure that script is enough for our benchmark, so I SHOULD check it out to MS KWON.\n  wait a second, please. let me check   I\'ll be back. \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:14]:\n  ok, thank you. I will wait for you...\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:18]:\n  Oh, Jinjin, Long time no see! ^^\n  I\'m back! ^^\n  with a clear answer for you!\n  Ready to talk? ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:19]:\n  haha^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:19]:\n  seems you are ready ^^\n  ok~\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:20]:\n  yes, i\'m ready^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:20]:\n  ^^ yes!!!\n  We will go with Two cases!\n  first case is:\n  using only virgin state. (good for performance, maybe)\n  second case is:\n  make virgin state and then also dirtify script to make it steady state ^^\n  (this is preferred way that SNIA recommends - to make the performance test fair)\n  ----- was my explanation clear ?\n  if not, please ask ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:23]:\n  yes, very clear!\n  I got your point\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:23]:\n  oh, you \'re super smart!!!!!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:23]:\n  thank you !\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:24]:\n  thank you !!! ^___^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:24]:\n  haha^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:24]:\n  (actually, my English is not good~ so I\'ve worried that my talk was unclear -_-; \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:24]:\n  it\'s very happy to talk with you!!!\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:24]:\n  oh~ great for me! TOOO!!!!\n  let\'s have a talk from time to time, any time welcomed!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:25]:\n  I think your english is very good! your type much faster than me\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:25]:\n  oh~~~~~~~~~ ^^;;;\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:25]:\n  sure\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:26]:\n  sure, great!!! i\'ll get back to you when I get some progress! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:26]:\n  ok, thank you again for your help!!\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:26]:\n  oh, you\'re quite welcom!\n  my pleasure!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:27]:\n  any time any questions are welcomed!!!\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:27]:\n  wow, great!!!!^^\n  Ok, CU!! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:27]:\n  CU!\n   \n</pre>\n\n\n <pre>\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:40]:\n  Hi, Jinjin!!! ^^\n  any problem to use the FIO script?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:41]:\n  morning, Brian\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  wow~ Good morning, Jinjin!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  I haven\'t tried it yet\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  oh, no problem~ ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  yesterday, we tried the hdparm\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  if you need any help regarding that, please feel free to tell me ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  seems it doesn\'t work\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  ooops~\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  we are still trying to fix it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:43]:\n  i\'ve also heard sometimes it does not work on some types of SSD\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:43]:\n  there will be some errors when we use hdparm -I /dev/sdc\n  /dev/sdc:\nSG_IO: bad/missing sense data, sb[]:  70 00 05 00 00 00 00 0a 00 00 00 00 20 00                                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  do you have any idea about it?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:44]:\n  oh, did you check the capability with \'hdparm -I /dev/sdc\'\n  ?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:44]:\n  yes\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:44]:\n  large i option\n  oh~\n  what about the report from that command?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:45]:\n  [root@ds-me jinjin]# hdparm -I /dev/sdc\n\n/dev/sdc:\nSG_IO: bad/missing sense data, sb[]:  70 00 05 00 00 00 00 0a 00 00 00 00 20 00                                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n\nATA device, with non-removable media\nStandards:\n        Likely used: 1\nConfiguration:\n        Logical         max     current\n        cylinders       0       0\n        heads           0       0\n        sectors/track   0       0\n        --\n        Logical/Physical Sector size:           512 bytes\n        device size with M = 1024*1024:           0 MBytes\n        device size with M = 1000*1000:           0 MBytes\n        cache/buffer size  = unknown\nCapabilities:\n        IORDY not likely\n        Cannot perform double-word IO\n        R/W multiple sector transfer: not supported\n        DMA: not supported\n        PIO: pio0\n  that\'s the whole output, can you see it?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:46]:\n  oh, seems there\'s no section \'Security\'\n  you might also refer to the site http://tinyapps.org/docs/wipe_drives_hdparm.html\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:47]:\n  ok, thank you! i\'ll read it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:47]:\n  Ok, hope to hear good news from you ^__^\n  ah~\n  one more question ^^\n  Could I ask you how much is the DB file size (in GB) when population is completed?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:49]:\n  sure^^\n  if you populate 2500 warehouses\n  it\'s about 247GB\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:49]:\n  oh~ !!!\n  the place of the 9 DB files must be under /var/lib/mysql/tpcc...\n  right?\n  and one problematic thing for my case is, currently we have no such a super machine with over 128GB DRAM ~ -_-;;\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:52]:\n  yes, the default datadir path is /var/lib/mysql/tpcc...\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:52]:\n  so I could not configure db buffer pool size as 80GB yet \n  Ok, got it!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:53]:\n  you may need to store the tpcc2500 on the SSD for testing\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:53]:\n  you\'re right!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:53]:\n  that\'s ok, just set the db buffer pool size to about 70%~80% of your memory size\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:54]:\n  ok~ good advice! ^^\n  did you configure the place to store TPCC DB in /etc/mysql/my.cnf?\n  or, just using load.sh ?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:54]:\n  yes, you can using /etc/mysql/my.cnf\n  just write the following in my.cnf\n\n [mysqld]\ndatadir=/your/path\n\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:56]:\n  thank you so much, Jinjin! ^^\n  Ok, CU soon! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:57]:\n  you are welcome~~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:57]:\n  hahahah ^^ so nice of you!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:57]:\n  any questions, just let me know^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:58]:\n  oh, great!!!! thank you Jinjin, You Too!!!! (anytime welcomed!) ^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:49]:\n  hi, Jinjin~\n  ^^\n  some small update for you~\n  regarding secure erase failure you mentioned\n  reply anytime when you\'re ready to talk ^__^\n  (maybe you already found this info.)\n  http://www.manualslib.com/manual/490034/Dell-Poweredge-External-Media-System-1434.html?page=14\n  Please see the section \"Intel 320 SSD ATA Instant Secure Erase Functionality\"\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:52]:\n  Hi, Brian~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:52]:\n  Wow! Jinjin!\n  ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:52]:\n  thanks for the info\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:52]:\n  oh, you\'re welcome!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:52]:\n  our server is HP, not Dell\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:53]:\n  oh, I see!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:53]:\n  I\'m still looking for servier configuration\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:53]:\n  what about the HW RAID on your system?\n  do you use HW RAID to access that SSD?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:53]:\n  I think it\'s the server\'s smart array card \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:53]:\n  oh!\n  that\'s the point! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:54]:\n  so now i\'m looking for how to change it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:54]:\n  maybe, that means, your application access to your SSDs through that \"smart array card (HW RAID)\" ~\n  right?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:54]:\n  yes\n  we need to let app access ssd directly\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:55]:\n  yes!!! exactly ^^\n  If your HP system does not allow that bypassing,\n  then, we can try the Plan B.\n  Plan B means, \n  maybe that RAID card controlling screen (during boot? ) support direct Secure Erase (or something like that)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:56]:\n  sorry, brian, i have an urgent issue, i will be back in 15 min\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:56]:\n  ok!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:56]:\n  CU soon\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:56]:\n  no prob!\n  CU soon!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 6:23]:\n  Hi~ brian\n  i\'m back~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 6:24]:\n  Oh~~ ^^ Welcome back!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 6:25]:\n  yes, the plan B can be supported, I see in the guide they have a tool to do secure erase druing boot\n  but I haven\'t tried it\n  it\'s not convienent because we can\'t use script to do it\n  i\'ll try to find the way to bypass raid\n  thank you agian for your advice^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 6:46]:\n  Sorry Jinjin for no response (been away from my desk), ^^;;;;  Ok, I\'ll also check another way to work around  \n  Thank you for your kind explanation ^__^, and let\'s talk again tomorrow~  \n</pre>\n\n== ## bNote-2013-12-10 ==\n\n\n\n=== PCIe Specification ===\n\nhttp://komposter.com.ua/documents/PCI_Express_Base_Specification_Revision_3.0.pdf\n\n\n=== NVMe Tutorial ===\n\n: [http://www.flashmemorysummit.com/English/Collaterals/Proceedings/2013/20130812_PreConfD_Marks.pdf By Kevin Marks, Dell, Inc. Flash Memory Summit 2013 Santa Clara, CA]\n\n\n* NVMe defines an optimized queuing interface, command set, feature set for PCIe SSDs\n\n\n* NVMe release timeline\n:- NVMe 1.0 release (2011-03-01)\n::- Queuing interface\n::- NVM command set, admin command set\n::- End-to-end protection (DIF/DIX), security\n::- Physical region pages (PRPs)\n:- NVMe 1.1 release (2012-10-11)\n::- General Scatter/Gather Lists (SGLs)\n::- Multi-path I/O & namespace sharing\n::- Reservations\n::- Autonomous power transitions during idle\n\n\n* advanced points of NVMe relative to AHCI\n:- Remove uncacheable reads from command issue/completion\n::- ??? uncacheable reads? why so bad to remove?\n:- Minimize MIMO writes in command issue/completion path\n::- ??? MIMO? why bad to minimize?\n:- Support for deep command queues and to simplify command decoding and processing\n::- ??? what method to simplify?\n:- Support MSI-X / flexible interrupt aggregation\n::- ??? what is flexible interrupt aggregation? is it different from MSI-X?\n:- Support for many core systems\n::- ??? concretely how?\n:- Support enterprise features\n::- ??? exactly what?\n:- Comprehensive statistics / health status reporting / robust error reporting & handling\n::- ???\n\n\n* NVMe usage model\n:- Server caching\n::- used to reduce memory footprint\n::- for temporary data\n:- Server storage\n::- for persistent data\n::- Redundant (i.e., RAID\'ed)\n::- commonly used as tier-0 storage\n:- Client storage\n::- used for boot/os-partition/HDD-cache\n::- non-redundant\n::- power optimized\n:- External storage\n::- used for metadata or data\n::- multi-ported device\n::- redundancy based on usage\n\n\n* NVMe queues\n:- NVMe uses circular queues to pass messages (e.g., commands and command completion notifications.)\n:- The queues may be located anywhere in PCIe memory\n::- Typically queues are located in host memory\n::- Queues may consist of a contiguous block of physical memory\n::  or optionally a non-contiguous set of physical memory pages (defined by a PRP List)\n:- A Queue consists of set of fixed sized elements\n:- Tail\n::- Points to next free element\n::- If an element is added to the element pointed to by the tail,\n::  the tail is incremented to point to next free element taking wrapping into consideration\n:- Head\n::- Points to next entry to be pulled off, if queue is not empty\n::- If an element is removed from the element pointed to by the head,\n::  the head is incremented to point to the next element taking wrapping into consideration\n:- Queue Size (Usable)\n::- Number of entries in the queue - 1\n::- Minimum size is 2, Maximum is ~ 64K for IO  Queues and 4K for Admin Queue\n:- Queue Empty\n::- Head == Tail\n:- Queue Full\n::- Head == Tail + 1 (mod # of queue entries)\n\n\n* Types of queues\n:- Admin queue for admin command set\n::- One per NVMe controller with up to 4K elements per queue\n::- Used to configure IO queues and controller/feature management\n:- IO queues for IO command sets (e.g., NVM command set)\n::- Up to 64K queues per NVMe controller with up to 64K elements per queue\n::- Used to submit/complete IO commands\n:- , where each type of queue (admin queue, IO queues) has\n::- Submission queue (SQ)\n:::- Queues messages from host to controller\n:::- Used to submit commands\n:::- Identified by SQ ID\n::- Completion queue (CQ)\n:::- Queues messages from controller to host\n:::- Used to post command completions\n:::- Identified by CQ ID\n:::- May have an independent MSI-X interrupt per completion queue\n: /* NVMe queues are messaging queues, not command queues -- What does this mean? */\n\n\n\n* Scalable queuing interface\n:- Enables NUMA optimized drivers\n::- Per core: one or more SQ, one CQ, and one MSI-X interrupt\n::- High performance and low latency command issue\n::- No locking between cores\n:- Up to ~2^32 outstanding commands\n::- Support for up to ~64K IO submission and completion queues\n::- Each queue supports up to ~64K outstanding commands\n\n\n\n* Command arbitration\n:- All controllers support round robin (RR) arbitration\n::- RR{ASQ, SQ, SQ, ..., SQ}\n:- An NVMe controller may support weighted round robin (WRR) with urgent priority class arbitration\n::- Priority{Strict_Priority_1, Strict_Priority_2, Strict_Priority_3}\n:::- Strict_Priority_1{ASQ}\n:::- Strict_Priority_2{RR{SQ.urgent, SQ.urgent}}\n:::- Strict_Priority_3{WRR{\n::::- Weight_High.RR{SQ.high, SQ.high, SQ.high},\n::::- Weight_Medium.RR{SQ.medium, SQ.medium, SQ.medium},\n::::- Weight_Low.RR{SQ.low, SQ.low, SQ.low}\n::: }}\n\n\n\n* Arbitration primitives\n:- Priority Arb. Vs. WRR Arb.\n::- Example above shown with an arbitration burst of no limit\n::- NVMe supports an arbitration burst of 1, 2, 4, 8, 16, 32, 64 and no limit\n::- NVMe supports 8-bit WRR weights\n\n\n\n* NVMe controller register map\n{| class=\"wikitable sortable\"\n|-\n| Start || End || Symbol || Description\n|-\n| 00h || 07h || CAP || Controller Capabilities\n|-\n|}\n\n\n\n* Controller initialization\n\n\n\n* SQ element with PRBs (64B)\n\n\n\n* Physical Region Pages (PRBs)\n\n\n\n* Example: PRP, PRP list\n\n\n\n* SQ element with SGLs (64B)\n\n\n\n* Scatter Gather List (SGL)\n\n\n\n* CQ element (16B)\n\n\n\n* Phase tag operation\n\n\n\n* NVMe command sets\n:- Command set = { Admin Command Set, IO Command Set = { NVM Cmd Set, Rsvd #1, Rsvd #2, Rsvd #3 } }\n\n\n\n* Admin commands\n{| class=\"wikitable sortable\"\n|-\n| Category || Command || Required/Optional\n|-\n| rowspan=\"4\" | Queue Management\n| Create IO Submission Queue\n| Required\n|-\n| Delete IO Submission Queue\n| Required\n|-\n| Create IO Completion Queue\n| Required\n|-\n| Delete IO Completion Queue\n| Required\n|-\n| rowspan=\"3\" | Configuration\n| Identify\n| Required\n|-\n| Get Features\n| Required\n|-\n| Set Features\n| Required\n|-\n| rowspan=\"2\" | Status Reporting\n| Get Log Pages\n| Required\n|-\n| Asynchronous Event Request\n| Required\n|-\n| Abort Command\n| Abort\n| Required\n|-\n| rowspan=\"2\" | Firmware Update/Management\n| Firmware Image Download\n| Optional\n|-\n| Firmware Activate\n| Optional\n|-\n| IO Command Set Specific\n| IO Command Set Specific Commands\n| Optional\n|-\n| Vendor Specific\n| Vendor Specific Commands\n| Optional\n|-\n|}\n: All admin commands use PRPs\n\n\n\n* Create IO SQ\n:- Queue Priority (OPRIO)\n:- Physically Contiguous (PC)\n\n\n\n* Create IO CQ\n:- Interrupt Enable (IEN)\n:- Physically Contiguous (PC)\n\n\n\n* Identify\n\n\n\n* Active namespace reporting\n\n\n\n* Identify controller data structure\n\n== ## bNote-2013-12-09 ==\n\n\n\n=== NVMe IO stack analysis ===\n\n\n==== nvme source code ====\n\n\n <pre>\n\nblusjune@buddy-guy:~ %1$ cat /x/t/nvme_iostack_analysis.c\n\n\nnvme_probe(struct pci_dev *pdev, const struct pci_device_id *id)\n{\n        struct nvme_dev * dev;\n        /*\n         * memory space will be allocated to \'dev\'\n         * and then\n         * \'dev->entry\' will have memory space\n         *      proportional to the \'num_possible_cpus()\'\n         * \'dev->queues\' will have memory space\n         *      proportional to the \'num_possible_cpus() + 1\' <- why \'+1\' here?\n         * , where num_possible_cpus() means\n         *      number of cpus populatable (fixed at boot time),\n         *      i.e., set of CPU id\'s possible to be plugged in\n         *      at anytime during the life of system boot\n         */\n\n\n        // ...\n\n\n        dev->pci_dev = pdev; // pdev argument will be assigned to \'dev->pci_dev\'\n\n\n        result = nvme_set_instance(dev);\n        /*\n         * allocate new integer ID to dev->instance\n         *\n         * Internally, this uses Idr (integer ID management)\n         * , where Idr is a set of library functions\n         *      for the management of small integer ID numbers.\n         *      In essence, an idr object can be thought of\n         *      as a sparse array mapping integer IDs onto arbitrary pointers,\n         *      with a \"get me an available entry\" function as well.\n         *\n         * URL: http://lwn.net/Articles/103209/\n         */\n\n\n        result = nvme_setup_prp_pools(dev);\n        /*\n         * dev->prp_page_pool = dma_pool_create(\"prp list page\",\n         *      &dev->pci_dev->dev, PAGE_SIZE, PAGE_SIZE, 0)\n         *\n         * and the comment says that there is an optimization\n         * for I/Os between 4k and 128k (is it still 128k? not 256k?)\n         * by the following code:\n         * dev->prp_small_pool = dma_pool_create(\"prp list 256\",\n         *      &dev->pci_dev->dev, 256, 256, 0);\n         *\n         * PRPs (Physical Region Pages) contains\n         * the 64-bit physical memory page address.\n         * The lower bits (n:2) of this field indicate\n         * the offset within the memory page\n         * n is defined by the memory page size (CC.MPS)\n         *\n         * PRP list contains a list of PRPs with generally no offsets\n         * which means non-contiguous set of physical memory pages\n         *\n         * mm/dmapool.c:dma_pool_create(const char * name, struct device *dev, sizt_t size, size_t align, size_t boundary)\n         *\n         */\n\n\n        result = nvme_dev_start(dev);\n        /*\n         * nvme_dev_start() {\n         *      nvme_dev_map(dev);\n         *      nvme_configure_admin_queue(dev);\n         *      list_add(&dev->node, &dev_list);\n         *      nvme_setup_io_queues(dev);\n         * }\n         */\n\n\n        result = nvme_dev_add(dev);\n\n\n}\n\n\ndrivers/block/nvme-core.c:nvme_setup_io_queues()\n{\n        (int) nr_io_queues = num_online_cpus();\n\n}\n\n</pre>\n\n\n <pre>\nroot@buddy-guy:src %1# cat /x/t/nvme_iostack_analysis.c \n\n\nnvme_probe(struct pci_dev *pdev, const struct pci_device_id *id)\n{\n	struct nvme_dev * dev;\n	/*\n	 * memory space will be allocated to \'dev\'\n	 * and then\n	 * \'dev->entry\' will have memory space\n	 * 	proportional to the \'num_possible_cpus()\'\n	 * \'dev->queues\' will have memory space\n	 *	proportional to the \'num_possible_cpus() + 1\' <- why \'+1\' here?\n	 * , where num_possible_cpus() means\n	 *	number of cpus populatable (fixed at boot time),\n	 *	i.e., set of CPU id\'s possible to be plugged in\n	 *	at anytime during the life of system boot\n	 */\n\n\n	// ...\n\n\n	dev->pci_dev = pdev; // pdev argument will be assigned to \'dev->pci_dev\'\n\n\n	result = nvme_set_instance(dev);\n	/*\n	 * allocate new integer ID to dev->instance\n	 *\n	 * Internally, this uses Idr (integer ID management)\n	 * , where Idr is a set of library functions\n	 *	for the management of small integer ID numbers.\n	 *	In essence, an idr object can be thought of\n	 *	as a sparse array mapping integer IDs onto arbitrary pointers,\n	 *	with a \"get me an available entry\" function as well.\n	 *\n	 * URL: http://lwn.net/Articles/103209/\n	 */\n\n\n	result = nvme_setup_prp_pools(dev);\n	/*\n	 * dev->prp_page_pool = dma_pool_create(\"prp list page\",\n	 *	&dev->pci_dev->dev, PAGE_SIZE, PAGE_SIZE, 0)\n	 *\n	 * and the comment says that there is an optimization\n	 * for I/Os between 4k and 128k (is it still 128k? not 256k?)\n	 * by the following code:\n	 * dev->prp_small_pool = dma_pool_create(\"prp list 256\",\n	 *	&dev->pci_dev->dev, 256, 256, 0);\n	 *\n	 * PRPs (Physical Region Pages) contains\n	 * the 64-bit physical memory page address.\n	 * The lower bits (n:2) of this field indicate\n	 * the offset within the memory page\n	 * n is defined by the memory page size (CC.MPS)\n	 *	\n	 * PRP list contains a list of PRPs with generally no offsets\n	 * which means non-contiguous set of physical memory pages\n	 *\n	 * mm/dmapool.c:dma_pool_create(const char * name, struct device *dev, sizt_t size, size_t align, size_t boundary)\n	 * \n	 */\n\n\n	result = nvme_dev_start(dev);\n	/*\n	 * \n	 *\n	 *\n	 *\n	 */\n\n\n	result = nvme_dev_add(dev);\n\n\n}\n\n\ndrivers/block/nvme-core.c:nvme_setup_io_queues()\n{\n	(int) nr_io_queues = num_online_cpus();\n\n}\n\n\n\n</pre>\n\n\n\n==== Vectored I/O (a.k.a scatter/gather I/O) ====\n\n* <span style=\"background:gold\">Why vectored I/O in NVMe and DMA?</span>\n\n\n* Vectored I/O (a.k.a scatter/gather I/O) is a method of input and output by which a single procedure call sequentially writes data from multiple buffers to a single data stream or reads data from a data stream to multiple buffers.\n\n* The buffers are given in a vector of buffers. Scatter/gather refers to the process of gathering data from, or scattering data into, the given set of buffers.\n\n* Vectored I/O can operate synchronously or asynchronously.\n\n* The main reasons for using vectored I/O are efficiency and convenience.\n\n\n\n* Several usages for vectored I/O:\n\n:* Atomicity\n:: If the particular vectored I/O implementation supports atomicity, a process can write into or read from a set of buffers to or from a file without risk that another thread or process might perform I/O on the same file between the first process\' reads or writes, thereby corrupting the file or compromising the integrity of the input\n\n:* Concatenating output\n:: An application that wants to write non-sequentially placed data in memory can do so in one vectored I/O operation. For example, writing a fixed-size header and its associated payload data that are placed non-sequentially in memory can be done by a single vectored I/O operation without first concatenating the header and the payload to another buffer\n\n:* Efficiency\n:: One vectored I/O read or write can replace many ordinary reads or writes, and thus save on the overhead involved in syscalls\n\n:* Splitting input\n:: When reading data that is in a format that defines a fixed-size header, one can use a vector of buffers in which the first buffer is the size of that header; and the second buffer will contain the data associated with the header\n\n\n\n\n* Implementation cases as system calls\n: readv() and writev()\n\n=== Barrier option in Ext3/Ext4 file system ===\n\n\n* Article 1 (kernelnewbies.org) <ref>http://kernelnewbies.org/Ext4</ref>\nThis is an option that improves the integrity of the filesystem at the cost of some performance (you can disable it with \"mount -o barrier=0\", recommended trying it if you\'re benchmarking). From this LWN article: \"The filesystem code must, before writing the [journaling] commit record, be absolutely sure that all of the transaction\'s information has made it to the journal. Just doing the writes in the proper order is insufficient; contemporary drives maintain large internal caches and will reorder operations for better performance. So the filesystem must explicitly instruct the disk to get all of the journal data onto the media before writing the commit record; if the commit record gets written first, the journal may be corrupted. The kernel\'s block I/O subsystem makes this capability available through the use of barriers; in essence, a barrier forbids the writing of any blocks after the barrier until all blocks written before the barrier are committed to the media. \'\'\'By using barriers, filesystems can make sure that their on-disk structures remain consistent at all times.\"\'\'\'\n\n\n* Article 2 (Redhat) <ref>https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Storage_Administration_Guide/writebarrieronoff.html</ref>\nTo mitigate the risk of data corruption during power loss, some storage devices use battery-backed write caches. Generally, high-end arrays and some hardware controllers use battery-backed write caches. However, because the cache\'s volatility is not visible to the kernel, Red Hat Enterprise Linux 6 enables write barriers by default on all supported journaling file systems.\n\n:- Performance issues\n:: Write caches are designed to increase I/O performance. However, enabling write barriers means constantly flushing these caches, which can significantly reduce performance.\n\n:- How to disable barrier option?\n:: For devices with non-volatile, battery-backed write caches and those with write-caching disabled, you can safely disable write barriers at mount time using the -o nobarrier option for mount. However, some devices do not support write barriers; such devices will log an error message to /var/log/messages (refer to Table 22.1, “Write barrier error messages per file system”).\n\n:- Write barrier error messages per file system\n{| class=\"wikitable sortable\"\n|-\n| File system || Error Message\n|-\n| ext3/ext4 || JBD: barrier-based sync failed on device - disabling barriers\n|-\n| XFS || Filesystem device - Disabling barriers, trial barrier write failed\n|-\n| btrfs || btrfs: disabling barriers on dev device\n|-\n|}\n\n\n\n=== Virtualization (KVM/QEMU/Xen) & IO Management ===\n\n\n==== KVM and QEMU ====\n* KVM과 QEMU 간의 역할 분담?\n\n==== Xen and QEMU ====\n* Xen이 QEMU를 어떻게 사용하는가?\n\n\n==== KVM/QEMU Storage Stack Performance Discussion (2010 Linux Plumbers Conference) ====\n\n* The State of KVM Block I/O Performance: Where We Are\n: The 50,000-foot View – QEMU Storage Stack\n: Where We Are Against Another “Popular” Hypervisor\n\n* Discussion: KVM / QEMU Settings\n: VirtIO vs. IDE emulation\n: KVM caching (cache=none vs. cache=writethrough)\n: Linux AIO support\n: No Barrier (barrier is enabled by default in ext4)\n: IO Schedulers: Deadline vs. CFQ\n: x2APIC support\n: AIO vs. threads\n: File Systems\n\n* Discussion: KVM Block I/O Performance Issues\n: Low Throughput\n: High (Virtual) CPU Usage In KVM Guests\n: Virtual Disk Image Formats\n: Others ?\n\n== ## bNote-2013-12-07 ==\n\n# [[NVMe Vs. AHCI]]\n# NVMe queue management mechanism\n# NVMe problem statement (PCI1320 Bus fatal error on bus 0 device 2 function 0 Power cycle system)\n# [[NVMe stack in Linux kernel (3.13.0-rc2, 2013-12-05)]]\n# [[Mediawiki color map]]\n\n== ## bNote-2013-12-06 ==\n\n\n<!--\n=== All pages at Wikini as of 2013-12-06 ===\n\n <pre>\n\n(News) 네트워크 업계 \"기다렸다, 런던올림픽\"	(News) 아카마이, \"CDN 넘어 하이퍼커넥티드로\"	(News) 아카마이, \"스트리밍/보안 서비스를 빠르고 안전하게\"\n(News) 아카마이, \"쌩쌩 웹사이트 만들려면\"	(News) 아카마이, \'블레이즈\' 인수 - 인텔리전트 플랫폼 강화	(News) 아카마이, CDN 장악 가속화 ... 코텐도 인수설\nAcademia intelligence	Artificial Neural Network	Artificial neural network\nBcode python cache lru	Bnote - References ( Papers / Patents / Articles )	Bnote 2013\nBnote 2013-01	Bnote 2013-02	Bnote 2013-03\nBnote 2013-04	Bnote 2013-05	Bnote 2013-06\nBnote 2013-07	Bnote 2013-08	Bnote 2013-09\nBnote 2013-10	Bnote 2013-11	Bnote 2013-12\nBnote Frequent Itemset Mining (FIM) / Association Rule Mining (ARM)	Bnote R	Bnote patidea 2013\nBnote patidea 2013-001	Bnote patidea 2013-002	Bnote patidea 2013-003\nBnote python	Bnote scratchpad	Brian Myungjune JUNG\nByung-Gon Chun	Cache algorithms	Conference: ACM SIGMOD 2013\nCurriculum vitae - Brian Myungjune JUNG	Curriculum vitae - Brian Myungjune JUNG (CV Brian)	DIMM\nData analytics	Data mining	Deep learning\nDefense Logic -- Big Data Platform Research in SAIT	Dm-cache	Exemplary .gnuplot configuration file for beautiful gnuplot graphs\nFoobar	GRUB 2	Git server on my local machine\nHidden Markov model (HMM)	Hierarchical temporal memory	I/O Workload Analysis\nI/O tracing on Microsoft Windows using xperf	IBM GPFS	IEEE ICCE 2014 Paper\nIOWA.data.tpcc 250gb 48h.mysql.R.addr:: Offset 100K, Len 1K	Industry intelligence - Flash Memory Summit 2013	Industry intelligence - big data\nIndustry intelligence - storage	Intelligent Battery Management System	Kworker\nLecture: Neural Networks for Machine Learning (by Geoffrey Hinton)	Lecture notes and online courses	Linux kernel\nLinux kernel - block layer plug/unplug	List of English stop words	List of Meta Files in Windows NTFS\nList of important processes in Microsoft Windows operating systems	Main Page	Master File Table in NTFS\nMixture model	NVM express	Nimble Storage\nOnline courses	OpenStack	Operating systems - Linux kernel\nPCI Express	PaperStudy // An Analysis of Traces from a Production MapReduce Cluster // CCGrid 2010	Periodicity transform\nPure Storage	RapidIO	Restricted Boltzmann machines\nStatistical computing software	System info 16-node cluster	TPC-C\nTemplate patidea	Text summarization	Tf-idf\nThoughts on In Memory Databases (Part 1)	Trick mode	Tutorial -- SSD caching using dm-cache\nUSENIX FAST 2013	Why In-Memory Computing Needs Flash	Windows Programming on Linux with MinGW\nWorkload analysis-driven system architecture design	Writing guide - software patent	X intelligence\nXen hypervisor\n\n</pre>\n-->\n\n=== KVM/QEMU Architecture and IO Stack ===\n\n* [https://www.google.co.kr/search?q=why+is+qemu+windows+so+slow&rlz=1C1OPRB_enKR556KR556&oq=why+is+qemu+windows+so+slow&aqs=chrome..69i57.14138j0j4&sourceid=chrome&espv=210&es_sm=122&ie=UTF-8#es_sm=122&espv=210&newwindow=1&q=IO+stack+qemu Google{IO stack qemu}]\n\n* [http://pic.dhe.ibm.com/infocenter/lnxinfo/v3r0m0/topic/liaav/LPCKVMSSPV2.1.pdf \"KVM / QEMU Storage Stack Performance Discussion,\" IBM, Linux Plumbers Conference 2010]\n\n* [http://events.linuxfoundation.org/slides/2011/linuxcon-japan/lcj2011_hajnoczi.pdf \"An Updated Overview of the QEMU Storage Stack,\" IBM, LinuxCon Japan 2011]\n\n* [http://www.linuxplumbersconf.org/2010/ocw/system/presentations/651/original/Optimizing_the_QEMU_Storage_Stack.pdf \"Optimizing the QEMU Storage Stack,\" IBM, Linux Plumbers Conference 2010]\n\n* [http://www.fujitsu.com/downloads/MAG/vol47-3/paper18.pdf \"Kernel-based Virtual Machine Technology\", Yoshihito Goro, Fujitsu Journal 2011]\n\n\n=== NVMe DAS test bed architecture ===\n\n{| class=\'wikitable sortable\'\n|-\n| LVol-00 || LVol-01 || LVol-02 || LVol-03 || LVol-04 || LVol-05 || LVol-06 || LVol-07\n|-\n|-\n| colspan=5 | nvme0n1p1 (484.61 GiB)\n| colspan=3 | nvme1n1p1 (260.61 GiB)\n|-\n| colspan=4 | /dev/nvme0n1 (372.61 GiB)\n| colspan=4 | /dev/nvme1n1 (372.61 GiB)\n|-\n|}\n\n== ## bNote-2013-12-04 ==\n\n\n=== OpenStack quota-update ===\n\n <pre>\n\nroot@grant-green:work %1# keystone tenant-list\n+----------------------------------+---------+---------+\n|                id                |   name  | enabled |\n+----------------------------------+---------+---------+\n| df7559de417a4968ad34f95b9dda5a4e |  admin  |   True  |\n| ad4662d7ec1249789feb2fad24e9f2e5 | service |   True  |\n+----------------------------------+---------+---------+\n\nroot@grant-green:work %1# nova quota-show\n+-----------------------------+-------+\n| Quota                       | Limit |\n+-----------------------------+-------+\n| instances                   | 48    |\n| cores                       | 96    |\n| ram                         | 51200 |\n| floating_ips                | 10    |\n| fixed_ips                   | -1    |\n| metadata_items              | 128   |\n| injected_files              | 5     |\n| injected_file_content_bytes | 10240 |\n| injected_file_path_bytes    | 255   |\n| key_pairs                   | 100   |\n| security_groups             | 10    |\n| security_group_rules        | 20    |\n+-----------------------------+-------+\n\nroot@grant-green:work %1# nova quota-update --instance 48 --cores 96 df7559de417a4968ad34f95b9dda5a4e\n\nroot@grant-green:work %1# nova quota-show\n+-----------------------------+-------+\n| Quota                       | Limit |\n+-----------------------------+-------+\n| instances                   | 48    |\n| cores                       | 96    |\n| ram                         | 51200 |\n| floating_ips                | 10    |\n| fixed_ips                   | -1    |\n| metadata_items              | 128   |\n| injected_files              | 5     |\n| injected_file_content_bytes | 10240 |\n| injected_file_path_bytes    | 255   |\n| key_pairs                   | 100   |\n| security_groups             | 10    |\n| security_group_rules        | 20    |\n+-----------------------------+-------+\n\n</pre>\n\n=== Linux kernel debugging using QEMU ===\n\n* [http://files.meetup.com/1590495/debugging-with-qemu.pdf Debugging Linux systems using GDB and QEMU]\n* [http://elinux.org/Debugging_The_Linux_Kernel_Using_Gdb Debugging the Linux Kernel Using GDB]\n\n\n\n=== Linux kernel (3.8.0) NVMe stack ===\n\n\n==== include/linux/nvme.h ====\n\n <pre>\n 24 struct nvme_bar {\n 25         __u64                   cap;    /* Controller Capabilities */\n 26         __u32                   vs;     /* Version */\n 27         __u32                   intms;  /* Interrupt Mask Set */\n 28         __u32                   intmc;  /* Interrupt Mask Clear */\n 29         __u32                   cc;     /* Controller Configuration */\n 30         __u32                   rsvd1;  /* Reserved */\n 31         __u32                   csts;   /* Controller Status */\n 32         __u32                   rsvd2;  /* Reserved */\n 33         __u32                   aqa;    /* Admin Queue Attributes */\n 34         __u64                   asq;    /* Admin SQ Base Address */\n 35         __u64                   acq;    /* Admin CQ Base Address */\n 36 };\n</pre>\n\n\n\n <pre>\n 42 \n 43 enum {\n 44         NVME_CC_ENABLE          = 1 << 0,\n 45         NVME_CC_CSS_NVM         = 0 << 4,\n 46         NVME_CC_MPS_SHIFT       = 7,\n 47         NVME_CC_ARB_RR          = 0 << 11,\n 48         NVME_CC_ARB_WRRU        = 1 << 11,\n 49         NVME_CC_ARB_VS          = 7 << 11,\n 50         NVME_CC_SHN_NONE        = 0 << 14,\n 51         NVME_CC_SHN_NORMAL      = 1 << 14,\n 52         NVME_CC_SHN_ABRUPT      = 2 << 14,\n 53         NVME_CC_IOSQES          = 6 << 16,\n 54         NVME_CC_IOCQES          = 4 << 20,\n 55         NVME_CSTS_RDY           = 1 << 0,\n 56         NVME_CSTS_CFS           = 1 << 1,\n 57         NVME_CSTS_SHST_NORMAL   = 0 << 2,\n 58         NVME_CSTS_SHST_OCCUR    = 1 << 2,\n 59         NVME_CSTS_SHST_CMPLT    = 2 << 2,\n 60 };\n 61 \n</pre>\n\n\n\n <pre>\n109 \n110 struct nvme_lbaf {\n111         __le16                  ms;\n112         __u8                    ds;\n113         __u8                    rp;\n114 };\n115 \n116 struct nvme_id_ns {\n117         __le64                  nsze;\n118         __le64                  ncap;\n119         __le64                  nuse;\n120         __u8                    nsfeat;\n121         __u8                    nlbaf;\n122         __u8                    flbas;\n123         __u8                    mc;\n124         __u8                    dpc;\n125         __u8                    dps;\n126         __u8                    rsvd30[98];\n127         struct nvme_lbaf        lbaf[16];\n128         __u8                    rsvd192[192];\n129         __u8                    vs[3712];\n130 };\n131 \n132 enum {\n133         NVME_NS_FEAT_THIN       = 1 << 0,\n134         NVME_LBAF_RP_BEST       = 0,\n135         NVME_LBAF_RP_BETTER     = 1,\n136         NVME_LBAF_RP_GOOD       = 2,\n137         NVME_LBAF_RP_DEGRADED   = 3,\n138 };\n139 \n140 struct nvme_lba_range_type {\n141         __u8                    type;\n142         __u8                    attributes;\n143         __u8                    rsvd2[14];\n144         __u64                   slba;\n145         __u64                   nlb;\n146         __u8                    guid[16];\n147         __u8                    rsvd48[16];\n148 };\n149 \n150 enum {\n151         NVME_LBART_TYPE_FS      = 0x01,\n152         NVME_LBART_TYPE_RAID    = 0x02,\n153         NVME_LBART_TYPE_CACHE   = 0x03,\n154         NVME_LBART_TYPE_SWAP    = 0x04,\n155 \n156         NVME_LBART_ATTRIB_TEMP  = 1 << 0,\n157         NVME_LBART_ATTRIB_HIDE  = 1 << 1,\n158 };\n159 \n\n</pre>\n\n\n\n <pre>\n159 \n160 /* I/O commands */\n161 \n162 enum nvme_opcode {\n163         nvme_cmd_flush          = 0x00,\n164         nvme_cmd_write          = 0x01,\n165         nvme_cmd_read           = 0x02,\n166         nvme_cmd_write_uncor    = 0x04,\n167         nvme_cmd_compare        = 0x05,\n168         nvme_cmd_dsm            = 0x09,\n169 };\n170 \n171 struct nvme_common_command {\n172         __u8                    opcode;\n173         __u8                    flags;\n174         __u16                   command_id;\n175         __le32                  nsid;\n176         __u32                   cdw2[2];\n177         __le64                  metadata;\n178         __le64                  prp1;\n179         __le64                  prp2;\n180         __u32                   cdw10[6];\n181 };\n182 \n183 struct nvme_rw_command {\n184         __u8                    opcode;\n185         __u8                    flags;\n186         __u16                   command_id;\n187         __le32                  nsid;\n188         __u64                   rsvd2;\n189         __le64                  metadata;\n190         __le64                  prp1;\n191         __le64                  prp2;\n192         __le64                  slba;\n193         __le16                  length;\n194         __le16                  control;\n195         __le32                  dsmgmt;\n196         __le32                  reftag;\n197         __le16                  apptag;\n198         __le16                  appmask;\n199 };\n200 \n201 enum {\n202         NVME_RW_LR                      = 1 << 15,\n203         NVME_RW_FUA                     = 1 << 14,\n204         NVME_RW_DSM_FREQ_UNSPEC         = 0,\n205         NVME_RW_DSM_FREQ_TYPICAL        = 1,\n206         NVME_RW_DSM_FREQ_RARE           = 2,\n207         NVME_RW_DSM_FREQ_READS          = 3,\n208         NVME_RW_DSM_FREQ_WRITES         = 4,\n209         NVME_RW_DSM_FREQ_RW             = 5,\n210         NVME_RW_DSM_FREQ_ONCE           = 6,\n211         NVME_RW_DSM_FREQ_PREFETCH       = 7,\n212         NVME_RW_DSM_FREQ_TEMP           = 8,\n213         NVME_RW_DSM_LATENCY_NONE        = 0 << 4,\n214         NVME_RW_DSM_LATENCY_IDLE        = 1 << 4,\n215         NVME_RW_DSM_LATENCY_NORM        = 2 << 4,\n216         NVME_RW_DSM_LATENCY_LOW         = 3 << 4,\n217         NVME_RW_DSM_SEQ_REQ             = 1 << 6,\n218         NVME_RW_DSM_COMPRESSED          = 1 << 7,\n219 };\n220 \n221 /* Admin commands */\n222 \n223 enum nvme_admin_opcode {\n224         nvme_admin_delete_sq            = 0x00,\n225         nvme_admin_create_sq            = 0x01,\n226         nvme_admin_get_log_page         = 0x02,\n227         nvme_admin_delete_cq            = 0x04,\n228         nvme_admin_create_cq            = 0x05,\n229         nvme_admin_identify             = 0x06,\n230         nvme_admin_abort_cmd            = 0x08,\n231         nvme_admin_set_features         = 0x09,\n232         nvme_admin_get_features         = 0x0a,\n233         nvme_admin_async_event          = 0x0c,\n234         nvme_admin_activate_fw          = 0x10,\n235         nvme_admin_download_fw          = 0x11,\n236         nvme_admin_format_nvm           = 0x80,\n237         nvme_admin_security_send        = 0x81,\n238         nvme_admin_security_recv        = 0x82,\n239 };\n240 \n241 enum {\n242         NVME_QUEUE_PHYS_CONTIG  = (1 << 0),\n243         NVME_CQ_IRQ_ENABLED     = (1 << 1),\n244         NVME_SQ_PRIO_URGENT     = (0 << 1),\n245         NVME_SQ_PRIO_HIGH       = (1 << 1),\n246         NVME_SQ_PRIO_MEDIUM     = (2 << 1),\n247         NVME_SQ_PRIO_LOW        = (3 << 1),\n248         NVME_FEAT_ARBITRATION   = 0x01,\n249         NVME_FEAT_POWER_MGMT    = 0x02,\n250         NVME_FEAT_LBA_RANGE     = 0x03,\n251         NVME_FEAT_TEMP_THRESH   = 0x04,\n252         NVME_FEAT_ERR_RECOVERY  = 0x05,\n253         NVME_FEAT_VOLATILE_WC   = 0x06,\n254         NVME_FEAT_NUM_QUEUES    = 0x07,\n255         NVME_FEAT_IRQ_COALESCE  = 0x08,\n256         NVME_FEAT_IRQ_CONFIG    = 0x09,\n257         NVME_FEAT_WRITE_ATOMIC  = 0x0a,\n258         NVME_FEAT_ASYNC_EVENT   = 0x0b,\n259         NVME_FEAT_SW_PROGRESS   = 0x0c,\n260 };\n261 \n</pre>\n\n\n\n\n <pre>\n261 \n262 struct nvme_identify {\n263         __u8                    opcode;\n264         __u8                    flags;\n265         __u16                   command_id;\n266         __le32                  nsid;\n267         __u64                   rsvd2[2];\n268         __le64                  prp1;\n269         __le64                  prp2;\n270         __le32                  cns;\n271         __u32                   rsvd11[5];\n272 };\n273 \n274 struct nvme_features {\n275         __u8                    opcode;\n276         __u8                    flags;\n277         __u16                   command_id;\n278         __le32                  nsid;\n279         __u64                   rsvd2[2];\n280         __le64                  prp1;\n281         __le64                  prp2;\n282         __le32                  fid;\n283         __le32                  dword11;\n284         __u32                   rsvd12[4];\n285 };\n286 \n287 struct nvme_create_cq {\n288         __u8                    opcode;\n289         __u8                    flags;\n290         __u16                   command_id;\n291         __u32                   rsvd1[5];\n292         __le64                  prp1;\n293         __u64                   rsvd8;\n294         __le16                  cqid;\n295         __le16                  qsize;\n296         __le16                  cq_flags;\n297         __le16                  irq_vector;\n298         __u32                   rsvd12[4];\n299 };\n300 \n301 struct nvme_create_sq {\n302         __u8                    opcode;\n303         __u8                    flags;\n304         __u16                   command_id;\n305         __u32                   rsvd1[5];\n306         __le64                  prp1;\n307         __u64                   rsvd8;\n308         __le16                  sqid;\n309         __le16                  qsize;\n310         __le16                  sq_flags;\n311         __le16                  cqid;\n312         __u32                   rsvd12[4];\n313 };\n314 \n315 struct nvme_delete_queue {\n316         __u8                    opcode;\n317         __u8                    flags;\n318         __u16                   command_id;\n319         __u32                   rsvd1[9];\n320         __le16                  qid;\n321         __u16                   rsvd10;\n322         __u32                   rsvd11[5];\n323 };\n324 \n325 struct nvme_download_firmware {\n326         __u8                    opcode;\n327         __u8                    flags;\n328         __u16                   command_id;\n329         __u32                   rsvd1[5];\n330         __le64                  prp1;\n331         __le64                  prp2;\n332         __le32                  numd;\n333         __le32                  offset;\n334         __u32                   rsvd12[4];\n335 };\n336 \n</pre>\n\n\n\n\n <pre>\n336 \n337 struct nvme_command {\n338         union {\n339                 struct nvme_common_command common;\n340                 struct nvme_rw_command rw;\n341                 struct nvme_identify identify;\n342                 struct nvme_features features;\n343                 struct nvme_create_cq create_cq;\n344                 struct nvme_create_sq create_sq;\n345                 struct nvme_delete_queue delete_queue;\n346                 struct nvme_download_firmware dlfw;\n347         };\n348 };\n349 \n350 enum {\n351         NVME_SC_SUCCESS                 = 0x0,\n352         NVME_SC_INVALID_OPCODE          = 0x1,\n353         NVME_SC_INVALID_FIELD           = 0x2,\n354         NVME_SC_CMDID_CONFLICT          = 0x3,\n355         NVME_SC_DATA_XFER_ERROR         = 0x4,\n356         NVME_SC_POWER_LOSS              = 0x5,\n357         NVME_SC_INTERNAL                = 0x6,\n358         NVME_SC_ABORT_REQ               = 0x7,\n359         NVME_SC_ABORT_QUEUE             = 0x8,\n360         NVME_SC_FUSED_FAIL              = 0x9,\n361         NVME_SC_FUSED_MISSING           = 0xa,\n362         NVME_SC_INVALID_NS              = 0xb,\n363         NVME_SC_LBA_RANGE               = 0x80,\n364         NVME_SC_CAP_EXCEEDED            = 0x81,\n365         NVME_SC_NS_NOT_READY            = 0x82,\n366         NVME_SC_CQ_INVALID              = 0x100,\n367         NVME_SC_QID_INVALID             = 0x101,\n368         NVME_SC_QUEUE_SIZE              = 0x102,\n369         NVME_SC_ABORT_LIMIT             = 0x103,\n370         NVME_SC_ABORT_MISSING           = 0x104,\n371         NVME_SC_ASYNC_LIMIT             = 0x105,\n372         NVME_SC_FIRMWARE_SLOT           = 0x106,\n373         NVME_SC_FIRMWARE_IMAGE          = 0x107,\n374         NVME_SC_INVALID_VECTOR          = 0x108,\n375         NVME_SC_INVALID_LOG_PAGE        = 0x109,\n376         NVME_SC_INVALID_FORMAT          = 0x10a,\n377         NVME_SC_BAD_ATTRIBUTES          = 0x180,\n378         NVME_SC_WRITE_FAULT             = 0x280,\n379         NVME_SC_READ_ERROR              = 0x281,\n380         NVME_SC_GUARD_CHECK             = 0x282,\n381         NVME_SC_APPTAG_CHECK            = 0x283,\n382         NVME_SC_REFTAG_CHECK            = 0x284,\n383         NVME_SC_COMPARE_FAILED          = 0x285,\n384         NVME_SC_ACCESS_DENIED           = 0x286,\n385 };\n386 \n</pre>\n\n\n\n\n <pre>\n386 \n387 struct nvme_completion {\n388         __le32  result;         /* Used by admin commands to return data */\n389         __u32   rsvd;\n390         __le16  sq_head;        /* how much of this queue may be reclaimed */\n391         __le16  sq_id;          /* submission queue that generated this entry */\n392         __u16   command_id;     /* of the command which completed */\n393         __le16  status;         /* did the command fail, and if so, why? */\n394 };\n395 \n396 struct nvme_user_io {\n397         __u8    opcode;\n398         __u8    flags;\n399         __u16   control;\n400         __u16   nblocks;\n401         __u16   rsvd;\n402         __u64   metadata;\n403         __u64   addr;\n404         __u64   slba;\n405         __u32   dsmgmt;\n406         __u32   reftag;\n407         __u16   apptag;\n408         __u16   appmask;\n409 };\n410 \n411 struct nvme_admin_cmd {\n412         __u8    opcode;\n413         __u8    flags;\n414         __u16   rsvd1;\n415         __u32   nsid;\n416         __u32   cdw2;\n417         __u32   cdw3;\n418         __u64   metadata;\n419         __u64   addr;\n420         __u32   metadata_len;\n421         __u32   data_len;\n422         __u32   cdw10;\n423         __u32   cdw11;\n424         __u32   cdw12;\n425         __u32   cdw13;\n426         __u32   cdw14;\n427         __u32   cdw15;\n428         __u32   timeout_ms;\n429         __u32   result;\n430 };\n431 \n432 #define NVME_IOCTL_ID           _IO(\'N\', 0x40)\n433 #define NVME_IOCTL_ADMIN_CMD    _IOWR(\'N\', 0x41, struct nvme_admin_cmd)\n434 #define NVME_IOCTL_SUBMIT_IO    _IOW(\'N\', 0x42, struct nvme_user_io)\n435 \n\n</pre>\n\n\n==== drivers/block/nvme.c ====\n\n\n <pre>\n  44 \n  45 #define NVME_Q_DEPTH 1024\n  46 #define SQ_SIZE(depth)          (depth * sizeof(struct nvme_command))\n  47 #define CQ_SIZE(depth)          (depth * sizeof(struct nvme_completion))\n  48 #define NVME_MINORS 64\n  49 #define NVME_IO_TIMEOUT (5 * HZ)\n  50 #define ADMIN_TIMEOUT   (60 * HZ)\n  51 \n  52 static int nvme_major;\n  53 module_param(nvme_major, int, 0);\n  54 \n  55 static int use_threaded_interrupts;\n  56 module_param(use_threaded_interrupts, int, 0);\n  57 \n  58 static DEFINE_SPINLOCK(dev_list_lock);\n  59 static LIST_HEAD(dev_list);\n  60 static struct task_struct *nvme_thread;\n  61 \n</pre>\n\n\n\n\n <pre>\n  62 /*\n  63  * Represents an NVM Express device.  Each nvme_dev is a PCI function.\n  64  */\n  65 struct nvme_dev {\n  66         struct list_head node; \n  67         struct nvme_queue **queues;    \n  68         u32 __iomem *dbs;      \n  69         struct pci_dev *pci_dev;\n  70         struct dma_pool *prp_page_pool;\n  71         struct dma_pool *prp_small_pool;\n  72         int instance;\n  73         int queue_count;       \n  74         int db_stride;         \n  75         u32 ctrl_config;       \n  76         struct msix_entry *entry;\n  77         struct nvme_bar __iomem *bar;\n  78         struct list_head namespaces;\n  79         char serial[20];\n  80         char model[40];\n  81         char firmware_rev[8];\n  82         u32 max_hw_sectors;\n  83 };\n  84 \n  85 /*     \n  86  * An NVM Express namespace is equivalent to a SCSI LUN\n  87  */    \n  88 struct nvme_ns {\n  89         struct list_head list; \n  90        \n  91         struct nvme_dev *dev;  \n  92         struct request_queue *queue;\n  93         struct gendisk *disk;  \n  94        \n  95         int ns_id;\n  96         int lba_shift;         \n  97 };     \n  98 \n  99 /*     \n 100  * An NVM Express queue.  Each device has at least two (one for admin\n 101  * commands and one for I/O commands).\n 102  */\n 103 struct nvme_queue {\n 104         struct device *q_dmadev;\n 105         struct nvme_dev *dev;\n 106         spinlock_t q_lock;\n 107         struct nvme_command *sq_cmds;\n 108         volatile struct nvme_completion *cqes;\n 109         dma_addr_t sq_dma_addr;\n 110         dma_addr_t cq_dma_addr;\n 111         wait_queue_head_t sq_full;\n 112         wait_queue_t sq_cong_wait;\n 113         struct bio_list sq_cong;\n 114         u32 __iomem *q_db;\n 115         u16 q_depth;\n 116         u16 cq_vector;\n 117         u16 sq_head;\n 118         u16 sq_tail;\n 119         u16 cq_head;\n 120         u16 cq_phase;\n 121         unsigned long cmdid_data[];\n 122 };\n 123 \n</pre>\n\n== ## bNote-2013-12-03 ==\n\n=== Linux kernel IO stack: Block Layer ===\n\n==== Linux Documentation ====\n\n; Documentation/block/queue-sysfs.txt\n\n <pre>\n1	Queue sysfs files\n2	=================\n3	\n4	This text file will detail the queue files that are located in the sysfs tree\n5	for each block device. Note that stacked devices typically do not export\n6	any settings, since their queue merely functions are a remapping target.\n7	These files are the ones found in the /sys/block/xxx/queue/ directory.\n8	\n9	Files denoted with a RO postfix are readonly and the RW postfix means\n10	read-write.\n11	\n12	add_random (RW)\n13	----------------\n14	This file allows to trun off the disk entropy contribution. Default\n15	value of this file is \'1\'(on).\n16	\n17	discard_granularity (RO)\n18	-----------------------\n19	This shows the size of internal allocation of the device in bytes, if\n20	reported by the device. A value of \'0\' means device does not support\n21	the discard functionality.\n22	\n23	discard_max_bytes (RO)\n24	----------------------\n25	Devices that support discard functionality may have internal limits on\n26	the number of bytes that can be trimmed or unmapped in a single operation.\n27	The discard_max_bytes parameter is set by the device driver to the maximum\n28	number of bytes that can be discarded in a single operation. Discard\n29	requests issued to the device must not exceed this limit. A discard_max_bytes\n30	value of 0 means that the device does not support discard functionality.\n31	\n32	discard_zeroes_data (RO)\n33	------------------------\n34	When read, this file will show if the discarded block are zeroed by the\n35	device or not. If its value is \'1\' the blocks are zeroed otherwise not.\n36	\n37	hw_sector_size (RO)\n38	-------------------\n39	This is the hardware sector size of the device, in bytes.\n40	\n41	iostats (RW)\n42	-------------\n43	This file is used to control (on/off) the iostats accounting of the\n44	disk.\n45	\n46	logical_block_size (RO)\n47	-----------------------\n48	This is the logcal block size of the device, in bytes.\n49	\n50	max_hw_sectors_kb (RO)\n51	----------------------\n52	This is the maximum number of kilobytes supported in a single data transfer.\n53	\n54	max_integrity_segments (RO)\n55	---------------------------\n56	When read, this file shows the max limit of integrity segments as\n57	set by block layer which a hardware controller can handle.\n58	\n59	max_sectors_kb (RW)\n60	-------------------\n61	This is the maximum number of kilobytes that the block layer will allow\n62	for a filesystem request. Must be smaller than or equal to the maximum\n63	size allowed by the hardware.\n64	\n65	max_segments (RO)\n66	-----------------\n67	Maximum number of segments of the device.\n68	\n69	max_segment_size (RO)\n70	---------------------\n71	Maximum segment size of the device.\n72	\n73	minimum_io_size (RO)\n74	--------------------\n75	This is the smallest preferred io size reported by the device.\n76	\n77	nomerges (RW)\n78	-------------\n79	This enables the user to disable the lookup logic involved with IO\n80	merging requests in the block layer. By default (0) all merges are\n81	enabled. When set to 1 only simple one-hit merges will be tried. When\n82	set to 2 no merge algorithms will be tried (including one-hit or more\n83	complex tree/hash lookups).\n84	\n85	nr_requests (RW)\n86	----------------\n87	This controls how many requests may be allocated in the block layer for\n88	read or write requests. Note that the total allocated number may be twice\n89	this amount, since it applies only to reads or writes (not the accumulated\n90	sum).\n91	\n92	To avoid priority inversion through request starvation, a request\n93	queue maintains a separate request pool per each cgroup when\n94	CONFIG_BLK_CGROUP is enabled, and this parameter applies to each such\n95	per-block-cgroup request pool.  IOW, if there are N block cgroups,\n96	each request queue may have up to N request pools, each independently\n97	regulated by nr_requests.\n98	\n99	optimal_io_size (RO)\n100	--------------------\n101	This is the optimal io size reported by the device.\n102	\n103	physical_block_size (RO)\n104	------------------------\n105	This is the physical block size of device, in bytes.\n106	\n107	read_ahead_kb (RW)\n108	------------------\n109	Maximum number of kilobytes to read-ahead for filesystems on this block\n110	device.\n111	\n112	rotational (RW)\n113	---------------\n114	This file is used to stat if the device is of rotational type or\n115	non-rotational type.\n116	\n117	rq_affinity (RW)\n118	----------------\n119	If this option is \'1\', the block layer will migrate request completions to the\n120	cpu \"group\" that originally submitted the request. For some workloads this\n121	provides a significant reduction in CPU cycles due to caching effects.\n122	\n123	For storage configurations that need to maximize distribution of completion\n124	processing setting this option to \'2\' forces the completion to run on the\n125	requesting cpu (bypassing the \"group\" aggregation logic).\n126	\n127	scheduler (RW)\n128	--------------\n129	When read, this file will display the current and available IO schedulers\n130	for this block device. The currently active IO scheduler will be enclosed\n131	in [] brackets. Writing an IO scheduler name to this file will switch\n132	control of this block device to that new IO scheduler. Note that writing\n133	an IO scheduler name to this file will attempt to load that IO scheduler\n134	module, if it isn\'t already present in the system.\n135	\n136	\n137	\n138	Jens Axboe <jens.axboe@oracle.com>, February 2009\n</pre>\n\n\n\n\n==== Linux kernel 3.8.0 source code ====\n\n; block/blk-settings.c: blk_queue_make_request()\n <pre>\n\n152 /**\n153  * blk_queue_make_request - define an alternate make_request function for a device\n154  * @q:  the request queue for the device to be affected\n155  * @mfn: the alternate make_request function\n156  *\n157  * Description:\n158  *    The normal way for &struct bios to be passed to a device\n159  *    driver is for them to be collected into requests on a request\n160  *    queue, and then to allow the device driver to select requests\n161  *    off that queue when it is ready.  This works well for many block\n162  *    devices. However some block devices (typically virtual devices\n163  *    such as md or lvm) do not benefit from the processing on the\n164  *    request queue, and are served best by having the requests passed\n165  *    directly to them.  This can be achieved by providing a function\n166  *    to blk_queue_make_request().\n167  *\n168  * Caveat:\n169  *    The driver that does this *must* be able to deal appropriately\n170  *    with buffers in \"highmemory\". This can be accomplished by either calling\n171  *    __bio_kmap_atomic() to get a temporary kernel mapping, or by calling\n172  *    blk_queue_bounce() to create a buffer in normal memory.\n173  **/\n174 void blk_queue_make_request(struct request_queue *q, make_request_fn *mfn)\n175 {\n176         /*\n177          * set defaults\n178          */\n179         q->nr_requests = BLKDEV_MAX_RQ;\n180 \n181         q->make_request_fn = mfn;\n182         blk_queue_dma_alignment(q, 511);\n183         blk_queue_congestion_threshold(q);\n184         q->nr_batching = BLK_BATCH_REQ;\n185 \n186         blk_set_default_limits(&q->limits);\n187 \n188         /*\n189          * by default assume old behaviour and bounce for any highmem page\n190          */\n191         blk_queue_bounce_limit(q, BLK_BOUNCE_HIGH);\n192 }\n193 EXPORT_SYMBOL(blk_queue_make_request);\n\n</pre>\n\n\n\n\n; include/linux/blkdev.h: BLKDEV_MAX_RQ\n <pre>\n  38 #define BLKDEV_MAX_RQ   128     /* Default maximum */\n</pre>\n\n\n\n\n; block/blk-sysfs.c: /* Functions related to sysfs handling */\n <pre>\n 40 \n 41 static ssize_t queue_requests_show(struct request_queue *q, char *page)\n 42 {\n 43         return queue_var_show(q->nr_requests, (page));\n 44 }\n 45 \n 46 static ssize_t\n 47 queue_requests_store(struct request_queue *q, const char *page, size_t count)\n 48 {\n 49         struct request_list *rl;\n 50         unsigned long nr;\n 51         int ret;\n 52 \n 53         if (!q->request_fn)\n 54                 return -EINVAL;\n 55 \n 56         ret = queue_var_store(&nr, page, count);\n 57         if (ret < 0)\n 58                 return ret;\n 59 \n 60         if (nr < BLKDEV_MIN_RQ)\n 61                 nr = BLKDEV_MIN_RQ;\n 62 \n 63         spin_lock_irq(q->queue_lock);\n 64         q->nr_requests = nr;\n 65         blk_queue_congestion_threshold(q);\n 66 \n 67         /* congestion isn\'t cgroup aware and follows root blkcg for now */\n 68         rl = &q->root_rl;\n 69 \n 70         if (rl->count[BLK_RW_SYNC] >= queue_congestion_on_threshold(q))\n 71                 blk_set_queue_congested(q, BLK_RW_SYNC);\n 72         else if (rl->count[BLK_RW_SYNC] < queue_congestion_off_threshold(q))\n 73                 blk_clear_queue_congested(q, BLK_RW_SYNC);\n 74 \n 75         if (rl->count[BLK_RW_ASYNC] >= queue_congestion_on_threshold(q))\n 76                 blk_set_queue_congested(q, BLK_RW_ASYNC);\n 77         else if (rl->count[BLK_RW_ASYNC] < queue_congestion_off_threshold(q))\n 78                 blk_clear_queue_congested(q, BLK_RW_ASYNC);\n 79 \n 80         blk_queue_for_each_rl(rl, q) {\n 81                 if (rl->count[BLK_RW_SYNC] >= q->nr_requests) {\n 82                         blk_set_rl_full(rl, BLK_RW_SYNC);\n 83                 } else {\n 84                         blk_clear_rl_full(rl, BLK_RW_SYNC);\n 85                         wake_up(&rl->wait[BLK_RW_SYNC]);\n 86                 }\n 87 \n 88                 if (rl->count[BLK_RW_ASYNC] >= q->nr_requests) {\n 89                         blk_set_rl_full(rl, BLK_RW_ASYNC);\n 90                 } else {\n 91                         blk_clear_rl_full(rl, BLK_RW_ASYNC);\n 92                         wake_up(&rl->wait[BLK_RW_ASYNC]);\n 93                 }\n 94         }\n 95 \n 96         spin_unlock_irq(q->queue_lock);\n 97         return ret;\n 98 }\n 99 \n\n</pre>\n\n\n\n; drivers/block/nvme.c: NVME_Q_DEPTH\n <pre>\n  44 \n  45 #define NVME_Q_DEPTH 1024\n  46 #define SQ_SIZE(depth)          (depth * sizeof(struct nvme_command))\n  47 #define CQ_SIZE(depth)          (depth * sizeof(struct nvme_completion))\n  48 #define NVME_MINORS 64\n  49 #define NVME_IO_TIMEOUT (5 * HZ)\n  50 #define ADMIN_TIMEOUT   (60 * HZ)\n  51 \n</pre>\n\n== ## bNote-2013-12-02 ==\n\n=== XS-1715 Specification ===\n\n==== Key features ====\n\n* Performance\n: Optimized for 4KB random read and write workloads\n:- Performance Target\n::- More than 700K IOPS for 4KB random reads\n::- More than 200K IOPS for 4KB random writes (sustained)\n\n* Mapping Algorithm\n:- 4KB full page mapping\n:- FN21 4-planes program support \n:- FN21 4KB fast read support\n:- Hot/cold data separtion (ESP_MM_Mapping.c)\n:- Concurrent garbage collection during user page writes\n:- Non-blocking DRAM access to avoid pipeline bubbles of CPU\n:- No hardware register access at all during user read/write request processing\n:- Journal log information reduction for fast power-down and fast recovery at boot-up\n:- Flash RAID-5 support\n\n\n\n=== Admin/Misc ===\n\n* DS 인사 (전배관련): \'\'\'정영민 대리\'\'\', 박필 사원\n:-> 정영민 대리에게 확인. (OK)\n\n<!--\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:57]:\n  정대리님, 안녕하세요?\n  이번 10월 1일자로 기술원에서 SW개발팀으로 전배 온\n  정명준 책임입니다. \n  내년 승격 관련해서\n  문의드리고자 연락 드렸습니다\n  잠시 시간 되시는지요?\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:00]:\n  네\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:00]:\n  안녕하세요? 혹시 기술원의 김경진 차장으로부터\n  차년도 승격 관련해서\n  연락 받으셨던 것이 있으신지 궁금해서요~\n  제가 기술원 기준으로는 차년도 승격이 되는데\n  여기 전배를 오게 되면서, 승격 예외 대상자로 \n  예외 승격 대상자\n  로 분류해서 내년에 수석 진급이 보장될 수 있도록\n  해주겠다는 이야기를 들었었거든요\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:02]:\n  네 예전에 관련 결재를 통보받았으나, 책임님 명단이 있는지는 확인해봐야겠습니다\n  잠시만요\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:02]:\n  네~\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:05]:\n  네 확인했습니다. 책임님 승격되십니다\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:05]:\n  아 감사합니다~\n  이번에 저와 같이 오셨던\n  신현정 책임도 같이\n  승격 되는 것 맞죠?\n  저희 2명이 \n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:06]:\n  넵\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:06]:\n  된다고 들었었거든요\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:06]:\n  2명입니다\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:06]:\n  확인해주셔서 감사합니다. 그럼 저희 2명이 특별히\n  따로 더 할 일이\n  할 일은 없는 건지요?\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:06]:\n  넵\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:06]:\n  아, 잘 알겠습니다. \n  감사합니다. 좋은 오후 보내세요  \n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:07]:\n  네 수고하셔요~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:07]:\n  넵 감사합니다 ^^\n-->\n\n<!--\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:53]:\n  김과장님, 안녕하세요? 10월 1일자로 기술원에서 메모리사 S/W 개발팀으로 전배 온 정명준 책임입니다.\n  승격 관련해서 여쭙고자 연락 드렸습니다\n  잠시 시간 되시는지요?\n‎‎김효근(G5(과장)/담당과장/삼성전자)‎‎ [오후 1:54]:\n  아 네...\n  담당자는 박필 사원이나 \n  정영민 대리입니다. \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:55]:\n  아하 \n‎‎김효근(G5(과장)/담당과장/삼성전자)‎‎ [오후 1:55]:\n  정영민 대리는 지금 통화중이네요... \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:55]:\n  아, 그럼 잠시 후 정영민 대리에게 연락해보겠습니다 알려주셔서 감사합니다 ^_^\n‎‎김효근(G5(과장)/담당과장/삼성전자)‎‎ [오후 1:57]:\n  전 인력운영 담당자라 \n  승격에 대해서는 제가 정확한 답변을 못 드릴 것 같습니다. \n  정대리 전화 끊었네요\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:57]:\n  아, 감사합니다 ^^\n  연락해보겠습니다  \n-->\n\n<!--\n: <strike>DS 인사 담당: 김효근 과장, 이창익 대리 (인력 이동 관련)</strike> Updated: 정영민대리가 담당임.\n: 10/17 김경진 차장 - 내년 승격 대상자는 기술원 인사팀에서 본사에 얘기해놓았으며, 11.1일자 인력들과 같이 해서 예외 대상자들 품의를 받아 사업부에 뿌릴 예정이라고 함\n-->\n\n== References ==\n\n<references/>','utf-8'),(2056,'NVMe and AHCI were created to solve different problems. Each design addresses the problems within the constraints that existed at the time they were architected and take advantage of and fully exploit the technologies that were available at the time they were defined. \n\n\nAHCI came about due to advances in platform design, both in the client and enterprise space, and advances in ATA technology, specifically SATA. <span style=\"background:skyblue\">SATA in particular, which is an adaptor-to-device side interface, highlighted the need to provide an updated adaptor-to-host interface (--> AHCI).</span> Many features of SATA were either not capable of being exploited or could only be exploited with difficulty through proprietary host side interfaces prior to the creation of AHCI.\n\n \nAHCI was originally created to provide an <span style=\"background:skyblue\">abstracted device-host interface to SATA hard disk drives that provided a queuing interface</span> supporting an asynchronous command-response mechanism. Other important features, power management, a better architected application programming interface, etc., were also added. The most important feature, the queuing interface, was added in order to improve performance.\n\n\nNVMe is designed as a device interface. More specifically it is <span style=\"background:lightsalmon\">designed as a device interface for devices that attach directly to the PCIe bus.</span> The devices may function as either a storage device or something that, in the future, may function as a new device type sitting between the storage subsystem and system main memory.\n\n \nNVMe was designed from the ground up to provide a <span style=\"background:lightsalmon\">very high performance, low latency interface for PCIe SSD devices</span> that would additionally allow some of the special characteristics and attributes of NAND flash to be exposed and exploited by upper layers of the system. \n\n\nPrior to the creation of NVMe AHCI, in a modified and proprietary form, has been used as an interface for PCIe SSDs (<span style=\"background:gold\">--> fusion-io?</span>). While this approach has worked in the absence of something more purpose designed and built, AHCI was not originally architected with this use in mind and therefore suffers from some shortcomings when used in that application.\n\n\nReference: \"A Comparison of NVMe and AHCI,\" <ref>[https://www.sata-io.org/sites/default/files/documents/NVMe%20and%20AHCI_%20_long_.pdf Don H Walker, \"A Comparison of NVMe and AHCI,\" Version 1.0, www.sata-io.org, 2012-07-31]\n\n* This paper will provide an overview of the features of both interfaces to allow for comparisons and contrasts to be drawn between the two and allow the reader to better understand in what applications each may best be used. The focus will be on the higher levels of the interfaces, essentially the transports, protocols and upper level features. A discussion of the physical and link layers of each of the interfaces is beyond the scope of this paper and not essential to the topic.\n\n* A comparison of an AHCI HBA subsystem to an NVMe device is admittedly something of an <u>apples to oranges comparison</u>. In configuring a system it would not be expected that someone would be faced with making a decision as to whether that system should be configured with an AHCI HBA or NVMe PCIe SSDs. Each serves different purposes. The reason for this paper is educational.\n\n* It is hoped that the reader can benefit from a comparison for the following reasons. \n** If the reader is already familiar with AHCI then a comparison to NVMe will help in the understanding of NVMe and its benefits \n** If the reader is unfamiliar with either interface an understanding of both will help to point out the context of how each can best be used. \n** Finally this comparison will show how storage interfaces are evolving in response to advances in persistent memory technology and the systems in which they are used.\n</ref>\n\n\n== Overview ==\n\nThe differences between an interface designed as an <span style=\"background:lightsalmon\">adaptive, translational layer (AHCI)</span> and an interface designed as a <span style=\"background:lightsalmon\">simple device adaptive layer (NVMe)</span> drive fundamental architectural and design features that are inherently encompassed in the respective interface specifications. These differences are in addition to various features that are included in a specification designed to expose characteristics and attributes of the underlying attached device technology.\n\n\n=== AHCI ===\n\nInherent in the problem of designing AHCI, in fact many interfaces, is that it serves as the logical element that <span style=\"background:skyblue\">tie two physical buses together, the system interconnect, PCI/PCIe, and the storage subsystem interconnect, SATA.</span>\n\n\nAdapters built on such interfaces typically provide <span style=\"background:skyblue\">logical translation</span> services between the two sides of the adapter. The electrical signaling and the physical transports and associated protocols on either side of the adapter are different, PCI/PCIe on the host side and SATA on the storage device side. The resulting logical transport and protocol implemented by the adaptor and used to bridge between the two physical interconnects is then shaped by the underlying physical and link layer elements of the buses which it connects. \n\n\nAt the time AHCI was conceived and designed the only devices connected via SATA were IO devices such as <span style=\"background:skyblue\">hard drives, optical drives, and other IO peripheral devices that were slow</span> as compared to the processor-memory complex of the platform. Given this performance disparity an aggregation point in the system topology was needed, <span style=\"background:skyblue\">serving as a protocol/transport translator and as an elasticity buffer and alleviating the processor from managing this disparity.</span> An HBA using AHCI as the host side interface and SATA as the device side interface serves this purpose quite well.\n\n\nThis aggregation/translation point serves to <span style=\"background:skyblue\">smooth the bandwidth and latency disparity between</span> the SATA storage interconnect and the system interconnect, in this case PCI or PCIe. In providing such functionality latency is introduced into device access. For the originally intended environment of AHCI, this is <span style=\"background:skyblue\">not an issue as the additional latency of the aggregation point, the HBA, is a miniscule component of the overall device access path latency.</span>\n\n\n<span style=\"background:lightsalmon\">AHCI serves its intended architecture and design goals well. The host is able to keep attached SATA storage devices busy while minimizing the effort needed to manage the devices and take full advantage of additional features that they may offer.</span>\n\n=== NVMe ===\n\n* The deployment of SSDs,\n: with performance capabilities orders of magnitude greater than previous storage devices,\n:: especially the low latency characteristics of the devices,\n: <span style=\"background:navajowhite\">drove the transition</span>\n:: from physical attachments based on traditional storage busses\n:: to physical interconnects more closely tied to the processor-memory complex, namely the PCIe bus.\n\n\n* With a storage device moving\n:: from a legacy storage interconnect\n:: to the low latency system interconnect,\n: the need for a new storage device interface that\n:: could span both the storage domain and function equally well within the system interconnect domain\n:: and unlock the full potential of these new devices\n: was required.\n: <span style=\"background:navajowhite\">NVMe is that new interface.</span>\n\n\n* The interface was also designed to be\n: <span style=\"background:navajowhite\">highly parallel</span>\n: <span style=\"background:navajowhite\">and highly scalable.</span>\n\n\n* The scalability, parallelism and inherent efficiency of NVMe allow the interface to scale up and down in performance without losing any of the benefits. These features allow the interface to be highly adaptable to a wide variety of system configurations and designs from laptops to very high end, highly parallel servers.\n\n\n* Another important feature of the NVMe interface is\n: its ability to support the partitioning of the physical storage extent\n:: into multiple logical storage extents,\n::: each of which can be accessed independently of other logical extents.\n: These logical storage extents are called <span style=\"background:navajowhite\">Namespaces.</span>\n: Each NVMe Namespace may have its own\n:: pathway,\n:: or IO channel,\n: over which the host may access the Namespace.\n\n\n* In fact, multiple IO channels may be created to a single Namespace and be used simultaneously (Note that an IO channel, i.e. a submission/completion queue pair is not limited to addressing one and only one Namespace; see the NVMe specification for details.).\n\n\n* The ability\n:: to partition a physical storage extent into multiple logical storage extents\n:: and then to create multiple IO channels to each extent\n: is a feature of NVMe that was architected and designed to allow the system in which it is used to\n:: exploit the parallelism available in upper layers of today’s platforms\n:: and extend that parallelism all the way down into the storage device itself. \n\n\n\nMultiple IO channels that can be dedicated to cores, processes or threads eliminate the \nneed for locks, or other semaphore based locking mechanisms around an IO channel. \nThis ensures that IO channel resource contention, a major performance killer in IO \nsubsystems, is not an issue.\n\n=== Layering aspects of both ===\n\n\nBoth AHCI and NVMe are interfaces that rely on PCI/PCIe to provide the underlying \nphysical interfaces and transports. An AHCI HBA will plug into a PCI/PCIe bus. A PCIe \nSSD implementing the NVMe interface will plug into a PCIe bus. Either interface could \nbe enhanced to work with devices that plug into a systems interconnect of a different \ntype but this has not been done to date as PCI/PCIe is the dominant systems \ninterconnect and a need for additional physical interconnect support is not there. \n\n\nThat said, AHCI is commonly implemented within the processor chipset. The processor \nside physical bussing is implementation dependent and may or may not be PCI/PCIe. \nWhen the AHCI controller is implemented within the processor or processor support \nchipset and connected via the PCI/PCIe bus it is a referred to as a Root Integrated \nEndpoint. The bus connecting the processor to the AHCI adapter within a processor or \nprocessor support chipset may be proprietary. Those cases are not germane to this \ndiscussion and any further discussion on this topic is beyond the scope of this paper. \nThe remainder of this paper will assume that the host side physical interconnect is \nPCI/PCIe.\n\n== Anatomy of the itnerfaces ==\n\n\nAn interface can be decomposed into various components. This paper uses the following decomposition.  \n\n* Transport \n** Logical \n** Physical \n* Register Set \n* Queuing Layer or Model \n* Protocol \n* Command Set \n\n\n\n=== Transport ===\n\n=== Register set ===\n\n=== Queuing layer ===\n\n<!--\nMost interfaces use queues for moving commands, command status and/or data across \nthe transport. Queues are typically used for smoothing the flow of information and data, \nfunctioning as elasticity buffers, and possibly maintaining command ordering of some \ntype. They provide the buffers needed for temporary storage of command and \ncommand status until they can be processed by the host or device. \nQueuing layers must have usage rules associated with them. The mechanisms used to \nupdate queue head and tail pointers and notifications of when a queue has been \nupdated to interested parties are all part of the queuing layer and its associated \nprotocols\n-->\n\n=== Protocol ===\n\n=== Command set ===\n\n== AHCI ==\n\n=== AHCI interface elements: register sets ===\n\n=== AHCI interface elements: transport/protocols ===\n\n=== AHCI interface elements: queuing model ===\n\n=== AHCI interface elements: command set ===\n\n=== AHCI operations: ATA frame information structure ===\n\n=== AHCI operations: command issuance ===\n\n=== AHCI operations: error and exception handling ===\n\n=== AHCI operations: additional features of the interface ===\n\n\n\n== NVMe ==\n\n=== NVMe interface elements: register sets ===\n\n=== NVMe interface elements: transport/protocols ===\n\n=== NVMe interface elements: queuing model ===\n\n=== NVMe interface elements: command set ===\n\n=== NVMe operations: command issuance ===\n\n=== NVMe operations: command completion ===\n\n=== NVMe operations: error/exception handling ===\n\n=== NVMe operations: additional features ===\n\n==== NVMe power management ====\n==== NVMe hot plug ====\n==== NVMe end-to-end data protection ====\n==== NVMe security ====\n==== NVMe SR-IOV ====\n==== NVMe meta-data ====\n==== NVMe multi-pathing ====\n\n\n\n== Interface differences ==\n\n=== Aggregation point vs. end point ===\n\n=== 64K queues Vs. 32 ports ===\n\n=== 64K command queue depth Vs. 32 command queue depth ===\n\n=== 9 register reads/writes Vs. 2 register writes for a command issue/completion cycle ===\n\n=== Single interrupt Vs. support for multiple MSI-X interrupts ===\n\n=== Parallel access to a single namespace Vs. serial access to a port ===\n\n=== Various miscellaneous feature/function support ===\n\n\n\n== Use cases ==\n\n\n== Summary ==\n\n=== Comparison table of NVMe and AHCI ===\n\n\n\n== References ==\n\n<references/>','utf-8'),(2057,'\n\n\n\n{| align=center cellspacing=\"1\" cellpadding=\"1\" style=\"background: #f7f8ff; border: 1px solid #88a; padding: 5px; font-size: 90%; width: 88%;\"\n|- \n! style=\"background: #ccf;\" colspan=\"3\" |Wikipedia help page for article editing and creating\n| rowspan=\"2\" colspan=\"3\" style=\"padding-left: 6px;\" |\n\n|- valign=\"top\"\n|\n{| class=sortable border=\"0\"\n!style=\"background:lightgrey;\"            | HTML name\n!colspan=2 style=\"background:lightgrey;\"| Hexadecimal code <br/>R &nbsp; G &nbsp; B\n|-\n|colspan=2; style=\"background:whitesmoke; color:slategray; text-align:left;\"|<big>\'\'\'Red colors\'\'\'</big>\n|- style=\"background:indianred; color:white;\"\n|IndianRed  ||CD 5C 5C\n|- style=\"background:lightcoral; color:black;\" \n|LightCoral ||F0 80 80\n|- style=\"background:salmon; color:black;\"\n|Salmon     ||FA 80 72\n|- style=\"background:darksalmon; color:black;\"\n|DarkSalmon     ||E9 96 7A\n|- style=\"background:lightsalmon; color:black;\"\n|LightSalmon     ||FF A0 7A\n|- style=\"background:crimson; color:white; color:white;\"\n|Crimson       ||DC 14 3C\n|- style=\"background:red; color:white;\"\n|Red            ||FF 00 00\n|- style=\"background:firebrick; color:white;\"\n|FireBrick      ||B2 22 22\n|- style=\"background:darkred; color:white;\"\n|DarkRed        ||8B 00 00\n|-\n|colspan=2; style=\"background:whitesmoke; color:slategray; text-align:left;\"|<big>\'\'\'Pink colors\'\'\'</big>\n|- style=\"background:pink; color:black;\"\n|Pink           ||FF C0 CB\n|- style=\"background:lightpink; color:black;\"\n|LightPink      ||FF B6 C1\n|- style=\"background:hotpink; color:white;\"\n|HotPink        ||FF 69 B4\n|- style=\"background:deeppink; color:white;\"\n|DeepPink       ||FF 14 93\n|- style=\"background:mediumvioletred; color:white;\"\n|MediumVioletRed||C7 15 85\n|- style=\"background:palevioletred; color:white;\"\n|PaleVioletRed  ||DB 70 93\n|-\n|colspan=2; style=\"background:whitesmoke; color:slategray; text-align:left;\"|<big>\'\'\'Orange colors\'\'\'</big>\n|- style=\"background:lightsalmon; color:black;\"\n||LightSalmon    ||FF A0 7A\n|-  style=\"background:coral; color:white;\"\n|Coral          ||FF 7F 50\n|- style=\"background:tomato; color:white;\"\n|Tomato         ||FF 63 47\n|- style=\"background:orangered; color:white;\"\n|OrangeRed      ||FF 45 00\n|- style=\"background:darkorange; color:white;\"\n|DarkOrange     ||FF 8C 00\n|- style=\"background:orange; color:white;\"\n|Orange         ||FF A5 00\n|-\n|colspan=2; style=\"background:whitesmoke; color:slategray; text-align:left;\"|<big>\'\'\'Yellow colors\'\'\'</big>\n|- style=\"background:gold; color:black;\"\n|Gold           ||FF D7 00\n|- style=\"background:yellow; color:black;\"\n|Yellow         ||FF FF 00\n|- style=\"background:lightyellow; color:black;\"\n|LightYellow    ||FF FF E0 \n|- style=\"background:lemonchiffon; color:black;\"\n|LemonChiffon  ||FF FA CD \n|- style=\"background:lightgoldenrodyellow; color:black;\"\n|LightGoldenrodYellow||FA FA D2 \n|- style=\"background:papayawhip; color:black;\"\n|PapayaWhip     ||FF EF D5 \n|- style=\"background:moccasin; color:black;\"\n|Moccasin       ||FF E4 B5 \n|- style=\"background:peachpuff; color:black;\"\n|PeachPuff      ||FF DA B9 \n|- style=\"background:palegoldenrod; color:black;\"\n|PaleGoldenrod  ||EE E8 AA \n|- style=\"background:khaki; color:black;\"\n|Khaki          ||F0 E6 8C \n|- style=\"background:darkkhaki; color:white;\"\n|DarkKhaki      ||BD B7 6B \n|-\n|colspan=2; style=\"background:whitesmoke; color:slategray; text-align:left;\"|<big>\'\'\'Purple colors\'\'\'</big>\n|- style=\"background:lavender; color:black;\"\n|Lavender       ||E6 E6 FA \n|- style=\"background:thistle; color:white;\"\n|Thistle ||D8 BF D8 \n|- style=\"background:plum; color:white;\"\n|Plum           ||DD A0 DD \n|- style=\"background:violet; color:white;\"\n|Violet         ||EE 82 EE \n|- style=\"background:orchid; color:white;\"\n|Orchid         ||DA 70 D6\n|- style=\"background:fuchsia; color:white;\"\n|Fuchsia        ||FF 00 FF \n|- style=\"background:magenta; color:white;\"\n|Magenta||FF 00 FF \n|- style=\"background:mediumorchid; color:white;\"\n|MediumOrchid   ||BA 55 D3 \n|- style=\"background:mediumpurple; color:white;\"\n|MediumPurple   ||93 70 DB \n|- style=\"background:blueviolet; color:white;\"\n|BlueViolet     ||8A 2B E2 \n|- style=\"background:darkviolet; color:white;\"\n|DarkViolet     ||94 00 D3 \n|- style=\"background:darkorchid; color:white;\"\n|DarkOrchid     ||99 32 CC \n|- style=\"background:darkmagenta; color:white;\"\n|DarkMagenta    ||8B 00 8B \n|- style=\"background:purple; color:white;\"\n|Purple         ||80 00 80 \n|- style=\"background:indigo; color:white;\"\n|Indigo         ||4B 00 82  \n|- style=\"background:slateblue; color:white;\"\n|SlateBlue      ||6A 5A CD\n|- style=\"background:darkslateblue; color:white;\"\n|DarkSlateBlue  ||48 3D 8B\n|-\n|}\n|\n{| class=sortable\n!style=\"background:lightgrey;\"            | HTML name\n!colspan=2 style=\"background:lightgrey;\"| Hex code<br/>R &nbsp; G &nbsp; B\n|-\n|colspan=2; style=\"background:whitesmoke; color:slategray; text-align:left;\"|<big>\'\'\'Green colors\'\'\'</big>\n|- style=\"background:greenyellow; color:black;\"\n|GreenYellow    ||AD FF 2F \n|- style=\"background:chartreuse; color:black;\"\n|Chartreuse     ||7F FF 00 \n|- style=\"background:lawngreen; color:black;\"\n|LawnGreen      ||7C FC 00 \n|- style=\"background:lime; color:black;\"\n|Lime           ||00 FF 00  \n|- style=\"background:limegreen; color:black;\"\n|LimeGreen      ||32 CD 32\n|- style=\"background:palegreen; color:black;\"\n|PaleGreen      ||98 FB 98 \n|- style=\"background:lightgreen; color:black;\"\n|LightGreen     ||90 EE 90 \n|- style=\"background:mediumspringgreen; color:black;\"\n|MediumSpringGreen||00 FA 9A \n|- style=\"background:springgreen; color:black;\"\n|SpringGreen    ||00 FF 7F \n|- style=\"background:mediumseagreen; color:white;\"\n|MediumSeaGreen ||3C B3 71 \n|- style=\"background:seagreen; color:white;\"\n|SeaGreen       ||2E 8B 57 \n|- style=\"background:forestgreen; color:white;\"\n|ForestGreen    ||22 8B 22 \n|- style=\"background:green; color:white;\"\n|Green          ||00 80 00\n|- style=\"background:darkgreen; color:white;\"\n|DarkGreen      ||00 64 00 \n|- style=\"background:yellowgreen; color:white;\"\n|YellowGreen    ||9A CD 32\n|- style=\"background:olivedrab; color:white;\"\n|OliveDrab      ||6B 8E 23 \n|- style=\"background:olive; color:white;\"\n|Olive          ||80 80 00 \n|- style=\"background:darkolivegreen; color:white;\"\n|DarkOliveGreen ||55 6B 2F\n|- style=\"background:mediumaquamarine; color:black;\"\n|MediumAquamarine||66 CD AA \n|- style=\"background:darkseagreen; color:white;\"\n|DarkSeaGreen  ||8F BC 8F \n|- style=\"background:lightseagreen; color:white;\"\n|LightSeaGreen  ||20 B2 AA \n|- style=\"background:darkcyan; color:white;\"\n|DarkCyan       ||00 8B 8B \n|- style=\"background:teal; color:white;\"\n|Teal           ||00 80 80 \n|-\n|colspan=2; style=\"background:whitesmoke; color:slategray; text-align:left;\"|<big>\'\'\'Blue colors\'\'\'</big>\n|- style=\"background:aqua; color:black;\"\n|Aqua           ||00 FF FF\n|- style=\"background:cyan; color:black;\"\n|Cyan           ||00 FF FF\n|- style=\"background:lightcyan; color:black;\"\n|LightCyan      ||E0 FF FF \n|- style=\"background:paleturquoise; color:black;\"\n|PaleTurquoise  ||AF EE EE \n|- style=\"background:aquamarine; color:black;\"\n|Aquamarine    ||7F FF D4 \n|- style=\"background:turquoise; color:black;\"\n|Turquoise      ||40 E0 D0 \n|- style=\"background:mediumturquoise; color:white;\"\n|MediumTurquoise ||48 D1 CC \n|- style=\"background:darkturquoise; color:white;\"\n|DarkTurquoise||00 CE D1  \n|- style=\"background:cadetblue; color:white;\"\n|CadetBlue      ||5F 9E A0 \n|- style=\"background:steelblue; color:white;\"\n|SteelBlue   ||46 82 B4\n|- style=\"background:lightsteelblue; color:black;\"\n|LightSteelBlue ||B0 C4 DE  \n|- style=\"background:powderblue; color:black;\"\n|PowderBlue     ||B0 E0 E6 \n|- style=\"background:lightblue; color:black;\"\n|LightBlue      ||AD D8 E6 \n|- style=\"background:skyblue; color:black;\"\n|SkyBlue        ||87 CE EB \n|- style=\"background:lightskyblue; color:black;\"\n|LightSkyBlue||87 CE FA \n|- style=\"background:deepskyblue; color:white;\"\n|DeepSkyBlue  ||00 BF FF  \n|- style=\"background:dodgerblue; color:white;\"\n|DodgerBlue     ||1E 90 FF\n|- style=\"background:cornflowerblue; color:white;\"\n|CornflowerBlue||64 95 ED\n|- style=\"background:mediumslateblue; color:white;\"\n|MediumSlateBlue||7B 68 EE \n|- style=\"background:royalblue; color:white;\"\n|RoyalBlue      ||41 69 E1 \n|- style=\"background:blue; color:white;\"\n|Blue           ||00 00 FF \n|- style=\"background:mediumblue; color:white;\"\n|MediumBlue     ||00 00 CD \n|- style=\"background:darkblue; color:white;\"\n|DarkBlue       ||00 00 8B \n|- style=\"background:navy; color:white;\"\n|Navy           ||00 00 80 \n|- style=\"background:midnightblue; color:white;\"\n|MidnightBlue   ||19 19 70 \n|-\n|}\n|\n{| class=sortable\n!style=\"background:lightgrey;\"            | HTML name\n!colspan=2 style=\"background:lightgrey;\"| Hex code<br/>R &nbsp; G &nbsp; B\n|-\n|colspan=2; style=\"background:whitesmoke; color:slategray; text-align:left;\"|<big>\'\'\'Brown colors\'\'\'</big>\n|- style=\"background:cornsilk; color:black;\"\n|Cornsilk       ||FF F8 DC \n|- style=\"background:blanchedalmond; color:black;\"\n|BlanchedAlmond ||FF EB CD \n|- style=\"background:bisque; color:black;\"\n|Bisque         ||FF E4 C4 \n|- style=\"background:navajowhite; color:black;\"\n|NavajoWhite    ||FF DE AD \n|- style=\"background:wheat; color:black;\"\n|Wheat          ||F5 DE B3 \n|- style=\"background:burlywood; color:white;\"\n|BurlyWood      ||DE B8 87 \n|- style=\"background:tan; color:white;\"\n|Tan            ||D2 B4 8C \n|- style=\"background:rosybrown; color:white;\"\n|RosyBrown      ||BC 8F 8F \n|- style=\"background:sandybrown; color:white;\"\n|SandyBrown     ||F4 A4 60 \n|- style=\"background:goldenrod; color:white;\"\n|Goldenrod      ||DA A5 20 \n|- style=\"background:darkgoldenrod; color:white;\"\n|DarkGoldenrod  ||B8 86 0B \n|- style=\"background:peru; color:white;\"\n|Peru           ||CD 85 3F \n|- style=\"background:chocolate; color:white;\"\n|Chocolate     ||D2 69 1E \n|- style=\"background:saddlebrown; color:white;\"\n|SaddleBrown    ||8B 45 13 \n|- style=\"background:sienna; color:white;\"\n|Sienna         ||A0 52 2D \n|- style=\"background:brown; color:white;\"\n|Brown          ||A5 2A 2A \n|- style=\"background:maroon; color:white;\"\n|Maroon         ||80 00 00\n|-\n|colspan=2; style=\"background:whitesmoke; color:slategray; text-align:left;\"|<big>\'\'\'White colors\'\'\'</big>\n|- style=\"background:white; color:black;\"\n|White          ||FF FF FF \n|- style=\"background:snow; color:black;\"\n|Snow           ||FF FA FA \n|- style=\"background:honeydew; color:black;\"\n|Honeydew       ||F0 FF F0 \n|- style=\"background:mintcream; color:black;\"\n|MintCream      ||F5 FF FA \n|- style=\"background:azure; color:black;\"\n|Azure          ||F0 FF FF \n|- style=\"background:aliceblue; color:black;\"\n|AliceBlue      ||F0 F8 FF \n|- style=\"background:ghostwhite; color:black;\"\n|GhostWhite     ||F8 F8 FF \n|- style=\"background:whitesmoke; color:black;\"\n|WhiteSmoke     ||F5 F5 F5 \n|- style=\"background:seashell; color:black;\"\n|Seashell       ||FF F5 EE \n|- style=\"background:beige; color:black;\"\n|Beige          ||F5 F5 DC \n|- style=\"background:oldlace; color:black;\"\n|OldLace        ||FD F5 E6 \n|- style=\"background:floralwhite; color:black;\"\n|FloralWhite    ||FF FA F0 \n|- style=\"background:ivory; color:black;\"\n|Ivory          ||FF FF F0 \n|- style=\"background:antiquewhite; color:black;\"\n|AntiqueWhite   ||FA EB D7 \n|- style=\"background:linen; color:black;\"\n|Linen          ||FA F0 E6 \n|- style=\"background:lavenderblush; color:black;\"\n|LavenderBlush  ||FF F0 F5 \n|- style=\"background:mistyrose; color:black;\"\n|MistyRose      ||FF E4 E1 \n|-\n|colspan=2; style=\"background:whitesmoke; color:slategray; text-align:left;\"|<big>\'\'\'Grey colors\'\'\'</big>\n|- style=\"background:gainsboro; color:black;\"\n|Gainsboro      ||DC DC DC \n|- style=\"background:lightgrey; color:black;\"\n|LightGrey      ||D3 D3 D3 \n|- style=\"background:silver; color:black;\"\n|Silver         ||C0 C0 C0 \n|- style=\"background:darkgray; color:black;\"\n|DarkGray       ||A9 A9 A9 \n|- style=\"background:gray; color:white;\"\n|Gray           ||80 80 80 \n|- style=\"background:dimgray; color:white;\"\n|DimGray        ||69 69 69 \n|- style=\"background:lightslategray; color:white;\"\n|LightSlateGray ||77 88 99 \n|- style=\"background:slategray; color:white;\"\n|SlateGray      ||70 80 90 \n|- style=\"background:darkslategray; color:white;\"\n|DarkSlateGray  ||2F 4F 4F \n|- style=\"background:black; color:white;\"\n|Black          ||00 00 00 \n|}\n|-\n|}','utf-8'),(2058,'\n\n\n\n== 2014 Calendar ==\n\n{| class=\"wikitable sortable\"\n|-\n| align=\"left\" valign=\"top\" | [[Bnote 2014-01]]\n<pre>\n    January 2014      \nSu Mo Tu We Th Fr Sa  \n          1  2  3  4  \n 5  6  7  8  9 10 11  \n12 13 14 15 16 17 18  \n19 20 21 22 23 24 25  \n26 27 28 29 30 31   \n</pre>\n| align=\"left\" valign=\"top\" | [[Bnote 2014-02]]\n<pre>\n   February 2014      \nSu Mo Tu We Th Fr Sa  \n                   1  \n 2  3  4  5  6  7  8  \n 9 10 11 12 13 14 15  \n16 17 18 19 20 21 22  \n23 24 25 26 27 28     \n</pre>\n| align=\"left\" valign=\"top\" | [[Bnote 2014-03]]\n<pre>\n     March 2014       \nSu Mo Tu We Th Fr Sa  \n                   1  \n 2  3  4  5  6  7  8  \n 9 10 11 12 13 14 15  \n16 17 18 19 20 21 22  \n23 24 25 26 27 28 29  \n30 31               \n</pre>\n|-\n| align=\"left\" valign=\"top\" | [[Bnote 2014-04]]\n<pre>\n     April 2014       \nSu Mo Tu We Th Fr Sa  \n       1  2  3  4  5  \n 6  7  8  9 10 11 12  \n13 14 15 16 17 18 19  \n20 21 22 23 24 25 26  \n27 28 29 30           \n</pre>\n| align=\"left\" valign=\"top\" | [[Bnote 2014-05]]\n<pre>\n      May 2014        \nSu Mo Tu We Th Fr Sa  \n             1  2  3  \n 4  5  6  7  8  9 10  \n11 12 13 14 15 16 17  \n18 19 20 21 22 23 24  \n25 26 27 28 29 30 31  \n</pre>\n| align=\"left\" valign=\"top\" | [[Bnote 2014-06]]\n<pre>\n     June 2014        \nSu Mo Tu We Th Fr Sa  \n 1  2  3  4  5  6  7  \n 8  9 10 11 12 13 14  \n15 16 17 18 19 20 21  \n22 23 24 25 26 27 28  \n29 30\n</pre>\n|-\n| align=\"left\" valign=\"top\" | [[Bnote 2014-07]]\n<pre>\n     July 2014        \nSu Mo Tu We Th Fr Sa  \n       1  2  3  4  5  \n 6  7  8  9 10 11 12  \n13 14 15 16 17 18 19  \n20 21 22 23 24 25 26  \n27 28 29 30 31 \n</pre>\n| align=\"left\" valign=\"top\" | [[Bnote 2014-08]]\n<pre>\n    August 2014       \nSu Mo Tu We Th Fr Sa  \n                1  2  \n 3  4  5  6  7  8  9  \n10 11 12 13 14 15 16  \n17 18 19 20 21 22 23  \n24 25 26 27 28 29 30  \n31  \n</pre>\n| align=\"left\" valign=\"top\" | [[Bnote 2014-09]]\n<pre>\n   September 2014     \nSu Mo Tu We Th Fr Sa  \n    1  2  3  4  5  6  \n 7  8  9 10 11 12 13  \n14 15 16 17 18 19 20  \n21 22 23 24 25 26 27  \n28 29 30  \n</pre>\n|-\n| align=\"left\" valign=\"top\" | [[Bnote 2014-10]]\n<pre>\n    October 2014      \nSu Mo Tu We Th Fr Sa  \n          1  2  3  4  \n 5  6  7  8  9 10 11  \n12 13 14 15 16 17 18  \n19 20 21 22 23 24 25  \n26 27 28 29 30 31     \n</pre>\n| align=\"left\" valign=\"top\" | [[Bnote 2014-11]]\n<pre>\n   November 2014      \nSu Mo Tu We Th Fr Sa  \n                   1  \n 2  3  4  5  6  7  8  \n 9 10 11 12 13 14 15  \n16 17 18 19 20 21 22  \n23 24 25 26 27 28 29  \n30         \n</pre>\n| align=\"left\" valign=\"top\" | [[Bnote 2014-12]]\n<pre>\n   December 2014      \nSu Mo Tu We Th Fr Sa  \n    1  2  3  4  5  6  \n 7  8  9 10 11 12 13  \n14 15 16 17 18 19 20  \n21 22 23 24 25 26 27  \n28 29 30 31 \n</pre>\n|-\n|}','utf-8'),(2059,'\n\n\n\n\n <pre>\n   December 2013\nSu Mo Tu We Th Fr Sa\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n</pre>\n\n\n\n\n\n== ## bNote-2013-12-12 ==\n\n=== MySQL handling ===\n\n* mysql> show status like \'innodb_%\'\n\n <pre>\nmysql> show status like \'innodb_%\';\n+---------------------------------------+---------+\n| Variable_name                         | Value   |\n+---------------------------------------+---------+\n| Innodb_buffer_pool_pages_data         | 389     |\n| Innodb_buffer_pool_bytes_data         | 6373376 |\n| Innodb_buffer_pool_pages_dirty        | 0       |\n| Innodb_buffer_pool_bytes_dirty        | 0       |\n| Innodb_buffer_pool_pages_flushed      | 0       |\n| Innodb_buffer_pool_pages_free         | 5119611 |\n| Innodb_buffer_pool_pages_misc         | 0       |\n| Innodb_buffer_pool_pages_total        | 5120000 |\n| Innodb_buffer_pool_read_ahead_rnd     | 0       |\n| Innodb_buffer_pool_read_ahead         | 0       |\n| Innodb_buffer_pool_read_ahead_evicted | 0       |\n| Innodb_buffer_pool_read_requests      | 5600    |\n| Innodb_buffer_pool_reads              | 390     |\n| Innodb_buffer_pool_wait_free          | 0       |\n| Innodb_buffer_pool_write_requests     | 0       |\n| Innodb_data_fsyncs                    | 3       |\n| Innodb_data_pending_fsyncs            | 0       |\n...\n</pre>\n\n== ## bNote-2013-12-11 ==\n\n=== Xian SSD Benchmark Test ===\n\n==== Environment ====\n <pre>\nHardware Server	HP DL380p Gen8\nCPU: 2xIntel XeonE5-2665@2.40GHz;\nMemory: 128GB\nStorage	Seagate HDD, 1TB, 7200rpm\nIntel SSD S3500, 480G\nSamsung SSD SM843Tns, 960G\n\nSoftware\nOS Centos 6.4 (2.6.32-358.el6.x86_64)\nI/O Scheduler: CFQ/Noop\nFile system	EXT4/XFS\nMySQL DB	Percona Server 5.6.14\n\nConfiguration:\nskip-grant-tables\ninnodb_buffer_pool_size = 80000M\ninnodb_thread_concurrency = 32 \ninnodb_spin_wait_delay = 30 \ninnodb_sync_spin_loops = 100\ninnodb_max_dirty_pages_pct = 90\ninnodb_lock_wait_timeout = 120\ninnodb_doublewrite = 0\ninnodb_flush_method = O_DIRECT\ninnodb_log_buffer_size = 256M\ninnodb_log_file_size = 8192M\ninnodb_log_block_size=4096\ninnodb_write_io_threads=16\ninnodb_read_io_threads=16\ninnodb_io_capacity=20000\ninnodb_file_format=barracuda\nmax_connections=3000\nquery_cache_size=0\nskip-name-resolve\n	tpcc-mysql	Revision 48. \nConfigurations\nThe CentOS is installed on HDD, filesystem is EXT4.\nThe Percona database is also installed on HDD, but the datadir is a directory on Samsung SSD.\nSamsung SSD SM843Tns 960GB is divided into two 480G partitions, XFS format. Only one partition is used for benchmarking, the other partition is fully written with unused data.\n\nPercona Server Installation\nResource: http://www.percona.com/downloads/Percona-Server-5.6/LATEST/RPM/rhel6/x86_64/\n\nInstall Step:\n1.Download Percona Server, client and shared rpm packages.\n2.Remove old mysql packages: \nyum –y remove mysql, mysql-server, mysql-libs-*.\n3.Install Percona shared, client, server packages:\n	rpm –ivhPercona-Server-shared-XXX.rpm\nrpm –ivhPercona-Server-client-XXX.rpm\nrpm –ivhPercona-Server-server-XXX.rpm\n4. Mysql secure installation: \nRun /usr/bin/mysql_secure_installation (default root user password is NULL)\n\nStart and Stop MySQL:\n	service mysql start/stop\n/etc/init.d/mysqlstart/stop\n\nLogin MySQL:\nmysql -uroot –p\n\nModify password:\nmysqladmin -uroot -p password\n\ntpcc-mysql installation\nResource:\nhttps://code.launchpad.net/~percona-dev/perconatools/tpcc-mysql\n\nInstall Step:\ncdsrc\nmake\n\nFAQ:\n1.	Can’t find header file\nexport C_INCLUDE_PATH=$MYSQL_HOME/include\n2.	Can’t find mysql_config\nexport PATH=$MYSQL_HOME/bin:$PATH\n3.	Can’t find mysql lib\nexport LD_LIBRARY_PATH=$MYSQL_HOME/lib\n\nLoad data:\n1.	Create database\nshell>mysqladmin create tpcc2500\nmysql> create database tpcc2500;\n2.	Create tables\nshell> mysql –uroot –p tpcc2500 <create_table.sql\n3.	Create indexes and FK\nshell> mysql –uroot –p tpcc2500 <add_fkey_idx.sql\n4.	Populate data (long time needed)\nsimple step:\nshell>./tpcc_loadlocalhost tpcc2500 root xxxx2500\nUsage:  tpcc_load [server] [DBname] [user] [pass] [warehouse]\nref. tpcc_load --help for all options\nload data in parallel (Recommanded)\nshell>./load.sh tpcc2500 2500\ncheck load.sh script, need to modify, add password\n\nStart benchmark:\n1.	Usage\ntpcc_start -h server_host -P port -d database_name -u mysql_user -p mysql_password -w warehouses -c connections -r warmup_time -l running_time -ireport_interval -f report_file -t trx_file\n2.	Example\n./tpcc_start -hlocalhost–dtpcc2500 -uroot -pxxxx–w2500 –c128 -r0 –l10800–i10\n\nBenchmarking parameters:\n2500 warehouses\n128 connections\nWarm up time: 0\nRunning time: 10800\nReport interval: 10 \n</pre>\n\n\n=== SSD initialization ===\n\n==== ATA secure erase ====\n\n* [http://www.manualslib.com/manual/490034/Dell-Poweredge-External-Media-System-1434.html?page=14 Intel 320 SSD ATA Instant Secure Erase Functionality]\n: Intel 320 SSDs support cryptography-based Instant ATA secure erase functionality. The Intel 320 SSD Instant ATA secure ease feature is non-TCG (Trusted Computing Group) based. It supports two modes of crypto secure erase:\n\n:* Normal secure erase—Clears the encryption keys and erases NAND\n:* Enhanced secure erase—Generates new keys and clears NAND.\n\n: The PERC solution only supports the \"crypto erase\" function on TCG-compliant Enterprise SED (Self Encrypting Drive)drives. When an Intel 320 drive is connected to a PERC, there is an incompatibility between PERC TCG method of crypto erase and Intel 320 supported non-TCG based ATA instant secure erase.\n: <span style=\"background:gold\">As a result, the instant secure erase functionality can\'t be used with PERC based solution.</span> The only way to run instant ATA secure ease and use Intel 320 drive secure wiping feature is to connect the drives directly into the motherboard chipset\'s ATA port and issue secure erase command. Intel provides a free utility (Intel SSDToolbox) to instant secure erase the drive, which you can download from www.intel.com/go/ssdtoolbox\n\n==== Talk with JinJin ====\n <pre>\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:42]:\n  Hi, Jinjin  \n  My name is M.J. JUNG (brian.m.jung@samsung.com)\n  introduced by M.S. Kwon in recent mails\n  ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:42]:\n  Hi~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:42]:\n  Ni Hao~ ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:43]:\n  Can I call you Brian or MyungJune?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:43]:\n  Oh, Brian is preferred ! ^^\n  just call me brian  \n  can I call you JinJin?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:43]:\n  yes, sure\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:43]:\n  oh, great ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:43]:\n   \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:43]:\n  I\'ve got your mail regarding the benchmark ~\n  and could I ask you something on that issue? \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:44]:\n  of course\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:44]:\n  oh, thank you  \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:44]:\n  you\'re welcome \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:44]:\n  wow ^___^ \n  is there any reason to use percona version of mysql? ^^\n  actually my current system is Ubuntu running MySQL (original)\n  so, if I should make a test bed \n  exactly same as yours ~\n  I should remove my old DB (mysql) ^^;;;;\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:46]:\n  so special reason, mysql is also Ok, I think, but I\'m not sure whether you can reproduce it with mysql\n  no special reason\n  sorry, typo\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:46]:\n  oh, got your point!\n  (no need to say sorry  ^^ I\'m the king of typo generation hahah)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:47]:\n  haha, so nice of you\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:47]:\n  wow ^^ it\'s great for me to talk to you too!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:47]:\n  i think you can try it on your system first\n  if you can\'t reproduce, then use percona \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:48]:\n  oh, great! and then if I could not generate that same situation on my old system, then I SHOULD change my system, ^^\n  GOT IT!\n   \n  and one more thing to ask !\n  ^^\n  what about the Intel case? \n  I\'ve seen that the red line\n  in your graph~\n  Could you see the same type of red line \n  every time you tested?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:50]:\n  I just test once with Intel case\n  because of time limit\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:50]:\n  ok~ got it ^^\n  then, I can repeat the test for intel case to make it more complete test~ can this help you?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:51]:\n  I think intel case is ok since it\'s stable after one hour test\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:51]:\n  oh,\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:51]:\n  sure\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:51]:\n  did you make the SSD (intel, Samsung) in the  steady-state before each test?\n  (great ^^)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:52]:\n  I\'m not sure \n  i just remove all data on the disk\n  didn\'t erase \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:52]:\n  a-ha! ^^\n  got some point!  \n  we usually\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:52]:\n  maybe that\'s the reason\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:52]:\n  make the SSDs be in the \'steady-state\' before each test, \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:53]:\n  yes, i learn it today\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:53]:\n  because \'steady-state\' makes the performance of SSD be in the stable state\n  Oh great  ^^\n  You may find good article regarding \'steady state\' \n  in the SNIA\n  site\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:54]:\n  thank you! \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:54]:\n  http://www.snia.org/sites/default/education/tutorials/2011/fall/SolidState/EstherSpanjer_The_Why_How_SSD_Performance_Benchmarking.pdf\n  (oh, you\'re quite welcome)\n  oh, this is more updated version.\n  http://www.snia.org/sites/default/files/SNIASSSI.SSDPerformance-APrimer2013.pdf\n  And, maybe HJ Lim send you the script\n  to perform an operation to make \'steady-state\' SSD\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:55]:\n  thank you! I can open it \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:55]:\n  great!^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:56]:\n  yes, he did!\n  I also have one question\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:56]:\n  Please let me know any question or let me get your comments regarding this collaboration - Benchmark test -\n  ok, i\'m ready!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:56]:\n  should I use \"security erase\" or \"Enhanced security erase\" ?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:56]:\n  ah, physically, you mean?\n  maybe not, only if you perform the script HJ Lim gave. \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:57]:\n  in HJ Lim\'s guide, there are two kinds of security erase\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:57]:\n  to be sure, Could you send me the copy of the script that HJ Lim gave to you?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:57]:\n  I don\'t know which one to use\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:58]:\n  Let me check and then answer to you \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:58]:\n  ok, i will send to you\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:58]:\n  ok! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:00]:\n  I have sent it to you\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:00]:\n  Ok, I\'ll check it right now ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:01]:\n   \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:04]:\n  Oh, this way with \'hdparm\', let you have the SSD of clean state (at the virgin state when SSD is manufactured)\n  so, it is preferred  \n  If you have any problem with this, please let me know  \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:05]:\n  so what\'s the difference of steady state and virgin state?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:06]:\n  oh, great question!\n  usually state state means:\n  very bad condition to SSD\n  - because we introduce very harsh IOs to SSD to make the performance of SSD stable (sequential writes and then random writes to SSD for a long time)\n  but virgin state itself can give us the good performance (reportedly)\n  So, I proper to proceed like this.\n  firstly, make the SSD at the virgin state (manufactured state)\n  and then, make the SSD be in the steady-state (by introducing some harsh IO requests - there are well-known script to do this)\n  --- Regarding this way (two steps)\n  , I\'ll check the preferred script to use in this benchmark\n  and then let you know  \n  (also send it to you, if required)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:11]:\n  thank you! your answer is so good!\n  I got your point\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:11]:\n  oh, it\'s my honour to hear that from you\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:11]:\n  so do you have some script to do harsh IO requests?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:12]:\n  yes, my version ^^\n  using FIO\n  you know FIO?\n  (Flexible IO benchmark program)\n  http://freecode.com/projects/fio\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:12]:\n  yes, i have heard of it, but never use it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:13]:\n  But i\'m not sure that script is enough for our benchmark, so I SHOULD check it out to MS KWON.\n  wait a second, please. let me check   I\'ll be back. \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:14]:\n  ok, thank you. I will wait for you...\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:18]:\n  Oh, Jinjin, Long time no see! ^^\n  I\'m back! ^^\n  with a clear answer for you!\n  Ready to talk? ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:19]:\n  haha^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:19]:\n  seems you are ready ^^\n  ok~\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:20]:\n  yes, i\'m ready^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:20]:\n  ^^ yes!!!\n  We will go with Two cases!\n  first case is:\n  using only virgin state. (good for performance, maybe)\n  second case is:\n  make virgin state and then also dirtify script to make it steady state ^^\n  (this is preferred way that SNIA recommends - to make the performance test fair)\n  ----- was my explanation clear ?\n  if not, please ask ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:23]:\n  yes, very clear!\n  I got your point\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:23]:\n  oh, you \'re super smart!!!!!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:23]:\n  thank you !\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:24]:\n  thank you !!! ^___^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:24]:\n  haha^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:24]:\n  (actually, my English is not good~ so I\'ve worried that my talk was unclear -_-; \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:24]:\n  it\'s very happy to talk with you!!!\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:24]:\n  oh~ great for me! TOOO!!!!\n  let\'s have a talk from time to time, any time welcomed!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:25]:\n  I think your english is very good! your type much faster than me\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:25]:\n  oh~~~~~~~~~ ^^;;;\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:25]:\n  sure\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:26]:\n  sure, great!!! i\'ll get back to you when I get some progress! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:26]:\n  ok, thank you again for your help!!\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:26]:\n  oh, you\'re quite welcom!\n  my pleasure!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:27]:\n  any time any questions are welcomed!!!\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:27]:\n  wow, great!!!!^^\n  Ok, CU!! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:27]:\n  CU!\n   \n</pre>\n\n\n <pre>\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:40]:\n  Hi, Jinjin!!! ^^\n  any problem to use the FIO script?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:41]:\n  morning, Brian\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  wow~ Good morning, Jinjin!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  I haven\'t tried it yet\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  oh, no problem~ ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  yesterday, we tried the hdparm\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  if you need any help regarding that, please feel free to tell me ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  seems it doesn\'t work\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  ooops~\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  we are still trying to fix it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:43]:\n  i\'ve also heard sometimes it does not work on some types of SSD\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:43]:\n  there will be some errors when we use hdparm -I /dev/sdc\n  /dev/sdc:\nSG_IO: bad/missing sense data, sb[]:  70 00 05 00 00 00 00 0a 00 00 00 00 20 00                                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  do you have any idea about it?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:44]:\n  oh, did you check the capability with \'hdparm -I /dev/sdc\'\n  ?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:44]:\n  yes\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:44]:\n  large i option\n  oh~\n  what about the report from that command?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:45]:\n  [root@ds-me jinjin]# hdparm -I /dev/sdc\n\n/dev/sdc:\nSG_IO: bad/missing sense data, sb[]:  70 00 05 00 00 00 00 0a 00 00 00 00 20 00                                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n\nATA device, with non-removable media\nStandards:\n        Likely used: 1\nConfiguration:\n        Logical         max     current\n        cylinders       0       0\n        heads           0       0\n        sectors/track   0       0\n        --\n        Logical/Physical Sector size:           512 bytes\n        device size with M = 1024*1024:           0 MBytes\n        device size with M = 1000*1000:           0 MBytes\n        cache/buffer size  = unknown\nCapabilities:\n        IORDY not likely\n        Cannot perform double-word IO\n        R/W multiple sector transfer: not supported\n        DMA: not supported\n        PIO: pio0\n  that\'s the whole output, can you see it?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:46]:\n  oh, seems there\'s no section \'Security\'\n  you might also refer to the site http://tinyapps.org/docs/wipe_drives_hdparm.html\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:47]:\n  ok, thank you! i\'ll read it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:47]:\n  Ok, hope to hear good news from you ^__^\n  ah~\n  one more question ^^\n  Could I ask you how much is the DB file size (in GB) when population is completed?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:49]:\n  sure^^\n  if you populate 2500 warehouses\n  it\'s about 247GB\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:49]:\n  oh~ !!!\n  the place of the 9 DB files must be under /var/lib/mysql/tpcc...\n  right?\n  and one problematic thing for my case is, currently we have no such a super machine with over 128GB DRAM ~ -_-;;\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:52]:\n  yes, the default datadir path is /var/lib/mysql/tpcc...\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:52]:\n  so I could not configure db buffer pool size as 80GB yet \n  Ok, got it!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:53]:\n  you may need to store the tpcc2500 on the SSD for testing\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:53]:\n  you\'re right!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:53]:\n  that\'s ok, just set the db buffer pool size to about 70%~80% of your memory size\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:54]:\n  ok~ good advice! ^^\n  did you configure the place to store TPCC DB in /etc/mysql/my.cnf?\n  or, just using load.sh ?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:54]:\n  yes, you can using /etc/mysql/my.cnf\n  just write the following in my.cnf\n\n [mysqld]\ndatadir=/your/path\n\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:56]:\n  thank you so much, Jinjin! ^^\n  Ok, CU soon! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:57]:\n  you are welcome~~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:57]:\n  hahahah ^^ so nice of you!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:57]:\n  any questions, just let me know^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:58]:\n  oh, great!!!! thank you Jinjin, You Too!!!! (anytime welcomed!) ^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:49]:\n  hi, Jinjin~\n  ^^\n  some small update for you~\n  regarding secure erase failure you mentioned\n  reply anytime when you\'re ready to talk ^__^\n  (maybe you already found this info.)\n  http://www.manualslib.com/manual/490034/Dell-Poweredge-External-Media-System-1434.html?page=14\n  Please see the section \"Intel 320 SSD ATA Instant Secure Erase Functionality\"\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:52]:\n  Hi, Brian~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:52]:\n  Wow! Jinjin!\n  ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:52]:\n  thanks for the info\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:52]:\n  oh, you\'re welcome!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:52]:\n  our server is HP, not Dell\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:53]:\n  oh, I see!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:53]:\n  I\'m still looking for servier configuration\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:53]:\n  what about the HW RAID on your system?\n  do you use HW RAID to access that SSD?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:53]:\n  I think it\'s the server\'s smart array card \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:53]:\n  oh!\n  that\'s the point! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:54]:\n  so now i\'m looking for how to change it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:54]:\n  maybe, that means, your application access to your SSDs through that \"smart array card (HW RAID)\" ~\n  right?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:54]:\n  yes\n  we need to let app access ssd directly\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:55]:\n  yes!!! exactly ^^\n  If your HP system does not allow that bypassing,\n  then, we can try the Plan B.\n  Plan B means, \n  maybe that RAID card controlling screen (during boot? ) support direct Secure Erase (or something like that)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:56]:\n  sorry, brian, i have an urgent issue, i will be back in 15 min\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:56]:\n  ok!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:56]:\n  CU soon\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:56]:\n  no prob!\n  CU soon!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 6:23]:\n  Hi~ brian\n  i\'m back~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 6:24]:\n  Oh~~ ^^ Welcome back!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 6:25]:\n  yes, the plan B can be supported, I see in the guide they have a tool to do secure erase druing boot\n  but I haven\'t tried it\n  it\'s not convienent because we can\'t use script to do it\n  i\'ll try to find the way to bypass raid\n  thank you agian for your advice^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 6:46]:\n  Sorry Jinjin for no response (been away from my desk), ^^;;;;  Ok, I\'ll also check another way to work around  \n  Thank you for your kind explanation ^__^, and let\'s talk again tomorrow~  \n</pre>\n\n== ## bNote-2013-12-10 ==\n\n\n\n=== PCIe Specification ===\n\nhttp://komposter.com.ua/documents/PCI_Express_Base_Specification_Revision_3.0.pdf\n\n\n=== NVMe Tutorial ===\n\n: [http://www.flashmemorysummit.com/English/Collaterals/Proceedings/2013/20130812_PreConfD_Marks.pdf By Kevin Marks, Dell, Inc. Flash Memory Summit 2013 Santa Clara, CA]\n\n\n* NVMe defines an optimized queuing interface, command set, feature set for PCIe SSDs\n\n\n* NVMe release timeline\n:- NVMe 1.0 release (2011-03-01)\n::- Queuing interface\n::- NVM command set, admin command set\n::- End-to-end protection (DIF/DIX), security\n::- Physical region pages (PRPs)\n:- NVMe 1.1 release (2012-10-11)\n::- General Scatter/Gather Lists (SGLs)\n::- Multi-path I/O & namespace sharing\n::- Reservations\n::- Autonomous power transitions during idle\n\n\n* advanced points of NVMe relative to AHCI\n:- Remove uncacheable reads from command issue/completion\n::- ??? uncacheable reads? why so bad to remove?\n:- Minimize MIMO writes in command issue/completion path\n::- ??? MIMO? why bad to minimize?\n:- Support for deep command queues and to simplify command decoding and processing\n::- ??? what method to simplify?\n:- Support MSI-X / flexible interrupt aggregation\n::- ??? what is flexible interrupt aggregation? is it different from MSI-X?\n:- Support for many core systems\n::- ??? concretely how?\n:- Support enterprise features\n::- ??? exactly what?\n:- Comprehensive statistics / health status reporting / robust error reporting & handling\n::- ???\n\n\n* NVMe usage model\n:- Server caching\n::- used to reduce memory footprint\n::- for temporary data\n:- Server storage\n::- for persistent data\n::- Redundant (i.e., RAID\'ed)\n::- commonly used as tier-0 storage\n:- Client storage\n::- used for boot/os-partition/HDD-cache\n::- non-redundant\n::- power optimized\n:- External storage\n::- used for metadata or data\n::- multi-ported device\n::- redundancy based on usage\n\n\n* NVMe queues\n:- NVMe uses circular queues to pass messages (e.g., commands and command completion notifications.)\n:- The queues may be located anywhere in PCIe memory\n::- Typically queues are located in host memory\n::- Queues may consist of a contiguous block of physical memory\n::  or optionally a non-contiguous set of physical memory pages (defined by a PRP List)\n:- A Queue consists of set of fixed sized elements\n:- Tail\n::- Points to next free element\n::- If an element is added to the element pointed to by the tail,\n::  the tail is incremented to point to next free element taking wrapping into consideration\n:- Head\n::- Points to next entry to be pulled off, if queue is not empty\n::- If an element is removed from the element pointed to by the head,\n::  the head is incremented to point to the next element taking wrapping into consideration\n:- Queue Size (Usable)\n::- Number of entries in the queue - 1\n::- Minimum size is 2, Maximum is ~ 64K for IO  Queues and 4K for Admin Queue\n:- Queue Empty\n::- Head == Tail\n:- Queue Full\n::- Head == Tail + 1 (mod # of queue entries)\n\n\n* Types of queues\n:- Admin queue for admin command set\n::- One per NVMe controller with up to 4K elements per queue\n::- Used to configure IO queues and controller/feature management\n:- IO queues for IO command sets (e.g., NVM command set)\n::- Up to 64K queues per NVMe controller with up to 64K elements per queue\n::- Used to submit/complete IO commands\n:- , where each type of queue (admin queue, IO queues) has\n::- Submission queue (SQ)\n:::- Queues messages from host to controller\n:::- Used to submit commands\n:::- Identified by SQ ID\n::- Completion queue (CQ)\n:::- Queues messages from controller to host\n:::- Used to post command completions\n:::- Identified by CQ ID\n:::- May have an independent MSI-X interrupt per completion queue\n: /* NVMe queues are messaging queues, not command queues -- What does this mean? */\n\n\n\n* Scalable queuing interface\n:- Enables NUMA optimized drivers\n::- Per core: one or more SQ, one CQ, and one MSI-X interrupt\n::- High performance and low latency command issue\n::- No locking between cores\n:- Up to ~2^32 outstanding commands\n::- Support for up to ~64K IO submission and completion queues\n::- Each queue supports up to ~64K outstanding commands\n\n\n\n* Command arbitration\n:- All controllers support round robin (RR) arbitration\n::- RR{ASQ, SQ, SQ, ..., SQ}\n:- An NVMe controller may support weighted round robin (WRR) with urgent priority class arbitration\n::- Priority{Strict_Priority_1, Strict_Priority_2, Strict_Priority_3}\n:::- Strict_Priority_1{ASQ}\n:::- Strict_Priority_2{RR{SQ.urgent, SQ.urgent}}\n:::- Strict_Priority_3{WRR{\n::::- Weight_High.RR{SQ.high, SQ.high, SQ.high},\n::::- Weight_Medium.RR{SQ.medium, SQ.medium, SQ.medium},\n::::- Weight_Low.RR{SQ.low, SQ.low, SQ.low}\n::: }}\n\n\n\n* Arbitration primitives\n:- Priority Arb. Vs. WRR Arb.\n::- Example above shown with an arbitration burst of no limit\n::- NVMe supports an arbitration burst of 1, 2, 4, 8, 16, 32, 64 and no limit\n::- NVMe supports 8-bit WRR weights\n\n\n\n* NVMe controller register map\n{| class=\"wikitable sortable\"\n|-\n| Start || End || Symbol || Description\n|-\n| 00h || 07h || CAP || Controller Capabilities\n|-\n|}\n\n\n\n* Controller initialization\n\n\n\n* SQ element with PRBs (64B)\n\n\n\n* Physical Region Pages (PRBs)\n\n\n\n* Example: PRP, PRP list\n\n\n\n* SQ element with SGLs (64B)\n\n\n\n* Scatter Gather List (SGL)\n\n\n\n* CQ element (16B)\n\n\n\n* Phase tag operation\n\n\n\n* NVMe command sets\n:- Command set = { Admin Command Set, IO Command Set = { NVM Cmd Set, Rsvd #1, Rsvd #2, Rsvd #3 } }\n\n\n\n* Admin commands\n{| class=\"wikitable sortable\"\n|-\n| Category || Command || Required/Optional\n|-\n| rowspan=\"4\" | Queue Management\n| Create IO Submission Queue\n| Required\n|-\n| Delete IO Submission Queue\n| Required\n|-\n| Create IO Completion Queue\n| Required\n|-\n| Delete IO Completion Queue\n| Required\n|-\n| rowspan=\"3\" | Configuration\n| Identify\n| Required\n|-\n| Get Features\n| Required\n|-\n| Set Features\n| Required\n|-\n| rowspan=\"2\" | Status Reporting\n| Get Log Pages\n| Required\n|-\n| Asynchronous Event Request\n| Required\n|-\n| Abort Command\n| Abort\n| Required\n|-\n| rowspan=\"2\" | Firmware Update/Management\n| Firmware Image Download\n| Optional\n|-\n| Firmware Activate\n| Optional\n|-\n| IO Command Set Specific\n| IO Command Set Specific Commands\n| Optional\n|-\n| Vendor Specific\n| Vendor Specific Commands\n| Optional\n|-\n|}\n: All admin commands use PRPs\n\n\n\n* Create IO SQ\n:- Queue Priority (OPRIO)\n:- Physically Contiguous (PC)\n\n\n\n* Create IO CQ\n:- Interrupt Enable (IEN)\n:- Physically Contiguous (PC)\n\n\n\n* Identify\n\n\n\n* Active namespace reporting\n\n\n\n* Identify controller data structure\n\n== ## bNote-2013-12-09 ==\n\n\n\n=== NVMe IO stack analysis ===\n\n\n==== nvme source code ====\n\n\n <pre>\n\nblusjune@buddy-guy:~ %1$ cat /x/t/nvme_iostack_analysis.c\n\n\nnvme_probe(struct pci_dev *pdev, const struct pci_device_id *id)\n{\n        struct nvme_dev * dev;\n        /*\n         * memory space will be allocated to \'dev\'\n         * and then\n         * \'dev->entry\' will have memory space\n         *      proportional to the \'num_possible_cpus()\'\n         * \'dev->queues\' will have memory space\n         *      proportional to the \'num_possible_cpus() + 1\' <- why \'+1\' here?\n         * , where num_possible_cpus() means\n         *      number of cpus populatable (fixed at boot time),\n         *      i.e., set of CPU id\'s possible to be plugged in\n         *      at anytime during the life of system boot\n         */\n\n\n        // ...\n\n\n        dev->pci_dev = pdev; // pdev argument will be assigned to \'dev->pci_dev\'\n\n\n        result = nvme_set_instance(dev);\n        /*\n         * allocate new integer ID to dev->instance\n         *\n         * Internally, this uses Idr (integer ID management)\n         * , where Idr is a set of library functions\n         *      for the management of small integer ID numbers.\n         *      In essence, an idr object can be thought of\n         *      as a sparse array mapping integer IDs onto arbitrary pointers,\n         *      with a \"get me an available entry\" function as well.\n         *\n         * URL: http://lwn.net/Articles/103209/\n         */\n\n\n        result = nvme_setup_prp_pools(dev);\n        /*\n         * dev->prp_page_pool = dma_pool_create(\"prp list page\",\n         *      &dev->pci_dev->dev, PAGE_SIZE, PAGE_SIZE, 0)\n         *\n         * and the comment says that there is an optimization\n         * for I/Os between 4k and 128k (is it still 128k? not 256k?)\n         * by the following code:\n         * dev->prp_small_pool = dma_pool_create(\"prp list 256\",\n         *      &dev->pci_dev->dev, 256, 256, 0);\n         *\n         * PRPs (Physical Region Pages) contains\n         * the 64-bit physical memory page address.\n         * The lower bits (n:2) of this field indicate\n         * the offset within the memory page\n         * n is defined by the memory page size (CC.MPS)\n         *\n         * PRP list contains a list of PRPs with generally no offsets\n         * which means non-contiguous set of physical memory pages\n         *\n         * mm/dmapool.c:dma_pool_create(const char * name, struct device *dev, sizt_t size, size_t align, size_t boundary)\n         *\n         */\n\n\n        result = nvme_dev_start(dev);\n        /*\n         * nvme_dev_start() {\n         *      nvme_dev_map(dev);\n         *      nvme_configure_admin_queue(dev);\n         *      list_add(&dev->node, &dev_list);\n         *      nvme_setup_io_queues(dev);\n         * }\n         */\n\n\n        result = nvme_dev_add(dev);\n\n\n}\n\n\ndrivers/block/nvme-core.c:nvme_setup_io_queues()\n{\n        (int) nr_io_queues = num_online_cpus();\n\n}\n\n</pre>\n\n==== Vectored I/O (a.k.a scatter/gather I/O) ====\n\n* <span style=\"background:gold\">Why vectored I/O in NVMe and DMA?</span>\n\n\n* Vectored I/O (a.k.a scatter/gather I/O) is a method of input and output by which a single procedure call sequentially writes data from multiple buffers to a single data stream or reads data from a data stream to multiple buffers.\n\n* The buffers are given in a vector of buffers. Scatter/gather refers to the process of gathering data from, or scattering data into, the given set of buffers.\n\n* Vectored I/O can operate synchronously or asynchronously.\n\n* The main reasons for using vectored I/O are efficiency and convenience.\n\n\n\n* Several usages for vectored I/O:\n\n:* Atomicity\n:: If the particular vectored I/O implementation supports atomicity, a process can write into or read from a set of buffers to or from a file without risk that another thread or process might perform I/O on the same file between the first process\' reads or writes, thereby corrupting the file or compromising the integrity of the input\n\n:* Concatenating output\n:: An application that wants to write non-sequentially placed data in memory can do so in one vectored I/O operation. For example, writing a fixed-size header and its associated payload data that are placed non-sequentially in memory can be done by a single vectored I/O operation without first concatenating the header and the payload to another buffer\n\n:* Efficiency\n:: One vectored I/O read or write can replace many ordinary reads or writes, and thus save on the overhead involved in syscalls\n\n:* Splitting input\n:: When reading data that is in a format that defines a fixed-size header, one can use a vector of buffers in which the first buffer is the size of that header; and the second buffer will contain the data associated with the header\n\n\n\n\n* Implementation cases as system calls\n: readv() and writev()\n\n=== Barrier option in Ext3/Ext4 file system ===\n\n\n* Article 1 (kernelnewbies.org) <ref>http://kernelnewbies.org/Ext4</ref>\nThis is an option that improves the integrity of the filesystem at the cost of some performance (you can disable it with \"mount -o barrier=0\", recommended trying it if you\'re benchmarking). From this LWN article: \"The filesystem code must, before writing the [journaling] commit record, be absolutely sure that all of the transaction\'s information has made it to the journal. Just doing the writes in the proper order is insufficient; contemporary drives maintain large internal caches and will reorder operations for better performance. So the filesystem must explicitly instruct the disk to get all of the journal data onto the media before writing the commit record; if the commit record gets written first, the journal may be corrupted. The kernel\'s block I/O subsystem makes this capability available through the use of barriers; in essence, a barrier forbids the writing of any blocks after the barrier until all blocks written before the barrier are committed to the media. \'\'\'By using barriers, filesystems can make sure that their on-disk structures remain consistent at all times.\"\'\'\'\n\n\n* Article 2 (Redhat) <ref>https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Storage_Administration_Guide/writebarrieronoff.html</ref>\nTo mitigate the risk of data corruption during power loss, some storage devices use battery-backed write caches. Generally, high-end arrays and some hardware controllers use battery-backed write caches. However, because the cache\'s volatility is not visible to the kernel, Red Hat Enterprise Linux 6 enables write barriers by default on all supported journaling file systems.\n\n:- Performance issues\n:: Write caches are designed to increase I/O performance. However, enabling write barriers means constantly flushing these caches, which can significantly reduce performance.\n\n:- How to disable barrier option?\n:: For devices with non-volatile, battery-backed write caches and those with write-caching disabled, you can safely disable write barriers at mount time using the -o nobarrier option for mount. However, some devices do not support write barriers; such devices will log an error message to /var/log/messages (refer to Table 22.1, “Write barrier error messages per file system”).\n\n:- Write barrier error messages per file system\n{| class=\"wikitable sortable\"\n|-\n| File system || Error Message\n|-\n| ext3/ext4 || JBD: barrier-based sync failed on device - disabling barriers\n|-\n| XFS || Filesystem device - Disabling barriers, trial barrier write failed\n|-\n| btrfs || btrfs: disabling barriers on dev device\n|-\n|}\n\n\n\n=== Virtualization (KVM/QEMU/Xen) & IO Management ===\n\n\n==== KVM and QEMU ====\n* KVM과 QEMU 간의 역할 분담?\n\n==== Xen and QEMU ====\n* Xen이 QEMU를 어떻게 사용하는가?\n\n\n==== KVM/QEMU Storage Stack Performance Discussion (2010 Linux Plumbers Conference) ====\n\n* The State of KVM Block I/O Performance: Where We Are\n: The 50,000-foot View – QEMU Storage Stack\n: Where We Are Against Another “Popular” Hypervisor\n\n* Discussion: KVM / QEMU Settings\n: VirtIO vs. IDE emulation\n: KVM caching (cache=none vs. cache=writethrough)\n: Linux AIO support\n: No Barrier (barrier is enabled by default in ext4)\n: IO Schedulers: Deadline vs. CFQ\n: x2APIC support\n: AIO vs. threads\n: File Systems\n\n* Discussion: KVM Block I/O Performance Issues\n: Low Throughput\n: High (Virtual) CPU Usage In KVM Guests\n: Virtual Disk Image Formats\n: Others ?\n\n== ## bNote-2013-12-07 ==\n\n# [[NVMe Vs. AHCI]]\n# NVMe queue management mechanism\n# NVMe problem statement (PCI1320 Bus fatal error on bus 0 device 2 function 0 Power cycle system)\n# [[NVMe stack in Linux kernel (3.13.0-rc2, 2013-12-05)]]\n# [[Mediawiki color map]]\n\n== ## bNote-2013-12-06 ==\n\n\n<!--\n=== All pages at Wikini as of 2013-12-06 ===\n\n <pre>\n\n(News) 네트워크 업계 \"기다렸다, 런던올림픽\"	(News) 아카마이, \"CDN 넘어 하이퍼커넥티드로\"	(News) 아카마이, \"스트리밍/보안 서비스를 빠르고 안전하게\"\n(News) 아카마이, \"쌩쌩 웹사이트 만들려면\"	(News) 아카마이, \'블레이즈\' 인수 - 인텔리전트 플랫폼 강화	(News) 아카마이, CDN 장악 가속화 ... 코텐도 인수설\nAcademia intelligence	Artificial Neural Network	Artificial neural network\nBcode python cache lru	Bnote - References ( Papers / Patents / Articles )	Bnote 2013\nBnote 2013-01	Bnote 2013-02	Bnote 2013-03\nBnote 2013-04	Bnote 2013-05	Bnote 2013-06\nBnote 2013-07	Bnote 2013-08	Bnote 2013-09\nBnote 2013-10	Bnote 2013-11	Bnote 2013-12\nBnote Frequent Itemset Mining (FIM) / Association Rule Mining (ARM)	Bnote R	Bnote patidea 2013\nBnote patidea 2013-001	Bnote patidea 2013-002	Bnote patidea 2013-003\nBnote python	Bnote scratchpad	Brian Myungjune JUNG\nByung-Gon Chun	Cache algorithms	Conference: ACM SIGMOD 2013\nCurriculum vitae - Brian Myungjune JUNG	Curriculum vitae - Brian Myungjune JUNG (CV Brian)	DIMM\nData analytics	Data mining	Deep learning\nDefense Logic -- Big Data Platform Research in SAIT	Dm-cache	Exemplary .gnuplot configuration file for beautiful gnuplot graphs\nFoobar	GRUB 2	Git server on my local machine\nHidden Markov model (HMM)	Hierarchical temporal memory	I/O Workload Analysis\nI/O tracing on Microsoft Windows using xperf	IBM GPFS	IEEE ICCE 2014 Paper\nIOWA.data.tpcc 250gb 48h.mysql.R.addr:: Offset 100K, Len 1K	Industry intelligence - Flash Memory Summit 2013	Industry intelligence - big data\nIndustry intelligence - storage	Intelligent Battery Management System	Kworker\nLecture: Neural Networks for Machine Learning (by Geoffrey Hinton)	Lecture notes and online courses	Linux kernel\nLinux kernel - block layer plug/unplug	List of English stop words	List of Meta Files in Windows NTFS\nList of important processes in Microsoft Windows operating systems	Main Page	Master File Table in NTFS\nMixture model	NVM express	Nimble Storage\nOnline courses	OpenStack	Operating systems - Linux kernel\nPCI Express	PaperStudy // An Analysis of Traces from a Production MapReduce Cluster // CCGrid 2010	Periodicity transform\nPure Storage	RapidIO	Restricted Boltzmann machines\nStatistical computing software	System info 16-node cluster	TPC-C\nTemplate patidea	Text summarization	Tf-idf\nThoughts on In Memory Databases (Part 1)	Trick mode	Tutorial -- SSD caching using dm-cache\nUSENIX FAST 2013	Why In-Memory Computing Needs Flash	Windows Programming on Linux with MinGW\nWorkload analysis-driven system architecture design	Writing guide - software patent	X intelligence\nXen hypervisor\n\n</pre>\n-->\n\n=== KVM/QEMU Architecture and IO Stack ===\n\n* [https://www.google.co.kr/search?q=why+is+qemu+windows+so+slow&rlz=1C1OPRB_enKR556KR556&oq=why+is+qemu+windows+so+slow&aqs=chrome..69i57.14138j0j4&sourceid=chrome&espv=210&es_sm=122&ie=UTF-8#es_sm=122&espv=210&newwindow=1&q=IO+stack+qemu Google{IO stack qemu}]\n\n* [http://pic.dhe.ibm.com/infocenter/lnxinfo/v3r0m0/topic/liaav/LPCKVMSSPV2.1.pdf \"KVM / QEMU Storage Stack Performance Discussion,\" IBM, Linux Plumbers Conference 2010]\n\n* [http://events.linuxfoundation.org/slides/2011/linuxcon-japan/lcj2011_hajnoczi.pdf \"An Updated Overview of the QEMU Storage Stack,\" IBM, LinuxCon Japan 2011]\n\n* [http://www.linuxplumbersconf.org/2010/ocw/system/presentations/651/original/Optimizing_the_QEMU_Storage_Stack.pdf \"Optimizing the QEMU Storage Stack,\" IBM, Linux Plumbers Conference 2010]\n\n* [http://www.fujitsu.com/downloads/MAG/vol47-3/paper18.pdf \"Kernel-based Virtual Machine Technology\", Yoshihito Goro, Fujitsu Journal 2011]\n\n\n=== NVMe DAS test bed architecture ===\n\n{| class=\'wikitable sortable\'\n|-\n| LVol-00 || LVol-01 || LVol-02 || LVol-03 || LVol-04 || LVol-05 || LVol-06 || LVol-07\n|-\n|-\n| colspan=5 | nvme0n1p1 (484.61 GiB)\n| colspan=3 | nvme1n1p1 (260.61 GiB)\n|-\n| colspan=4 | /dev/nvme0n1 (372.61 GiB)\n| colspan=4 | /dev/nvme1n1 (372.61 GiB)\n|-\n|}\n\n== ## bNote-2013-12-04 ==\n\n\n=== OpenStack quota-update ===\n\n <pre>\n\nroot@grant-green:work %1# keystone tenant-list\n+----------------------------------+---------+---------+\n|                id                |   name  | enabled |\n+----------------------------------+---------+---------+\n| df7559de417a4968ad34f95b9dda5a4e |  admin  |   True  |\n| ad4662d7ec1249789feb2fad24e9f2e5 | service |   True  |\n+----------------------------------+---------+---------+\n\nroot@grant-green:work %1# nova quota-show\n+-----------------------------+-------+\n| Quota                       | Limit |\n+-----------------------------+-------+\n| instances                   | 48    |\n| cores                       | 96    |\n| ram                         | 51200 |\n| floating_ips                | 10    |\n| fixed_ips                   | -1    |\n| metadata_items              | 128   |\n| injected_files              | 5     |\n| injected_file_content_bytes | 10240 |\n| injected_file_path_bytes    | 255   |\n| key_pairs                   | 100   |\n| security_groups             | 10    |\n| security_group_rules        | 20    |\n+-----------------------------+-------+\n\nroot@grant-green:work %1# nova quota-update --instance 48 --cores 96 df7559de417a4968ad34f95b9dda5a4e\n\nroot@grant-green:work %1# nova quota-show\n+-----------------------------+-------+\n| Quota                       | Limit |\n+-----------------------------+-------+\n| instances                   | 48    |\n| cores                       | 96    |\n| ram                         | 51200 |\n| floating_ips                | 10    |\n| fixed_ips                   | -1    |\n| metadata_items              | 128   |\n| injected_files              | 5     |\n| injected_file_content_bytes | 10240 |\n| injected_file_path_bytes    | 255   |\n| key_pairs                   | 100   |\n| security_groups             | 10    |\n| security_group_rules        | 20    |\n+-----------------------------+-------+\n\n</pre>\n\n=== Linux kernel debugging using QEMU ===\n\n* [http://files.meetup.com/1590495/debugging-with-qemu.pdf Debugging Linux systems using GDB and QEMU]\n* [http://elinux.org/Debugging_The_Linux_Kernel_Using_Gdb Debugging the Linux Kernel Using GDB]\n\n\n\n=== Linux kernel (3.8.0) NVMe stack ===\n\n\n==== include/linux/nvme.h ====\n\n <pre>\n 24 struct nvme_bar {\n 25         __u64                   cap;    /* Controller Capabilities */\n 26         __u32                   vs;     /* Version */\n 27         __u32                   intms;  /* Interrupt Mask Set */\n 28         __u32                   intmc;  /* Interrupt Mask Clear */\n 29         __u32                   cc;     /* Controller Configuration */\n 30         __u32                   rsvd1;  /* Reserved */\n 31         __u32                   csts;   /* Controller Status */\n 32         __u32                   rsvd2;  /* Reserved */\n 33         __u32                   aqa;    /* Admin Queue Attributes */\n 34         __u64                   asq;    /* Admin SQ Base Address */\n 35         __u64                   acq;    /* Admin CQ Base Address */\n 36 };\n</pre>\n\n\n\n <pre>\n 42 \n 43 enum {\n 44         NVME_CC_ENABLE          = 1 << 0,\n 45         NVME_CC_CSS_NVM         = 0 << 4,\n 46         NVME_CC_MPS_SHIFT       = 7,\n 47         NVME_CC_ARB_RR          = 0 << 11,\n 48         NVME_CC_ARB_WRRU        = 1 << 11,\n 49         NVME_CC_ARB_VS          = 7 << 11,\n 50         NVME_CC_SHN_NONE        = 0 << 14,\n 51         NVME_CC_SHN_NORMAL      = 1 << 14,\n 52         NVME_CC_SHN_ABRUPT      = 2 << 14,\n 53         NVME_CC_IOSQES          = 6 << 16,\n 54         NVME_CC_IOCQES          = 4 << 20,\n 55         NVME_CSTS_RDY           = 1 << 0,\n 56         NVME_CSTS_CFS           = 1 << 1,\n 57         NVME_CSTS_SHST_NORMAL   = 0 << 2,\n 58         NVME_CSTS_SHST_OCCUR    = 1 << 2,\n 59         NVME_CSTS_SHST_CMPLT    = 2 << 2,\n 60 };\n 61 \n</pre>\n\n\n\n <pre>\n109 \n110 struct nvme_lbaf {\n111         __le16                  ms;\n112         __u8                    ds;\n113         __u8                    rp;\n114 };\n115 \n116 struct nvme_id_ns {\n117         __le64                  nsze;\n118         __le64                  ncap;\n119         __le64                  nuse;\n120         __u8                    nsfeat;\n121         __u8                    nlbaf;\n122         __u8                    flbas;\n123         __u8                    mc;\n124         __u8                    dpc;\n125         __u8                    dps;\n126         __u8                    rsvd30[98];\n127         struct nvme_lbaf        lbaf[16];\n128         __u8                    rsvd192[192];\n129         __u8                    vs[3712];\n130 };\n131 \n132 enum {\n133         NVME_NS_FEAT_THIN       = 1 << 0,\n134         NVME_LBAF_RP_BEST       = 0,\n135         NVME_LBAF_RP_BETTER     = 1,\n136         NVME_LBAF_RP_GOOD       = 2,\n137         NVME_LBAF_RP_DEGRADED   = 3,\n138 };\n139 \n140 struct nvme_lba_range_type {\n141         __u8                    type;\n142         __u8                    attributes;\n143         __u8                    rsvd2[14];\n144         __u64                   slba;\n145         __u64                   nlb;\n146         __u8                    guid[16];\n147         __u8                    rsvd48[16];\n148 };\n149 \n150 enum {\n151         NVME_LBART_TYPE_FS      = 0x01,\n152         NVME_LBART_TYPE_RAID    = 0x02,\n153         NVME_LBART_TYPE_CACHE   = 0x03,\n154         NVME_LBART_TYPE_SWAP    = 0x04,\n155 \n156         NVME_LBART_ATTRIB_TEMP  = 1 << 0,\n157         NVME_LBART_ATTRIB_HIDE  = 1 << 1,\n158 };\n159 \n\n</pre>\n\n\n\n <pre>\n159 \n160 /* I/O commands */\n161 \n162 enum nvme_opcode {\n163         nvme_cmd_flush          = 0x00,\n164         nvme_cmd_write          = 0x01,\n165         nvme_cmd_read           = 0x02,\n166         nvme_cmd_write_uncor    = 0x04,\n167         nvme_cmd_compare        = 0x05,\n168         nvme_cmd_dsm            = 0x09,\n169 };\n170 \n171 struct nvme_common_command {\n172         __u8                    opcode;\n173         __u8                    flags;\n174         __u16                   command_id;\n175         __le32                  nsid;\n176         __u32                   cdw2[2];\n177         __le64                  metadata;\n178         __le64                  prp1;\n179         __le64                  prp2;\n180         __u32                   cdw10[6];\n181 };\n182 \n183 struct nvme_rw_command {\n184         __u8                    opcode;\n185         __u8                    flags;\n186         __u16                   command_id;\n187         __le32                  nsid;\n188         __u64                   rsvd2;\n189         __le64                  metadata;\n190         __le64                  prp1;\n191         __le64                  prp2;\n192         __le64                  slba;\n193         __le16                  length;\n194         __le16                  control;\n195         __le32                  dsmgmt;\n196         __le32                  reftag;\n197         __le16                  apptag;\n198         __le16                  appmask;\n199 };\n200 \n201 enum {\n202         NVME_RW_LR                      = 1 << 15,\n203         NVME_RW_FUA                     = 1 << 14,\n204         NVME_RW_DSM_FREQ_UNSPEC         = 0,\n205         NVME_RW_DSM_FREQ_TYPICAL        = 1,\n206         NVME_RW_DSM_FREQ_RARE           = 2,\n207         NVME_RW_DSM_FREQ_READS          = 3,\n208         NVME_RW_DSM_FREQ_WRITES         = 4,\n209         NVME_RW_DSM_FREQ_RW             = 5,\n210         NVME_RW_DSM_FREQ_ONCE           = 6,\n211         NVME_RW_DSM_FREQ_PREFETCH       = 7,\n212         NVME_RW_DSM_FREQ_TEMP           = 8,\n213         NVME_RW_DSM_LATENCY_NONE        = 0 << 4,\n214         NVME_RW_DSM_LATENCY_IDLE        = 1 << 4,\n215         NVME_RW_DSM_LATENCY_NORM        = 2 << 4,\n216         NVME_RW_DSM_LATENCY_LOW         = 3 << 4,\n217         NVME_RW_DSM_SEQ_REQ             = 1 << 6,\n218         NVME_RW_DSM_COMPRESSED          = 1 << 7,\n219 };\n220 \n221 /* Admin commands */\n222 \n223 enum nvme_admin_opcode {\n224         nvme_admin_delete_sq            = 0x00,\n225         nvme_admin_create_sq            = 0x01,\n226         nvme_admin_get_log_page         = 0x02,\n227         nvme_admin_delete_cq            = 0x04,\n228         nvme_admin_create_cq            = 0x05,\n229         nvme_admin_identify             = 0x06,\n230         nvme_admin_abort_cmd            = 0x08,\n231         nvme_admin_set_features         = 0x09,\n232         nvme_admin_get_features         = 0x0a,\n233         nvme_admin_async_event          = 0x0c,\n234         nvme_admin_activate_fw          = 0x10,\n235         nvme_admin_download_fw          = 0x11,\n236         nvme_admin_format_nvm           = 0x80,\n237         nvme_admin_security_send        = 0x81,\n238         nvme_admin_security_recv        = 0x82,\n239 };\n240 \n241 enum {\n242         NVME_QUEUE_PHYS_CONTIG  = (1 << 0),\n243         NVME_CQ_IRQ_ENABLED     = (1 << 1),\n244         NVME_SQ_PRIO_URGENT     = (0 << 1),\n245         NVME_SQ_PRIO_HIGH       = (1 << 1),\n246         NVME_SQ_PRIO_MEDIUM     = (2 << 1),\n247         NVME_SQ_PRIO_LOW        = (3 << 1),\n248         NVME_FEAT_ARBITRATION   = 0x01,\n249         NVME_FEAT_POWER_MGMT    = 0x02,\n250         NVME_FEAT_LBA_RANGE     = 0x03,\n251         NVME_FEAT_TEMP_THRESH   = 0x04,\n252         NVME_FEAT_ERR_RECOVERY  = 0x05,\n253         NVME_FEAT_VOLATILE_WC   = 0x06,\n254         NVME_FEAT_NUM_QUEUES    = 0x07,\n255         NVME_FEAT_IRQ_COALESCE  = 0x08,\n256         NVME_FEAT_IRQ_CONFIG    = 0x09,\n257         NVME_FEAT_WRITE_ATOMIC  = 0x0a,\n258         NVME_FEAT_ASYNC_EVENT   = 0x0b,\n259         NVME_FEAT_SW_PROGRESS   = 0x0c,\n260 };\n261 \n</pre>\n\n\n\n\n <pre>\n261 \n262 struct nvme_identify {\n263         __u8                    opcode;\n264         __u8                    flags;\n265         __u16                   command_id;\n266         __le32                  nsid;\n267         __u64                   rsvd2[2];\n268         __le64                  prp1;\n269         __le64                  prp2;\n270         __le32                  cns;\n271         __u32                   rsvd11[5];\n272 };\n273 \n274 struct nvme_features {\n275         __u8                    opcode;\n276         __u8                    flags;\n277         __u16                   command_id;\n278         __le32                  nsid;\n279         __u64                   rsvd2[2];\n280         __le64                  prp1;\n281         __le64                  prp2;\n282         __le32                  fid;\n283         __le32                  dword11;\n284         __u32                   rsvd12[4];\n285 };\n286 \n287 struct nvme_create_cq {\n288         __u8                    opcode;\n289         __u8                    flags;\n290         __u16                   command_id;\n291         __u32                   rsvd1[5];\n292         __le64                  prp1;\n293         __u64                   rsvd8;\n294         __le16                  cqid;\n295         __le16                  qsize;\n296         __le16                  cq_flags;\n297         __le16                  irq_vector;\n298         __u32                   rsvd12[4];\n299 };\n300 \n301 struct nvme_create_sq {\n302         __u8                    opcode;\n303         __u8                    flags;\n304         __u16                   command_id;\n305         __u32                   rsvd1[5];\n306         __le64                  prp1;\n307         __u64                   rsvd8;\n308         __le16                  sqid;\n309         __le16                  qsize;\n310         __le16                  sq_flags;\n311         __le16                  cqid;\n312         __u32                   rsvd12[4];\n313 };\n314 \n315 struct nvme_delete_queue {\n316         __u8                    opcode;\n317         __u8                    flags;\n318         __u16                   command_id;\n319         __u32                   rsvd1[9];\n320         __le16                  qid;\n321         __u16                   rsvd10;\n322         __u32                   rsvd11[5];\n323 };\n324 \n325 struct nvme_download_firmware {\n326         __u8                    opcode;\n327         __u8                    flags;\n328         __u16                   command_id;\n329         __u32                   rsvd1[5];\n330         __le64                  prp1;\n331         __le64                  prp2;\n332         __le32                  numd;\n333         __le32                  offset;\n334         __u32                   rsvd12[4];\n335 };\n336 \n</pre>\n\n\n\n\n <pre>\n336 \n337 struct nvme_command {\n338         union {\n339                 struct nvme_common_command common;\n340                 struct nvme_rw_command rw;\n341                 struct nvme_identify identify;\n342                 struct nvme_features features;\n343                 struct nvme_create_cq create_cq;\n344                 struct nvme_create_sq create_sq;\n345                 struct nvme_delete_queue delete_queue;\n346                 struct nvme_download_firmware dlfw;\n347         };\n348 };\n349 \n350 enum {\n351         NVME_SC_SUCCESS                 = 0x0,\n352         NVME_SC_INVALID_OPCODE          = 0x1,\n353         NVME_SC_INVALID_FIELD           = 0x2,\n354         NVME_SC_CMDID_CONFLICT          = 0x3,\n355         NVME_SC_DATA_XFER_ERROR         = 0x4,\n356         NVME_SC_POWER_LOSS              = 0x5,\n357         NVME_SC_INTERNAL                = 0x6,\n358         NVME_SC_ABORT_REQ               = 0x7,\n359         NVME_SC_ABORT_QUEUE             = 0x8,\n360         NVME_SC_FUSED_FAIL              = 0x9,\n361         NVME_SC_FUSED_MISSING           = 0xa,\n362         NVME_SC_INVALID_NS              = 0xb,\n363         NVME_SC_LBA_RANGE               = 0x80,\n364         NVME_SC_CAP_EXCEEDED            = 0x81,\n365         NVME_SC_NS_NOT_READY            = 0x82,\n366         NVME_SC_CQ_INVALID              = 0x100,\n367         NVME_SC_QID_INVALID             = 0x101,\n368         NVME_SC_QUEUE_SIZE              = 0x102,\n369         NVME_SC_ABORT_LIMIT             = 0x103,\n370         NVME_SC_ABORT_MISSING           = 0x104,\n371         NVME_SC_ASYNC_LIMIT             = 0x105,\n372         NVME_SC_FIRMWARE_SLOT           = 0x106,\n373         NVME_SC_FIRMWARE_IMAGE          = 0x107,\n374         NVME_SC_INVALID_VECTOR          = 0x108,\n375         NVME_SC_INVALID_LOG_PAGE        = 0x109,\n376         NVME_SC_INVALID_FORMAT          = 0x10a,\n377         NVME_SC_BAD_ATTRIBUTES          = 0x180,\n378         NVME_SC_WRITE_FAULT             = 0x280,\n379         NVME_SC_READ_ERROR              = 0x281,\n380         NVME_SC_GUARD_CHECK             = 0x282,\n381         NVME_SC_APPTAG_CHECK            = 0x283,\n382         NVME_SC_REFTAG_CHECK            = 0x284,\n383         NVME_SC_COMPARE_FAILED          = 0x285,\n384         NVME_SC_ACCESS_DENIED           = 0x286,\n385 };\n386 \n</pre>\n\n\n\n\n <pre>\n386 \n387 struct nvme_completion {\n388         __le32  result;         /* Used by admin commands to return data */\n389         __u32   rsvd;\n390         __le16  sq_head;        /* how much of this queue may be reclaimed */\n391         __le16  sq_id;          /* submission queue that generated this entry */\n392         __u16   command_id;     /* of the command which completed */\n393         __le16  status;         /* did the command fail, and if so, why? */\n394 };\n395 \n396 struct nvme_user_io {\n397         __u8    opcode;\n398         __u8    flags;\n399         __u16   control;\n400         __u16   nblocks;\n401         __u16   rsvd;\n402         __u64   metadata;\n403         __u64   addr;\n404         __u64   slba;\n405         __u32   dsmgmt;\n406         __u32   reftag;\n407         __u16   apptag;\n408         __u16   appmask;\n409 };\n410 \n411 struct nvme_admin_cmd {\n412         __u8    opcode;\n413         __u8    flags;\n414         __u16   rsvd1;\n415         __u32   nsid;\n416         __u32   cdw2;\n417         __u32   cdw3;\n418         __u64   metadata;\n419         __u64   addr;\n420         __u32   metadata_len;\n421         __u32   data_len;\n422         __u32   cdw10;\n423         __u32   cdw11;\n424         __u32   cdw12;\n425         __u32   cdw13;\n426         __u32   cdw14;\n427         __u32   cdw15;\n428         __u32   timeout_ms;\n429         __u32   result;\n430 };\n431 \n432 #define NVME_IOCTL_ID           _IO(\'N\', 0x40)\n433 #define NVME_IOCTL_ADMIN_CMD    _IOWR(\'N\', 0x41, struct nvme_admin_cmd)\n434 #define NVME_IOCTL_SUBMIT_IO    _IOW(\'N\', 0x42, struct nvme_user_io)\n435 \n\n</pre>\n\n\n==== drivers/block/nvme.c ====\n\n\n <pre>\n  44 \n  45 #define NVME_Q_DEPTH 1024\n  46 #define SQ_SIZE(depth)          (depth * sizeof(struct nvme_command))\n  47 #define CQ_SIZE(depth)          (depth * sizeof(struct nvme_completion))\n  48 #define NVME_MINORS 64\n  49 #define NVME_IO_TIMEOUT (5 * HZ)\n  50 #define ADMIN_TIMEOUT   (60 * HZ)\n  51 \n  52 static int nvme_major;\n  53 module_param(nvme_major, int, 0);\n  54 \n  55 static int use_threaded_interrupts;\n  56 module_param(use_threaded_interrupts, int, 0);\n  57 \n  58 static DEFINE_SPINLOCK(dev_list_lock);\n  59 static LIST_HEAD(dev_list);\n  60 static struct task_struct *nvme_thread;\n  61 \n</pre>\n\n\n\n\n <pre>\n  62 /*\n  63  * Represents an NVM Express device.  Each nvme_dev is a PCI function.\n  64  */\n  65 struct nvme_dev {\n  66         struct list_head node; \n  67         struct nvme_queue **queues;    \n  68         u32 __iomem *dbs;      \n  69         struct pci_dev *pci_dev;\n  70         struct dma_pool *prp_page_pool;\n  71         struct dma_pool *prp_small_pool;\n  72         int instance;\n  73         int queue_count;       \n  74         int db_stride;         \n  75         u32 ctrl_config;       \n  76         struct msix_entry *entry;\n  77         struct nvme_bar __iomem *bar;\n  78         struct list_head namespaces;\n  79         char serial[20];\n  80         char model[40];\n  81         char firmware_rev[8];\n  82         u32 max_hw_sectors;\n  83 };\n  84 \n  85 /*     \n  86  * An NVM Express namespace is equivalent to a SCSI LUN\n  87  */    \n  88 struct nvme_ns {\n  89         struct list_head list; \n  90        \n  91         struct nvme_dev *dev;  \n  92         struct request_queue *queue;\n  93         struct gendisk *disk;  \n  94        \n  95         int ns_id;\n  96         int lba_shift;         \n  97 };     \n  98 \n  99 /*     \n 100  * An NVM Express queue.  Each device has at least two (one for admin\n 101  * commands and one for I/O commands).\n 102  */\n 103 struct nvme_queue {\n 104         struct device *q_dmadev;\n 105         struct nvme_dev *dev;\n 106         spinlock_t q_lock;\n 107         struct nvme_command *sq_cmds;\n 108         volatile struct nvme_completion *cqes;\n 109         dma_addr_t sq_dma_addr;\n 110         dma_addr_t cq_dma_addr;\n 111         wait_queue_head_t sq_full;\n 112         wait_queue_t sq_cong_wait;\n 113         struct bio_list sq_cong;\n 114         u32 __iomem *q_db;\n 115         u16 q_depth;\n 116         u16 cq_vector;\n 117         u16 sq_head;\n 118         u16 sq_tail;\n 119         u16 cq_head;\n 120         u16 cq_phase;\n 121         unsigned long cmdid_data[];\n 122 };\n 123 \n</pre>\n\n== ## bNote-2013-12-03 ==\n\n=== Linux kernel IO stack: Block Layer ===\n\n==== Linux Documentation ====\n\n; Documentation/block/queue-sysfs.txt\n\n <pre>\n1	Queue sysfs files\n2	=================\n3	\n4	This text file will detail the queue files that are located in the sysfs tree\n5	for each block device. Note that stacked devices typically do not export\n6	any settings, since their queue merely functions are a remapping target.\n7	These files are the ones found in the /sys/block/xxx/queue/ directory.\n8	\n9	Files denoted with a RO postfix are readonly and the RW postfix means\n10	read-write.\n11	\n12	add_random (RW)\n13	----------------\n14	This file allows to trun off the disk entropy contribution. Default\n15	value of this file is \'1\'(on).\n16	\n17	discard_granularity (RO)\n18	-----------------------\n19	This shows the size of internal allocation of the device in bytes, if\n20	reported by the device. A value of \'0\' means device does not support\n21	the discard functionality.\n22	\n23	discard_max_bytes (RO)\n24	----------------------\n25	Devices that support discard functionality may have internal limits on\n26	the number of bytes that can be trimmed or unmapped in a single operation.\n27	The discard_max_bytes parameter is set by the device driver to the maximum\n28	number of bytes that can be discarded in a single operation. Discard\n29	requests issued to the device must not exceed this limit. A discard_max_bytes\n30	value of 0 means that the device does not support discard functionality.\n31	\n32	discard_zeroes_data (RO)\n33	------------------------\n34	When read, this file will show if the discarded block are zeroed by the\n35	device or not. If its value is \'1\' the blocks are zeroed otherwise not.\n36	\n37	hw_sector_size (RO)\n38	-------------------\n39	This is the hardware sector size of the device, in bytes.\n40	\n41	iostats (RW)\n42	-------------\n43	This file is used to control (on/off) the iostats accounting of the\n44	disk.\n45	\n46	logical_block_size (RO)\n47	-----------------------\n48	This is the logcal block size of the device, in bytes.\n49	\n50	max_hw_sectors_kb (RO)\n51	----------------------\n52	This is the maximum number of kilobytes supported in a single data transfer.\n53	\n54	max_integrity_segments (RO)\n55	---------------------------\n56	When read, this file shows the max limit of integrity segments as\n57	set by block layer which a hardware controller can handle.\n58	\n59	max_sectors_kb (RW)\n60	-------------------\n61	This is the maximum number of kilobytes that the block layer will allow\n62	for a filesystem request. Must be smaller than or equal to the maximum\n63	size allowed by the hardware.\n64	\n65	max_segments (RO)\n66	-----------------\n67	Maximum number of segments of the device.\n68	\n69	max_segment_size (RO)\n70	---------------------\n71	Maximum segment size of the device.\n72	\n73	minimum_io_size (RO)\n74	--------------------\n75	This is the smallest preferred io size reported by the device.\n76	\n77	nomerges (RW)\n78	-------------\n79	This enables the user to disable the lookup logic involved with IO\n80	merging requests in the block layer. By default (0) all merges are\n81	enabled. When set to 1 only simple one-hit merges will be tried. When\n82	set to 2 no merge algorithms will be tried (including one-hit or more\n83	complex tree/hash lookups).\n84	\n85	nr_requests (RW)\n86	----------------\n87	This controls how many requests may be allocated in the block layer for\n88	read or write requests. Note that the total allocated number may be twice\n89	this amount, since it applies only to reads or writes (not the accumulated\n90	sum).\n91	\n92	To avoid priority inversion through request starvation, a request\n93	queue maintains a separate request pool per each cgroup when\n94	CONFIG_BLK_CGROUP is enabled, and this parameter applies to each such\n95	per-block-cgroup request pool.  IOW, if there are N block cgroups,\n96	each request queue may have up to N request pools, each independently\n97	regulated by nr_requests.\n98	\n99	optimal_io_size (RO)\n100	--------------------\n101	This is the optimal io size reported by the device.\n102	\n103	physical_block_size (RO)\n104	------------------------\n105	This is the physical block size of device, in bytes.\n106	\n107	read_ahead_kb (RW)\n108	------------------\n109	Maximum number of kilobytes to read-ahead for filesystems on this block\n110	device.\n111	\n112	rotational (RW)\n113	---------------\n114	This file is used to stat if the device is of rotational type or\n115	non-rotational type.\n116	\n117	rq_affinity (RW)\n118	----------------\n119	If this option is \'1\', the block layer will migrate request completions to the\n120	cpu \"group\" that originally submitted the request. For some workloads this\n121	provides a significant reduction in CPU cycles due to caching effects.\n122	\n123	For storage configurations that need to maximize distribution of completion\n124	processing setting this option to \'2\' forces the completion to run on the\n125	requesting cpu (bypassing the \"group\" aggregation logic).\n126	\n127	scheduler (RW)\n128	--------------\n129	When read, this file will display the current and available IO schedulers\n130	for this block device. The currently active IO scheduler will be enclosed\n131	in [] brackets. Writing an IO scheduler name to this file will switch\n132	control of this block device to that new IO scheduler. Note that writing\n133	an IO scheduler name to this file will attempt to load that IO scheduler\n134	module, if it isn\'t already present in the system.\n135	\n136	\n137	\n138	Jens Axboe <jens.axboe@oracle.com>, February 2009\n</pre>\n\n\n\n\n==== Linux kernel 3.8.0 source code ====\n\n; block/blk-settings.c: blk_queue_make_request()\n <pre>\n\n152 /**\n153  * blk_queue_make_request - define an alternate make_request function for a device\n154  * @q:  the request queue for the device to be affected\n155  * @mfn: the alternate make_request function\n156  *\n157  * Description:\n158  *    The normal way for &struct bios to be passed to a device\n159  *    driver is for them to be collected into requests on a request\n160  *    queue, and then to allow the device driver to select requests\n161  *    off that queue when it is ready.  This works well for many block\n162  *    devices. However some block devices (typically virtual devices\n163  *    such as md or lvm) do not benefit from the processing on the\n164  *    request queue, and are served best by having the requests passed\n165  *    directly to them.  This can be achieved by providing a function\n166  *    to blk_queue_make_request().\n167  *\n168  * Caveat:\n169  *    The driver that does this *must* be able to deal appropriately\n170  *    with buffers in \"highmemory\". This can be accomplished by either calling\n171  *    __bio_kmap_atomic() to get a temporary kernel mapping, or by calling\n172  *    blk_queue_bounce() to create a buffer in normal memory.\n173  **/\n174 void blk_queue_make_request(struct request_queue *q, make_request_fn *mfn)\n175 {\n176         /*\n177          * set defaults\n178          */\n179         q->nr_requests = BLKDEV_MAX_RQ;\n180 \n181         q->make_request_fn = mfn;\n182         blk_queue_dma_alignment(q, 511);\n183         blk_queue_congestion_threshold(q);\n184         q->nr_batching = BLK_BATCH_REQ;\n185 \n186         blk_set_default_limits(&q->limits);\n187 \n188         /*\n189          * by default assume old behaviour and bounce for any highmem page\n190          */\n191         blk_queue_bounce_limit(q, BLK_BOUNCE_HIGH);\n192 }\n193 EXPORT_SYMBOL(blk_queue_make_request);\n\n</pre>\n\n\n\n\n; include/linux/blkdev.h: BLKDEV_MAX_RQ\n <pre>\n  38 #define BLKDEV_MAX_RQ   128     /* Default maximum */\n</pre>\n\n\n\n\n; block/blk-sysfs.c: /* Functions related to sysfs handling */\n <pre>\n 40 \n 41 static ssize_t queue_requests_show(struct request_queue *q, char *page)\n 42 {\n 43         return queue_var_show(q->nr_requests, (page));\n 44 }\n 45 \n 46 static ssize_t\n 47 queue_requests_store(struct request_queue *q, const char *page, size_t count)\n 48 {\n 49         struct request_list *rl;\n 50         unsigned long nr;\n 51         int ret;\n 52 \n 53         if (!q->request_fn)\n 54                 return -EINVAL;\n 55 \n 56         ret = queue_var_store(&nr, page, count);\n 57         if (ret < 0)\n 58                 return ret;\n 59 \n 60         if (nr < BLKDEV_MIN_RQ)\n 61                 nr = BLKDEV_MIN_RQ;\n 62 \n 63         spin_lock_irq(q->queue_lock);\n 64         q->nr_requests = nr;\n 65         blk_queue_congestion_threshold(q);\n 66 \n 67         /* congestion isn\'t cgroup aware and follows root blkcg for now */\n 68         rl = &q->root_rl;\n 69 \n 70         if (rl->count[BLK_RW_SYNC] >= queue_congestion_on_threshold(q))\n 71                 blk_set_queue_congested(q, BLK_RW_SYNC);\n 72         else if (rl->count[BLK_RW_SYNC] < queue_congestion_off_threshold(q))\n 73                 blk_clear_queue_congested(q, BLK_RW_SYNC);\n 74 \n 75         if (rl->count[BLK_RW_ASYNC] >= queue_congestion_on_threshold(q))\n 76                 blk_set_queue_congested(q, BLK_RW_ASYNC);\n 77         else if (rl->count[BLK_RW_ASYNC] < queue_congestion_off_threshold(q))\n 78                 blk_clear_queue_congested(q, BLK_RW_ASYNC);\n 79 \n 80         blk_queue_for_each_rl(rl, q) {\n 81                 if (rl->count[BLK_RW_SYNC] >= q->nr_requests) {\n 82                         blk_set_rl_full(rl, BLK_RW_SYNC);\n 83                 } else {\n 84                         blk_clear_rl_full(rl, BLK_RW_SYNC);\n 85                         wake_up(&rl->wait[BLK_RW_SYNC]);\n 86                 }\n 87 \n 88                 if (rl->count[BLK_RW_ASYNC] >= q->nr_requests) {\n 89                         blk_set_rl_full(rl, BLK_RW_ASYNC);\n 90                 } else {\n 91                         blk_clear_rl_full(rl, BLK_RW_ASYNC);\n 92                         wake_up(&rl->wait[BLK_RW_ASYNC]);\n 93                 }\n 94         }\n 95 \n 96         spin_unlock_irq(q->queue_lock);\n 97         return ret;\n 98 }\n 99 \n\n</pre>\n\n\n\n; drivers/block/nvme.c: NVME_Q_DEPTH\n <pre>\n  44 \n  45 #define NVME_Q_DEPTH 1024\n  46 #define SQ_SIZE(depth)          (depth * sizeof(struct nvme_command))\n  47 #define CQ_SIZE(depth)          (depth * sizeof(struct nvme_completion))\n  48 #define NVME_MINORS 64\n  49 #define NVME_IO_TIMEOUT (5 * HZ)\n  50 #define ADMIN_TIMEOUT   (60 * HZ)\n  51 \n</pre>\n\n== ## bNote-2013-12-02 ==\n\n=== XS-1715 Specification ===\n\n==== Key features ====\n\n* Performance\n: Optimized for 4KB random read and write workloads\n:- Performance Target\n::- More than 700K IOPS for 4KB random reads\n::- More than 200K IOPS for 4KB random writes (sustained)\n\n* Mapping Algorithm\n:- 4KB full page mapping\n:- FN21 4-planes program support \n:- FN21 4KB fast read support\n:- Hot/cold data separtion (ESP_MM_Mapping.c)\n:- Concurrent garbage collection during user page writes\n:- Non-blocking DRAM access to avoid pipeline bubbles of CPU\n:- No hardware register access at all during user read/write request processing\n:- Journal log information reduction for fast power-down and fast recovery at boot-up\n:- Flash RAID-5 support\n\n\n\n=== Admin/Misc ===\n\n* DS 인사 (전배관련): \'\'\'정영민 대리\'\'\', 박필 사원\n:-> 정영민 대리에게 확인. (OK)\n\n<!--\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:57]:\n  정대리님, 안녕하세요?\n  이번 10월 1일자로 기술원에서 SW개발팀으로 전배 온\n  정명준 책임입니다. \n  내년 승격 관련해서\n  문의드리고자 연락 드렸습니다\n  잠시 시간 되시는지요?\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:00]:\n  네\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:00]:\n  안녕하세요? 혹시 기술원의 김경진 차장으로부터\n  차년도 승격 관련해서\n  연락 받으셨던 것이 있으신지 궁금해서요~\n  제가 기술원 기준으로는 차년도 승격이 되는데\n  여기 전배를 오게 되면서, 승격 예외 대상자로 \n  예외 승격 대상자\n  로 분류해서 내년에 수석 진급이 보장될 수 있도록\n  해주겠다는 이야기를 들었었거든요\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:02]:\n  네 예전에 관련 결재를 통보받았으나, 책임님 명단이 있는지는 확인해봐야겠습니다\n  잠시만요\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:02]:\n  네~\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:05]:\n  네 확인했습니다. 책임님 승격되십니다\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:05]:\n  아 감사합니다~\n  이번에 저와 같이 오셨던\n  신현정 책임도 같이\n  승격 되는 것 맞죠?\n  저희 2명이 \n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:06]:\n  넵\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:06]:\n  된다고 들었었거든요\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:06]:\n  2명입니다\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:06]:\n  확인해주셔서 감사합니다. 그럼 저희 2명이 특별히\n  따로 더 할 일이\n  할 일은 없는 건지요?\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:06]:\n  넵\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:06]:\n  아, 잘 알겠습니다. \n  감사합니다. 좋은 오후 보내세요  \n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:07]:\n  네 수고하셔요~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:07]:\n  넵 감사합니다 ^^\n-->\n\n<!--\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:53]:\n  김과장님, 안녕하세요? 10월 1일자로 기술원에서 메모리사 S/W 개발팀으로 전배 온 정명준 책임입니다.\n  승격 관련해서 여쭙고자 연락 드렸습니다\n  잠시 시간 되시는지요?\n‎‎김효근(G5(과장)/담당과장/삼성전자)‎‎ [오후 1:54]:\n  아 네...\n  담당자는 박필 사원이나 \n  정영민 대리입니다. \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:55]:\n  아하 \n‎‎김효근(G5(과장)/담당과장/삼성전자)‎‎ [오후 1:55]:\n  정영민 대리는 지금 통화중이네요... \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:55]:\n  아, 그럼 잠시 후 정영민 대리에게 연락해보겠습니다 알려주셔서 감사합니다 ^_^\n‎‎김효근(G5(과장)/담당과장/삼성전자)‎‎ [오후 1:57]:\n  전 인력운영 담당자라 \n  승격에 대해서는 제가 정확한 답변을 못 드릴 것 같습니다. \n  정대리 전화 끊었네요\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:57]:\n  아, 감사합니다 ^^\n  연락해보겠습니다  \n-->\n\n<!--\n: <strike>DS 인사 담당: 김효근 과장, 이창익 대리 (인력 이동 관련)</strike> Updated: 정영민대리가 담당임.\n: 10/17 김경진 차장 - 내년 승격 대상자는 기술원 인사팀에서 본사에 얘기해놓았으며, 11.1일자 인력들과 같이 해서 예외 대상자들 품의를 받아 사업부에 뿌릴 예정이라고 함\n-->\n\n== References ==\n\n<references/>','utf-8'),(2060,'\n\n\n\n\n <pre>\n   December 2013\nSu Mo Tu We Th Fr Sa\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n</pre>\n\n\n\n\n\n== ## bNote-2013-12-12 ==\n\n=== MySQL handling ===\n\n* mysql> show status like \'innodb_%\'\n\n <pre>\nmysql> show status like \'innodb_%\';\n+---------------------------------------+---------+\n| Variable_name                         | Value   |\n+---------------------------------------+---------+\n| Innodb_buffer_pool_pages_data         | 389     |\n| Innodb_buffer_pool_bytes_data         | 6373376 |\n| Innodb_buffer_pool_pages_dirty        | 0       |\n| Innodb_buffer_pool_bytes_dirty        | 0       |\n| Innodb_buffer_pool_pages_flushed      | 0       |\n| Innodb_buffer_pool_pages_free         | 5119611 |\n| Innodb_buffer_pool_pages_misc         | 0       |\n| Innodb_buffer_pool_pages_total        | 5120000 |\n| Innodb_buffer_pool_read_ahead_rnd     | 0       |\n| Innodb_buffer_pool_read_ahead         | 0       |\n| Innodb_buffer_pool_read_ahead_evicted | 0       |\n| Innodb_buffer_pool_read_requests      | 5600    |\n| Innodb_buffer_pool_reads              | 390     |\n| Innodb_buffer_pool_wait_free          | 0       |\n| Innodb_buffer_pool_write_requests     | 0       |\n| Innodb_data_fsyncs                    | 3       |\n| Innodb_data_pending_fsyncs            | 0       |\n...\n</pre>\n\n== ## bNote-2013-12-11 ==\n\n=== Xian SSD Benchmark Test ===\n\n==== Environment ====\n <pre>\nHardware Server	HP DL380p Gen8\nCPU: 2xIntel XeonE5-2665@2.40GHz;\nMemory: 128GB\nStorage	Seagate HDD, 1TB, 7200rpm\nIntel SSD S3500, 480G\nSamsung SSD SM843Tns, 960G\n\nSoftware\nOS Centos 6.4 (2.6.32-358.el6.x86_64)\nI/O Scheduler: CFQ/Noop\nFile system	EXT4/XFS\nMySQL DB	Percona Server 5.6.14\n\nConfiguration:\nskip-grant-tables\ninnodb_buffer_pool_size = 80000M\ninnodb_thread_concurrency = 32 \ninnodb_spin_wait_delay = 30 \ninnodb_sync_spin_loops = 100\ninnodb_max_dirty_pages_pct = 90\ninnodb_lock_wait_timeout = 120\ninnodb_doublewrite = 0\ninnodb_flush_method = O_DIRECT\ninnodb_log_buffer_size = 256M\ninnodb_log_file_size = 8192M\ninnodb_log_block_size=4096\ninnodb_write_io_threads=16\ninnodb_read_io_threads=16\ninnodb_io_capacity=20000\ninnodb_file_format=barracuda\nmax_connections=3000\nquery_cache_size=0\nskip-name-resolve\n	tpcc-mysql	Revision 48. \nConfigurations\nThe CentOS is installed on HDD, filesystem is EXT4.\nThe Percona database is also installed on HDD, but the datadir is a directory on Samsung SSD.\nSamsung SSD SM843Tns 960GB is divided into two 480G partitions, XFS format. Only one partition is used for benchmarking, the other partition is fully written with unused data.\n\nPercona Server Installation\nResource: http://www.percona.com/downloads/Percona-Server-5.6/LATEST/RPM/rhel6/x86_64/\n\nInstall Step:\n1.Download Percona Server, client and shared rpm packages.\n2.Remove old mysql packages: \nyum –y remove mysql, mysql-server, mysql-libs-*.\n3.Install Percona shared, client, server packages:\n	rpm –ivhPercona-Server-shared-XXX.rpm\nrpm –ivhPercona-Server-client-XXX.rpm\nrpm –ivhPercona-Server-server-XXX.rpm\n4. Mysql secure installation: \nRun /usr/bin/mysql_secure_installation (default root user password is NULL)\n\nStart and Stop MySQL:\n	service mysql start/stop\n/etc/init.d/mysqlstart/stop\n\nLogin MySQL:\nmysql -uroot –p\n\nModify password:\nmysqladmin -uroot -p password\n\ntpcc-mysql installation\nResource:\nhttps://code.launchpad.net/~percona-dev/perconatools/tpcc-mysql\n\nInstall Step:\ncdsrc\nmake\n\nFAQ:\n1.	Can’t find header file\nexport C_INCLUDE_PATH=$MYSQL_HOME/include\n2.	Can’t find mysql_config\nexport PATH=$MYSQL_HOME/bin:$PATH\n3.	Can’t find mysql lib\nexport LD_LIBRARY_PATH=$MYSQL_HOME/lib\n\nLoad data:\n1.	Create database\nshell>mysqladmin create tpcc2500\nmysql> create database tpcc2500;\n2.	Create tables\nshell> mysql –uroot –p tpcc2500 <create_table.sql\n3.	Create indexes and FK\nshell> mysql –uroot –p tpcc2500 <add_fkey_idx.sql\n4.	Populate data (long time needed)\nsimple step:\nshell>./tpcc_loadlocalhost tpcc2500 root xxxx2500\nUsage:  tpcc_load [server] [DBname] [user] [pass] [warehouse]\nref. tpcc_load --help for all options\nload data in parallel (Recommanded)\nshell>./load.sh tpcc2500 2500\ncheck load.sh script, need to modify, add password\n\nStart benchmark:\n1.	Usage\ntpcc_start -h server_host -P port -d database_name -u mysql_user -p mysql_password -w warehouses -c connections -r warmup_time -l running_time -ireport_interval -f report_file -t trx_file\n2.	Example\n./tpcc_start -hlocalhost–dtpcc2500 -uroot -pxxxx–w2500 –c128 -r0 –l10800–i10\n\nBenchmarking parameters:\n2500 warehouses\n128 connections\nWarm up time: 0\nRunning time: 10800\nReport interval: 10 \n</pre>\n\n\n=== SSD initialization ===\n\n==== ATA secure erase ====\n\n* [http://www.manualslib.com/manual/490034/Dell-Poweredge-External-Media-System-1434.html?page=14 Intel 320 SSD ATA Instant Secure Erase Functionality]\n: Intel 320 SSDs support cryptography-based Instant ATA secure erase functionality. The Intel 320 SSD Instant ATA secure ease feature is non-TCG (Trusted Computing Group) based. It supports two modes of crypto secure erase:\n\n:* Normal secure erase—Clears the encryption keys and erases NAND\n:* Enhanced secure erase—Generates new keys and clears NAND.\n\n: The PERC solution only supports the \"crypto erase\" function on TCG-compliant Enterprise SED (Self Encrypting Drive)drives. When an Intel 320 drive is connected to a PERC, there is an incompatibility between PERC TCG method of crypto erase and Intel 320 supported non-TCG based ATA instant secure erase.\n: <span style=\"background:gold\">As a result, the instant secure erase functionality can\'t be used with PERC based solution.</span> The only way to run instant ATA secure ease and use Intel 320 drive secure wiping feature is to connect the drives directly into the motherboard chipset\'s ATA port and issue secure erase command. Intel provides a free utility (Intel SSDToolbox) to instant secure erase the drive, which you can download from www.intel.com/go/ssdtoolbox\n\n==== Talk with JinJin ====\n <pre>\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:42]:\n  Hi, Jinjin  \n  My name is M.J. JUNG (brian.m.jung@samsung.com)\n  introduced by M.S. Kwon in recent mails\n  ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:42]:\n  Hi~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:42]:\n  Ni Hao~ ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:43]:\n  Can I call you Brian or MyungJune?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:43]:\n  Oh, Brian is preferred ! ^^\n  just call me brian  \n  can I call you JinJin?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:43]:\n  yes, sure\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:43]:\n  oh, great ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:43]:\n   \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:43]:\n  I\'ve got your mail regarding the benchmark ~\n  and could I ask you something on that issue? \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:44]:\n  of course\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:44]:\n  oh, thank you  \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:44]:\n  you\'re welcome \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:44]:\n  wow ^___^ \n  is there any reason to use percona version of mysql? ^^\n  actually my current system is Ubuntu running MySQL (original)\n  so, if I should make a test bed \n  exactly same as yours ~\n  I should remove my old DB (mysql) ^^;;;;\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:46]:\n  so special reason, mysql is also Ok, I think, but I\'m not sure whether you can reproduce it with mysql\n  no special reason\n  sorry, typo\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:46]:\n  oh, got your point!\n  (no need to say sorry  ^^ I\'m the king of typo generation hahah)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:47]:\n  haha, so nice of you\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:47]:\n  wow ^^ it\'s great for me to talk to you too!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:47]:\n  i think you can try it on your system first\n  if you can\'t reproduce, then use percona \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:48]:\n  oh, great! and then if I could not generate that same situation on my old system, then I SHOULD change my system, ^^\n  GOT IT!\n   \n  and one more thing to ask !\n  ^^\n  what about the Intel case? \n  I\'ve seen that the red line\n  in your graph~\n  Could you see the same type of red line \n  every time you tested?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:50]:\n  I just test once with Intel case\n  because of time limit\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:50]:\n  ok~ got it ^^\n  then, I can repeat the test for intel case to make it more complete test~ can this help you?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:51]:\n  I think intel case is ok since it\'s stable after one hour test\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:51]:\n  oh,\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:51]:\n  sure\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:51]:\n  did you make the SSD (intel, Samsung) in the  steady-state before each test?\n  (great ^^)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:52]:\n  I\'m not sure \n  i just remove all data on the disk\n  didn\'t erase \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:52]:\n  a-ha! ^^\n  got some point!  \n  we usually\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:52]:\n  maybe that\'s the reason\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:52]:\n  make the SSDs be in the \'steady-state\' before each test, \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:53]:\n  yes, i learn it today\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:53]:\n  because \'steady-state\' makes the performance of SSD be in the stable state\n  Oh great  ^^\n  You may find good article regarding \'steady state\' \n  in the SNIA\n  site\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:54]:\n  thank you! \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:54]:\n  http://www.snia.org/sites/default/education/tutorials/2011/fall/SolidState/EstherSpanjer_The_Why_How_SSD_Performance_Benchmarking.pdf\n  (oh, you\'re quite welcome)\n  oh, this is more updated version.\n  http://www.snia.org/sites/default/files/SNIASSSI.SSDPerformance-APrimer2013.pdf\n  And, maybe HJ Lim send you the script\n  to perform an operation to make \'steady-state\' SSD\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:55]:\n  thank you! I can open it \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:55]:\n  great!^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:56]:\n  yes, he did!\n  I also have one question\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:56]:\n  Please let me know any question or let me get your comments regarding this collaboration - Benchmark test -\n  ok, i\'m ready!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:56]:\n  should I use \"security erase\" or \"Enhanced security erase\" ?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:56]:\n  ah, physically, you mean?\n  maybe not, only if you perform the script HJ Lim gave. \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:57]:\n  in HJ Lim\'s guide, there are two kinds of security erase\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:57]:\n  to be sure, Could you send me the copy of the script that HJ Lim gave to you?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:57]:\n  I don\'t know which one to use\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:58]:\n  Let me check and then answer to you \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:58]:\n  ok, i will send to you\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:58]:\n  ok! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:00]:\n  I have sent it to you\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:00]:\n  Ok, I\'ll check it right now ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:01]:\n   \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:04]:\n  Oh, this way with \'hdparm\', let you have the SSD of clean state (at the virgin state when SSD is manufactured)\n  so, it is preferred  \n  If you have any problem with this, please let me know  \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:05]:\n  so what\'s the difference of steady state and virgin state?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:06]:\n  oh, great question!\n  usually state state means:\n  very bad condition to SSD\n  - because we introduce very harsh IOs to SSD to make the performance of SSD stable (sequential writes and then random writes to SSD for a long time)\n  but virgin state itself can give us the good performance (reportedly)\n  So, I proper to proceed like this.\n  firstly, make the SSD at the virgin state (manufactured state)\n  and then, make the SSD be in the steady-state (by introducing some harsh IO requests - there are well-known script to do this)\n  --- Regarding this way (two steps)\n  , I\'ll check the preferred script to use in this benchmark\n  and then let you know  \n  (also send it to you, if required)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:11]:\n  thank you! your answer is so good!\n  I got your point\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:11]:\n  oh, it\'s my honour to hear that from you\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:11]:\n  so do you have some script to do harsh IO requests?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:12]:\n  yes, my version ^^\n  using FIO\n  you know FIO?\n  (Flexible IO benchmark program)\n  http://freecode.com/projects/fio\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:12]:\n  yes, i have heard of it, but never use it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:13]:\n  But i\'m not sure that script is enough for our benchmark, so I SHOULD check it out to MS KWON.\n  wait a second, please. let me check   I\'ll be back. \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:14]:\n  ok, thank you. I will wait for you...\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:18]:\n  Oh, Jinjin, Long time no see! ^^\n  I\'m back! ^^\n  with a clear answer for you!\n  Ready to talk? ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:19]:\n  haha^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:19]:\n  seems you are ready ^^\n  ok~\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:20]:\n  yes, i\'m ready^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:20]:\n  ^^ yes!!!\n  We will go with Two cases!\n  first case is:\n  using only virgin state. (good for performance, maybe)\n  second case is:\n  make virgin state and then also dirtify script to make it steady state ^^\n  (this is preferred way that SNIA recommends - to make the performance test fair)\n  ----- was my explanation clear ?\n  if not, please ask ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:23]:\n  yes, very clear!\n  I got your point\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:23]:\n  oh, you \'re super smart!!!!!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:23]:\n  thank you !\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:24]:\n  thank you !!! ^___^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:24]:\n  haha^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:24]:\n  (actually, my English is not good~ so I\'ve worried that my talk was unclear -_-; \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:24]:\n  it\'s very happy to talk with you!!!\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:24]:\n  oh~ great for me! TOOO!!!!\n  let\'s have a talk from time to time, any time welcomed!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:25]:\n  I think your english is very good! your type much faster than me\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:25]:\n  oh~~~~~~~~~ ^^;;;\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:25]:\n  sure\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:26]:\n  sure, great!!! i\'ll get back to you when I get some progress! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:26]:\n  ok, thank you again for your help!!\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:26]:\n  oh, you\'re quite welcom!\n  my pleasure!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:27]:\n  any time any questions are welcomed!!!\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:27]:\n  wow, great!!!!^^\n  Ok, CU!! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:27]:\n  CU!\n   \n</pre>\n\n\n <pre>\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:40]:\n  Hi, Jinjin!!! ^^\n  any problem to use the FIO script?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:41]:\n  morning, Brian\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  wow~ Good morning, Jinjin!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  I haven\'t tried it yet\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  oh, no problem~ ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  yesterday, we tried the hdparm\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  if you need any help regarding that, please feel free to tell me ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  seems it doesn\'t work\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  ooops~\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  we are still trying to fix it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:43]:\n  i\'ve also heard sometimes it does not work on some types of SSD\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:43]:\n  there will be some errors when we use hdparm -I /dev/sdc\n  /dev/sdc:\nSG_IO: bad/missing sense data, sb[]:  70 00 05 00 00 00 00 0a 00 00 00 00 20 00                                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  do you have any idea about it?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:44]:\n  oh, did you check the capability with \'hdparm -I /dev/sdc\'\n  ?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:44]:\n  yes\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:44]:\n  large i option\n  oh~\n  what about the report from that command?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:45]:\n  [root@ds-me jinjin]# hdparm -I /dev/sdc\n\n/dev/sdc:\nSG_IO: bad/missing sense data, sb[]:  70 00 05 00 00 00 00 0a 00 00 00 00 20 00                                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n\nATA device, with non-removable media\nStandards:\n        Likely used: 1\nConfiguration:\n        Logical         max     current\n        cylinders       0       0\n        heads           0       0\n        sectors/track   0       0\n        --\n        Logical/Physical Sector size:           512 bytes\n        device size with M = 1024*1024:           0 MBytes\n        device size with M = 1000*1000:           0 MBytes\n        cache/buffer size  = unknown\nCapabilities:\n        IORDY not likely\n        Cannot perform double-word IO\n        R/W multiple sector transfer: not supported\n        DMA: not supported\n        PIO: pio0\n  that\'s the whole output, can you see it?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:46]:\n  oh, seems there\'s no section \'Security\'\n  you might also refer to the site http://tinyapps.org/docs/wipe_drives_hdparm.html\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:47]:\n  ok, thank you! i\'ll read it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:47]:\n  Ok, hope to hear good news from you ^__^\n  ah~\n  one more question ^^\n  Could I ask you how much is the DB file size (in GB) when population is completed?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:49]:\n  sure^^\n  if you populate 2500 warehouses\n  it\'s about 247GB\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:49]:\n  oh~ !!!\n  the place of the 9 DB files must be under /var/lib/mysql/tpcc...\n  right?\n  and one problematic thing for my case is, currently we have no such a super machine with over 128GB DRAM ~ -_-;;\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:52]:\n  yes, the default datadir path is /var/lib/mysql/tpcc...\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:52]:\n  so I could not configure db buffer pool size as 80GB yet \n  Ok, got it!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:53]:\n  you may need to store the tpcc2500 on the SSD for testing\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:53]:\n  you\'re right!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:53]:\n  that\'s ok, just set the db buffer pool size to about 70%~80% of your memory size\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:54]:\n  ok~ good advice! ^^\n  did you configure the place to store TPCC DB in /etc/mysql/my.cnf?\n  or, just using load.sh ?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:54]:\n  yes, you can using /etc/mysql/my.cnf\n  just write the following in my.cnf\n\n [mysqld]\ndatadir=/your/path\n\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:56]:\n  thank you so much, Jinjin! ^^\n  Ok, CU soon! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:57]:\n  you are welcome~~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:57]:\n  hahahah ^^ so nice of you!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:57]:\n  any questions, just let me know^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:58]:\n  oh, great!!!! thank you Jinjin, You Too!!!! (anytime welcomed!) ^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:49]:\n  hi, Jinjin~\n  ^^\n  some small update for you~\n  regarding secure erase failure you mentioned\n  reply anytime when you\'re ready to talk ^__^\n  (maybe you already found this info.)\n  http://www.manualslib.com/manual/490034/Dell-Poweredge-External-Media-System-1434.html?page=14\n  Please see the section \"Intel 320 SSD ATA Instant Secure Erase Functionality\"\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:52]:\n  Hi, Brian~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:52]:\n  Wow! Jinjin!\n  ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:52]:\n  thanks for the info\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:52]:\n  oh, you\'re welcome!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:52]:\n  our server is HP, not Dell\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:53]:\n  oh, I see!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:53]:\n  I\'m still looking for servier configuration\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:53]:\n  what about the HW RAID on your system?\n  do you use HW RAID to access that SSD?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:53]:\n  I think it\'s the server\'s smart array card \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:53]:\n  oh!\n  that\'s the point! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:54]:\n  so now i\'m looking for how to change it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:54]:\n  maybe, that means, your application access to your SSDs through that \"smart array card (HW RAID)\" ~\n  right?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:54]:\n  yes\n  we need to let app access ssd directly\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:55]:\n  yes!!! exactly ^^\n  If your HP system does not allow that bypassing,\n  then, we can try the Plan B.\n  Plan B means, \n  maybe that RAID card controlling screen (during boot? ) support direct Secure Erase (or something like that)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:56]:\n  sorry, brian, i have an urgent issue, i will be back in 15 min\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:56]:\n  ok!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:56]:\n  CU soon\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:56]:\n  no prob!\n  CU soon!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 6:23]:\n  Hi~ brian\n  i\'m back~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 6:24]:\n  Oh~~ ^^ Welcome back!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 6:25]:\n  yes, the plan B can be supported, I see in the guide they have a tool to do secure erase druing boot\n  but I haven\'t tried it\n  it\'s not convienent because we can\'t use script to do it\n  i\'ll try to find the way to bypass raid\n  thank you agian for your advice^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 6:46]:\n  Sorry Jinjin for no response (been away from my desk), ^^;;;;  Ok, I\'ll also check another way to work around  \n  Thank you for your kind explanation ^__^, and let\'s talk again tomorrow~  \n</pre>\n\n== ## bNote-2013-12-10 ==\n\n\n\n=== PCIe Specification ===\n\nhttp://komposter.com.ua/documents/PCI_Express_Base_Specification_Revision_3.0.pdf\n\n\n=== NVMe Tutorial ===\n\n: [http://www.flashmemorysummit.com/English/Collaterals/Proceedings/2013/20130812_PreConfD_Marks.pdf By Kevin Marks, Dell, Inc. Flash Memory Summit 2013 Santa Clara, CA]\n\n\n* NVMe defines an optimized queuing interface, command set, feature set for PCIe SSDs\n\n\n* NVMe release timeline\n:- NVMe 1.0 release (2011-03-01)\n::- Queuing interface\n::- NVM command set, admin command set\n::- End-to-end protection (DIF/DIX), security\n::- Physical region pages (PRPs)\n:- NVMe 1.1 release (2012-10-11)\n::- General Scatter/Gather Lists (SGLs)\n::- Multi-path I/O & namespace sharing\n::- Reservations\n::- Autonomous power transitions during idle\n\n\n* advanced points of NVMe relative to AHCI\n:- Remove uncacheable reads from command issue/completion\n::- ??? uncacheable reads? why so bad to remove?\n:- Minimize MIMO writes in command issue/completion path\n::- ??? MIMO? why bad to minimize?\n:- Support for deep command queues and to simplify command decoding and processing\n::- ??? what method to simplify?\n:- Support MSI-X / flexible interrupt aggregation\n::- ??? what is flexible interrupt aggregation? is it different from MSI-X?\n:- Support for many core systems\n::- ??? concretely how?\n:- Support enterprise features\n::- ??? exactly what?\n:- Comprehensive statistics / health status reporting / robust error reporting & handling\n::- ???\n\n\n* NVMe usage model\n:- Server caching\n::- used to reduce memory footprint\n::- for temporary data\n:- Server storage\n::- for persistent data\n::- Redundant (i.e., RAID\'ed)\n::- commonly used as tier-0 storage\n:- Client storage\n::- used for boot/os-partition/HDD-cache\n::- non-redundant\n::- power optimized\n:- External storage\n::- used for metadata or data\n::- multi-ported device\n::- redundancy based on usage\n\n\n* NVMe queues\n:- NVMe uses circular queues to pass messages (e.g., commands and command completion notifications.)\n:- The queues may be located anywhere in PCIe memory\n::- Typically queues are located in host memory\n::- Queues may consist of a contiguous block of physical memory\n::  or optionally a non-contiguous set of physical memory pages (defined by a PRP List)\n:- A Queue consists of set of fixed sized elements\n:- Tail\n::- Points to next free element\n::- If an element is added to the element pointed to by the tail,\n::  the tail is incremented to point to next free element taking wrapping into consideration\n:- Head\n::- Points to next entry to be pulled off, if queue is not empty\n::- If an element is removed from the element pointed to by the head,\n::  the head is incremented to point to the next element taking wrapping into consideration\n:- Queue Size (Usable)\n::- Number of entries in the queue - 1\n::- Minimum size is 2, Maximum is ~ 64K for IO  Queues and 4K for Admin Queue\n:- Queue Empty\n::- Head == Tail\n:- Queue Full\n::- Head == Tail + 1 (mod # of queue entries)\n\n\n* Types of queues\n:- Admin queue for admin command set\n::- One per NVMe controller with up to 4K elements per queue\n::- Used to configure IO queues and controller/feature management\n:- IO queues for IO command sets (e.g., NVM command set)\n::- Up to 64K queues per NVMe controller with up to 64K elements per queue\n::- Used to submit/complete IO commands\n:- , where each type of queue (admin queue, IO queues) has\n::- Submission queue (SQ)\n:::- Queues messages from host to controller\n:::- Used to submit commands\n:::- Identified by SQ ID\n::- Completion queue (CQ)\n:::- Queues messages from controller to host\n:::- Used to post command completions\n:::- Identified by CQ ID\n:::- May have an independent MSI-X interrupt per completion queue\n: /* NVMe queues are messaging queues, not command queues -- What does this mean? */\n\n\n\n* Scalable queuing interface\n:- Enables NUMA optimized drivers\n::- Per core: one or more SQ, one CQ, and one MSI-X interrupt\n::- High performance and low latency command issue\n::- No locking between cores\n:- Up to ~2^32 outstanding commands\n::- Support for up to ~64K IO submission and completion queues\n::- Each queue supports up to ~64K outstanding commands\n\n\n\n* Command arbitration\n:- All controllers support round robin (RR) arbitration\n::- RR{ASQ, SQ, SQ, ..., SQ}\n:- An NVMe controller may support weighted round robin (WRR) with urgent priority class arbitration\n::- Priority{Strict_Priority_1, Strict_Priority_2, Strict_Priority_3}\n:::- Strict_Priority_1{ASQ}\n:::- Strict_Priority_2{RR{SQ.urgent, SQ.urgent}}\n:::- Strict_Priority_3{WRR{\n::::- Weight_High.RR{SQ.high, SQ.high, SQ.high},\n::::- Weight_Medium.RR{SQ.medium, SQ.medium, SQ.medium},\n::::- Weight_Low.RR{SQ.low, SQ.low, SQ.low}\n::: }}\n\n\n\n* Arbitration primitives\n:- Priority Arb. Vs. WRR Arb.\n::- Example above shown with an arbitration burst of no limit\n::- NVMe supports an arbitration burst of 1, 2, 4, 8, 16, 32, 64 and no limit\n::- NVMe supports 8-bit WRR weights\n\n\n\n* NVMe controller register map\n{| class=\"wikitable sortable\"\n|-\n| Start || End || Symbol || Description\n|-\n| 00h || 07h || CAP || Controller Capabilities\n|-\n|}\n\n\n\n* Controller initialization\n\n\n\n* SQ element with PRBs (64B)\n\n\n\n* Physical Region Pages (PRBs)\n\n\n\n* Example: PRP, PRP list\n\n\n\n* SQ element with SGLs (64B)\n\n\n\n* Scatter Gather List (SGL)\n\n\n\n* CQ element (16B)\n\n\n\n* Phase tag operation\n\n\n\n* NVMe command sets\n:- Command set = { Admin Command Set, IO Command Set = { NVM Cmd Set, Rsvd #1, Rsvd #2, Rsvd #3 } }\n\n\n\n* Admin commands\n{| class=\"wikitable sortable\"\n|-\n| Category || Command || Required/Optional\n|-\n| rowspan=\"4\" | Queue Management\n| Create IO Submission Queue\n| Required\n|-\n| Delete IO Submission Queue\n| Required\n|-\n| Create IO Completion Queue\n| Required\n|-\n| Delete IO Completion Queue\n| Required\n|-\n| rowspan=\"3\" | Configuration\n| Identify\n| Required\n|-\n| Get Features\n| Required\n|-\n| Set Features\n| Required\n|-\n| rowspan=\"2\" | Status Reporting\n| Get Log Pages\n| Required\n|-\n| Asynchronous Event Request\n| Required\n|-\n| Abort Command\n| Abort\n| Required\n|-\n| rowspan=\"2\" | Firmware Update/Management\n| Firmware Image Download\n| Optional\n|-\n| Firmware Activate\n| Optional\n|-\n| IO Command Set Specific\n| IO Command Set Specific Commands\n| Optional\n|-\n| Vendor Specific\n| Vendor Specific Commands\n| Optional\n|-\n|}\n: All admin commands use PRPs\n\n\n\n* Create IO SQ\n:- Queue Priority (OPRIO)\n:- Physically Contiguous (PC)\n\n\n\n* Create IO CQ\n:- Interrupt Enable (IEN)\n:- Physically Contiguous (PC)\n\n\n\n* Identify\n\n\n\n* Active namespace reporting\n\n\n\n* Identify controller data structure\n\n== ## bNote-2013-12-09 ==\n\n\n\n=== NVMe IO stack analysis ===\n\n\n==== nvme source code ====\n\n\n <pre>\n\nblusjune@buddy-guy:~ %1$ cat /x/t/nvme_iostack_analysis.c\n\n\nnvme_probe(struct pci_dev *pdev, const struct pci_device_id *id)\n{\n        struct nvme_dev * dev;\n        /*\n         * memory space will be allocated to \'dev\'\n         * and then\n         * \'dev->entry\' will have memory space\n         *      proportional to the \'num_possible_cpus()\'\n         * \'dev->queues\' will have memory space\n         *      proportional to the \'num_possible_cpus() + 1\' <- why \'+1\' here?\n         * , where num_possible_cpus() means\n         *      number of cpus populatable (fixed at boot time),\n         *      i.e., set of CPU id\'s possible to be plugged in\n         *      at anytime during the life of system boot\n         */\n\n\n        // ...\n\n\n        dev->pci_dev = pdev; // pdev argument will be assigned to \'dev->pci_dev\'\n\n\n        result = nvme_set_instance(dev);\n        /*\n         * allocate new integer ID to dev->instance\n         *\n         * Internally, this uses Idr (integer ID management)\n         * , where Idr is a set of library functions\n         *      for the management of small integer ID numbers.\n         *      In essence, an idr object can be thought of\n         *      as a sparse array mapping integer IDs onto arbitrary pointers,\n         *      with a \"get me an available entry\" function as well.\n         *\n         * URL: http://lwn.net/Articles/103209/\n         */\n\n\n        result = nvme_setup_prp_pools(dev);\n        /*\n         * dev->prp_page_pool = dma_pool_create(\"prp list page\",\n         *      &dev->pci_dev->dev, PAGE_SIZE, PAGE_SIZE, 0)\n         *\n         * and the comment says that there is an optimization\n         * for I/Os between 4k and 128k (is it still 128k? not 256k?)\n         * by the following code:\n         * dev->prp_small_pool = dma_pool_create(\"prp list 256\",\n         *      &dev->pci_dev->dev, 256, 256, 0);\n         *\n         * PRPs (Physical Region Pages) contains\n         * the 64-bit physical memory page address.\n         * The lower bits (n:2) of this field indicate\n         * the offset within the memory page\n         * n is defined by the memory page size (CC.MPS)\n         *\n         * PRP list contains a list of PRPs with generally no offsets\n         * which means non-contiguous set of physical memory pages\n         *\n         * mm/dmapool.c:dma_pool_create(const char * name, struct device *dev, sizt_t size, size_t align, size_t boundary)\n         *\n         */\n\n\n        result = nvme_dev_start(dev);\n        /*\n         * nvme_dev_start() {\n         *      nvme_dev_map(dev);\n         *      nvme_configure_admin_queue(dev);\n         *      list_add(&dev->node, &dev_list);\n         *      nvme_setup_io_queues(dev);\n         * }\n         */\n\n\n        result = nvme_dev_add(dev);\n\n\n}\n\n\ndrivers/block/nvme-core.c:nvme_setup_io_queues()\n{\n        (int) nr_io_queues = num_online_cpus();\n\n}\n\n</pre>\n\n==== Vectored I/O (a.k.a scatter/gather I/O) ====\n\n* <span style=\"background:gold\">Why vectored I/O in NVMe and DMA?</span>\n\n\n* Vectored I/O (a.k.a scatter/gather I/O) is a method of input and output by which a single procedure call sequentially writes data from multiple buffers to a single data stream or reads data from a data stream to multiple buffers.\n\n* The buffers are given in a vector of buffers. Scatter/gather refers to the process of gathering data from, or scattering data into, the given set of buffers.\n\n* Vectored I/O can operate synchronously or asynchronously.\n\n* The main reasons for using vectored I/O are efficiency and convenience.\n\n\n\n* Several usages for vectored I/O:\n\n:* Atomicity\n:: If the particular vectored I/O implementation supports atomicity, a process can write into or read from a set of buffers to or from a file without risk that another thread or process might perform I/O on the same file between the first process\' reads or writes, thereby corrupting the file or compromising the integrity of the input\n\n:* Concatenating output\n:: An application that wants to write non-sequentially placed data in memory can do so in one vectored I/O operation. For example, writing a fixed-size header and its associated payload data that are placed non-sequentially in memory can be done by a single vectored I/O operation without first concatenating the header and the payload to another buffer\n\n:* Efficiency\n:: One vectored I/O read or write can replace many ordinary reads or writes, and thus save on the overhead involved in syscalls\n\n:* Splitting input\n:: When reading data that is in a format that defines a fixed-size header, one can use a vector of buffers in which the first buffer is the size of that header; and the second buffer will contain the data associated with the header\n\n\n\n\n* Implementation cases as system calls\n: readv() and writev()\n\n\n\n=== Communications ===\n\n* DS SW 연 장우석 수석님과 메일\n <pre>\n\n이주평/정명준 책임,\n\n좋은 의견들 감사합니다.\n\n우연스럽게도, 저희가 추진하는 산학과제 건과 묘하게 일치하는 면이 있네요.\n\nBig Data cluster의 analytical modeling과, Ceph과 같은 분산파일시스템의 SSD 최적화 등에 대해서 제안을 해 보는 중입니다.\n\n \n\nSRA 과제 하면서도 긴밀하게 많은 이야기를 나누면서 서로 역할분담과 협력을 잘 해나가면 좋을 거 같아요.\n\n능력있는 분들이 많이 가셨으니, 사업부 개발팀에서도 훌륭한 결과물들이 많이 나오리라 기대해 봅니다.\n\n권수석 통해서 조만간 SRA 과제에 대해서도 논의하는 자리를 한번 마련해 보는 게 좋겠습니다.\n\n \n\n------- Original Message -------\n\nSender : 정명준<brian.m.jung@samsung.com> S5(책임)/책임/S/W개발팀(메모리)/삼성전자\n\nDate : 2013-12-10 14:07 (GMT+09:00)\n\nTitle : Re: Re: Fwd: Re: Flash Host Software 자문\n\n \n\n \n\n장수석님, 안녕하세요? ^^\n답장이 늦었습니다. 죄송합니다.\n\n\n최근들어 여기 사업부에서도 SSD 자체를 잘 하기 위해서는\nHost side에 대한 이해가 중요하다는 공감대가 커지고 있다는 것을 느낍니다.\n\n \n\n이러한 상황에서, 사업부에서 하기는 어렵지만,\n사업부에서 결국 필요로 하는 것을 생각해보았습니다.\n다음 두 가지가 우선 떠올랐습니다.\n\n \n\n1) 타겟 시스템 아키텍쳐의 이론적 성능/스케일링 한계 규명\n2) 차세대 Data Center에서 요구될만한 새로운 Compute/Data Model 제시\n\n \n\n1과 2를 포함하는 예를 들어본다면 (다음 문장이 사실인 것은 아닙니다 - 그냥 example입니다~),\n\"기존 SAN/NAS 구조에서는 어느 수준 이상의 Heavy한 Concurrent IO Stream들이 몰릴 경우 Controller 부분이 병목이 되어 N 대 이상 Scaling이 힘들다. 따라서 이를 해결할 수 있는 방안으로써, (가) Shared-nothing 구조의 Storage Controller Architecture를 통해 해결 가능하다든지, (나) 기존의 hierarchical file system 구조로부터 탈피하여 liear하게 scaling 가능한 key-value data model로 전환하여 어느 수준의 performance scaling 이득을 가져올 수 있다든지, (다) VDI와 같은 특정한 케이스인 경우, Nutanix, Pivot3 등과 같은 Converged Storage Architecture를 통해 해결이 가능하다\" 등과 같은 식의 결론/Insight을 \'구체적인 수치를 통해\' 얻을 수 있다면 좋겠다는 생각이 들었습니다.\n\n \n\n또한, 분석적인 접근, 이론적 한계 규명/극복 및 시뮬레이션/분석을 중요하게 여기시던 메모리사 신임 사장님 성향과도 부합하지 않을까 싶습니다.\n수석님 보시기에는 어떠신지요?\n\n \n\n정말 제 개인적인 의견이었습니다. (Just my two ... ^^)\n\n \n\n감사합니다.\n\n정명준 드림.\n\n \n\n \n\n \n\n------- Original Message -------\n\nSender : 장우석<wooseok_chang@samsung.com> S6(수석)/수석/소프트웨어연구소/삼성전자\n\nDate : 2013-12-04 20:12 (GMT+09:00)\n\nTitle : Re: Fwd: Re: Flash Host Software 자문\n\n \n\n바쁘신 중에 답변 감사합니다.\n\nSSIC에서 Ceph 검토하던 시점에 Inktank 모체인 UCSC 연구실도 같이 만나고 해서, 그쪽에서 진행하고 있다는 건 잘 알고 있습니다만,\n\n구체적으로 어떻게 과제로 연결하고 있는 건지, 그냥 투자만 하고 있는 건지는 잘 모르겠습니다.\n\n그리고, 저희 연구소에서도 SSD와 분산파일시스템을 엮는 것은 산학과제로 추진하는 것도 있는데,\n\n분산파일시스템이라는 게... 어차피 middleware이고 underlying filesystem의 영향을 많이 받는다면,\n\n후자의 SSD 최적화가 더 우선적인 거 아닐까요...?\n\n분산파일시스템 알고리즘 자체가 performance나 scalability가 좋아지는 건 많은 아이디어가 있겠지만,\n\nFlash에 최적화될 여지가 많은 건지는, 그래서 좀 의심스러울 때가 있습니다. Just my two cents...\n\n \n\n------- Original Message -------\n\nSender : 이주평<jupyung.lee@samsung.com> S5(책임)/책임/S/W개발팀(메모리)/삼성전자\n\nDate : 2013-12-04 19:56 (GMT+09:00)\n\nTitle : Fwd: Re: Flash Host Software 자문\n\n \n\n한가지 덧붙이자면,\n\n당사 부품을 기반으로 뇌를 모사한 highly scalable & fault-tolerant distributed computing platform을 구축해봐도 좋을 것 같습니다.\n\n(제가 너무 많이 나갔나요? ^^)\n\n \n\n- 이주평 드림 -\n\n \n\n------- Original Message -------\n\nSender : 이주평<jupyung.lee@samsung.com> S5(책임)/책임/S/W개발팀(메모리)/삼성전자\n\nDate : 2013-12-04 19:54 (GMT+09:00)\n\nTitle : Re: Flash Host Software 자문\n\n \n\n장수석님 안녕하세요\n\n먼저 답변이 늦어서 죄송합니다.\n\n \n\n분명히 DS부문의 biz 확장을 위한 host software 연구가 필요하겠는데요...\n\n저희도 기술원 떠나오고 사업부에 있다보니 감이 많이 떨어지고(??) 그래서 쉽게 연구 theme이 떠오르지는 않는데요...\n\n요즘 점차 뜨고 있는 Machine Learning Platform이나 Graph Data Processing Platform등을 당사 DS 부품을 기반으로 구축해 보면 어떨까 하는 생각이 드네요.\n\n분산파일시스템 관련해서는 여전히 기회가 있다고 보는데요, SSIC에서는 CEPH를 많이 들여다보고 있더라구요.\n\nblock/file/object을 동시에 지원할 수 있는 유연한 구조라고요. 궁극적으로는 각 SSD가 직접 network에 붙어서 각 SSD가 분산파일시스템 node같이 동작하는\n\n구조를 생각하고 있던데, 이 부분도 재미있는 방향 같습니다.\n\n자꾸 DS에서 시스템 한다고 하면 customer conflict 얘기하고, 시비를 많이 거시는데, 우리 부품을 scale-out하게 엮으면 그 자체가 그냥 system이 되는 구조로... (not requiring additional software/hardware component)\n\n이런 방향도 재미있지 않을까 싶습니다.\n\n \n\n감사합니다.\n\n- 이주평 드림 -\n\n \n\n------- Original Message -------\n\nSender : 장우석<wooseok_chang@samsung.com> S6(수석)/수석/소프트웨어연구소/삼성전자\n\nDate : 2013-11-28 14:23 (GMT+09:00)\n\nTitle : Flash Host Software 자문\n\n \n\n이책임, 정책임 - 호칭이 새로와졌네요. ㅎㅎ\n\n어제는 옛 팀원인 황주영 수석을 만나서 SRA 과제에 대한 많은 이야기를 나누었습니다.\n\n앞으로도 좋은 협력관계가 될 수 있도록 서로 노력해 보기로 합시다.\n\n \n\n...와 별도로. ;-)\n\n저희 Big Data팀에서 올 한 해 가상화+Hadoop+SSD에 대한 연구를 내년도에 어떻게 확장할까에 대해서도 고민을 좀 하고 있습니다.\n\n각자 이제 다른 과제들에 집중하고 있겠지만, 전에 Flash storage의 host software에 대한 것도 고민을 많이 하셨던 분들이라서,\n\n자문을 좀 구할까 하고 연락을 드렸습니다.\n\n \n\n팀 이전으로 당장 실현이 어려워졌겠지만, 우리 DS부문의 biz 확장을 위해서 host software에서 연구가 꼭 필요한 부분이다...라고\n\n평소에 생각하신 게 있다면 기탄없는 제안을 부탁드립니다.\n\n일전에, 분산 filesyste에 대해서도 고민을 좀 하셨던 거 같은데, 저희도 Flash-aware한 분산 filesystem이 아직도 팔 곳이 있을지,\n\n이미 지나친 red ocean topic이 아닌지 좀 우려되는 부분도 있습니다.\n\n심심하실 때 답장 한번 주세요.\n\n \n\n그럼, 조만간 또 한번 봅시다. 수고하세요~\n\n-- \nB ::= Peace, Love, Empathy & a Rose @}`-,--\n\"Brian M. JUNG\" <brian.m.jung@gmail.com>\n</pre>\n\n=== Barrier option in Ext3/Ext4 file system ===\n\n\n* Article 1 (kernelnewbies.org) <ref>http://kernelnewbies.org/Ext4</ref>\nThis is an option that improves the integrity of the filesystem at the cost of some performance (you can disable it with \"mount -o barrier=0\", recommended trying it if you\'re benchmarking). From this LWN article: \"The filesystem code must, before writing the [journaling] commit record, be absolutely sure that all of the transaction\'s information has made it to the journal. Just doing the writes in the proper order is insufficient; contemporary drives maintain large internal caches and will reorder operations for better performance. So the filesystem must explicitly instruct the disk to get all of the journal data onto the media before writing the commit record; if the commit record gets written first, the journal may be corrupted. The kernel\'s block I/O subsystem makes this capability available through the use of barriers; in essence, a barrier forbids the writing of any blocks after the barrier until all blocks written before the barrier are committed to the media. \'\'\'By using barriers, filesystems can make sure that their on-disk structures remain consistent at all times.\"\'\'\'\n\n\n* Article 2 (Redhat) <ref>https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Storage_Administration_Guide/writebarrieronoff.html</ref>\nTo mitigate the risk of data corruption during power loss, some storage devices use battery-backed write caches. Generally, high-end arrays and some hardware controllers use battery-backed write caches. However, because the cache\'s volatility is not visible to the kernel, Red Hat Enterprise Linux 6 enables write barriers by default on all supported journaling file systems.\n\n:- Performance issues\n:: Write caches are designed to increase I/O performance. However, enabling write barriers means constantly flushing these caches, which can significantly reduce performance.\n\n:- How to disable barrier option?\n:: For devices with non-volatile, battery-backed write caches and those with write-caching disabled, you can safely disable write barriers at mount time using the -o nobarrier option for mount. However, some devices do not support write barriers; such devices will log an error message to /var/log/messages (refer to Table 22.1, “Write barrier error messages per file system”).\n\n:- Write barrier error messages per file system\n{| class=\"wikitable sortable\"\n|-\n| File system || Error Message\n|-\n| ext3/ext4 || JBD: barrier-based sync failed on device - disabling barriers\n|-\n| XFS || Filesystem device - Disabling barriers, trial barrier write failed\n|-\n| btrfs || btrfs: disabling barriers on dev device\n|-\n|}\n\n\n\n=== Virtualization (KVM/QEMU/Xen) & IO Management ===\n\n\n==== KVM and QEMU ====\n* KVM과 QEMU 간의 역할 분담?\n\n==== Xen and QEMU ====\n* Xen이 QEMU를 어떻게 사용하는가?\n\n\n==== KVM/QEMU Storage Stack Performance Discussion (2010 Linux Plumbers Conference) ====\n\n* The State of KVM Block I/O Performance: Where We Are\n: The 50,000-foot View – QEMU Storage Stack\n: Where We Are Against Another “Popular” Hypervisor\n\n* Discussion: KVM / QEMU Settings\n: VirtIO vs. IDE emulation\n: KVM caching (cache=none vs. cache=writethrough)\n: Linux AIO support\n: No Barrier (barrier is enabled by default in ext4)\n: IO Schedulers: Deadline vs. CFQ\n: x2APIC support\n: AIO vs. threads\n: File Systems\n\n* Discussion: KVM Block I/O Performance Issues\n: Low Throughput\n: High (Virtual) CPU Usage In KVM Guests\n: Virtual Disk Image Formats\n: Others ?\n\n== ## bNote-2013-12-07 ==\n\n# [[NVMe Vs. AHCI]]\n# NVMe queue management mechanism\n# NVMe problem statement (PCI1320 Bus fatal error on bus 0 device 2 function 0 Power cycle system)\n# [[NVMe stack in Linux kernel (3.13.0-rc2, 2013-12-05)]]\n# [[Mediawiki color map]]\n\n== ## bNote-2013-12-06 ==\n\n\n<!--\n=== All pages at Wikini as of 2013-12-06 ===\n\n <pre>\n\n(News) 네트워크 업계 \"기다렸다, 런던올림픽\"	(News) 아카마이, \"CDN 넘어 하이퍼커넥티드로\"	(News) 아카마이, \"스트리밍/보안 서비스를 빠르고 안전하게\"\n(News) 아카마이, \"쌩쌩 웹사이트 만들려면\"	(News) 아카마이, \'블레이즈\' 인수 - 인텔리전트 플랫폼 강화	(News) 아카마이, CDN 장악 가속화 ... 코텐도 인수설\nAcademia intelligence	Artificial Neural Network	Artificial neural network\nBcode python cache lru	Bnote - References ( Papers / Patents / Articles )	Bnote 2013\nBnote 2013-01	Bnote 2013-02	Bnote 2013-03\nBnote 2013-04	Bnote 2013-05	Bnote 2013-06\nBnote 2013-07	Bnote 2013-08	Bnote 2013-09\nBnote 2013-10	Bnote 2013-11	Bnote 2013-12\nBnote Frequent Itemset Mining (FIM) / Association Rule Mining (ARM)	Bnote R	Bnote patidea 2013\nBnote patidea 2013-001	Bnote patidea 2013-002	Bnote patidea 2013-003\nBnote python	Bnote scratchpad	Brian Myungjune JUNG\nByung-Gon Chun	Cache algorithms	Conference: ACM SIGMOD 2013\nCurriculum vitae - Brian Myungjune JUNG	Curriculum vitae - Brian Myungjune JUNG (CV Brian)	DIMM\nData analytics	Data mining	Deep learning\nDefense Logic -- Big Data Platform Research in SAIT	Dm-cache	Exemplary .gnuplot configuration file for beautiful gnuplot graphs\nFoobar	GRUB 2	Git server on my local machine\nHidden Markov model (HMM)	Hierarchical temporal memory	I/O Workload Analysis\nI/O tracing on Microsoft Windows using xperf	IBM GPFS	IEEE ICCE 2014 Paper\nIOWA.data.tpcc 250gb 48h.mysql.R.addr:: Offset 100K, Len 1K	Industry intelligence - Flash Memory Summit 2013	Industry intelligence - big data\nIndustry intelligence - storage	Intelligent Battery Management System	Kworker\nLecture: Neural Networks for Machine Learning (by Geoffrey Hinton)	Lecture notes and online courses	Linux kernel\nLinux kernel - block layer plug/unplug	List of English stop words	List of Meta Files in Windows NTFS\nList of important processes in Microsoft Windows operating systems	Main Page	Master File Table in NTFS\nMixture model	NVM express	Nimble Storage\nOnline courses	OpenStack	Operating systems - Linux kernel\nPCI Express	PaperStudy // An Analysis of Traces from a Production MapReduce Cluster // CCGrid 2010	Periodicity transform\nPure Storage	RapidIO	Restricted Boltzmann machines\nStatistical computing software	System info 16-node cluster	TPC-C\nTemplate patidea	Text summarization	Tf-idf\nThoughts on In Memory Databases (Part 1)	Trick mode	Tutorial -- SSD caching using dm-cache\nUSENIX FAST 2013	Why In-Memory Computing Needs Flash	Windows Programming on Linux with MinGW\nWorkload analysis-driven system architecture design	Writing guide - software patent	X intelligence\nXen hypervisor\n\n</pre>\n-->\n\n=== KVM/QEMU Architecture and IO Stack ===\n\n* [https://www.google.co.kr/search?q=why+is+qemu+windows+so+slow&rlz=1C1OPRB_enKR556KR556&oq=why+is+qemu+windows+so+slow&aqs=chrome..69i57.14138j0j4&sourceid=chrome&espv=210&es_sm=122&ie=UTF-8#es_sm=122&espv=210&newwindow=1&q=IO+stack+qemu Google{IO stack qemu}]\n\n* [http://pic.dhe.ibm.com/infocenter/lnxinfo/v3r0m0/topic/liaav/LPCKVMSSPV2.1.pdf \"KVM / QEMU Storage Stack Performance Discussion,\" IBM, Linux Plumbers Conference 2010]\n\n* [http://events.linuxfoundation.org/slides/2011/linuxcon-japan/lcj2011_hajnoczi.pdf \"An Updated Overview of the QEMU Storage Stack,\" IBM, LinuxCon Japan 2011]\n\n* [http://www.linuxplumbersconf.org/2010/ocw/system/presentations/651/original/Optimizing_the_QEMU_Storage_Stack.pdf \"Optimizing the QEMU Storage Stack,\" IBM, Linux Plumbers Conference 2010]\n\n* [http://www.fujitsu.com/downloads/MAG/vol47-3/paper18.pdf \"Kernel-based Virtual Machine Technology\", Yoshihito Goro, Fujitsu Journal 2011]\n\n\n=== NVMe DAS test bed architecture ===\n\n{| class=\'wikitable sortable\'\n|-\n| LVol-00 || LVol-01 || LVol-02 || LVol-03 || LVol-04 || LVol-05 || LVol-06 || LVol-07\n|-\n|-\n| colspan=5 | nvme0n1p1 (484.61 GiB)\n| colspan=3 | nvme1n1p1 (260.61 GiB)\n|-\n| colspan=4 | /dev/nvme0n1 (372.61 GiB)\n| colspan=4 | /dev/nvme1n1 (372.61 GiB)\n|-\n|}\n\n== ## bNote-2013-12-04 ==\n\n\n=== OpenStack quota-update ===\n\n <pre>\n\nroot@grant-green:work %1# keystone tenant-list\n+----------------------------------+---------+---------+\n|                id                |   name  | enabled |\n+----------------------------------+---------+---------+\n| df7559de417a4968ad34f95b9dda5a4e |  admin  |   True  |\n| ad4662d7ec1249789feb2fad24e9f2e5 | service |   True  |\n+----------------------------------+---------+---------+\n\nroot@grant-green:work %1# nova quota-show\n+-----------------------------+-------+\n| Quota                       | Limit |\n+-----------------------------+-------+\n| instances                   | 48    |\n| cores                       | 96    |\n| ram                         | 51200 |\n| floating_ips                | 10    |\n| fixed_ips                   | -1    |\n| metadata_items              | 128   |\n| injected_files              | 5     |\n| injected_file_content_bytes | 10240 |\n| injected_file_path_bytes    | 255   |\n| key_pairs                   | 100   |\n| security_groups             | 10    |\n| security_group_rules        | 20    |\n+-----------------------------+-------+\n\nroot@grant-green:work %1# nova quota-update --instance 48 --cores 96 df7559de417a4968ad34f95b9dda5a4e\n\nroot@grant-green:work %1# nova quota-show\n+-----------------------------+-------+\n| Quota                       | Limit |\n+-----------------------------+-------+\n| instances                   | 48    |\n| cores                       | 96    |\n| ram                         | 51200 |\n| floating_ips                | 10    |\n| fixed_ips                   | -1    |\n| metadata_items              | 128   |\n| injected_files              | 5     |\n| injected_file_content_bytes | 10240 |\n| injected_file_path_bytes    | 255   |\n| key_pairs                   | 100   |\n| security_groups             | 10    |\n| security_group_rules        | 20    |\n+-----------------------------+-------+\n\n</pre>\n\n=== Linux kernel debugging using QEMU ===\n\n* [http://files.meetup.com/1590495/debugging-with-qemu.pdf Debugging Linux systems using GDB and QEMU]\n* [http://elinux.org/Debugging_The_Linux_Kernel_Using_Gdb Debugging the Linux Kernel Using GDB]\n\n\n\n=== Linux kernel (3.8.0) NVMe stack ===\n\n\n==== include/linux/nvme.h ====\n\n <pre>\n 24 struct nvme_bar {\n 25         __u64                   cap;    /* Controller Capabilities */\n 26         __u32                   vs;     /* Version */\n 27         __u32                   intms;  /* Interrupt Mask Set */\n 28         __u32                   intmc;  /* Interrupt Mask Clear */\n 29         __u32                   cc;     /* Controller Configuration */\n 30         __u32                   rsvd1;  /* Reserved */\n 31         __u32                   csts;   /* Controller Status */\n 32         __u32                   rsvd2;  /* Reserved */\n 33         __u32                   aqa;    /* Admin Queue Attributes */\n 34         __u64                   asq;    /* Admin SQ Base Address */\n 35         __u64                   acq;    /* Admin CQ Base Address */\n 36 };\n</pre>\n\n\n\n <pre>\n 42 \n 43 enum {\n 44         NVME_CC_ENABLE          = 1 << 0,\n 45         NVME_CC_CSS_NVM         = 0 << 4,\n 46         NVME_CC_MPS_SHIFT       = 7,\n 47         NVME_CC_ARB_RR          = 0 << 11,\n 48         NVME_CC_ARB_WRRU        = 1 << 11,\n 49         NVME_CC_ARB_VS          = 7 << 11,\n 50         NVME_CC_SHN_NONE        = 0 << 14,\n 51         NVME_CC_SHN_NORMAL      = 1 << 14,\n 52         NVME_CC_SHN_ABRUPT      = 2 << 14,\n 53         NVME_CC_IOSQES          = 6 << 16,\n 54         NVME_CC_IOCQES          = 4 << 20,\n 55         NVME_CSTS_RDY           = 1 << 0,\n 56         NVME_CSTS_CFS           = 1 << 1,\n 57         NVME_CSTS_SHST_NORMAL   = 0 << 2,\n 58         NVME_CSTS_SHST_OCCUR    = 1 << 2,\n 59         NVME_CSTS_SHST_CMPLT    = 2 << 2,\n 60 };\n 61 \n</pre>\n\n\n\n <pre>\n109 \n110 struct nvme_lbaf {\n111         __le16                  ms;\n112         __u8                    ds;\n113         __u8                    rp;\n114 };\n115 \n116 struct nvme_id_ns {\n117         __le64                  nsze;\n118         __le64                  ncap;\n119         __le64                  nuse;\n120         __u8                    nsfeat;\n121         __u8                    nlbaf;\n122         __u8                    flbas;\n123         __u8                    mc;\n124         __u8                    dpc;\n125         __u8                    dps;\n126         __u8                    rsvd30[98];\n127         struct nvme_lbaf        lbaf[16];\n128         __u8                    rsvd192[192];\n129         __u8                    vs[3712];\n130 };\n131 \n132 enum {\n133         NVME_NS_FEAT_THIN       = 1 << 0,\n134         NVME_LBAF_RP_BEST       = 0,\n135         NVME_LBAF_RP_BETTER     = 1,\n136         NVME_LBAF_RP_GOOD       = 2,\n137         NVME_LBAF_RP_DEGRADED   = 3,\n138 };\n139 \n140 struct nvme_lba_range_type {\n141         __u8                    type;\n142         __u8                    attributes;\n143         __u8                    rsvd2[14];\n144         __u64                   slba;\n145         __u64                   nlb;\n146         __u8                    guid[16];\n147         __u8                    rsvd48[16];\n148 };\n149 \n150 enum {\n151         NVME_LBART_TYPE_FS      = 0x01,\n152         NVME_LBART_TYPE_RAID    = 0x02,\n153         NVME_LBART_TYPE_CACHE   = 0x03,\n154         NVME_LBART_TYPE_SWAP    = 0x04,\n155 \n156         NVME_LBART_ATTRIB_TEMP  = 1 << 0,\n157         NVME_LBART_ATTRIB_HIDE  = 1 << 1,\n158 };\n159 \n\n</pre>\n\n\n\n <pre>\n159 \n160 /* I/O commands */\n161 \n162 enum nvme_opcode {\n163         nvme_cmd_flush          = 0x00,\n164         nvme_cmd_write          = 0x01,\n165         nvme_cmd_read           = 0x02,\n166         nvme_cmd_write_uncor    = 0x04,\n167         nvme_cmd_compare        = 0x05,\n168         nvme_cmd_dsm            = 0x09,\n169 };\n170 \n171 struct nvme_common_command {\n172         __u8                    opcode;\n173         __u8                    flags;\n174         __u16                   command_id;\n175         __le32                  nsid;\n176         __u32                   cdw2[2];\n177         __le64                  metadata;\n178         __le64                  prp1;\n179         __le64                  prp2;\n180         __u32                   cdw10[6];\n181 };\n182 \n183 struct nvme_rw_command {\n184         __u8                    opcode;\n185         __u8                    flags;\n186         __u16                   command_id;\n187         __le32                  nsid;\n188         __u64                   rsvd2;\n189         __le64                  metadata;\n190         __le64                  prp1;\n191         __le64                  prp2;\n192         __le64                  slba;\n193         __le16                  length;\n194         __le16                  control;\n195         __le32                  dsmgmt;\n196         __le32                  reftag;\n197         __le16                  apptag;\n198         __le16                  appmask;\n199 };\n200 \n201 enum {\n202         NVME_RW_LR                      = 1 << 15,\n203         NVME_RW_FUA                     = 1 << 14,\n204         NVME_RW_DSM_FREQ_UNSPEC         = 0,\n205         NVME_RW_DSM_FREQ_TYPICAL        = 1,\n206         NVME_RW_DSM_FREQ_RARE           = 2,\n207         NVME_RW_DSM_FREQ_READS          = 3,\n208         NVME_RW_DSM_FREQ_WRITES         = 4,\n209         NVME_RW_DSM_FREQ_RW             = 5,\n210         NVME_RW_DSM_FREQ_ONCE           = 6,\n211         NVME_RW_DSM_FREQ_PREFETCH       = 7,\n212         NVME_RW_DSM_FREQ_TEMP           = 8,\n213         NVME_RW_DSM_LATENCY_NONE        = 0 << 4,\n214         NVME_RW_DSM_LATENCY_IDLE        = 1 << 4,\n215         NVME_RW_DSM_LATENCY_NORM        = 2 << 4,\n216         NVME_RW_DSM_LATENCY_LOW         = 3 << 4,\n217         NVME_RW_DSM_SEQ_REQ             = 1 << 6,\n218         NVME_RW_DSM_COMPRESSED          = 1 << 7,\n219 };\n220 \n221 /* Admin commands */\n222 \n223 enum nvme_admin_opcode {\n224         nvme_admin_delete_sq            = 0x00,\n225         nvme_admin_create_sq            = 0x01,\n226         nvme_admin_get_log_page         = 0x02,\n227         nvme_admin_delete_cq            = 0x04,\n228         nvme_admin_create_cq            = 0x05,\n229         nvme_admin_identify             = 0x06,\n230         nvme_admin_abort_cmd            = 0x08,\n231         nvme_admin_set_features         = 0x09,\n232         nvme_admin_get_features         = 0x0a,\n233         nvme_admin_async_event          = 0x0c,\n234         nvme_admin_activate_fw          = 0x10,\n235         nvme_admin_download_fw          = 0x11,\n236         nvme_admin_format_nvm           = 0x80,\n237         nvme_admin_security_send        = 0x81,\n238         nvme_admin_security_recv        = 0x82,\n239 };\n240 \n241 enum {\n242         NVME_QUEUE_PHYS_CONTIG  = (1 << 0),\n243         NVME_CQ_IRQ_ENABLED     = (1 << 1),\n244         NVME_SQ_PRIO_URGENT     = (0 << 1),\n245         NVME_SQ_PRIO_HIGH       = (1 << 1),\n246         NVME_SQ_PRIO_MEDIUM     = (2 << 1),\n247         NVME_SQ_PRIO_LOW        = (3 << 1),\n248         NVME_FEAT_ARBITRATION   = 0x01,\n249         NVME_FEAT_POWER_MGMT    = 0x02,\n250         NVME_FEAT_LBA_RANGE     = 0x03,\n251         NVME_FEAT_TEMP_THRESH   = 0x04,\n252         NVME_FEAT_ERR_RECOVERY  = 0x05,\n253         NVME_FEAT_VOLATILE_WC   = 0x06,\n254         NVME_FEAT_NUM_QUEUES    = 0x07,\n255         NVME_FEAT_IRQ_COALESCE  = 0x08,\n256         NVME_FEAT_IRQ_CONFIG    = 0x09,\n257         NVME_FEAT_WRITE_ATOMIC  = 0x0a,\n258         NVME_FEAT_ASYNC_EVENT   = 0x0b,\n259         NVME_FEAT_SW_PROGRESS   = 0x0c,\n260 };\n261 \n</pre>\n\n\n\n\n <pre>\n261 \n262 struct nvme_identify {\n263         __u8                    opcode;\n264         __u8                    flags;\n265         __u16                   command_id;\n266         __le32                  nsid;\n267         __u64                   rsvd2[2];\n268         __le64                  prp1;\n269         __le64                  prp2;\n270         __le32                  cns;\n271         __u32                   rsvd11[5];\n272 };\n273 \n274 struct nvme_features {\n275         __u8                    opcode;\n276         __u8                    flags;\n277         __u16                   command_id;\n278         __le32                  nsid;\n279         __u64                   rsvd2[2];\n280         __le64                  prp1;\n281         __le64                  prp2;\n282         __le32                  fid;\n283         __le32                  dword11;\n284         __u32                   rsvd12[4];\n285 };\n286 \n287 struct nvme_create_cq {\n288         __u8                    opcode;\n289         __u8                    flags;\n290         __u16                   command_id;\n291         __u32                   rsvd1[5];\n292         __le64                  prp1;\n293         __u64                   rsvd8;\n294         __le16                  cqid;\n295         __le16                  qsize;\n296         __le16                  cq_flags;\n297         __le16                  irq_vector;\n298         __u32                   rsvd12[4];\n299 };\n300 \n301 struct nvme_create_sq {\n302         __u8                    opcode;\n303         __u8                    flags;\n304         __u16                   command_id;\n305         __u32                   rsvd1[5];\n306         __le64                  prp1;\n307         __u64                   rsvd8;\n308         __le16                  sqid;\n309         __le16                  qsize;\n310         __le16                  sq_flags;\n311         __le16                  cqid;\n312         __u32                   rsvd12[4];\n313 };\n314 \n315 struct nvme_delete_queue {\n316         __u8                    opcode;\n317         __u8                    flags;\n318         __u16                   command_id;\n319         __u32                   rsvd1[9];\n320         __le16                  qid;\n321         __u16                   rsvd10;\n322         __u32                   rsvd11[5];\n323 };\n324 \n325 struct nvme_download_firmware {\n326         __u8                    opcode;\n327         __u8                    flags;\n328         __u16                   command_id;\n329         __u32                   rsvd1[5];\n330         __le64                  prp1;\n331         __le64                  prp2;\n332         __le32                  numd;\n333         __le32                  offset;\n334         __u32                   rsvd12[4];\n335 };\n336 \n</pre>\n\n\n\n\n <pre>\n336 \n337 struct nvme_command {\n338         union {\n339                 struct nvme_common_command common;\n340                 struct nvme_rw_command rw;\n341                 struct nvme_identify identify;\n342                 struct nvme_features features;\n343                 struct nvme_create_cq create_cq;\n344                 struct nvme_create_sq create_sq;\n345                 struct nvme_delete_queue delete_queue;\n346                 struct nvme_download_firmware dlfw;\n347         };\n348 };\n349 \n350 enum {\n351         NVME_SC_SUCCESS                 = 0x0,\n352         NVME_SC_INVALID_OPCODE          = 0x1,\n353         NVME_SC_INVALID_FIELD           = 0x2,\n354         NVME_SC_CMDID_CONFLICT          = 0x3,\n355         NVME_SC_DATA_XFER_ERROR         = 0x4,\n356         NVME_SC_POWER_LOSS              = 0x5,\n357         NVME_SC_INTERNAL                = 0x6,\n358         NVME_SC_ABORT_REQ               = 0x7,\n359         NVME_SC_ABORT_QUEUE             = 0x8,\n360         NVME_SC_FUSED_FAIL              = 0x9,\n361         NVME_SC_FUSED_MISSING           = 0xa,\n362         NVME_SC_INVALID_NS              = 0xb,\n363         NVME_SC_LBA_RANGE               = 0x80,\n364         NVME_SC_CAP_EXCEEDED            = 0x81,\n365         NVME_SC_NS_NOT_READY            = 0x82,\n366         NVME_SC_CQ_INVALID              = 0x100,\n367         NVME_SC_QID_INVALID             = 0x101,\n368         NVME_SC_QUEUE_SIZE              = 0x102,\n369         NVME_SC_ABORT_LIMIT             = 0x103,\n370         NVME_SC_ABORT_MISSING           = 0x104,\n371         NVME_SC_ASYNC_LIMIT             = 0x105,\n372         NVME_SC_FIRMWARE_SLOT           = 0x106,\n373         NVME_SC_FIRMWARE_IMAGE          = 0x107,\n374         NVME_SC_INVALID_VECTOR          = 0x108,\n375         NVME_SC_INVALID_LOG_PAGE        = 0x109,\n376         NVME_SC_INVALID_FORMAT          = 0x10a,\n377         NVME_SC_BAD_ATTRIBUTES          = 0x180,\n378         NVME_SC_WRITE_FAULT             = 0x280,\n379         NVME_SC_READ_ERROR              = 0x281,\n380         NVME_SC_GUARD_CHECK             = 0x282,\n381         NVME_SC_APPTAG_CHECK            = 0x283,\n382         NVME_SC_REFTAG_CHECK            = 0x284,\n383         NVME_SC_COMPARE_FAILED          = 0x285,\n384         NVME_SC_ACCESS_DENIED           = 0x286,\n385 };\n386 \n</pre>\n\n\n\n\n <pre>\n386 \n387 struct nvme_completion {\n388         __le32  result;         /* Used by admin commands to return data */\n389         __u32   rsvd;\n390         __le16  sq_head;        /* how much of this queue may be reclaimed */\n391         __le16  sq_id;          /* submission queue that generated this entry */\n392         __u16   command_id;     /* of the command which completed */\n393         __le16  status;         /* did the command fail, and if so, why? */\n394 };\n395 \n396 struct nvme_user_io {\n397         __u8    opcode;\n398         __u8    flags;\n399         __u16   control;\n400         __u16   nblocks;\n401         __u16   rsvd;\n402         __u64   metadata;\n403         __u64   addr;\n404         __u64   slba;\n405         __u32   dsmgmt;\n406         __u32   reftag;\n407         __u16   apptag;\n408         __u16   appmask;\n409 };\n410 \n411 struct nvme_admin_cmd {\n412         __u8    opcode;\n413         __u8    flags;\n414         __u16   rsvd1;\n415         __u32   nsid;\n416         __u32   cdw2;\n417         __u32   cdw3;\n418         __u64   metadata;\n419         __u64   addr;\n420         __u32   metadata_len;\n421         __u32   data_len;\n422         __u32   cdw10;\n423         __u32   cdw11;\n424         __u32   cdw12;\n425         __u32   cdw13;\n426         __u32   cdw14;\n427         __u32   cdw15;\n428         __u32   timeout_ms;\n429         __u32   result;\n430 };\n431 \n432 #define NVME_IOCTL_ID           _IO(\'N\', 0x40)\n433 #define NVME_IOCTL_ADMIN_CMD    _IOWR(\'N\', 0x41, struct nvme_admin_cmd)\n434 #define NVME_IOCTL_SUBMIT_IO    _IOW(\'N\', 0x42, struct nvme_user_io)\n435 \n\n</pre>\n\n\n==== drivers/block/nvme.c ====\n\n\n <pre>\n  44 \n  45 #define NVME_Q_DEPTH 1024\n  46 #define SQ_SIZE(depth)          (depth * sizeof(struct nvme_command))\n  47 #define CQ_SIZE(depth)          (depth * sizeof(struct nvme_completion))\n  48 #define NVME_MINORS 64\n  49 #define NVME_IO_TIMEOUT (5 * HZ)\n  50 #define ADMIN_TIMEOUT   (60 * HZ)\n  51 \n  52 static int nvme_major;\n  53 module_param(nvme_major, int, 0);\n  54 \n  55 static int use_threaded_interrupts;\n  56 module_param(use_threaded_interrupts, int, 0);\n  57 \n  58 static DEFINE_SPINLOCK(dev_list_lock);\n  59 static LIST_HEAD(dev_list);\n  60 static struct task_struct *nvme_thread;\n  61 \n</pre>\n\n\n\n\n <pre>\n  62 /*\n  63  * Represents an NVM Express device.  Each nvme_dev is a PCI function.\n  64  */\n  65 struct nvme_dev {\n  66         struct list_head node; \n  67         struct nvme_queue **queues;    \n  68         u32 __iomem *dbs;      \n  69         struct pci_dev *pci_dev;\n  70         struct dma_pool *prp_page_pool;\n  71         struct dma_pool *prp_small_pool;\n  72         int instance;\n  73         int queue_count;       \n  74         int db_stride;         \n  75         u32 ctrl_config;       \n  76         struct msix_entry *entry;\n  77         struct nvme_bar __iomem *bar;\n  78         struct list_head namespaces;\n  79         char serial[20];\n  80         char model[40];\n  81         char firmware_rev[8];\n  82         u32 max_hw_sectors;\n  83 };\n  84 \n  85 /*     \n  86  * An NVM Express namespace is equivalent to a SCSI LUN\n  87  */    \n  88 struct nvme_ns {\n  89         struct list_head list; \n  90        \n  91         struct nvme_dev *dev;  \n  92         struct request_queue *queue;\n  93         struct gendisk *disk;  \n  94        \n  95         int ns_id;\n  96         int lba_shift;         \n  97 };     \n  98 \n  99 /*     \n 100  * An NVM Express queue.  Each device has at least two (one for admin\n 101  * commands and one for I/O commands).\n 102  */\n 103 struct nvme_queue {\n 104         struct device *q_dmadev;\n 105         struct nvme_dev *dev;\n 106         spinlock_t q_lock;\n 107         struct nvme_command *sq_cmds;\n 108         volatile struct nvme_completion *cqes;\n 109         dma_addr_t sq_dma_addr;\n 110         dma_addr_t cq_dma_addr;\n 111         wait_queue_head_t sq_full;\n 112         wait_queue_t sq_cong_wait;\n 113         struct bio_list sq_cong;\n 114         u32 __iomem *q_db;\n 115         u16 q_depth;\n 116         u16 cq_vector;\n 117         u16 sq_head;\n 118         u16 sq_tail;\n 119         u16 cq_head;\n 120         u16 cq_phase;\n 121         unsigned long cmdid_data[];\n 122 };\n 123 \n</pre>\n\n== ## bNote-2013-12-03 ==\n\n=== Linux kernel IO stack: Block Layer ===\n\n==== Linux Documentation ====\n\n; Documentation/block/queue-sysfs.txt\n\n <pre>\n1	Queue sysfs files\n2	=================\n3	\n4	This text file will detail the queue files that are located in the sysfs tree\n5	for each block device. Note that stacked devices typically do not export\n6	any settings, since their queue merely functions are a remapping target.\n7	These files are the ones found in the /sys/block/xxx/queue/ directory.\n8	\n9	Files denoted with a RO postfix are readonly and the RW postfix means\n10	read-write.\n11	\n12	add_random (RW)\n13	----------------\n14	This file allows to trun off the disk entropy contribution. Default\n15	value of this file is \'1\'(on).\n16	\n17	discard_granularity (RO)\n18	-----------------------\n19	This shows the size of internal allocation of the device in bytes, if\n20	reported by the device. A value of \'0\' means device does not support\n21	the discard functionality.\n22	\n23	discard_max_bytes (RO)\n24	----------------------\n25	Devices that support discard functionality may have internal limits on\n26	the number of bytes that can be trimmed or unmapped in a single operation.\n27	The discard_max_bytes parameter is set by the device driver to the maximum\n28	number of bytes that can be discarded in a single operation. Discard\n29	requests issued to the device must not exceed this limit. A discard_max_bytes\n30	value of 0 means that the device does not support discard functionality.\n31	\n32	discard_zeroes_data (RO)\n33	------------------------\n34	When read, this file will show if the discarded block are zeroed by the\n35	device or not. If its value is \'1\' the blocks are zeroed otherwise not.\n36	\n37	hw_sector_size (RO)\n38	-------------------\n39	This is the hardware sector size of the device, in bytes.\n40	\n41	iostats (RW)\n42	-------------\n43	This file is used to control (on/off) the iostats accounting of the\n44	disk.\n45	\n46	logical_block_size (RO)\n47	-----------------------\n48	This is the logcal block size of the device, in bytes.\n49	\n50	max_hw_sectors_kb (RO)\n51	----------------------\n52	This is the maximum number of kilobytes supported in a single data transfer.\n53	\n54	max_integrity_segments (RO)\n55	---------------------------\n56	When read, this file shows the max limit of integrity segments as\n57	set by block layer which a hardware controller can handle.\n58	\n59	max_sectors_kb (RW)\n60	-------------------\n61	This is the maximum number of kilobytes that the block layer will allow\n62	for a filesystem request. Must be smaller than or equal to the maximum\n63	size allowed by the hardware.\n64	\n65	max_segments (RO)\n66	-----------------\n67	Maximum number of segments of the device.\n68	\n69	max_segment_size (RO)\n70	---------------------\n71	Maximum segment size of the device.\n72	\n73	minimum_io_size (RO)\n74	--------------------\n75	This is the smallest preferred io size reported by the device.\n76	\n77	nomerges (RW)\n78	-------------\n79	This enables the user to disable the lookup logic involved with IO\n80	merging requests in the block layer. By default (0) all merges are\n81	enabled. When set to 1 only simple one-hit merges will be tried. When\n82	set to 2 no merge algorithms will be tried (including one-hit or more\n83	complex tree/hash lookups).\n84	\n85	nr_requests (RW)\n86	----------------\n87	This controls how many requests may be allocated in the block layer for\n88	read or write requests. Note that the total allocated number may be twice\n89	this amount, since it applies only to reads or writes (not the accumulated\n90	sum).\n91	\n92	To avoid priority inversion through request starvation, a request\n93	queue maintains a separate request pool per each cgroup when\n94	CONFIG_BLK_CGROUP is enabled, and this parameter applies to each such\n95	per-block-cgroup request pool.  IOW, if there are N block cgroups,\n96	each request queue may have up to N request pools, each independently\n97	regulated by nr_requests.\n98	\n99	optimal_io_size (RO)\n100	--------------------\n101	This is the optimal io size reported by the device.\n102	\n103	physical_block_size (RO)\n104	------------------------\n105	This is the physical block size of device, in bytes.\n106	\n107	read_ahead_kb (RW)\n108	------------------\n109	Maximum number of kilobytes to read-ahead for filesystems on this block\n110	device.\n111	\n112	rotational (RW)\n113	---------------\n114	This file is used to stat if the device is of rotational type or\n115	non-rotational type.\n116	\n117	rq_affinity (RW)\n118	----------------\n119	If this option is \'1\', the block layer will migrate request completions to the\n120	cpu \"group\" that originally submitted the request. For some workloads this\n121	provides a significant reduction in CPU cycles due to caching effects.\n122	\n123	For storage configurations that need to maximize distribution of completion\n124	processing setting this option to \'2\' forces the completion to run on the\n125	requesting cpu (bypassing the \"group\" aggregation logic).\n126	\n127	scheduler (RW)\n128	--------------\n129	When read, this file will display the current and available IO schedulers\n130	for this block device. The currently active IO scheduler will be enclosed\n131	in [] brackets. Writing an IO scheduler name to this file will switch\n132	control of this block device to that new IO scheduler. Note that writing\n133	an IO scheduler name to this file will attempt to load that IO scheduler\n134	module, if it isn\'t already present in the system.\n135	\n136	\n137	\n138	Jens Axboe <jens.axboe@oracle.com>, February 2009\n</pre>\n\n\n\n\n==== Linux kernel 3.8.0 source code ====\n\n; block/blk-settings.c: blk_queue_make_request()\n <pre>\n\n152 /**\n153  * blk_queue_make_request - define an alternate make_request function for a device\n154  * @q:  the request queue for the device to be affected\n155  * @mfn: the alternate make_request function\n156  *\n157  * Description:\n158  *    The normal way for &struct bios to be passed to a device\n159  *    driver is for them to be collected into requests on a request\n160  *    queue, and then to allow the device driver to select requests\n161  *    off that queue when it is ready.  This works well for many block\n162  *    devices. However some block devices (typically virtual devices\n163  *    such as md or lvm) do not benefit from the processing on the\n164  *    request queue, and are served best by having the requests passed\n165  *    directly to them.  This can be achieved by providing a function\n166  *    to blk_queue_make_request().\n167  *\n168  * Caveat:\n169  *    The driver that does this *must* be able to deal appropriately\n170  *    with buffers in \"highmemory\". This can be accomplished by either calling\n171  *    __bio_kmap_atomic() to get a temporary kernel mapping, or by calling\n172  *    blk_queue_bounce() to create a buffer in normal memory.\n173  **/\n174 void blk_queue_make_request(struct request_queue *q, make_request_fn *mfn)\n175 {\n176         /*\n177          * set defaults\n178          */\n179         q->nr_requests = BLKDEV_MAX_RQ;\n180 \n181         q->make_request_fn = mfn;\n182         blk_queue_dma_alignment(q, 511);\n183         blk_queue_congestion_threshold(q);\n184         q->nr_batching = BLK_BATCH_REQ;\n185 \n186         blk_set_default_limits(&q->limits);\n187 \n188         /*\n189          * by default assume old behaviour and bounce for any highmem page\n190          */\n191         blk_queue_bounce_limit(q, BLK_BOUNCE_HIGH);\n192 }\n193 EXPORT_SYMBOL(blk_queue_make_request);\n\n</pre>\n\n\n\n\n; include/linux/blkdev.h: BLKDEV_MAX_RQ\n <pre>\n  38 #define BLKDEV_MAX_RQ   128     /* Default maximum */\n</pre>\n\n\n\n\n; block/blk-sysfs.c: /* Functions related to sysfs handling */\n <pre>\n 40 \n 41 static ssize_t queue_requests_show(struct request_queue *q, char *page)\n 42 {\n 43         return queue_var_show(q->nr_requests, (page));\n 44 }\n 45 \n 46 static ssize_t\n 47 queue_requests_store(struct request_queue *q, const char *page, size_t count)\n 48 {\n 49         struct request_list *rl;\n 50         unsigned long nr;\n 51         int ret;\n 52 \n 53         if (!q->request_fn)\n 54                 return -EINVAL;\n 55 \n 56         ret = queue_var_store(&nr, page, count);\n 57         if (ret < 0)\n 58                 return ret;\n 59 \n 60         if (nr < BLKDEV_MIN_RQ)\n 61                 nr = BLKDEV_MIN_RQ;\n 62 \n 63         spin_lock_irq(q->queue_lock);\n 64         q->nr_requests = nr;\n 65         blk_queue_congestion_threshold(q);\n 66 \n 67         /* congestion isn\'t cgroup aware and follows root blkcg for now */\n 68         rl = &q->root_rl;\n 69 \n 70         if (rl->count[BLK_RW_SYNC] >= queue_congestion_on_threshold(q))\n 71                 blk_set_queue_congested(q, BLK_RW_SYNC);\n 72         else if (rl->count[BLK_RW_SYNC] < queue_congestion_off_threshold(q))\n 73                 blk_clear_queue_congested(q, BLK_RW_SYNC);\n 74 \n 75         if (rl->count[BLK_RW_ASYNC] >= queue_congestion_on_threshold(q))\n 76                 blk_set_queue_congested(q, BLK_RW_ASYNC);\n 77         else if (rl->count[BLK_RW_ASYNC] < queue_congestion_off_threshold(q))\n 78                 blk_clear_queue_congested(q, BLK_RW_ASYNC);\n 79 \n 80         blk_queue_for_each_rl(rl, q) {\n 81                 if (rl->count[BLK_RW_SYNC] >= q->nr_requests) {\n 82                         blk_set_rl_full(rl, BLK_RW_SYNC);\n 83                 } else {\n 84                         blk_clear_rl_full(rl, BLK_RW_SYNC);\n 85                         wake_up(&rl->wait[BLK_RW_SYNC]);\n 86                 }\n 87 \n 88                 if (rl->count[BLK_RW_ASYNC] >= q->nr_requests) {\n 89                         blk_set_rl_full(rl, BLK_RW_ASYNC);\n 90                 } else {\n 91                         blk_clear_rl_full(rl, BLK_RW_ASYNC);\n 92                         wake_up(&rl->wait[BLK_RW_ASYNC]);\n 93                 }\n 94         }\n 95 \n 96         spin_unlock_irq(q->queue_lock);\n 97         return ret;\n 98 }\n 99 \n\n</pre>\n\n\n\n; drivers/block/nvme.c: NVME_Q_DEPTH\n <pre>\n  44 \n  45 #define NVME_Q_DEPTH 1024\n  46 #define SQ_SIZE(depth)          (depth * sizeof(struct nvme_command))\n  47 #define CQ_SIZE(depth)          (depth * sizeof(struct nvme_completion))\n  48 #define NVME_MINORS 64\n  49 #define NVME_IO_TIMEOUT (5 * HZ)\n  50 #define ADMIN_TIMEOUT   (60 * HZ)\n  51 \n</pre>\n\n== ## bNote-2013-12-02 ==\n\n=== XS-1715 Specification ===\n\n==== Key features ====\n\n* Performance\n: Optimized for 4KB random read and write workloads\n:- Performance Target\n::- More than 700K IOPS for 4KB random reads\n::- More than 200K IOPS for 4KB random writes (sustained)\n\n* Mapping Algorithm\n:- 4KB full page mapping\n:- FN21 4-planes program support \n:- FN21 4KB fast read support\n:- Hot/cold data separtion (ESP_MM_Mapping.c)\n:- Concurrent garbage collection during user page writes\n:- Non-blocking DRAM access to avoid pipeline bubbles of CPU\n:- No hardware register access at all during user read/write request processing\n:- Journal log information reduction for fast power-down and fast recovery at boot-up\n:- Flash RAID-5 support\n\n\n\n=== Admin/Misc ===\n\n* DS 인사 (전배관련): \'\'\'정영민 대리\'\'\', 박필 사원\n:-> 정영민 대리에게 확인. (OK)\n\n<!--\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:57]:\n  정대리님, 안녕하세요?\n  이번 10월 1일자로 기술원에서 SW개발팀으로 전배 온\n  정명준 책임입니다. \n  내년 승격 관련해서\n  문의드리고자 연락 드렸습니다\n  잠시 시간 되시는지요?\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:00]:\n  네\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:00]:\n  안녕하세요? 혹시 기술원의 김경진 차장으로부터\n  차년도 승격 관련해서\n  연락 받으셨던 것이 있으신지 궁금해서요~\n  제가 기술원 기준으로는 차년도 승격이 되는데\n  여기 전배를 오게 되면서, 승격 예외 대상자로 \n  예외 승격 대상자\n  로 분류해서 내년에 수석 진급이 보장될 수 있도록\n  해주겠다는 이야기를 들었었거든요\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:02]:\n  네 예전에 관련 결재를 통보받았으나, 책임님 명단이 있는지는 확인해봐야겠습니다\n  잠시만요\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:02]:\n  네~\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:05]:\n  네 확인했습니다. 책임님 승격되십니다\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:05]:\n  아 감사합니다~\n  이번에 저와 같이 오셨던\n  신현정 책임도 같이\n  승격 되는 것 맞죠?\n  저희 2명이 \n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:06]:\n  넵\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:06]:\n  된다고 들었었거든요\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:06]:\n  2명입니다\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:06]:\n  확인해주셔서 감사합니다. 그럼 저희 2명이 특별히\n  따로 더 할 일이\n  할 일은 없는 건지요?\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:06]:\n  넵\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:06]:\n  아, 잘 알겠습니다. \n  감사합니다. 좋은 오후 보내세요  \n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:07]:\n  네 수고하셔요~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:07]:\n  넵 감사합니다 ^^\n-->\n\n<!--\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:53]:\n  김과장님, 안녕하세요? 10월 1일자로 기술원에서 메모리사 S/W 개발팀으로 전배 온 정명준 책임입니다.\n  승격 관련해서 여쭙고자 연락 드렸습니다\n  잠시 시간 되시는지요?\n‎‎김효근(G5(과장)/담당과장/삼성전자)‎‎ [오후 1:54]:\n  아 네...\n  담당자는 박필 사원이나 \n  정영민 대리입니다. \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:55]:\n  아하 \n‎‎김효근(G5(과장)/담당과장/삼성전자)‎‎ [오후 1:55]:\n  정영민 대리는 지금 통화중이네요... \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:55]:\n  아, 그럼 잠시 후 정영민 대리에게 연락해보겠습니다 알려주셔서 감사합니다 ^_^\n‎‎김효근(G5(과장)/담당과장/삼성전자)‎‎ [오후 1:57]:\n  전 인력운영 담당자라 \n  승격에 대해서는 제가 정확한 답변을 못 드릴 것 같습니다. \n  정대리 전화 끊었네요\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:57]:\n  아, 감사합니다 ^^\n  연락해보겠습니다  \n-->\n\n<!--\n: <strike>DS 인사 담당: 김효근 과장, 이창익 대리 (인력 이동 관련)</strike> Updated: 정영민대리가 담당임.\n: 10/17 김경진 차장 - 내년 승격 대상자는 기술원 인사팀에서 본사에 얘기해놓았으며, 11.1일자 인력들과 같이 해서 예외 대상자들 품의를 받아 사업부에 뿌릴 예정이라고 함\n-->\n\n== References ==\n\n<references/>','utf-8'),(2061,'\n\n\n\n\n <pre>\n   December 2013\nSu Mo Tu We Th Fr Sa\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n</pre>\n\n\n\n\n\n== ## bNote-2013-12-12 ==\n\n=== MySQL handling ===\n\n* mysql> show status like \'innodb_%\'\n\n <pre>\nmysql> show status like \'innodb_%\';\n+---------------------------------------+---------+\n| Variable_name                         | Value   |\n+---------------------------------------+---------+\n| Innodb_buffer_pool_pages_data         | 389     |\n| Innodb_buffer_pool_bytes_data         | 6373376 |\n| Innodb_buffer_pool_pages_dirty        | 0       |\n| Innodb_buffer_pool_bytes_dirty        | 0       |\n| Innodb_buffer_pool_pages_flushed      | 0       |\n| Innodb_buffer_pool_pages_free         | 5119611 |\n| Innodb_buffer_pool_pages_misc         | 0       |\n| Innodb_buffer_pool_pages_total        | 5120000 |\n| Innodb_buffer_pool_read_ahead_rnd     | 0       |\n| Innodb_buffer_pool_read_ahead         | 0       |\n| Innodb_buffer_pool_read_ahead_evicted | 0       |\n| Innodb_buffer_pool_read_requests      | 5600    |\n| Innodb_buffer_pool_reads              | 390     |\n| Innodb_buffer_pool_wait_free          | 0       |\n| Innodb_buffer_pool_write_requests     | 0       |\n| Innodb_data_fsyncs                    | 3       |\n| Innodb_data_pending_fsyncs            | 0       |\n...\n</pre>\n\n== ## bNote-2013-12-11 ==\n\n=== Xian SSD Benchmark Test ===\n\n==== Environment ====\n <pre>\nHardware Server	HP DL380p Gen8\nCPU: 2xIntel XeonE5-2665@2.40GHz;\nMemory: 128GB\nStorage	Seagate HDD, 1TB, 7200rpm\nIntel SSD S3500, 480G\nSamsung SSD SM843Tns, 960G\n\nSoftware\nOS Centos 6.4 (2.6.32-358.el6.x86_64)\nI/O Scheduler: CFQ/Noop\nFile system	EXT4/XFS\nMySQL DB	Percona Server 5.6.14\n\nConfiguration:\nskip-grant-tables\ninnodb_buffer_pool_size = 80000M\ninnodb_thread_concurrency = 32 \ninnodb_spin_wait_delay = 30 \ninnodb_sync_spin_loops = 100\ninnodb_max_dirty_pages_pct = 90\ninnodb_lock_wait_timeout = 120\ninnodb_doublewrite = 0\ninnodb_flush_method = O_DIRECT\ninnodb_log_buffer_size = 256M\ninnodb_log_file_size = 8192M\ninnodb_log_block_size=4096\ninnodb_write_io_threads=16\ninnodb_read_io_threads=16\ninnodb_io_capacity=20000\ninnodb_file_format=barracuda\nmax_connections=3000\nquery_cache_size=0\nskip-name-resolve\n	tpcc-mysql	Revision 48. \nConfigurations\nThe CentOS is installed on HDD, filesystem is EXT4.\nThe Percona database is also installed on HDD, but the datadir is a directory on Samsung SSD.\nSamsung SSD SM843Tns 960GB is divided into two 480G partitions, XFS format. Only one partition is used for benchmarking, the other partition is fully written with unused data.\n\nPercona Server Installation\nResource: http://www.percona.com/downloads/Percona-Server-5.6/LATEST/RPM/rhel6/x86_64/\n\nInstall Step:\n1.Download Percona Server, client and shared rpm packages.\n2.Remove old mysql packages: \nyum –y remove mysql, mysql-server, mysql-libs-*.\n3.Install Percona shared, client, server packages:\n	rpm –ivhPercona-Server-shared-XXX.rpm\nrpm –ivhPercona-Server-client-XXX.rpm\nrpm –ivhPercona-Server-server-XXX.rpm\n4. Mysql secure installation: \nRun /usr/bin/mysql_secure_installation (default root user password is NULL)\n\nStart and Stop MySQL:\n	service mysql start/stop\n/etc/init.d/mysqlstart/stop\n\nLogin MySQL:\nmysql -uroot –p\n\nModify password:\nmysqladmin -uroot -p password\n\ntpcc-mysql installation\nResource:\nhttps://code.launchpad.net/~percona-dev/perconatools/tpcc-mysql\n\nInstall Step:\ncdsrc\nmake\n\nFAQ:\n1.	Can’t find header file\nexport C_INCLUDE_PATH=$MYSQL_HOME/include\n2.	Can’t find mysql_config\nexport PATH=$MYSQL_HOME/bin:$PATH\n3.	Can’t find mysql lib\nexport LD_LIBRARY_PATH=$MYSQL_HOME/lib\n\nLoad data:\n1.	Create database\nshell>mysqladmin create tpcc2500\nmysql> create database tpcc2500;\n2.	Create tables\nshell> mysql –uroot –p tpcc2500 <create_table.sql\n3.	Create indexes and FK\nshell> mysql –uroot –p tpcc2500 <add_fkey_idx.sql\n4.	Populate data (long time needed)\nsimple step:\nshell>./tpcc_loadlocalhost tpcc2500 root xxxx2500\nUsage:  tpcc_load [server] [DBname] [user] [pass] [warehouse]\nref. tpcc_load --help for all options\nload data in parallel (Recommanded)\nshell>./load.sh tpcc2500 2500\ncheck load.sh script, need to modify, add password\n\nStart benchmark:\n1.	Usage\ntpcc_start -h server_host -P port -d database_name -u mysql_user -p mysql_password -w warehouses -c connections -r warmup_time -l running_time -ireport_interval -f report_file -t trx_file\n2.	Example\n./tpcc_start -hlocalhost–dtpcc2500 -uroot -pxxxx–w2500 –c128 -r0 –l10800–i10\n\nBenchmarking parameters:\n2500 warehouses\n128 connections\nWarm up time: 0\nRunning time: 10800\nReport interval: 10 \n</pre>\n\n\n=== SSD initialization ===\n\n==== ATA secure erase ====\n\n* [http://www.manualslib.com/manual/490034/Dell-Poweredge-External-Media-System-1434.html?page=14 Intel 320 SSD ATA Instant Secure Erase Functionality]\n: Intel 320 SSDs support cryptography-based Instant ATA secure erase functionality. The Intel 320 SSD Instant ATA secure ease feature is non-TCG (Trusted Computing Group) based. It supports two modes of crypto secure erase:\n\n:* Normal secure erase—Clears the encryption keys and erases NAND\n:* Enhanced secure erase—Generates new keys and clears NAND.\n\n: The PERC solution only supports the \"crypto erase\" function on TCG-compliant Enterprise SED (Self Encrypting Drive)drives. When an Intel 320 drive is connected to a PERC, there is an incompatibility between PERC TCG method of crypto erase and Intel 320 supported non-TCG based ATA instant secure erase.\n: <span style=\"background:gold\">As a result, the instant secure erase functionality can\'t be used with PERC based solution.</span> The only way to run instant ATA secure ease and use Intel 320 drive secure wiping feature is to connect the drives directly into the motherboard chipset\'s ATA port and issue secure erase command. Intel provides a free utility (Intel SSDToolbox) to instant secure erase the drive, which you can download from www.intel.com/go/ssdtoolbox\n\n==== Talk with JinJin ====\n <pre>\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:42]:\n  Hi, Jinjin  \n  My name is M.J. JUNG (brian.m.jung@samsung.com)\n  introduced by M.S. Kwon in recent mails\n  ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:42]:\n  Hi~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:42]:\n  Ni Hao~ ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:43]:\n  Can I call you Brian or MyungJune?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:43]:\n  Oh, Brian is preferred ! ^^\n  just call me brian  \n  can I call you JinJin?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:43]:\n  yes, sure\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:43]:\n  oh, great ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:43]:\n   \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:43]:\n  I\'ve got your mail regarding the benchmark ~\n  and could I ask you something on that issue? \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:44]:\n  of course\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:44]:\n  oh, thank you  \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:44]:\n  you\'re welcome \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:44]:\n  wow ^___^ \n  is there any reason to use percona version of mysql? ^^\n  actually my current system is Ubuntu running MySQL (original)\n  so, if I should make a test bed \n  exactly same as yours ~\n  I should remove my old DB (mysql) ^^;;;;\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:46]:\n  so special reason, mysql is also Ok, I think, but I\'m not sure whether you can reproduce it with mysql\n  no special reason\n  sorry, typo\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:46]:\n  oh, got your point!\n  (no need to say sorry  ^^ I\'m the king of typo generation hahah)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:47]:\n  haha, so nice of you\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:47]:\n  wow ^^ it\'s great for me to talk to you too!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:47]:\n  i think you can try it on your system first\n  if you can\'t reproduce, then use percona \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:48]:\n  oh, great! and then if I could not generate that same situation on my old system, then I SHOULD change my system, ^^\n  GOT IT!\n   \n  and one more thing to ask !\n  ^^\n  what about the Intel case? \n  I\'ve seen that the red line\n  in your graph~\n  Could you see the same type of red line \n  every time you tested?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:50]:\n  I just test once with Intel case\n  because of time limit\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:50]:\n  ok~ got it ^^\n  then, I can repeat the test for intel case to make it more complete test~ can this help you?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:51]:\n  I think intel case is ok since it\'s stable after one hour test\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:51]:\n  oh,\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:51]:\n  sure\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:51]:\n  did you make the SSD (intel, Samsung) in the  steady-state before each test?\n  (great ^^)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:52]:\n  I\'m not sure \n  i just remove all data on the disk\n  didn\'t erase \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:52]:\n  a-ha! ^^\n  got some point!  \n  we usually\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:52]:\n  maybe that\'s the reason\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:52]:\n  make the SSDs be in the \'steady-state\' before each test, \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:53]:\n  yes, i learn it today\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:53]:\n  because \'steady-state\' makes the performance of SSD be in the stable state\n  Oh great  ^^\n  You may find good article regarding \'steady state\' \n  in the SNIA\n  site\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:54]:\n  thank you! \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:54]:\n  http://www.snia.org/sites/default/education/tutorials/2011/fall/SolidState/EstherSpanjer_The_Why_How_SSD_Performance_Benchmarking.pdf\n  (oh, you\'re quite welcome)\n  oh, this is more updated version.\n  http://www.snia.org/sites/default/files/SNIASSSI.SSDPerformance-APrimer2013.pdf\n  And, maybe HJ Lim send you the script\n  to perform an operation to make \'steady-state\' SSD\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:55]:\n  thank you! I can open it \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:55]:\n  great!^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:56]:\n  yes, he did!\n  I also have one question\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:56]:\n  Please let me know any question or let me get your comments regarding this collaboration - Benchmark test -\n  ok, i\'m ready!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:56]:\n  should I use \"security erase\" or \"Enhanced security erase\" ?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:56]:\n  ah, physically, you mean?\n  maybe not, only if you perform the script HJ Lim gave. \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:57]:\n  in HJ Lim\'s guide, there are two kinds of security erase\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:57]:\n  to be sure, Could you send me the copy of the script that HJ Lim gave to you?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:57]:\n  I don\'t know which one to use\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:58]:\n  Let me check and then answer to you \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:58]:\n  ok, i will send to you\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:58]:\n  ok! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:00]:\n  I have sent it to you\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:00]:\n  Ok, I\'ll check it right now ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:01]:\n   \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:04]:\n  Oh, this way with \'hdparm\', let you have the SSD of clean state (at the virgin state when SSD is manufactured)\n  so, it is preferred  \n  If you have any problem with this, please let me know  \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:05]:\n  so what\'s the difference of steady state and virgin state?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:06]:\n  oh, great question!\n  usually state state means:\n  very bad condition to SSD\n  - because we introduce very harsh IOs to SSD to make the performance of SSD stable (sequential writes and then random writes to SSD for a long time)\n  but virgin state itself can give us the good performance (reportedly)\n  So, I proper to proceed like this.\n  firstly, make the SSD at the virgin state (manufactured state)\n  and then, make the SSD be in the steady-state (by introducing some harsh IO requests - there are well-known script to do this)\n  --- Regarding this way (two steps)\n  , I\'ll check the preferred script to use in this benchmark\n  and then let you know  \n  (also send it to you, if required)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:11]:\n  thank you! your answer is so good!\n  I got your point\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:11]:\n  oh, it\'s my honour to hear that from you\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:11]:\n  so do you have some script to do harsh IO requests?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:12]:\n  yes, my version ^^\n  using FIO\n  you know FIO?\n  (Flexible IO benchmark program)\n  http://freecode.com/projects/fio\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:12]:\n  yes, i have heard of it, but never use it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:13]:\n  But i\'m not sure that script is enough for our benchmark, so I SHOULD check it out to MS KWON.\n  wait a second, please. let me check   I\'ll be back. \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:14]:\n  ok, thank you. I will wait for you...\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:18]:\n  Oh, Jinjin, Long time no see! ^^\n  I\'m back! ^^\n  with a clear answer for you!\n  Ready to talk? ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:19]:\n  haha^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:19]:\n  seems you are ready ^^\n  ok~\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:20]:\n  yes, i\'m ready^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:20]:\n  ^^ yes!!!\n  We will go with Two cases!\n  first case is:\n  using only virgin state. (good for performance, maybe)\n  second case is:\n  make virgin state and then also dirtify script to make it steady state ^^\n  (this is preferred way that SNIA recommends - to make the performance test fair)\n  ----- was my explanation clear ?\n  if not, please ask ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:23]:\n  yes, very clear!\n  I got your point\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:23]:\n  oh, you \'re super smart!!!!!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:23]:\n  thank you !\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:24]:\n  thank you !!! ^___^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:24]:\n  haha^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:24]:\n  (actually, my English is not good~ so I\'ve worried that my talk was unclear -_-; \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:24]:\n  it\'s very happy to talk with you!!!\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:24]:\n  oh~ great for me! TOOO!!!!\n  let\'s have a talk from time to time, any time welcomed!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:25]:\n  I think your english is very good! your type much faster than me\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:25]:\n  oh~~~~~~~~~ ^^;;;\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:25]:\n  sure\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:26]:\n  sure, great!!! i\'ll get back to you when I get some progress! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:26]:\n  ok, thank you again for your help!!\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:26]:\n  oh, you\'re quite welcom!\n  my pleasure!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:27]:\n  any time any questions are welcomed!!!\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:27]:\n  wow, great!!!!^^\n  Ok, CU!! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:27]:\n  CU!\n   \n</pre>\n\n\n <pre>\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:40]:\n  Hi, Jinjin!!! ^^\n  any problem to use the FIO script?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:41]:\n  morning, Brian\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  wow~ Good morning, Jinjin!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  I haven\'t tried it yet\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  oh, no problem~ ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  yesterday, we tried the hdparm\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  if you need any help regarding that, please feel free to tell me ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  seems it doesn\'t work\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  ooops~\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  we are still trying to fix it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:43]:\n  i\'ve also heard sometimes it does not work on some types of SSD\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:43]:\n  there will be some errors when we use hdparm -I /dev/sdc\n  /dev/sdc:\nSG_IO: bad/missing sense data, sb[]:  70 00 05 00 00 00 00 0a 00 00 00 00 20 00                                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  do you have any idea about it?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:44]:\n  oh, did you check the capability with \'hdparm -I /dev/sdc\'\n  ?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:44]:\n  yes\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:44]:\n  large i option\n  oh~\n  what about the report from that command?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:45]:\n  [root@ds-me jinjin]# hdparm -I /dev/sdc\n\n/dev/sdc:\nSG_IO: bad/missing sense data, sb[]:  70 00 05 00 00 00 00 0a 00 00 00 00 20 00                                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n\nATA device, with non-removable media\nStandards:\n        Likely used: 1\nConfiguration:\n        Logical         max     current\n        cylinders       0       0\n        heads           0       0\n        sectors/track   0       0\n        --\n        Logical/Physical Sector size:           512 bytes\n        device size with M = 1024*1024:           0 MBytes\n        device size with M = 1000*1000:           0 MBytes\n        cache/buffer size  = unknown\nCapabilities:\n        IORDY not likely\n        Cannot perform double-word IO\n        R/W multiple sector transfer: not supported\n        DMA: not supported\n        PIO: pio0\n  that\'s the whole output, can you see it?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:46]:\n  oh, seems there\'s no section \'Security\'\n  you might also refer to the site http://tinyapps.org/docs/wipe_drives_hdparm.html\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:47]:\n  ok, thank you! i\'ll read it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:47]:\n  Ok, hope to hear good news from you ^__^\n  ah~\n  one more question ^^\n  Could I ask you how much is the DB file size (in GB) when population is completed?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:49]:\n  sure^^\n  if you populate 2500 warehouses\n  it\'s about 247GB\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:49]:\n  oh~ !!!\n  the place of the 9 DB files must be under /var/lib/mysql/tpcc...\n  right?\n  and one problematic thing for my case is, currently we have no such a super machine with over 128GB DRAM ~ -_-;;\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:52]:\n  yes, the default datadir path is /var/lib/mysql/tpcc...\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:52]:\n  so I could not configure db buffer pool size as 80GB yet \n  Ok, got it!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:53]:\n  you may need to store the tpcc2500 on the SSD for testing\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:53]:\n  you\'re right!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:53]:\n  that\'s ok, just set the db buffer pool size to about 70%~80% of your memory size\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:54]:\n  ok~ good advice! ^^\n  did you configure the place to store TPCC DB in /etc/mysql/my.cnf?\n  or, just using load.sh ?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:54]:\n  yes, you can using /etc/mysql/my.cnf\n  just write the following in my.cnf\n\n [mysqld]\ndatadir=/your/path\n\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:56]:\n  thank you so much, Jinjin! ^^\n  Ok, CU soon! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:57]:\n  you are welcome~~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:57]:\n  hahahah ^^ so nice of you!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:57]:\n  any questions, just let me know^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:58]:\n  oh, great!!!! thank you Jinjin, You Too!!!! (anytime welcomed!) ^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:49]:\n  hi, Jinjin~\n  ^^\n  some small update for you~\n  regarding secure erase failure you mentioned\n  reply anytime when you\'re ready to talk ^__^\n  (maybe you already found this info.)\n  http://www.manualslib.com/manual/490034/Dell-Poweredge-External-Media-System-1434.html?page=14\n  Please see the section \"Intel 320 SSD ATA Instant Secure Erase Functionality\"\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:52]:\n  Hi, Brian~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:52]:\n  Wow! Jinjin!\n  ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:52]:\n  thanks for the info\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:52]:\n  oh, you\'re welcome!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:52]:\n  our server is HP, not Dell\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:53]:\n  oh, I see!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:53]:\n  I\'m still looking for servier configuration\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:53]:\n  what about the HW RAID on your system?\n  do you use HW RAID to access that SSD?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:53]:\n  I think it\'s the server\'s smart array card \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:53]:\n  oh!\n  that\'s the point! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:54]:\n  so now i\'m looking for how to change it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:54]:\n  maybe, that means, your application access to your SSDs through that \"smart array card (HW RAID)\" ~\n  right?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:54]:\n  yes\n  we need to let app access ssd directly\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:55]:\n  yes!!! exactly ^^\n  If your HP system does not allow that bypassing,\n  then, we can try the Plan B.\n  Plan B means, \n  maybe that RAID card controlling screen (during boot? ) support direct Secure Erase (or something like that)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:56]:\n  sorry, brian, i have an urgent issue, i will be back in 15 min\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:56]:\n  ok!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:56]:\n  CU soon\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:56]:\n  no prob!\n  CU soon!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 6:23]:\n  Hi~ brian\n  i\'m back~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 6:24]:\n  Oh~~ ^^ Welcome back!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 6:25]:\n  yes, the plan B can be supported, I see in the guide they have a tool to do secure erase druing boot\n  but I haven\'t tried it\n  it\'s not convienent because we can\'t use script to do it\n  i\'ll try to find the way to bypass raid\n  thank you agian for your advice^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 6:46]:\n  Sorry Jinjin for no response (been away from my desk), ^^;;;;  Ok, I\'ll also check another way to work around  \n  Thank you for your kind explanation ^__^, and let\'s talk again tomorrow~  \n</pre>\n\n== ## bNote-2013-12-10 ==\n\n\n\n=== PCIe Specification ===\n\nhttp://komposter.com.ua/documents/PCI_Express_Base_Specification_Revision_3.0.pdf\n\n\n=== NVMe Tutorial ===\n\n: [http://www.flashmemorysummit.com/English/Collaterals/Proceedings/2013/20130812_PreConfD_Marks.pdf By Kevin Marks, Dell, Inc. Flash Memory Summit 2013 Santa Clara, CA]\n\n\n* NVMe defines an optimized queuing interface, command set, feature set for PCIe SSDs\n\n\n* NVMe release timeline\n:- NVMe 1.0 release (2011-03-01)\n::- Queuing interface\n::- NVM command set, admin command set\n::- End-to-end protection (DIF/DIX), security\n::- Physical region pages (PRPs)\n:- NVMe 1.1 release (2012-10-11)\n::- General Scatter/Gather Lists (SGLs)\n::- Multi-path I/O & namespace sharing\n::- Reservations\n::- Autonomous power transitions during idle\n\n\n* advanced points of NVMe relative to AHCI\n:- Remove uncacheable reads from command issue/completion\n::- ??? uncacheable reads? why so bad to remove?\n:- Minimize MIMO writes in command issue/completion path\n::- ??? MIMO? why bad to minimize?\n:- Support for deep command queues and to simplify command decoding and processing\n::- ??? what method to simplify?\n:- Support MSI-X / flexible interrupt aggregation\n::- ??? what is flexible interrupt aggregation? is it different from MSI-X?\n:- Support for many core systems\n::- ??? concretely how?\n:- Support enterprise features\n::- ??? exactly what?\n:- Comprehensive statistics / health status reporting / robust error reporting & handling\n::- ???\n\n\n* NVMe usage model\n:- Server caching\n::- used to reduce memory footprint\n::- for temporary data\n:- Server storage\n::- for persistent data\n::- Redundant (i.e., RAID\'ed)\n::- commonly used as tier-0 storage\n:- Client storage\n::- used for boot/os-partition/HDD-cache\n::- non-redundant\n::- power optimized\n:- External storage\n::- used for metadata or data\n::- multi-ported device\n::- redundancy based on usage\n\n\n* NVMe queues\n:- NVMe uses circular queues to pass messages (e.g., commands and command completion notifications.)\n:- The queues may be located anywhere in PCIe memory\n::- Typically queues are located in host memory\n::- Queues may consist of a contiguous block of physical memory\n::  or optionally a non-contiguous set of physical memory pages (defined by a PRP List)\n:- A Queue consists of set of fixed sized elements\n:- Tail\n::- Points to next free element\n::- If an element is added to the element pointed to by the tail,\n::  the tail is incremented to point to next free element taking wrapping into consideration\n:- Head\n::- Points to next entry to be pulled off, if queue is not empty\n::- If an element is removed from the element pointed to by the head,\n::  the head is incremented to point to the next element taking wrapping into consideration\n:- Queue Size (Usable)\n::- Number of entries in the queue - 1\n::- Minimum size is 2, Maximum is ~ 64K for IO  Queues and 4K for Admin Queue\n:- Queue Empty\n::- Head == Tail\n:- Queue Full\n::- Head == Tail + 1 (mod # of queue entries)\n\n\n* Types of queues\n:- Admin queue for admin command set\n::- One per NVMe controller with up to 4K elements per queue\n::- Used to configure IO queues and controller/feature management\n:- IO queues for IO command sets (e.g., NVM command set)\n::- Up to 64K queues per NVMe controller with up to 64K elements per queue\n::- Used to submit/complete IO commands\n:- , where each type of queue (admin queue, IO queues) has\n::- Submission queue (SQ)\n:::- Queues messages from host to controller\n:::- Used to submit commands\n:::- Identified by SQ ID\n::- Completion queue (CQ)\n:::- Queues messages from controller to host\n:::- Used to post command completions\n:::- Identified by CQ ID\n:::- May have an independent MSI-X interrupt per completion queue\n: /* NVMe queues are messaging queues, not command queues -- What does this mean? */\n\n\n\n* Scalable queuing interface\n:- Enables NUMA optimized drivers\n::- Per core: one or more SQ, one CQ, and one MSI-X interrupt\n::- High performance and low latency command issue\n::- No locking between cores\n:- Up to ~2^32 outstanding commands\n::- Support for up to ~64K IO submission and completion queues\n::- Each queue supports up to ~64K outstanding commands\n\n\n\n* Command arbitration\n:- All controllers support round robin (RR) arbitration\n::- RR{ASQ, SQ, SQ, ..., SQ}\n:- An NVMe controller may support weighted round robin (WRR) with urgent priority class arbitration\n::- Priority{Strict_Priority_1, Strict_Priority_2, Strict_Priority_3}\n:::- Strict_Priority_1{ASQ}\n:::- Strict_Priority_2{RR{SQ.urgent, SQ.urgent}}\n:::- Strict_Priority_3{WRR{\n::::- Weight_High.RR{SQ.high, SQ.high, SQ.high},\n::::- Weight_Medium.RR{SQ.medium, SQ.medium, SQ.medium},\n::::- Weight_Low.RR{SQ.low, SQ.low, SQ.low}\n::: }}\n\n\n\n* Arbitration primitives\n:- Priority Arb. Vs. WRR Arb.\n::- Example above shown with an arbitration burst of no limit\n::- NVMe supports an arbitration burst of 1, 2, 4, 8, 16, 32, 64 and no limit\n::- NVMe supports 8-bit WRR weights\n\n\n\n* NVMe controller register map\n{| class=\"wikitable sortable\"\n|-\n| Start || End || Symbol || Description\n|-\n| 00h || 07h || CAP || Controller Capabilities\n|-\n|}\n\n\n\n* Controller initialization\n\n\n\n* SQ element with PRBs (64B)\n\n\n\n* Physical Region Pages (PRBs)\n\n\n\n* Example: PRP, PRP list\n\n\n\n* SQ element with SGLs (64B)\n\n\n\n* Scatter Gather List (SGL)\n\n\n\n* CQ element (16B)\n\n\n\n* Phase tag operation\n\n\n\n* NVMe command sets\n:- Command set = { Admin Command Set, IO Command Set = { NVM Cmd Set, Rsvd #1, Rsvd #2, Rsvd #3 } }\n\n\n\n* Admin commands\n{| class=\"wikitable sortable\"\n|-\n| Category || Command || Required/Optional\n|-\n| rowspan=\"4\" | Queue Management\n| Create IO Submission Queue\n| Required\n|-\n| Delete IO Submission Queue\n| Required\n|-\n| Create IO Completion Queue\n| Required\n|-\n| Delete IO Completion Queue\n| Required\n|-\n| rowspan=\"3\" | Configuration\n| Identify\n| Required\n|-\n| Get Features\n| Required\n|-\n| Set Features\n| Required\n|-\n| rowspan=\"2\" | Status Reporting\n| Get Log Pages\n| Required\n|-\n| Asynchronous Event Request\n| Required\n|-\n| Abort Command\n| Abort\n| Required\n|-\n| rowspan=\"2\" | Firmware Update/Management\n| Firmware Image Download\n| Optional\n|-\n| Firmware Activate\n| Optional\n|-\n| IO Command Set Specific\n| IO Command Set Specific Commands\n| Optional\n|-\n| Vendor Specific\n| Vendor Specific Commands\n| Optional\n|-\n|}\n: All admin commands use PRPs\n\n\n\n* Create IO SQ\n:- Queue Priority (OPRIO)\n:- Physically Contiguous (PC)\n\n\n\n* Create IO CQ\n:- Interrupt Enable (IEN)\n:- Physically Contiguous (PC)\n\n\n\n* Identify\n\n\n\n* Active namespace reporting\n\n\n\n* Identify controller data structure\n\n== ## bNote-2013-12-09 ==\n\n\n\n=== NVMe IO stack analysis ===\n\n\n==== nvme source code ====\n\n\n <pre>\n\nblusjune@buddy-guy:~ %1$ cat /x/t/nvme_iostack_analysis.c\n\n\nnvme_probe(struct pci_dev *pdev, const struct pci_device_id *id)\n{\n        struct nvme_dev * dev;\n        /*\n         * memory space will be allocated to \'dev\'\n         * and then\n         * \'dev->entry\' will have memory space\n         *      proportional to the \'num_possible_cpus()\'\n         * \'dev->queues\' will have memory space\n         *      proportional to the \'num_possible_cpus() + 1\' <- why \'+1\' here?\n         * , where num_possible_cpus() means\n         *      number of cpus populatable (fixed at boot time),\n         *      i.e., set of CPU id\'s possible to be plugged in\n         *      at anytime during the life of system boot\n         */\n\n\n        // ...\n\n\n        dev->pci_dev = pdev; // pdev argument will be assigned to \'dev->pci_dev\'\n\n\n        result = nvme_set_instance(dev);\n        /*\n         * allocate new integer ID to dev->instance\n         *\n         * Internally, this uses Idr (integer ID management)\n         * , where Idr is a set of library functions\n         *      for the management of small integer ID numbers.\n         *      In essence, an idr object can be thought of\n         *      as a sparse array mapping integer IDs onto arbitrary pointers,\n         *      with a \"get me an available entry\" function as well.\n         *\n         * URL: http://lwn.net/Articles/103209/\n         */\n\n\n        result = nvme_setup_prp_pools(dev);\n        /*\n         * dev->prp_page_pool = dma_pool_create(\"prp list page\",\n         *      &dev->pci_dev->dev, PAGE_SIZE, PAGE_SIZE, 0)\n         *\n         * and the comment says that there is an optimization\n         * for I/Os between 4k and 128k (is it still 128k? not 256k?)\n         * by the following code:\n         * dev->prp_small_pool = dma_pool_create(\"prp list 256\",\n         *      &dev->pci_dev->dev, 256, 256, 0);\n         *\n         * PRPs (Physical Region Pages) contains\n         * the 64-bit physical memory page address.\n         * The lower bits (n:2) of this field indicate\n         * the offset within the memory page\n         * n is defined by the memory page size (CC.MPS)\n         *\n         * PRP list contains a list of PRPs with generally no offsets\n         * which means non-contiguous set of physical memory pages\n         *\n         * mm/dmapool.c:dma_pool_create(const char * name, struct device *dev, sizt_t size, size_t align, size_t boundary)\n         *\n         */\n\n\n        result = nvme_dev_start(dev);\n        /*\n         * nvme_dev_start() {\n         *      nvme_dev_map(dev);\n         *      nvme_configure_admin_queue(dev);\n         *      list_add(&dev->node, &dev_list);\n         *      nvme_setup_io_queues(dev);\n         * }\n         */\n\n\n        result = nvme_dev_add(dev);\n\n\n}\n\n\ndrivers/block/nvme-core.c:nvme_setup_io_queues()\n{\n        (int) nr_io_queues = num_online_cpus();\n\n}\n\n</pre>\n\n==== Vectored I/O (a.k.a scatter/gather I/O) ====\n\n* <span style=\"background:gold\">Why vectored I/O in NVMe and DMA?</span>\n\n\n* Vectored I/O (a.k.a scatter/gather I/O) is a method of input and output by which a single procedure call sequentially writes data from multiple buffers to a single data stream or reads data from a data stream to multiple buffers.\n\n* The buffers are given in a vector of buffers. Scatter/gather refers to the process of gathering data from, or scattering data into, the given set of buffers.\n\n* Vectored I/O can operate synchronously or asynchronously.\n\n* The main reasons for using vectored I/O are efficiency and convenience.\n\n\n\n* Several usages for vectored I/O:\n\n:* Atomicity\n:: If the particular vectored I/O implementation supports atomicity, a process can write into or read from a set of buffers to or from a file without risk that another thread or process might perform I/O on the same file between the first process\' reads or writes, thereby corrupting the file or compromising the integrity of the input\n\n:* Concatenating output\n:: An application that wants to write non-sequentially placed data in memory can do so in one vectored I/O operation. For example, writing a fixed-size header and its associated payload data that are placed non-sequentially in memory can be done by a single vectored I/O operation without first concatenating the header and the payload to another buffer\n\n:* Efficiency\n:: One vectored I/O read or write can replace many ordinary reads or writes, and thus save on the overhead involved in syscalls\n\n:* Splitting input\n:: When reading data that is in a format that defines a fixed-size header, one can use a vector of buffers in which the first buffer is the size of that header; and the second buffer will contain the data associated with the header\n\n\n\n\n* Implementation cases as system calls\n: readv() and writev()\n\n\n\n=== Communications ===\n\n* DS SW 연구소 장우석 수석님\n<!--\n <pre>\n\n이주평/정명준 책임,\n\n좋은 의견들 감사합니다.\n\n우연스럽게도, 저희가 추진하는 산학과제 건과 묘하게 일치하는 면이 있네요.\n\nBig Data cluster의 analytical modeling과, Ceph과 같은 분산파일시스템의 SSD 최적화 등에 대해서 제안을 해 보는 중입니다.\n\n \n\nSRA 과제 하면서도 긴밀하게 많은 이야기를 나누면서 서로 역할분담과 협력을 잘 해나가면 좋을 거 같아요.\n\n능력있는 분들이 많이 가셨으니, 사업부 개발팀에서도 훌륭한 결과물들이 많이 나오리라 기대해 봅니다.\n\n권수석 통해서 조만간 SRA 과제에 대해서도 논의하는 자리를 한번 마련해 보는 게 좋겠습니다.\n\n \n\n------- Original Message -------\n\nSender : 정명준<brian.m.jung@samsung.com> S5(책임)/책임/S/W개발팀(메모리)/삼성전자\n\nDate : 2013-12-10 14:07 (GMT+09:00)\n\nTitle : Re: Re: Fwd: Re: Flash Host Software 자문\n\n \n\n \n\n장수석님, 안녕하세요? ^^\n답장이 늦었습니다. 죄송합니다.\n\n\n최근들어 여기 사업부에서도 SSD 자체를 잘 하기 위해서는\nHost side에 대한 이해가 중요하다는 공감대가 커지고 있다는 것을 느낍니다.\n\n \n\n이러한 상황에서, 사업부에서 하기는 어렵지만,\n사업부에서 결국 필요로 하는 것을 생각해보았습니다.\n다음 두 가지가 우선 떠올랐습니다.\n\n \n\n1) 타겟 시스템 아키텍쳐의 이론적 성능/스케일링 한계 규명\n2) 차세대 Data Center에서 요구될만한 새로운 Compute/Data Model 제시\n\n \n\n1과 2를 포함하는 예를 들어본다면 (다음 문장이 사실인 것은 아닙니다 - 그냥 example입니다~),\n\"기존 SAN/NAS 구조에서는 어느 수준 이상의 Heavy한 Concurrent IO Stream들이 몰릴 경우 Controller 부분이 병목이 되어 N 대 이상 Scaling이 힘들다. 따라서 이를 해결할 수 있는 방안으로써, (가) Shared-nothing 구조의 Storage Controller Architecture를 통해 해결 가능하다든지, (나) 기존의 hierarchical file system 구조로부터 탈피하여 liear하게 scaling 가능한 key-value data model로 전환하여 어느 수준의 performance scaling 이득을 가져올 수 있다든지, (다) VDI와 같은 특정한 케이스인 경우, Nutanix, Pivot3 등과 같은 Converged Storage Architecture를 통해 해결이 가능하다\" 등과 같은 식의 결론/Insight을 \'구체적인 수치를 통해\' 얻을 수 있다면 좋겠다는 생각이 들었습니다.\n\n \n\n또한, 분석적인 접근, 이론적 한계 규명/극복 및 시뮬레이션/분석을 중요하게 여기시던 메모리사 신임 사장님 성향과도 부합하지 않을까 싶습니다.\n수석님 보시기에는 어떠신지요?\n\n \n\n정말 제 개인적인 의견이었습니다. (Just my two ... ^^)\n\n \n\n감사합니다.\n\n정명준 드림.\n\n \n\n \n\n \n\n------- Original Message -------\n\nSender : 장우석<wooseok_chang@samsung.com> S6(수석)/수석/소프트웨어연구소/삼성전자\n\nDate : 2013-12-04 20:12 (GMT+09:00)\n\nTitle : Re: Fwd: Re: Flash Host Software 자문\n\n \n\n바쁘신 중에 답변 감사합니다.\n\nSSIC에서 Ceph 검토하던 시점에 Inktank 모체인 UCSC 연구실도 같이 만나고 해서, 그쪽에서 진행하고 있다는 건 잘 알고 있습니다만,\n\n구체적으로 어떻게 과제로 연결하고 있는 건지, 그냥 투자만 하고 있는 건지는 잘 모르겠습니다.\n\n그리고, 저희 연구소에서도 SSD와 분산파일시스템을 엮는 것은 산학과제로 추진하는 것도 있는데,\n\n분산파일시스템이라는 게... 어차피 middleware이고 underlying filesystem의 영향을 많이 받는다면,\n\n후자의 SSD 최적화가 더 우선적인 거 아닐까요...?\n\n분산파일시스템 알고리즘 자체가 performance나 scalability가 좋아지는 건 많은 아이디어가 있겠지만,\n\nFlash에 최적화될 여지가 많은 건지는, 그래서 좀 의심스러울 때가 있습니다. Just my two cents...\n\n \n\n------- Original Message -------\n\nSender : 이주평<jupyung.lee@samsung.com> S5(책임)/책임/S/W개발팀(메모리)/삼성전자\n\nDate : 2013-12-04 19:56 (GMT+09:00)\n\nTitle : Fwd: Re: Flash Host Software 자문\n\n \n\n한가지 덧붙이자면,\n\n당사 부품을 기반으로 뇌를 모사한 highly scalable & fault-tolerant distributed computing platform을 구축해봐도 좋을 것 같습니다.\n\n(제가 너무 많이 나갔나요? ^^)\n\n \n\n- 이주평 드림 -\n\n \n\n------- Original Message -------\n\nSender : 이주평<jupyung.lee@samsung.com> S5(책임)/책임/S/W개발팀(메모리)/삼성전자\n\nDate : 2013-12-04 19:54 (GMT+09:00)\n\nTitle : Re: Flash Host Software 자문\n\n \n\n장수석님 안녕하세요\n\n먼저 답변이 늦어서 죄송합니다.\n\n \n\n분명히 DS부문의 biz 확장을 위한 host software 연구가 필요하겠는데요...\n\n저희도 기술원 떠나오고 사업부에 있다보니 감이 많이 떨어지고(??) 그래서 쉽게 연구 theme이 떠오르지는 않는데요...\n\n요즘 점차 뜨고 있는 Machine Learning Platform이나 Graph Data Processing Platform등을 당사 DS 부품을 기반으로 구축해 보면 어떨까 하는 생각이 드네요.\n\n분산파일시스템 관련해서는 여전히 기회가 있다고 보는데요, SSIC에서는 CEPH를 많이 들여다보고 있더라구요.\n\nblock/file/object을 동시에 지원할 수 있는 유연한 구조라고요. 궁극적으로는 각 SSD가 직접 network에 붙어서 각 SSD가 분산파일시스템 node같이 동작하는\n\n구조를 생각하고 있던데, 이 부분도 재미있는 방향 같습니다.\n\n자꾸 DS에서 시스템 한다고 하면 customer conflict 얘기하고, 시비를 많이 거시는데, 우리 부품을 scale-out하게 엮으면 그 자체가 그냥 system이 되는 구조로... (not requiring additional software/hardware component)\n\n이런 방향도 재미있지 않을까 싶습니다.\n\n \n\n감사합니다.\n\n- 이주평 드림 -\n\n \n\n------- Original Message -------\n\nSender : 장우석<wooseok_chang@samsung.com> S6(수석)/수석/소프트웨어연구소/삼성전자\n\nDate : 2013-11-28 14:23 (GMT+09:00)\n\nTitle : Flash Host Software 자문\n\n \n\n이책임, 정책임 - 호칭이 새로와졌네요. ㅎㅎ\n\n어제는 옛 팀원인 황주영 수석을 만나서 SRA 과제에 대한 많은 이야기를 나누었습니다.\n\n앞으로도 좋은 협력관계가 될 수 있도록 서로 노력해 보기로 합시다.\n\n \n\n...와 별도로. ;-)\n\n저희 Big Data팀에서 올 한 해 가상화+Hadoop+SSD에 대한 연구를 내년도에 어떻게 확장할까에 대해서도 고민을 좀 하고 있습니다.\n\n각자 이제 다른 과제들에 집중하고 있겠지만, 전에 Flash storage의 host software에 대한 것도 고민을 많이 하셨던 분들이라서,\n\n자문을 좀 구할까 하고 연락을 드렸습니다.\n\n \n\n팀 이전으로 당장 실현이 어려워졌겠지만, 우리 DS부문의 biz 확장을 위해서 host software에서 연구가 꼭 필요한 부분이다...라고\n\n평소에 생각하신 게 있다면 기탄없는 제안을 부탁드립니다.\n\n일전에, 분산 filesyste에 대해서도 고민을 좀 하셨던 거 같은데, 저희도 Flash-aware한 분산 filesystem이 아직도 팔 곳이 있을지,\n\n이미 지나친 red ocean topic이 아닌지 좀 우려되는 부분도 있습니다.\n\n심심하실 때 답장 한번 주세요.\n\n \n\n그럼, 조만간 또 한번 봅시다. 수고하세요~\n\n-- \nB ::= Peace, Love, Empathy & a Rose @}`-,--\n\"Brian M. JUNG\" <brian.m.jung@gmail.com>\n</pre>\n-->\n\n=== Barrier option in Ext3/Ext4 file system ===\n\n\n* Article 1 (kernelnewbies.org) <ref>http://kernelnewbies.org/Ext4</ref>\nThis is an option that improves the integrity of the filesystem at the cost of some performance (you can disable it with \"mount -o barrier=0\", recommended trying it if you\'re benchmarking). From this LWN article: \"The filesystem code must, before writing the [journaling] commit record, be absolutely sure that all of the transaction\'s information has made it to the journal. Just doing the writes in the proper order is insufficient; contemporary drives maintain large internal caches and will reorder operations for better performance. So the filesystem must explicitly instruct the disk to get all of the journal data onto the media before writing the commit record; if the commit record gets written first, the journal may be corrupted. The kernel\'s block I/O subsystem makes this capability available through the use of barriers; in essence, a barrier forbids the writing of any blocks after the barrier until all blocks written before the barrier are committed to the media. \'\'\'By using barriers, filesystems can make sure that their on-disk structures remain consistent at all times.\"\'\'\'\n\n\n* Article 2 (Redhat) <ref>https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Storage_Administration_Guide/writebarrieronoff.html</ref>\nTo mitigate the risk of data corruption during power loss, some storage devices use battery-backed write caches. Generally, high-end arrays and some hardware controllers use battery-backed write caches. However, because the cache\'s volatility is not visible to the kernel, Red Hat Enterprise Linux 6 enables write barriers by default on all supported journaling file systems.\n\n:- Performance issues\n:: Write caches are designed to increase I/O performance. However, enabling write barriers means constantly flushing these caches, which can significantly reduce performance.\n\n:- How to disable barrier option?\n:: For devices with non-volatile, battery-backed write caches and those with write-caching disabled, you can safely disable write barriers at mount time using the -o nobarrier option for mount. However, some devices do not support write barriers; such devices will log an error message to /var/log/messages (refer to Table 22.1, “Write barrier error messages per file system”).\n\n:- Write barrier error messages per file system\n{| class=\"wikitable sortable\"\n|-\n| File system || Error Message\n|-\n| ext3/ext4 || JBD: barrier-based sync failed on device - disabling barriers\n|-\n| XFS || Filesystem device - Disabling barriers, trial barrier write failed\n|-\n| btrfs || btrfs: disabling barriers on dev device\n|-\n|}\n\n\n\n=== Virtualization (KVM/QEMU/Xen) & IO Management ===\n\n\n==== KVM and QEMU ====\n* KVM과 QEMU 간의 역할 분담?\n\n==== Xen and QEMU ====\n* Xen이 QEMU를 어떻게 사용하는가?\n\n\n==== KVM/QEMU Storage Stack Performance Discussion (2010 Linux Plumbers Conference) ====\n\n* The State of KVM Block I/O Performance: Where We Are\n: The 50,000-foot View – QEMU Storage Stack\n: Where We Are Against Another “Popular” Hypervisor\n\n* Discussion: KVM / QEMU Settings\n: VirtIO vs. IDE emulation\n: KVM caching (cache=none vs. cache=writethrough)\n: Linux AIO support\n: No Barrier (barrier is enabled by default in ext4)\n: IO Schedulers: Deadline vs. CFQ\n: x2APIC support\n: AIO vs. threads\n: File Systems\n\n* Discussion: KVM Block I/O Performance Issues\n: Low Throughput\n: High (Virtual) CPU Usage In KVM Guests\n: Virtual Disk Image Formats\n: Others ?\n\n== ## bNote-2013-12-07 ==\n\n# [[NVMe Vs. AHCI]]\n# NVMe queue management mechanism\n# NVMe problem statement (PCI1320 Bus fatal error on bus 0 device 2 function 0 Power cycle system)\n# [[NVMe stack in Linux kernel (3.13.0-rc2, 2013-12-05)]]\n# [[Mediawiki color map]]\n\n== ## bNote-2013-12-06 ==\n\n\n<!--\n=== All pages at Wikini as of 2013-12-06 ===\n\n <pre>\n\n(News) 네트워크 업계 \"기다렸다, 런던올림픽\"	(News) 아카마이, \"CDN 넘어 하이퍼커넥티드로\"	(News) 아카마이, \"스트리밍/보안 서비스를 빠르고 안전하게\"\n(News) 아카마이, \"쌩쌩 웹사이트 만들려면\"	(News) 아카마이, \'블레이즈\' 인수 - 인텔리전트 플랫폼 강화	(News) 아카마이, CDN 장악 가속화 ... 코텐도 인수설\nAcademia intelligence	Artificial Neural Network	Artificial neural network\nBcode python cache lru	Bnote - References ( Papers / Patents / Articles )	Bnote 2013\nBnote 2013-01	Bnote 2013-02	Bnote 2013-03\nBnote 2013-04	Bnote 2013-05	Bnote 2013-06\nBnote 2013-07	Bnote 2013-08	Bnote 2013-09\nBnote 2013-10	Bnote 2013-11	Bnote 2013-12\nBnote Frequent Itemset Mining (FIM) / Association Rule Mining (ARM)	Bnote R	Bnote patidea 2013\nBnote patidea 2013-001	Bnote patidea 2013-002	Bnote patidea 2013-003\nBnote python	Bnote scratchpad	Brian Myungjune JUNG\nByung-Gon Chun	Cache algorithms	Conference: ACM SIGMOD 2013\nCurriculum vitae - Brian Myungjune JUNG	Curriculum vitae - Brian Myungjune JUNG (CV Brian)	DIMM\nData analytics	Data mining	Deep learning\nDefense Logic -- Big Data Platform Research in SAIT	Dm-cache	Exemplary .gnuplot configuration file for beautiful gnuplot graphs\nFoobar	GRUB 2	Git server on my local machine\nHidden Markov model (HMM)	Hierarchical temporal memory	I/O Workload Analysis\nI/O tracing on Microsoft Windows using xperf	IBM GPFS	IEEE ICCE 2014 Paper\nIOWA.data.tpcc 250gb 48h.mysql.R.addr:: Offset 100K, Len 1K	Industry intelligence - Flash Memory Summit 2013	Industry intelligence - big data\nIndustry intelligence - storage	Intelligent Battery Management System	Kworker\nLecture: Neural Networks for Machine Learning (by Geoffrey Hinton)	Lecture notes and online courses	Linux kernel\nLinux kernel - block layer plug/unplug	List of English stop words	List of Meta Files in Windows NTFS\nList of important processes in Microsoft Windows operating systems	Main Page	Master File Table in NTFS\nMixture model	NVM express	Nimble Storage\nOnline courses	OpenStack	Operating systems - Linux kernel\nPCI Express	PaperStudy // An Analysis of Traces from a Production MapReduce Cluster // CCGrid 2010	Periodicity transform\nPure Storage	RapidIO	Restricted Boltzmann machines\nStatistical computing software	System info 16-node cluster	TPC-C\nTemplate patidea	Text summarization	Tf-idf\nThoughts on In Memory Databases (Part 1)	Trick mode	Tutorial -- SSD caching using dm-cache\nUSENIX FAST 2013	Why In-Memory Computing Needs Flash	Windows Programming on Linux with MinGW\nWorkload analysis-driven system architecture design	Writing guide - software patent	X intelligence\nXen hypervisor\n\n</pre>\n-->\n\n=== KVM/QEMU Architecture and IO Stack ===\n\n* [https://www.google.co.kr/search?q=why+is+qemu+windows+so+slow&rlz=1C1OPRB_enKR556KR556&oq=why+is+qemu+windows+so+slow&aqs=chrome..69i57.14138j0j4&sourceid=chrome&espv=210&es_sm=122&ie=UTF-8#es_sm=122&espv=210&newwindow=1&q=IO+stack+qemu Google{IO stack qemu}]\n\n* [http://pic.dhe.ibm.com/infocenter/lnxinfo/v3r0m0/topic/liaav/LPCKVMSSPV2.1.pdf \"KVM / QEMU Storage Stack Performance Discussion,\" IBM, Linux Plumbers Conference 2010]\n\n* [http://events.linuxfoundation.org/slides/2011/linuxcon-japan/lcj2011_hajnoczi.pdf \"An Updated Overview of the QEMU Storage Stack,\" IBM, LinuxCon Japan 2011]\n\n* [http://www.linuxplumbersconf.org/2010/ocw/system/presentations/651/original/Optimizing_the_QEMU_Storage_Stack.pdf \"Optimizing the QEMU Storage Stack,\" IBM, Linux Plumbers Conference 2010]\n\n* [http://www.fujitsu.com/downloads/MAG/vol47-3/paper18.pdf \"Kernel-based Virtual Machine Technology\", Yoshihito Goro, Fujitsu Journal 2011]\n\n\n=== NVMe DAS test bed architecture ===\n\n{| class=\'wikitable sortable\'\n|-\n| LVol-00 || LVol-01 || LVol-02 || LVol-03 || LVol-04 || LVol-05 || LVol-06 || LVol-07\n|-\n|-\n| colspan=5 | nvme0n1p1 (484.61 GiB)\n| colspan=3 | nvme1n1p1 (260.61 GiB)\n|-\n| colspan=4 | /dev/nvme0n1 (372.61 GiB)\n| colspan=4 | /dev/nvme1n1 (372.61 GiB)\n|-\n|}\n\n== ## bNote-2013-12-04 ==\n\n\n=== OpenStack quota-update ===\n\n <pre>\n\nroot@grant-green:work %1# keystone tenant-list\n+----------------------------------+---------+---------+\n|                id                |   name  | enabled |\n+----------------------------------+---------+---------+\n| df7559de417a4968ad34f95b9dda5a4e |  admin  |   True  |\n| ad4662d7ec1249789feb2fad24e9f2e5 | service |   True  |\n+----------------------------------+---------+---------+\n\nroot@grant-green:work %1# nova quota-show\n+-----------------------------+-------+\n| Quota                       | Limit |\n+-----------------------------+-------+\n| instances                   | 48    |\n| cores                       | 96    |\n| ram                         | 51200 |\n| floating_ips                | 10    |\n| fixed_ips                   | -1    |\n| metadata_items              | 128   |\n| injected_files              | 5     |\n| injected_file_content_bytes | 10240 |\n| injected_file_path_bytes    | 255   |\n| key_pairs                   | 100   |\n| security_groups             | 10    |\n| security_group_rules        | 20    |\n+-----------------------------+-------+\n\nroot@grant-green:work %1# nova quota-update --instance 48 --cores 96 df7559de417a4968ad34f95b9dda5a4e\n\nroot@grant-green:work %1# nova quota-show\n+-----------------------------+-------+\n| Quota                       | Limit |\n+-----------------------------+-------+\n| instances                   | 48    |\n| cores                       | 96    |\n| ram                         | 51200 |\n| floating_ips                | 10    |\n| fixed_ips                   | -1    |\n| metadata_items              | 128   |\n| injected_files              | 5     |\n| injected_file_content_bytes | 10240 |\n| injected_file_path_bytes    | 255   |\n| key_pairs                   | 100   |\n| security_groups             | 10    |\n| security_group_rules        | 20    |\n+-----------------------------+-------+\n\n</pre>\n\n=== Linux kernel debugging using QEMU ===\n\n* [http://files.meetup.com/1590495/debugging-with-qemu.pdf Debugging Linux systems using GDB and QEMU]\n* [http://elinux.org/Debugging_The_Linux_Kernel_Using_Gdb Debugging the Linux Kernel Using GDB]\n\n\n\n=== Linux kernel (3.8.0) NVMe stack ===\n\n\n==== include/linux/nvme.h ====\n\n <pre>\n 24 struct nvme_bar {\n 25         __u64                   cap;    /* Controller Capabilities */\n 26         __u32                   vs;     /* Version */\n 27         __u32                   intms;  /* Interrupt Mask Set */\n 28         __u32                   intmc;  /* Interrupt Mask Clear */\n 29         __u32                   cc;     /* Controller Configuration */\n 30         __u32                   rsvd1;  /* Reserved */\n 31         __u32                   csts;   /* Controller Status */\n 32         __u32                   rsvd2;  /* Reserved */\n 33         __u32                   aqa;    /* Admin Queue Attributes */\n 34         __u64                   asq;    /* Admin SQ Base Address */\n 35         __u64                   acq;    /* Admin CQ Base Address */\n 36 };\n</pre>\n\n\n\n <pre>\n 42 \n 43 enum {\n 44         NVME_CC_ENABLE          = 1 << 0,\n 45         NVME_CC_CSS_NVM         = 0 << 4,\n 46         NVME_CC_MPS_SHIFT       = 7,\n 47         NVME_CC_ARB_RR          = 0 << 11,\n 48         NVME_CC_ARB_WRRU        = 1 << 11,\n 49         NVME_CC_ARB_VS          = 7 << 11,\n 50         NVME_CC_SHN_NONE        = 0 << 14,\n 51         NVME_CC_SHN_NORMAL      = 1 << 14,\n 52         NVME_CC_SHN_ABRUPT      = 2 << 14,\n 53         NVME_CC_IOSQES          = 6 << 16,\n 54         NVME_CC_IOCQES          = 4 << 20,\n 55         NVME_CSTS_RDY           = 1 << 0,\n 56         NVME_CSTS_CFS           = 1 << 1,\n 57         NVME_CSTS_SHST_NORMAL   = 0 << 2,\n 58         NVME_CSTS_SHST_OCCUR    = 1 << 2,\n 59         NVME_CSTS_SHST_CMPLT    = 2 << 2,\n 60 };\n 61 \n</pre>\n\n\n\n <pre>\n109 \n110 struct nvme_lbaf {\n111         __le16                  ms;\n112         __u8                    ds;\n113         __u8                    rp;\n114 };\n115 \n116 struct nvme_id_ns {\n117         __le64                  nsze;\n118         __le64                  ncap;\n119         __le64                  nuse;\n120         __u8                    nsfeat;\n121         __u8                    nlbaf;\n122         __u8                    flbas;\n123         __u8                    mc;\n124         __u8                    dpc;\n125         __u8                    dps;\n126         __u8                    rsvd30[98];\n127         struct nvme_lbaf        lbaf[16];\n128         __u8                    rsvd192[192];\n129         __u8                    vs[3712];\n130 };\n131 \n132 enum {\n133         NVME_NS_FEAT_THIN       = 1 << 0,\n134         NVME_LBAF_RP_BEST       = 0,\n135         NVME_LBAF_RP_BETTER     = 1,\n136         NVME_LBAF_RP_GOOD       = 2,\n137         NVME_LBAF_RP_DEGRADED   = 3,\n138 };\n139 \n140 struct nvme_lba_range_type {\n141         __u8                    type;\n142         __u8                    attributes;\n143         __u8                    rsvd2[14];\n144         __u64                   slba;\n145         __u64                   nlb;\n146         __u8                    guid[16];\n147         __u8                    rsvd48[16];\n148 };\n149 \n150 enum {\n151         NVME_LBART_TYPE_FS      = 0x01,\n152         NVME_LBART_TYPE_RAID    = 0x02,\n153         NVME_LBART_TYPE_CACHE   = 0x03,\n154         NVME_LBART_TYPE_SWAP    = 0x04,\n155 \n156         NVME_LBART_ATTRIB_TEMP  = 1 << 0,\n157         NVME_LBART_ATTRIB_HIDE  = 1 << 1,\n158 };\n159 \n\n</pre>\n\n\n\n <pre>\n159 \n160 /* I/O commands */\n161 \n162 enum nvme_opcode {\n163         nvme_cmd_flush          = 0x00,\n164         nvme_cmd_write          = 0x01,\n165         nvme_cmd_read           = 0x02,\n166         nvme_cmd_write_uncor    = 0x04,\n167         nvme_cmd_compare        = 0x05,\n168         nvme_cmd_dsm            = 0x09,\n169 };\n170 \n171 struct nvme_common_command {\n172         __u8                    opcode;\n173         __u8                    flags;\n174         __u16                   command_id;\n175         __le32                  nsid;\n176         __u32                   cdw2[2];\n177         __le64                  metadata;\n178         __le64                  prp1;\n179         __le64                  prp2;\n180         __u32                   cdw10[6];\n181 };\n182 \n183 struct nvme_rw_command {\n184         __u8                    opcode;\n185         __u8                    flags;\n186         __u16                   command_id;\n187         __le32                  nsid;\n188         __u64                   rsvd2;\n189         __le64                  metadata;\n190         __le64                  prp1;\n191         __le64                  prp2;\n192         __le64                  slba;\n193         __le16                  length;\n194         __le16                  control;\n195         __le32                  dsmgmt;\n196         __le32                  reftag;\n197         __le16                  apptag;\n198         __le16                  appmask;\n199 };\n200 \n201 enum {\n202         NVME_RW_LR                      = 1 << 15,\n203         NVME_RW_FUA                     = 1 << 14,\n204         NVME_RW_DSM_FREQ_UNSPEC         = 0,\n205         NVME_RW_DSM_FREQ_TYPICAL        = 1,\n206         NVME_RW_DSM_FREQ_RARE           = 2,\n207         NVME_RW_DSM_FREQ_READS          = 3,\n208         NVME_RW_DSM_FREQ_WRITES         = 4,\n209         NVME_RW_DSM_FREQ_RW             = 5,\n210         NVME_RW_DSM_FREQ_ONCE           = 6,\n211         NVME_RW_DSM_FREQ_PREFETCH       = 7,\n212         NVME_RW_DSM_FREQ_TEMP           = 8,\n213         NVME_RW_DSM_LATENCY_NONE        = 0 << 4,\n214         NVME_RW_DSM_LATENCY_IDLE        = 1 << 4,\n215         NVME_RW_DSM_LATENCY_NORM        = 2 << 4,\n216         NVME_RW_DSM_LATENCY_LOW         = 3 << 4,\n217         NVME_RW_DSM_SEQ_REQ             = 1 << 6,\n218         NVME_RW_DSM_COMPRESSED          = 1 << 7,\n219 };\n220 \n221 /* Admin commands */\n222 \n223 enum nvme_admin_opcode {\n224         nvme_admin_delete_sq            = 0x00,\n225         nvme_admin_create_sq            = 0x01,\n226         nvme_admin_get_log_page         = 0x02,\n227         nvme_admin_delete_cq            = 0x04,\n228         nvme_admin_create_cq            = 0x05,\n229         nvme_admin_identify             = 0x06,\n230         nvme_admin_abort_cmd            = 0x08,\n231         nvme_admin_set_features         = 0x09,\n232         nvme_admin_get_features         = 0x0a,\n233         nvme_admin_async_event          = 0x0c,\n234         nvme_admin_activate_fw          = 0x10,\n235         nvme_admin_download_fw          = 0x11,\n236         nvme_admin_format_nvm           = 0x80,\n237         nvme_admin_security_send        = 0x81,\n238         nvme_admin_security_recv        = 0x82,\n239 };\n240 \n241 enum {\n242         NVME_QUEUE_PHYS_CONTIG  = (1 << 0),\n243         NVME_CQ_IRQ_ENABLED     = (1 << 1),\n244         NVME_SQ_PRIO_URGENT     = (0 << 1),\n245         NVME_SQ_PRIO_HIGH       = (1 << 1),\n246         NVME_SQ_PRIO_MEDIUM     = (2 << 1),\n247         NVME_SQ_PRIO_LOW        = (3 << 1),\n248         NVME_FEAT_ARBITRATION   = 0x01,\n249         NVME_FEAT_POWER_MGMT    = 0x02,\n250         NVME_FEAT_LBA_RANGE     = 0x03,\n251         NVME_FEAT_TEMP_THRESH   = 0x04,\n252         NVME_FEAT_ERR_RECOVERY  = 0x05,\n253         NVME_FEAT_VOLATILE_WC   = 0x06,\n254         NVME_FEAT_NUM_QUEUES    = 0x07,\n255         NVME_FEAT_IRQ_COALESCE  = 0x08,\n256         NVME_FEAT_IRQ_CONFIG    = 0x09,\n257         NVME_FEAT_WRITE_ATOMIC  = 0x0a,\n258         NVME_FEAT_ASYNC_EVENT   = 0x0b,\n259         NVME_FEAT_SW_PROGRESS   = 0x0c,\n260 };\n261 \n</pre>\n\n\n\n\n <pre>\n261 \n262 struct nvme_identify {\n263         __u8                    opcode;\n264         __u8                    flags;\n265         __u16                   command_id;\n266         __le32                  nsid;\n267         __u64                   rsvd2[2];\n268         __le64                  prp1;\n269         __le64                  prp2;\n270         __le32                  cns;\n271         __u32                   rsvd11[5];\n272 };\n273 \n274 struct nvme_features {\n275         __u8                    opcode;\n276         __u8                    flags;\n277         __u16                   command_id;\n278         __le32                  nsid;\n279         __u64                   rsvd2[2];\n280         __le64                  prp1;\n281         __le64                  prp2;\n282         __le32                  fid;\n283         __le32                  dword11;\n284         __u32                   rsvd12[4];\n285 };\n286 \n287 struct nvme_create_cq {\n288         __u8                    opcode;\n289         __u8                    flags;\n290         __u16                   command_id;\n291         __u32                   rsvd1[5];\n292         __le64                  prp1;\n293         __u64                   rsvd8;\n294         __le16                  cqid;\n295         __le16                  qsize;\n296         __le16                  cq_flags;\n297         __le16                  irq_vector;\n298         __u32                   rsvd12[4];\n299 };\n300 \n301 struct nvme_create_sq {\n302         __u8                    opcode;\n303         __u8                    flags;\n304         __u16                   command_id;\n305         __u32                   rsvd1[5];\n306         __le64                  prp1;\n307         __u64                   rsvd8;\n308         __le16                  sqid;\n309         __le16                  qsize;\n310         __le16                  sq_flags;\n311         __le16                  cqid;\n312         __u32                   rsvd12[4];\n313 };\n314 \n315 struct nvme_delete_queue {\n316         __u8                    opcode;\n317         __u8                    flags;\n318         __u16                   command_id;\n319         __u32                   rsvd1[9];\n320         __le16                  qid;\n321         __u16                   rsvd10;\n322         __u32                   rsvd11[5];\n323 };\n324 \n325 struct nvme_download_firmware {\n326         __u8                    opcode;\n327         __u8                    flags;\n328         __u16                   command_id;\n329         __u32                   rsvd1[5];\n330         __le64                  prp1;\n331         __le64                  prp2;\n332         __le32                  numd;\n333         __le32                  offset;\n334         __u32                   rsvd12[4];\n335 };\n336 \n</pre>\n\n\n\n\n <pre>\n336 \n337 struct nvme_command {\n338         union {\n339                 struct nvme_common_command common;\n340                 struct nvme_rw_command rw;\n341                 struct nvme_identify identify;\n342                 struct nvme_features features;\n343                 struct nvme_create_cq create_cq;\n344                 struct nvme_create_sq create_sq;\n345                 struct nvme_delete_queue delete_queue;\n346                 struct nvme_download_firmware dlfw;\n347         };\n348 };\n349 \n350 enum {\n351         NVME_SC_SUCCESS                 = 0x0,\n352         NVME_SC_INVALID_OPCODE          = 0x1,\n353         NVME_SC_INVALID_FIELD           = 0x2,\n354         NVME_SC_CMDID_CONFLICT          = 0x3,\n355         NVME_SC_DATA_XFER_ERROR         = 0x4,\n356         NVME_SC_POWER_LOSS              = 0x5,\n357         NVME_SC_INTERNAL                = 0x6,\n358         NVME_SC_ABORT_REQ               = 0x7,\n359         NVME_SC_ABORT_QUEUE             = 0x8,\n360         NVME_SC_FUSED_FAIL              = 0x9,\n361         NVME_SC_FUSED_MISSING           = 0xa,\n362         NVME_SC_INVALID_NS              = 0xb,\n363         NVME_SC_LBA_RANGE               = 0x80,\n364         NVME_SC_CAP_EXCEEDED            = 0x81,\n365         NVME_SC_NS_NOT_READY            = 0x82,\n366         NVME_SC_CQ_INVALID              = 0x100,\n367         NVME_SC_QID_INVALID             = 0x101,\n368         NVME_SC_QUEUE_SIZE              = 0x102,\n369         NVME_SC_ABORT_LIMIT             = 0x103,\n370         NVME_SC_ABORT_MISSING           = 0x104,\n371         NVME_SC_ASYNC_LIMIT             = 0x105,\n372         NVME_SC_FIRMWARE_SLOT           = 0x106,\n373         NVME_SC_FIRMWARE_IMAGE          = 0x107,\n374         NVME_SC_INVALID_VECTOR          = 0x108,\n375         NVME_SC_INVALID_LOG_PAGE        = 0x109,\n376         NVME_SC_INVALID_FORMAT          = 0x10a,\n377         NVME_SC_BAD_ATTRIBUTES          = 0x180,\n378         NVME_SC_WRITE_FAULT             = 0x280,\n379         NVME_SC_READ_ERROR              = 0x281,\n380         NVME_SC_GUARD_CHECK             = 0x282,\n381         NVME_SC_APPTAG_CHECK            = 0x283,\n382         NVME_SC_REFTAG_CHECK            = 0x284,\n383         NVME_SC_COMPARE_FAILED          = 0x285,\n384         NVME_SC_ACCESS_DENIED           = 0x286,\n385 };\n386 \n</pre>\n\n\n\n\n <pre>\n386 \n387 struct nvme_completion {\n388         __le32  result;         /* Used by admin commands to return data */\n389         __u32   rsvd;\n390         __le16  sq_head;        /* how much of this queue may be reclaimed */\n391         __le16  sq_id;          /* submission queue that generated this entry */\n392         __u16   command_id;     /* of the command which completed */\n393         __le16  status;         /* did the command fail, and if so, why? */\n394 };\n395 \n396 struct nvme_user_io {\n397         __u8    opcode;\n398         __u8    flags;\n399         __u16   control;\n400         __u16   nblocks;\n401         __u16   rsvd;\n402         __u64   metadata;\n403         __u64   addr;\n404         __u64   slba;\n405         __u32   dsmgmt;\n406         __u32   reftag;\n407         __u16   apptag;\n408         __u16   appmask;\n409 };\n410 \n411 struct nvme_admin_cmd {\n412         __u8    opcode;\n413         __u8    flags;\n414         __u16   rsvd1;\n415         __u32   nsid;\n416         __u32   cdw2;\n417         __u32   cdw3;\n418         __u64   metadata;\n419         __u64   addr;\n420         __u32   metadata_len;\n421         __u32   data_len;\n422         __u32   cdw10;\n423         __u32   cdw11;\n424         __u32   cdw12;\n425         __u32   cdw13;\n426         __u32   cdw14;\n427         __u32   cdw15;\n428         __u32   timeout_ms;\n429         __u32   result;\n430 };\n431 \n432 #define NVME_IOCTL_ID           _IO(\'N\', 0x40)\n433 #define NVME_IOCTL_ADMIN_CMD    _IOWR(\'N\', 0x41, struct nvme_admin_cmd)\n434 #define NVME_IOCTL_SUBMIT_IO    _IOW(\'N\', 0x42, struct nvme_user_io)\n435 \n\n</pre>\n\n\n==== drivers/block/nvme.c ====\n\n\n <pre>\n  44 \n  45 #define NVME_Q_DEPTH 1024\n  46 #define SQ_SIZE(depth)          (depth * sizeof(struct nvme_command))\n  47 #define CQ_SIZE(depth)          (depth * sizeof(struct nvme_completion))\n  48 #define NVME_MINORS 64\n  49 #define NVME_IO_TIMEOUT (5 * HZ)\n  50 #define ADMIN_TIMEOUT   (60 * HZ)\n  51 \n  52 static int nvme_major;\n  53 module_param(nvme_major, int, 0);\n  54 \n  55 static int use_threaded_interrupts;\n  56 module_param(use_threaded_interrupts, int, 0);\n  57 \n  58 static DEFINE_SPINLOCK(dev_list_lock);\n  59 static LIST_HEAD(dev_list);\n  60 static struct task_struct *nvme_thread;\n  61 \n</pre>\n\n\n\n\n <pre>\n  62 /*\n  63  * Represents an NVM Express device.  Each nvme_dev is a PCI function.\n  64  */\n  65 struct nvme_dev {\n  66         struct list_head node; \n  67         struct nvme_queue **queues;    \n  68         u32 __iomem *dbs;      \n  69         struct pci_dev *pci_dev;\n  70         struct dma_pool *prp_page_pool;\n  71         struct dma_pool *prp_small_pool;\n  72         int instance;\n  73         int queue_count;       \n  74         int db_stride;         \n  75         u32 ctrl_config;       \n  76         struct msix_entry *entry;\n  77         struct nvme_bar __iomem *bar;\n  78         struct list_head namespaces;\n  79         char serial[20];\n  80         char model[40];\n  81         char firmware_rev[8];\n  82         u32 max_hw_sectors;\n  83 };\n  84 \n  85 /*     \n  86  * An NVM Express namespace is equivalent to a SCSI LUN\n  87  */    \n  88 struct nvme_ns {\n  89         struct list_head list; \n  90        \n  91         struct nvme_dev *dev;  \n  92         struct request_queue *queue;\n  93         struct gendisk *disk;  \n  94        \n  95         int ns_id;\n  96         int lba_shift;         \n  97 };     \n  98 \n  99 /*     \n 100  * An NVM Express queue.  Each device has at least two (one for admin\n 101  * commands and one for I/O commands).\n 102  */\n 103 struct nvme_queue {\n 104         struct device *q_dmadev;\n 105         struct nvme_dev *dev;\n 106         spinlock_t q_lock;\n 107         struct nvme_command *sq_cmds;\n 108         volatile struct nvme_completion *cqes;\n 109         dma_addr_t sq_dma_addr;\n 110         dma_addr_t cq_dma_addr;\n 111         wait_queue_head_t sq_full;\n 112         wait_queue_t sq_cong_wait;\n 113         struct bio_list sq_cong;\n 114         u32 __iomem *q_db;\n 115         u16 q_depth;\n 116         u16 cq_vector;\n 117         u16 sq_head;\n 118         u16 sq_tail;\n 119         u16 cq_head;\n 120         u16 cq_phase;\n 121         unsigned long cmdid_data[];\n 122 };\n 123 \n</pre>\n\n== ## bNote-2013-12-03 ==\n\n=== Linux kernel IO stack: Block Layer ===\n\n==== Linux Documentation ====\n\n; Documentation/block/queue-sysfs.txt\n\n <pre>\n1	Queue sysfs files\n2	=================\n3	\n4	This text file will detail the queue files that are located in the sysfs tree\n5	for each block device. Note that stacked devices typically do not export\n6	any settings, since their queue merely functions are a remapping target.\n7	These files are the ones found in the /sys/block/xxx/queue/ directory.\n8	\n9	Files denoted with a RO postfix are readonly and the RW postfix means\n10	read-write.\n11	\n12	add_random (RW)\n13	----------------\n14	This file allows to trun off the disk entropy contribution. Default\n15	value of this file is \'1\'(on).\n16	\n17	discard_granularity (RO)\n18	-----------------------\n19	This shows the size of internal allocation of the device in bytes, if\n20	reported by the device. A value of \'0\' means device does not support\n21	the discard functionality.\n22	\n23	discard_max_bytes (RO)\n24	----------------------\n25	Devices that support discard functionality may have internal limits on\n26	the number of bytes that can be trimmed or unmapped in a single operation.\n27	The discard_max_bytes parameter is set by the device driver to the maximum\n28	number of bytes that can be discarded in a single operation. Discard\n29	requests issued to the device must not exceed this limit. A discard_max_bytes\n30	value of 0 means that the device does not support discard functionality.\n31	\n32	discard_zeroes_data (RO)\n33	------------------------\n34	When read, this file will show if the discarded block are zeroed by the\n35	device or not. If its value is \'1\' the blocks are zeroed otherwise not.\n36	\n37	hw_sector_size (RO)\n38	-------------------\n39	This is the hardware sector size of the device, in bytes.\n40	\n41	iostats (RW)\n42	-------------\n43	This file is used to control (on/off) the iostats accounting of the\n44	disk.\n45	\n46	logical_block_size (RO)\n47	-----------------------\n48	This is the logcal block size of the device, in bytes.\n49	\n50	max_hw_sectors_kb (RO)\n51	----------------------\n52	This is the maximum number of kilobytes supported in a single data transfer.\n53	\n54	max_integrity_segments (RO)\n55	---------------------------\n56	When read, this file shows the max limit of integrity segments as\n57	set by block layer which a hardware controller can handle.\n58	\n59	max_sectors_kb (RW)\n60	-------------------\n61	This is the maximum number of kilobytes that the block layer will allow\n62	for a filesystem request. Must be smaller than or equal to the maximum\n63	size allowed by the hardware.\n64	\n65	max_segments (RO)\n66	-----------------\n67	Maximum number of segments of the device.\n68	\n69	max_segment_size (RO)\n70	---------------------\n71	Maximum segment size of the device.\n72	\n73	minimum_io_size (RO)\n74	--------------------\n75	This is the smallest preferred io size reported by the device.\n76	\n77	nomerges (RW)\n78	-------------\n79	This enables the user to disable the lookup logic involved with IO\n80	merging requests in the block layer. By default (0) all merges are\n81	enabled. When set to 1 only simple one-hit merges will be tried. When\n82	set to 2 no merge algorithms will be tried (including one-hit or more\n83	complex tree/hash lookups).\n84	\n85	nr_requests (RW)\n86	----------------\n87	This controls how many requests may be allocated in the block layer for\n88	read or write requests. Note that the total allocated number may be twice\n89	this amount, since it applies only to reads or writes (not the accumulated\n90	sum).\n91	\n92	To avoid priority inversion through request starvation, a request\n93	queue maintains a separate request pool per each cgroup when\n94	CONFIG_BLK_CGROUP is enabled, and this parameter applies to each such\n95	per-block-cgroup request pool.  IOW, if there are N block cgroups,\n96	each request queue may have up to N request pools, each independently\n97	regulated by nr_requests.\n98	\n99	optimal_io_size (RO)\n100	--------------------\n101	This is the optimal io size reported by the device.\n102	\n103	physical_block_size (RO)\n104	------------------------\n105	This is the physical block size of device, in bytes.\n106	\n107	read_ahead_kb (RW)\n108	------------------\n109	Maximum number of kilobytes to read-ahead for filesystems on this block\n110	device.\n111	\n112	rotational (RW)\n113	---------------\n114	This file is used to stat if the device is of rotational type or\n115	non-rotational type.\n116	\n117	rq_affinity (RW)\n118	----------------\n119	If this option is \'1\', the block layer will migrate request completions to the\n120	cpu \"group\" that originally submitted the request. For some workloads this\n121	provides a significant reduction in CPU cycles due to caching effects.\n122	\n123	For storage configurations that need to maximize distribution of completion\n124	processing setting this option to \'2\' forces the completion to run on the\n125	requesting cpu (bypassing the \"group\" aggregation logic).\n126	\n127	scheduler (RW)\n128	--------------\n129	When read, this file will display the current and available IO schedulers\n130	for this block device. The currently active IO scheduler will be enclosed\n131	in [] brackets. Writing an IO scheduler name to this file will switch\n132	control of this block device to that new IO scheduler. Note that writing\n133	an IO scheduler name to this file will attempt to load that IO scheduler\n134	module, if it isn\'t already present in the system.\n135	\n136	\n137	\n138	Jens Axboe <jens.axboe@oracle.com>, February 2009\n</pre>\n\n\n\n\n==== Linux kernel 3.8.0 source code ====\n\n; block/blk-settings.c: blk_queue_make_request()\n <pre>\n\n152 /**\n153  * blk_queue_make_request - define an alternate make_request function for a device\n154  * @q:  the request queue for the device to be affected\n155  * @mfn: the alternate make_request function\n156  *\n157  * Description:\n158  *    The normal way for &struct bios to be passed to a device\n159  *    driver is for them to be collected into requests on a request\n160  *    queue, and then to allow the device driver to select requests\n161  *    off that queue when it is ready.  This works well for many block\n162  *    devices. However some block devices (typically virtual devices\n163  *    such as md or lvm) do not benefit from the processing on the\n164  *    request queue, and are served best by having the requests passed\n165  *    directly to them.  This can be achieved by providing a function\n166  *    to blk_queue_make_request().\n167  *\n168  * Caveat:\n169  *    The driver that does this *must* be able to deal appropriately\n170  *    with buffers in \"highmemory\". This can be accomplished by either calling\n171  *    __bio_kmap_atomic() to get a temporary kernel mapping, or by calling\n172  *    blk_queue_bounce() to create a buffer in normal memory.\n173  **/\n174 void blk_queue_make_request(struct request_queue *q, make_request_fn *mfn)\n175 {\n176         /*\n177          * set defaults\n178          */\n179         q->nr_requests = BLKDEV_MAX_RQ;\n180 \n181         q->make_request_fn = mfn;\n182         blk_queue_dma_alignment(q, 511);\n183         blk_queue_congestion_threshold(q);\n184         q->nr_batching = BLK_BATCH_REQ;\n185 \n186         blk_set_default_limits(&q->limits);\n187 \n188         /*\n189          * by default assume old behaviour and bounce for any highmem page\n190          */\n191         blk_queue_bounce_limit(q, BLK_BOUNCE_HIGH);\n192 }\n193 EXPORT_SYMBOL(blk_queue_make_request);\n\n</pre>\n\n\n\n\n; include/linux/blkdev.h: BLKDEV_MAX_RQ\n <pre>\n  38 #define BLKDEV_MAX_RQ   128     /* Default maximum */\n</pre>\n\n\n\n\n; block/blk-sysfs.c: /* Functions related to sysfs handling */\n <pre>\n 40 \n 41 static ssize_t queue_requests_show(struct request_queue *q, char *page)\n 42 {\n 43         return queue_var_show(q->nr_requests, (page));\n 44 }\n 45 \n 46 static ssize_t\n 47 queue_requests_store(struct request_queue *q, const char *page, size_t count)\n 48 {\n 49         struct request_list *rl;\n 50         unsigned long nr;\n 51         int ret;\n 52 \n 53         if (!q->request_fn)\n 54                 return -EINVAL;\n 55 \n 56         ret = queue_var_store(&nr, page, count);\n 57         if (ret < 0)\n 58                 return ret;\n 59 \n 60         if (nr < BLKDEV_MIN_RQ)\n 61                 nr = BLKDEV_MIN_RQ;\n 62 \n 63         spin_lock_irq(q->queue_lock);\n 64         q->nr_requests = nr;\n 65         blk_queue_congestion_threshold(q);\n 66 \n 67         /* congestion isn\'t cgroup aware and follows root blkcg for now */\n 68         rl = &q->root_rl;\n 69 \n 70         if (rl->count[BLK_RW_SYNC] >= queue_congestion_on_threshold(q))\n 71                 blk_set_queue_congested(q, BLK_RW_SYNC);\n 72         else if (rl->count[BLK_RW_SYNC] < queue_congestion_off_threshold(q))\n 73                 blk_clear_queue_congested(q, BLK_RW_SYNC);\n 74 \n 75         if (rl->count[BLK_RW_ASYNC] >= queue_congestion_on_threshold(q))\n 76                 blk_set_queue_congested(q, BLK_RW_ASYNC);\n 77         else if (rl->count[BLK_RW_ASYNC] < queue_congestion_off_threshold(q))\n 78                 blk_clear_queue_congested(q, BLK_RW_ASYNC);\n 79 \n 80         blk_queue_for_each_rl(rl, q) {\n 81                 if (rl->count[BLK_RW_SYNC] >= q->nr_requests) {\n 82                         blk_set_rl_full(rl, BLK_RW_SYNC);\n 83                 } else {\n 84                         blk_clear_rl_full(rl, BLK_RW_SYNC);\n 85                         wake_up(&rl->wait[BLK_RW_SYNC]);\n 86                 }\n 87 \n 88                 if (rl->count[BLK_RW_ASYNC] >= q->nr_requests) {\n 89                         blk_set_rl_full(rl, BLK_RW_ASYNC);\n 90                 } else {\n 91                         blk_clear_rl_full(rl, BLK_RW_ASYNC);\n 92                         wake_up(&rl->wait[BLK_RW_ASYNC]);\n 93                 }\n 94         }\n 95 \n 96         spin_unlock_irq(q->queue_lock);\n 97         return ret;\n 98 }\n 99 \n\n</pre>\n\n\n\n; drivers/block/nvme.c: NVME_Q_DEPTH\n <pre>\n  44 \n  45 #define NVME_Q_DEPTH 1024\n  46 #define SQ_SIZE(depth)          (depth * sizeof(struct nvme_command))\n  47 #define CQ_SIZE(depth)          (depth * sizeof(struct nvme_completion))\n  48 #define NVME_MINORS 64\n  49 #define NVME_IO_TIMEOUT (5 * HZ)\n  50 #define ADMIN_TIMEOUT   (60 * HZ)\n  51 \n</pre>\n\n== ## bNote-2013-12-02 ==\n\n=== XS-1715 Specification ===\n\n==== Key features ====\n\n* Performance\n: Optimized for 4KB random read and write workloads\n:- Performance Target\n::- More than 700K IOPS for 4KB random reads\n::- More than 200K IOPS for 4KB random writes (sustained)\n\n* Mapping Algorithm\n:- 4KB full page mapping\n:- FN21 4-planes program support \n:- FN21 4KB fast read support\n:- Hot/cold data separtion (ESP_MM_Mapping.c)\n:- Concurrent garbage collection during user page writes\n:- Non-blocking DRAM access to avoid pipeline bubbles of CPU\n:- No hardware register access at all during user read/write request processing\n:- Journal log information reduction for fast power-down and fast recovery at boot-up\n:- Flash RAID-5 support\n\n\n\n=== Admin/Misc ===\n\n* DS 인사 (전배관련): \'\'\'정영민 대리\'\'\', 박필 사원\n:-> 정영민 대리에게 확인. (OK)\n\n<!--\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:57]:\n  정대리님, 안녕하세요?\n  이번 10월 1일자로 기술원에서 SW개발팀으로 전배 온\n  정명준 책임입니다. \n  내년 승격 관련해서\n  문의드리고자 연락 드렸습니다\n  잠시 시간 되시는지요?\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:00]:\n  네\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:00]:\n  안녕하세요? 혹시 기술원의 김경진 차장으로부터\n  차년도 승격 관련해서\n  연락 받으셨던 것이 있으신지 궁금해서요~\n  제가 기술원 기준으로는 차년도 승격이 되는데\n  여기 전배를 오게 되면서, 승격 예외 대상자로 \n  예외 승격 대상자\n  로 분류해서 내년에 수석 진급이 보장될 수 있도록\n  해주겠다는 이야기를 들었었거든요\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:02]:\n  네 예전에 관련 결재를 통보받았으나, 책임님 명단이 있는지는 확인해봐야겠습니다\n  잠시만요\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:02]:\n  네~\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:05]:\n  네 확인했습니다. 책임님 승격되십니다\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:05]:\n  아 감사합니다~\n  이번에 저와 같이 오셨던\n  신현정 책임도 같이\n  승격 되는 것 맞죠?\n  저희 2명이 \n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:06]:\n  넵\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:06]:\n  된다고 들었었거든요\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:06]:\n  2명입니다\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:06]:\n  확인해주셔서 감사합니다. 그럼 저희 2명이 특별히\n  따로 더 할 일이\n  할 일은 없는 건지요?\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:06]:\n  넵\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:06]:\n  아, 잘 알겠습니다. \n  감사합니다. 좋은 오후 보내세요  \n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:07]:\n  네 수고하셔요~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:07]:\n  넵 감사합니다 ^^\n-->\n\n<!--\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:53]:\n  김과장님, 안녕하세요? 10월 1일자로 기술원에서 메모리사 S/W 개발팀으로 전배 온 정명준 책임입니다.\n  승격 관련해서 여쭙고자 연락 드렸습니다\n  잠시 시간 되시는지요?\n‎‎김효근(G5(과장)/담당과장/삼성전자)‎‎ [오후 1:54]:\n  아 네...\n  담당자는 박필 사원이나 \n  정영민 대리입니다. \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:55]:\n  아하 \n‎‎김효근(G5(과장)/담당과장/삼성전자)‎‎ [오후 1:55]:\n  정영민 대리는 지금 통화중이네요... \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:55]:\n  아, 그럼 잠시 후 정영민 대리에게 연락해보겠습니다 알려주셔서 감사합니다 ^_^\n‎‎김효근(G5(과장)/담당과장/삼성전자)‎‎ [오후 1:57]:\n  전 인력운영 담당자라 \n  승격에 대해서는 제가 정확한 답변을 못 드릴 것 같습니다. \n  정대리 전화 끊었네요\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:57]:\n  아, 감사합니다 ^^\n  연락해보겠습니다  \n-->\n\n<!--\n: <strike>DS 인사 담당: 김효근 과장, 이창익 대리 (인력 이동 관련)</strike> Updated: 정영민대리가 담당임.\n: 10/17 김경진 차장 - 내년 승격 대상자는 기술원 인사팀에서 본사에 얘기해놓았으며, 11.1일자 인력들과 같이 해서 예외 대상자들 품의를 받아 사업부에 뿌릴 예정이라고 함\n-->\n\n== References ==\n\n<references/>','utf-8');
/*!40000 ALTER TABLE `radiohead_text` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `radiohead_transcache`
--

DROP TABLE IF EXISTS `radiohead_transcache`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
