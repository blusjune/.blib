INSERT INTO `radiohead_text` VALUES (2154,'\n <pre>\n   December 2013\nSu Mo Tu We Th Fr Sa\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n</pre>\n\n\n== ## bNote-2013-12-27 ==\n\n\n=== SOSP 2013 Summary ===\n\n{| class=\"wikitable\" style=\"background:white\"\n|-\n|+ [http://sigops.org/sosp/sosp13/program.html SOSP 2013 The 24th ACM Symposium on Operating Systems Principles]\n|-\n! Pick\n! width=\"20%\" | Title\n! width=\"20%\" | Authors\n! width=\"10%\" | Keywords\n! width=\"50%\" | Memo\n|-\n| style=\"background:gold\" | S.4\n| (BestPaper) The Scalable Commutativity Rule: Designing Scalable Software for Multicore Processors\n| Austin T. Clements, M. Frans Kaashoek, Nickolai Zeldovich, Robert Morris (MIT CSAIL), Eddie Kohler (Harvard)\n| \n* Application scalability by commutative interface operations\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nThe Scalable Commutativity Rule: Designing Scalable Software for Multicore Processors\n----\nWhat fundamental opportunities for scalability are latent in interfaces, such as system call APIs? Can scalability opportunities be identified even before any implementation exists, simply by considering interface specifications? To answer these questions this paper introduces the following rule: Whenever interface operations commute, they can be implemented in a way that scales. This rule aids developers in building more scalable software starting from interface design and carrying on through implementation, testing, and evaluation.\n\nTo help developers apply the rule, a new tool named Commuter accepts high-level interface models and generates tests of operations that commute and hence could scale. Using these tests, Commuter can evaluate the scalability of an implementation. We apply Commuter to 18 POSIX calls and use the results to guide the implementation of a new research operating system kernel called sv6. Linux scales for 68% of the 13,664 tests generated by Commuter for these calls, and Commuter finds many problems that have been observed to limit application scalability. sv6 scales for 99% of the tests.</ref>\n* Key findings: Whenever interface operations commute, they can be implemented in a way that scales\n* Key questions: Can scalability opportunities be identified even before any implementation exists, simply by considering interface specifications?\n* Result (분석 필요): Linux scales for 68% of the 13,664 tests generated by Commuter for these calls\n* b.idea: New SmartSSD API for scalable In-Storage Computing (ISC)\n* b.question: ISC의 궁극적인 모습은 micro-server가 되는 것일까?\n\n\n\n\n|-\n| style=\"background:coral\" | S.5\n| Speedy Transactions in Multicore In-Memory Databases\n| Stephen Tu, Wenting Zheng (MIT), Eddie Kohler (Harvard), Barbara Liskov, Samuel Madden (MIT)\n|\n* In-memory database on multicore machines\n* Avoiding centralized contention points\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nSpeedy Transactions in Multicore In-Memory Databases\n----\nSilo is a new in-memory database that achieves excellent performance and scalability on modern multicore machines. Silo was designed from the ground up to use system memory and caches efficiently. For instance, it avoids all centralized contention points, including that of centralized transaction ID assignment. Silo\'s key contribution is a commit protocol based on optimistic concurrency control that provides serializability while avoiding all shared-memory writes for records that were only read. Though this might seem to complicate the enforcement of a serial order, correct logging and recovery is provided by linking periodically-updated epochs with the commit protocol. Silo provides the same guarantees as any serializable database without unnecessary scalability bottlenecks or much additional latency. Silo achieves almost 700,000 transactions per second on a standard TPC-C workload mix on a 32-core machine, as well as near-linear scalability. Considered per core, this is several times higher than previously reported results.</ref>\n* Silo is a new IMDB: achieving excellent performance and scalability on multicore machines\n* New design: to use system memory and caches efficiently\n* Avoiding: all centralized contention points (such as centralized transaction ID assignment)\n* Key contribution: a commit protocol based on optimistic concurrency control that provides serializability while avoiding all shared-memory writes for records that were only read\n* Result: almost 700,000 TPS on a standard TPC-C workload mix on a 32-core machine, as well as near-linear scalability.\n\n\n\n\n|-\n| style=\"background:darkslategray\" | S._\n| Everything You Always Wanted to Know about Synchronization but Were Afraid to Ask\n| Tudor David, Rachid Guerraoui, Vasileios Trigonakis (EPFL)\n|\n* Factors which impact on the scalability of synchronization\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nEverything You Always Wanted to Know about Synchronization but Were Afraid to Ask\n----\nThis paper presents the most exhaustive study of synchronization to date. We span multiple layers, from hardware cache-coherence protocols up to high-level concurrent software. We do so on different types of architectures, from single-socket -- uniform and non-uniform -- to multi-socket -- directory and broadcast-based -- many-cores. We draw a set of observations that, roughly speaking, imply that scalability of synchronization is mainly a property of the hardware.</ref>\n\n\n\n\n|-\n| style=\"background:darkslategray\" | S._\n| Dandelion: A Compiler and Runtime for Heterogeneous Systems\n| Christopher J Rossbach, Yuan Yu, Jon Currey, Jean-Philippe Martin, Dennis Fetterly (Microsoft Research Silicon Valley)\n|\n* User-friendly programming tool for heterogeneous systems\n* Automatic cross-compilation (.NET-to-CUDA)\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nDandelion: A Compiler and Runtime for Heterogeneous Systems\n----\nComputer systems increasingly rely on heterogeneity to achieve greater performance, scalability and energy efficiency. Because heterogeneous systems typically comprise multiple execution contexts with different programming abstractions and runtimes, programming them remains extremely challenging.\n\nDandelion is a system designed to address this programmability challenge for data-parallel applications. Dandelion provides a unified programming model for heterogeneous systems that span diverse execution contexts including CPUs, GPUs, FPGAs, and the cloud. It adopts the .NET LINQ (Language INtegrated Query) approach, integrating data-parallel operators into general purpose programming languages such as C# and F#. It therefore provides an expressive data model and native language integration for user-defined functions, enabling programmers to write applications using standard high-level languages and development tools.\n\nDandelion automatically and transparently distributes data-parallel portions of a program to available computing resources, including compute clusters for distributed execution and CPU and GPU cores of individual nodes for parallel execution. To enable automatic execution of .NET code on GPUs, Dandelion cross-compiles .NET code to CUDA kernels and uses the PTask runtime [85] to manage GPU execution. This paper discusses the design and implementation of Dandelion, focusing on the distributed CPU and GPU implementation. We evaluate the system using a diverse set of workloads.</ref>\n* Key contribution: user-friendly programming tool for heterogeneous systems\n* Dandelion automatically and transparently distributes data-parallel portions of a program to available computing resources\n* To enable automatic execution of .NET code on GPUs, Dandelion cross-compiles .NET code to CUDA kernels and uses the PTask runtime to manage GPU execution.\n\n\n\n\n|-\n| style=\"background:gold\" | S.4\n| Sparrow: Distributed, Low Latency Scheduling\n| Kay Ousterhout, Patrick Wendell, Matei Zaharia, Ion Stoica (UC Berkeley)\n|\n* Large-scale data analytics frameworks\n* Low latency towards shorter task durations and larger degrees of parallelism\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nSparrow: Distributed, Low Latency Scheduling\n----\nLarge-scale data analytics frameworks are shifting towards shorter task durations and larger degrees of parallelism to provide low latency. Scheduling highly parallel jobs that complete in hundreds of milliseconds poses a major challenge for task schedulers, which will need to schedule millions of tasks per second on appropriate machines while offering millisecond-level latency and high availability. We demonstrate that a decentralized, randomized sampling approach provides near-optimal performance while avoiding the throughput and availability limitations of a centralized design. We implement and deploy our scheduler, Sparrow, on a 110-machine cluster and demonstrate that Sparrow performs within 12% of an ideal scheduler.</ref>\n* Challenge: Scheduling highly parallel jobs that complete in hundreds of milliseconds poses a major challenge for task schedulers, which will need to schedule millions of tasks per second on appropriate machines while offering millisecond-level latency and high availability.\n* Approach: decentralized, randomized sampling approach (which provides near-optimal performance)\n* Result: Sparrow on a 110-machine cluster and demonstrate it performs within 12% of an ideal scheduler\n* b.question: definition of theoretical limit for ideal scheduler?\n* b.idea: compute-striping? compute-redundancy? for better performance and fault-tolerance\n\n\n\n\n|-\n| style=\"background:darkslategray\" | S._\n| Timecard: Controlling User-Perceived Delays in Server-Based Mobile Applications\n| Lenin Ravindranath (MIT), Jitendra Padhye, Ratul Mahajan (Microsoft Research), Hari Balakrishnan (MIT)\n|\n* Consistent response time for mobile applications\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nTimecard: Controlling User-Perceived Delays in Server-Based Mobile Applications\n----\nProviding consistent response times to users of mobile applications is challenging because there are several variable delays between the start of a user\'s request and the completion of the response. These delays include location lookup, sensor data acquisition, radio wake-up, network transmissions, and processing on both the client and server. To allow applications to achieve consistent response times in the face of these variable delays, this paper presents the design, implementation, and evaluation of the Timecard system. Timecard provides two abstractions: the first returns the time elapsed since the user started the request, and the second returns an estimate of the time it would take to transmit the response from the server to the client and process the response at the client. With these abstractions, the server can adapt its processing time to control the end-to-end delay for the request. Implementing these abstractions requires Timecard to track delays across multiple asynchronous activities, handle time skew between client and server, and estimate network transfer times. Experiments with Timecard incorporated into two mobile applications show that the end-to-end delay is within 50 ms of the target delay of 1200 ms over 90% of the time.</ref>\n* b.question: Can this be related to SILK browser from Amazon?\n* Challenge: providing consistent response time to users of mobile applications\n\n\n\n\n|-\n| style=\"background:gold\" | S.4\n| Fast Dynamic Binary Translation for the Kernel\n| Piyus Kedia, Sorav Bansal (IIT Delhi)\n|\n* Dynamic binary translation (DBT)\n* DBT for implementation of VMM\n* DBT for instrumentation <ref>instrumentation - In context of computer programming, instrumentation refers to an ability to monitor or measure the level of a product\'s performance, to diagnose errors and to write trace information. Programmers implement instrumentation in the form of code instructions that monitor specific components in a system (for example, instructions may output logging information to appear on screen). When an application contains instrumentation code, it can be managed using a management tool. Instrumentation is necessary to review the performance of the application. Instrumentation approaches can be of two types: Source instrumentation and binary instrumentation.</ref> in the OS kernel\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nFast Dynamic Binary Translation for the Kernel\n----\nDynamic binary translation (DBT) is a powerful technique with several important applications. System-level binary translators have been used for implementing a Virtual Machine Monitor [2] and for instrumentation in the OS kernel [10]. In current designs, the performance overhead of binary translation on kernel-intensive workloads is high. e.g., over 10x slowdowns were reported on the syscall nanobenchmark in [2], 2-5x slowdowns were reported on lmbench microbenchmarks in [10]. These overheads are primarily due to the extra work required to correctly handle kernel mechanisms like interrupts, exceptions, and physical CPU concurrency.\n\nWe present a kernel-level binary translation mechanism which exhibits near-native performance even on applications with large kernel activity. Our translator relaxes transparency requirements and aggressively takes advantage of kernel invariants to eliminate sources of slowdown. We have implemented our translator as a loadable module in unmodified Linux, and present performance and scalability experiments on multiprocessor hardware. Although our implementation is Linux specific, our mechanisms are quite general; we only take advantage of typical kernel design patterns, not Linux-specific features. For example, our translator performs 3x faster than previous kernel-level DBT implementations while running the Apache web server.</ref>\n* Contribution: a kernel-level binary translation mechanism - which exhibits near-native performance even on applications with large kernel activity.\n* Challenge: to reduce the overheads which are primarily due to the extra work required to correctly handle kernel mechanisms like interrupts, exceptions, and physical CPU concurrency.\n* Approach: relaxing transparency requirements and aggressively taking advantages of kernel invariants - to eliminate sources of slowdown.\n* (Note) DBT is widely used in\n:* virtualization <ref>K. Adams and O. Agesen. A comparison of software and hardware techniques for x86 virtualization. In ASPLOS \'06</ref>\n:* testing/verification <ref>S. Nagarakatte, S. Burckhardt, M. M. Martin, and M. Musuvathi. Multicore acceleration of priority-based schedulers for concurrency bug detection. In PLDI ’12.</ref>\n:* debugging <ref>Q. Zhao, R. Rabbah, S. Amarasinghe, L. Rudolph, and W.F. Wong. How to do a million watchpoints: efﬁcient debugging using dynamic instrumentation. In CC’08/ETAPS’08.</ref>\n:* profiling <ref>Q. Zhao, D. Koh, S. Raza, D. Bruening, W.-F. Wong, and S. Amarasinghe. Dynamic cache contention detection in multi-threaded applications. In VEE ’11.</ref>\n:* sandboxing <ref>V. Kiriansky, D. Bruening, and S. Amarasinghe. Secure execution via program shepherding. In USENIX Security \'02</ref>\n:* dynamic optimizations <ref>V. Bala, E. Duesterwald, and S. Banerjia. Dynamo: a transparent dynamic optimization system. ACM SIGPLAN Notices, 35(5):1–12, 2000.</ref>\n\n\n\n\n|-\n| style=\"background:darkseagreen\" | S.3\n| VirtuOS: An Operating System with Kernel Virtualization\n| Ruslan Nikolaev, Godmar Back (Virginia Polytechnic Institute)\n|\n|\n|-\n| style=\"background:darkseagreen\" | S.3\n| From L3 to seL4: What Have We Learnt in 20 Years of L4 Microkernels?\n| Kevin Elphinstone, Gernot Heiser (NICTA & UNSW)\n|\n|\n|-\n| style=\"background:darkseagreen\" | S.3\n| Replication, History, and Grafting in the Ori File System\n| Ali Mashtizadeh, Andrea Bittau, Yifeng Frank Huang, David Mazieres (Stanford University)\n|\n|\n|-\n| style=\"background:coral\" | S.5\n| An Analysis of Facebook Photo Caching\n| Qi Huang, Ken Birman, Robbert van Renesse (Cornell University), Wyatt Lloyd (Princeton University), Sanjeev Kumar, Harry C. Li (Facebook Inc.)\n|\n|\n|-\n| style=\"background:coral\" | S.5\n| IOFlow: A Software-Defined Storage Architecture\n| Eno Thereska, Hitesh Ballani, Greg O\'Shea, Thomas Karagiannis, Antony Rowstron (Microsoft Research), Tom Talpey (Microsoft), Richard Black (Microsoft Research), Timothy Zhu (Carnegie Mellon University)\n|\n|\n|-\n| style=\"background:gold\" | S.4\n| From ARIES to MARS: Transaction Support for Next-Generation, Solid-State Drives\n| Joel Coburn, Trevor Bunker, Meir Schwarz, Rajesh K. Gupta, Steven Swanson (University of California, San Diego)\n|\n* Write-ahead logging (WAL) <ref>Write-ahead logging (WAL) is a family of techniques for providing atomicity and durability in database systems. In a system using WAL, all modifications are written to a log before they are applied. WAL은 database가 in-place로 update될 수 있도록 한다. In-place update의 장점은 index와 block list를 수정할 필요를 줄여준다는 것이다. 반면 atomic update를 구현하기 위한 또 다른 방법인 shadow paging은 not-in-place (or out-of-place) update 방식이다. </ref>\n|\n|-\n|\n| Asynchronous Intrusion Recovery for Interconnected Web Services\n| Ramesh Chandra, Taesoo Kim, Nickolai Zeldovich (MIT CSAIL)\n|\n|\n|-\n| style=\"background:darkseagreen\" | S.3\n| Optimistic Crash Consistency\n| Vijay Chidambaram, Thanumalayan Sankaranarayana Pillai, Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau (University of Wisconsin-Madison)\n|\n|\n* Insights: for cold-storage?\n|-\n| style=\"background:darkseagreen\" | S.3\n| Do Not Blame Users for Misconfigurations\n| Tianyin Xu, Jiaqi Zhang, Peng Huang, Jing Zheng, Tianwei Sheng (UC San Diego), Ding Yuan (University of Toronto), Yuanyuan Zhou (UC San Diego), Shankar Pasupathy (NetApp Inc)\n|\n|\n* Insights: for automatic optimization?\n|-\n| style=\"background:darkseagreen\" | S.3\n| (BestPaper) Towards Optimization-Safe Systems: Analyzing the Impact of Undefined Behavior\n| Xi Wang, Nickolai Zeldovich, M. Frans Kaashoek, Armando Solar-Lezama (MIT CSAIL)\n|\n|\n|-\n|\n| Transaction Chains: Achieving Serializability with Low Latency in Geo-Distributed Storage Systems\n| Yang Zhang, Russell Power, Siyuan Zhou, Yair Sovran (NYU), Marcos K. Aguilera (Microsoft Research), Jinyang Li (NYU)\n|\n|\n|-\n| style=\"background:darkseagreen\" | S.3\n| SPANStore: Cost-Effective Geo-Replicated Storage Spanning Multiple Cloud Services\n| Zhe Wu, Michael Butkiewicz, Dorian Perkins (UC Riverside), Ethan Katz-Bassett (USC), Harsha V. Madhyastha (UC Riverside)\n|\n|\n|-\n| style=\"background:gold\" | S.4\n| Consistency-Based Service Level Agreements for Cloud Storage\n| Douglas B. Terry, Vijayan Prabhakaran, Ramakrishna Kotla, Mahesh Balakrishnan, Marcos K. Aguilera (Microsoft Research), Hussam Abu-Libdeh (Cornell University)\n|\n|\n* Insights: QoS?\n|-\n| style=\"background:coral\" | S.5\n| Tango: Distributed Data Structures over a Shared Log\n| Mahesh Balakrishnan, Dahlia Malkhi, Ted Wobber, Ming Wu, Vijayan Prabhakaran (Microsoft Research), Michael Wei (UCSD), John D. Davis (Microsoft Research), Sriram Rao (Microsoft), Tao Zou (Cornell University), Aviad Zuck (Tel-Aviv University)\n|\n|\n* Insights: new data structure model?\n|-\n| style=\"background:darkseagreen\" | S.3\n| Verifying Computations with State\n| Benjamin Braun (UT Austin), Ariel J. Feldman (University of Pennsylvania), Zuocheng Ren, Srinath Setty, Andrew J. Blumberg, Michael Walfish (UT Austin)\n|\n|\n|-\n|\n| There Is More Consensus In Egalitarian Parliaments\n| Iulian Moraru, David G. Andersen (Carnegie Mellon University), Michael Kaminsky (Intel Labs)\n|\n|\n|-\n|\n| ROOT: Replaying Multithreaded Traces with Resource-Oriented Ordering\n| Zev Weiss, Tyler Harter, Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau (University of Wisconsin-Madison)\n|\n|\n|-\n|\n| PARROT: A Practical Runtime for Deterministic, Stable, and Reliable Threads\n| Heming Cui (Columbia University), Jiri Simsa (Carnegie Mellon University), Yi-Hong Lin, Hao Li (Columbia University), Ben Blum (Carnegie Mellon University), Xinan Xu, Junfeng Yang (Columbia University), Garth A. Gibson, Randal E. Bryant (Carnegie Mellon University)\n|\n|\n|-\n|\n| RaceMob: Crowdsourced Data Race Detection\n| Baris Kasikci, Cristian Zamfir, George Candea (EPFL)\n|\n|\n|-\n| style=\"background:gold\" | S.4\n| Discretized Streams: Fault-Tolerant Streaming Computation at Scale\n| Matei Zaharia, Tathagata Das, Haoyuan Li, Timothy Hunter, Scott Shenker, Ion Stoica (UC Berkeley)\n|\n|\n|-\n| style=\"background:coral\" | S.5\n| (BestPaper) Naiad: A Timely Dataflow System\n| Derek G. Murray, Frank McSherry, Rebecca Isaacs, Michael Isard, Paul Barham, Martin Abadi (Microsoft Research)\n|\n|\n* Insights: Compute/IO Prediction?\n|-\n| style=\"background:darkseagreen\" | S.3\n| A Lightweight Infrastructure for Graph Analytics\n| Donald Nguyen, Andrew Lenharth, Keshav Pingali (University of Texas at Austin)\n|\n|\n|-\n| style=\"background:darkseagreen\" | S.3\n| X-Stream: Edge-Centric Graph Processing using Streaming Partitions\n| Amitabha Roy, Ivo Mihailovic, Willy Zwaenepoel (EPFL)\n|\n|\n|-\n| \n| \n| \n|\n|\n|-\n|}\n\n== ## bNote-2013-12-19 ==\n\n\n=== NVMe IO stack code analysis ===\n\n* .benchmark.sh\n\n* nvme_iostack_analysis.c\n\n <pre>\nblusjune@buddy-guy:execution %2$ cat /x/t/nvme_iostack_analysis.c \n\n\n\ninclude/linux/device.h:\n/**\n * struct device - The basic device structure\n * @parent:	The device\'s \"parent\" device, the device to which it is attached.\n * 		In most cases, a parent device is some sort of bus or host\n * 		controller. If parent is NULL, the device, is a top-level device,\n * 		which is not usually what you want.\n * @p:		Holds the private data of the driver core portions of the device.\n * 		See the comment of the struct device_private for detail.\n * @kobj:	A top-level, abstract class from which other classes are derived.\n * @init_name:	Initial name of the device.\n * @type:	The type of device.\n * 		This identifies the device type and carries type-specific\n * 		information.\n * @mutex:	Mutex to synchronize calls to its driver.\n * @bus:	Type of bus device is on.\n * @driver:	Which driver has allocated this\n * @platform_data: Platform data specific to the device.\n * 		Example: For devices on custom boards, as typical of embedded\n * 		and SOC based hardware, Linux often uses platform_data to point\n * 		to board-specific structures describing devices and how they\n * 		are wired.  That can include what ports are available, chip\n * 		variants, which GPIO pins act in what additional roles, and so\n * 		on.  This shrinks the \"Board Support Packages\" (BSPs) and\n * 		minimizes board-specific #ifdefs in drivers.\n * @power:	For device power management.\n * 		See Documentation/power/devices.txt for details.\n * @pm_domain:	Provide callbacks that are executed during system suspend,\n * 		hibernation, system resume and during runtime PM transitions\n * 		along with subsystem-level and driver-level callbacks.\n * @pins:	For device pin management.\n *		See Documentation/pinctrl.txt for details.\n * @numa_node:	NUMA node this device is close to.\n * @dma_mask:	Dma mask (if dma\'ble device).\n * @coherent_dma_mask: Like dma_mask, but for alloc_coherent mapping as not all\n * 		hardware supports 64-bit addresses for consistent allocations\n * 		such descriptors.\n * @dma_parms:	A low level driver may set these to teach IOMMU code about\n * 		segment limitations.\n * @dma_pools:	Dma pools (if dma\'ble device).\n * @dma_mem:	Internal for coherent mem override.\n * @cma_area:	Contiguous memory area for dma allocations\n * @archdata:	For arch-specific additions.\n * @of_node:	Associated device tree node.\n * @acpi_node:	Associated ACPI device node.\n * @devt:	For creating the sysfs \"dev\".\n * @id:		device instance\n * @devres_lock: Spinlock to protect the resource of the device.\n * @devres_head: The resources list of the device.\n * @knode_class: The node used to add the device to the class list.\n * @class:	The class of the device.\n * @groups:	Optional attribute groups.\n * @release:	Callback to free the device after all references have\n * 		gone away. This should be set by the allocator of the\n * 		device (i.e. the bus driver that discovered the device).\n * @iommu_group: IOMMU group the device belongs to.\n *\n * @offline_disabled: If set, the device is permanently online.\n * @offline:	Set after successful invocation of bus type\'s .offline().\n *\n * At the lowest level, every device in a Linux system is represented by an\n * instance of struct device. The device structure contains the information\n * that the device model core needs to model the system. Most subsystems,\n * however, track additional information about the devices they host. As a\n * result, it is rare for devices to be represented by bare device structures;\n * instead, that structure, like kobject structures, is usually embedded within\n * a higher-level representation of the device.\n */\nstruct device {\n	struct device		*parent;\n\n	struct device_private	*p;\n\n	struct kobject kobj;\n	const char		*init_name; /* initial name of the device */\n	const struct device_type *type;\n\n	struct mutex		mutex;	/* mutex to synchronize calls to\n					 * its driver.\n					 */\n\n	struct bus_type	*bus;		/* type of bus device is on */\n	struct device_driver *driver;	/* which driver has allocated this\n					   device */\n	void		*platform_data;	/* Platform specific data, device\n					   core doesn\'t touch it */\n	struct dev_pm_info	power;\n	struct dev_pm_domain	*pm_domain;\n\n#ifdef CONFIG_PINCTRL\n	struct dev_pin_info	*pins;\n#endif\n\n#ifdef CONFIG_NUMA\n	int		numa_node;	/* NUMA node this device is close to */\n#endif\n	u64		*dma_mask;	/* dma mask (if dma\'able device) */\n	u64		coherent_dma_mask;/* Like dma_mask, but for\n					     alloc_coherent mappings as\n					     not all hardware supports\n					     64 bit addresses for consistent\n					     allocations such descriptors. */\n\n	struct device_dma_parameters *dma_parms;\n\n	struct list_head	dma_pools;	/* dma pools (if dma\'ble) */\n\n	struct dma_coherent_mem	*dma_mem; /* internal for coherent mem\n					     override */\n#ifdef CONFIG_DMA_CMA\n	struct cma *cma_area;		/* contiguous memory area for dma\n					   allocations */\n#endif\n	/* arch specific additions */\n	struct dev_archdata	archdata;\n\n	struct device_node	*of_node; /* associated device tree node */\n	struct acpi_dev_node	acpi_node; /* associated ACPI device node */\n\n	dev_t			devt;	/* dev_t, creates the sysfs \"dev\" */\n	u32			id;	/* device instance */\n\n	spinlock_t		devres_lock;\n	struct list_head	devres_head;\n\n	struct klist_node	knode_class;\n	struct class		*class;\n	const struct attribute_group **groups;	/* optional groups */\n\n	void	(*release)(struct device *dev);\n	struct iommu_group	*iommu_group;\n\n	bool			offline_disabled:1;\n	bool			offline:1;\n};\n\n\n\n\n\ndrivers/block/nvme-core.c:\n/*\n * An NVM Express queue.  Each device has at least two (one for admin\n * commands and one for I/O commands).\n */\nstruct nvme_queue {\n	struct device *q_dmadev;\n	struct nvme_dev *dev;\n	spinlock_t q_lock;\n	struct nvme_command *sq_cmds;\n	volatile struct nvme_completion *cqes;\n	dma_addr_t sq_dma_addr;\n	dma_addr_t cq_dma_addr;\n	wait_queue_head_t sq_full;\n	wait_queue_t sq_cong_wait;\n	struct bio_list sq_cong;\n	u32 __iomem *q_db;\n	u16 q_depth;\n	u16 cq_vector;\n	u16 sq_head;\n	u16 sq_tail;\n	u16 cq_head;\n	u8 cq_phase;\n	u8 cqe_seen;\n	u8 q_suspended;\n\n	unsigned long cmdid_data[];\n};\n\n\n\n\ninclude/linux/nvme.h:\n/*\n * Represents an NVM Express device.  Each nvme_dev is a PCI function.\n */\nstruct nvme_dev {\n	struct list_head node;\n	struct nvme_queue **queues;\n	u32 __iomem *dbs;\n	struct pci_dev *pci_dev;\n	struct dma_pool *prp_page_pool;\n	struct dma_pool *prp_small_pool;\n	int instance;\n	int queue_count;\n	int db_stride;\n	u32 ctrl_config;\n	struct msix_entry *entry;\n	struct nvme_bar __iomem *bar;\n	struct list_head namespaces;\n	struct kref kref;\n	struct miscdevice miscdev;\n	char name[12];\n	char serial[20];\n	char model[40];\n	char firmware_rev[8];\n	u32 max_hw_sectors;\n	u32 stripe_size;\n	u16 oncs;\n\n	int stalen;\n	struct list_head stale_node;\n	volatile unsigned long hp_flag;\n	bool hp_resume;\n};\n\n\n\n\ninclude/linux/nvme.h:\n/*\n * An NVM Express namespace is equivalent to a SCSI LUN\n */\nstruct nvme_ns {\n	struct list_head list;\n\n	struct nvme_dev *dev;\n	struct request_queue *queue;\n	struct gendisk *disk;\n\n	unsigned ns_id;\n	int lba_shift;\n	int ms;\n	u64 mode_select_num_blocks;\n	u32 mode_select_block_len;\n\n	atomic_t refcount;\n	volatile unsigned long hp_flag;\n};\n\n\n\n\ninclude/uapi/linux/nvme.h:\n\n\ninclude/uapi/linux/nvme.h:\nstruct nvme_command {\n	union {\n		struct nvme_common_command common;\n		struct nvme_rw_command rw;\n		struct nvme_identify identify;\n		struct nvme_features features;\n		struct nvme_create_cq create_cq;\n		struct nvme_create_sq create_sq;\n		struct nvme_delete_queue delete_queue;\n		struct nvme_download_firmware dlfw;\n		struct nvme_format_cmd format;\n		struct nvme_dsm_cmd dsm; /* ???dsm */\n	};\n};\n\n\n/*\n * __blusjune_memo__ 20131216_233535\n * NVME_LBART_TYPE_{FS,RAID,CACHE,SWAP} is not used at this moment (2013-12-16)\n * only NVME_LBART_ATTRIB_HIDE is used\n */\ninclude/uapi/linux/nvme.h:\nenum {\n	NVME_LBART_TYPE_FS	= 0x01,\n	NVME_LBART_TYPE_RAID	= 0x02,\n	NVME_LBART_TYPE_CACHE	= 0x03,\n	NVME_LBART_TYPE_SWAP	= 0x04,\n\n	NVME_LBART_ATTRIB_TEMP	= 1 << 0,\n	NVME_LBART_ATTRIB_HIDE	= 1 << 1,\n};\n\n\n/* I/O commands */\ninclude/uapi/linux/nvme.h:\nenum nvme_opcode {\n	nvme_cmd_flush		= 0x00,\n	nvme_cmd_write		= 0x01,\n	nvme_cmd_read		= 0x02,\n	nvme_cmd_write_uncor	= 0x04,\n	nvme_cmd_compare	= 0x05,\n	nvme_cmd_dsm		= 0x09,\n};\n\ninclude/uapi/linux/nvme.h:\nstruct nvme_common_command {\n	__u8			opcode;\n	__u8			flags;\n	__u16			command_id;\n	__le32			nsid;\n	__le32			cdw2[2];\n	__le64			metadata;\n	__le64			prp1;\n	__le64			prp2;\n	__le32			cdw10[6];\n};\n\n\n\n/*\n * __blusjune_memo__ 20131216_233535\n */\ninclude/uapi/linux/nvme.h:\nstruct nvme_rw_command {\n	__u8			opcode;\n	__u8			flags;\n	__u16			command_id;\n	__le32			nsid;\n	__u64			rsvd2;\n	__le64			metadata;\n	__le64			prp1;\n	__le64			prp2;\n	__le64			slba;\n	__le16			length;\n	__le16			control;\n	__le32			dsmgmt; /* __u32 __bitwise */\n	__le32			reftag;\n	__le16			apptag;\n	__le16			appmask;\n};\n\n/*\n * __blusjune_memo__ 20131216_233535\n * DSM (Dataset Management) Context Attributes\n *\n * 6.6.1 Context Attributes\n *\n * The context attributes specified for each range provides information about how the range is intended to be used by host software.\n * The use of this information is optional and the controller is not required to perform any specific action.\n *\n * What if the host NVMe driver filles the \'Reserved\' area? what action is defined for the controller?\n *\n * [31:24] Command Access Size\n *	Number of logical blocks expected to be transferred\n *	in a single Read or Write command from this dataset.\n * [23:11] Reserved\n * [10] WP: Write Prepare\n *	If set to \'1\', then the provided range is expected to be written in the \'near future\'\n *	\'near future\'? how near/far?\n * [09] SW: Sequential Write Range\n *	If set to \'1\', then the dataset should be optimized for sequential write access.\n *	The host expects to perform operations on the dataset as a single object for writes.\n * [08] SR: Sequential Read Range\n *	If set to \'1\', then the dataset should be optimized for sequential read access.\n *	The host expects to perform operations on the dataset as a single object for reads.\n * [07:06] Reserved\n * [05:04] AL: Access Latency\n *	00b: None. No latency information provided.\n *	01b: Idle. Longer latency acceptable.\n *	10b: Normal. Typtical latency.\n *	11b: Low. Smallest possible latency. (PCIe Traffic Class can be used to perform the QoS)\n * [03:00] AF: Access Frequency\n *	0000b: No frequency information provided.\n *	0001b: Typical number of reads and writes expected for this LBA range.\n *	0010b: Infrequent writes and infrequent reads to the LBA range indicated.\n *	0011b: infrequent writes and frequent reads to the LBA range indicated.\n *	0100b: Frequent writes and infrequent reads to the LBA range indicated.\n *	0101b: Frequent writes and frequent reads to the LBA range indicated.\n *	0110b ~	1111b: Reserved\n *	\n */\ninclude/uapi/linux/nvme.h:\nenum {\n	NVME_RW_LR			= 1 << 15,\n	NVME_RW_FUA			= 1 << 14,\n	NVME_RW_DSM_FREQ_UNSPEC		= 0,\n	NVME_RW_DSM_FREQ_TYPICAL	= 1,\n	NVME_RW_DSM_FREQ_RARE		= 2,\n	NVME_RW_DSM_FREQ_READS		= 3,\n	NVME_RW_DSM_FREQ_WRITES		= 4,\n	NVME_RW_DSM_FREQ_RW		= 5,\n	NVME_RW_DSM_FREQ_ONCE		= 6,\n	NVME_RW_DSM_FREQ_PREFETCH	= 7,\n	NVME_RW_DSM_FREQ_TEMP		= 8,\n	NVME_RW_DSM_LATENCY_NONE	= 0 << 4,\n	NVME_RW_DSM_LATENCY_IDLE	= 1 << 4,\n	NVME_RW_DSM_LATENCY_NORM	= 2 << 4,\n	NVME_RW_DSM_LATENCY_LOW		= 3 << 4,\n	NVME_RW_DSM_SEQ_REQ		= 1 << 6,\n	NVME_RW_DSM_COMPRESSED		= 1 << 7,\n};\n\nstruct nvme_dsm_cmd {\n	__u8			opcode;\n	__u8			flags;\n	__u16			command_id;\n	__le32			nsid;\n	__u64			rsvd2[2];\n	__le64			prp1;\n	__le64			prp2;\n	__le32			nr;\n	__le32			attributes;\n	__u32			rsvd12[4];\n};\n\nenum {\n	NVME_DSMGMT_IDR		= 1 << 0,\n	NVME_DSMGMT_IDW		= 1 << 1,\n	NVME_DSMGMT_AD		= 1 << 2,\n};\n\nstruct nvme_dsm_range {\n	__le32			cattr;\n	__le32			nlb;\n	__le64			slba;\n};\n\n\ndrivers/block/nvme-core.c:\nnvme_probe(struct pci_dev *pdev, const struct pci_device_id *id)\n{\n	struct nvme_dev * dev;\n	/*\n	 * memory space will be allocated to \'dev\'\n	 * and then\n	 * \'dev->entry\' will have memory space\n	 * 	proportional to the \'num_possible_cpus()\'\n	 * \'dev->queues\' will have memory space\n	 *	proportional to the \'num_possible_cpus() + 1\' <- why \'+1\' here?\n	 * , where num_possible_cpus() means\n	 *	number of cpus populatable (fixed at boot time),\n	 *	i.e., set of CPU id\'s possible to be plugged in\n	 *	at anytime during the life of system boot\n	 */\n\n\n	// ...\n\n\n	dev->pci_dev = pdev; // pdev argument will be assigned to \'dev->pci_dev\'\n\n\n	result = nvme_set_instance(dev);\n	/*\n	 * allocate new integer ID to dev->instance\n	 *\n	 * Internally, this uses Idr (integer ID management)\n	 * , where Idr is a set of library functions\n	 *	for the management of small integer ID numbers.\n	 *	In essence, an idr object can be thought of\n	 *	as a sparse array mapping integer IDs onto arbitrary pointers,\n	 *	with a \"get me an available entry\" function as well.\n	 *\n	 * URL: http://lwn.net/Articles/103209/\n	 */\n\n\n	result = nvme_setup_prp_pools(dev);\n	/*\n	 * dev->prp_page_pool = dma_pool_create(\"prp list page\",\n	 *	&dev->pci_dev->dev, PAGE_SIZE, PAGE_SIZE, 0)\n	 *\n	 * and the comment says that there is an optimization\n	 * for I/Os between 4k and 128k (is it still 128k? not 256k?)\n	 * by the following code:\n	 * dev->prp_small_pool = dma_pool_create(\"prp list 256\",\n	 *	&dev->pci_dev->dev, 256, 256, 0);\n	 *\n	 * PRPs (Physical Region Pages) contains\n	 * the 64-bit physical memory page address.\n	 * The lower bits (n:2) of this field indicate\n	 * the offset within the memory page\n	 * n is defined by the memory page size (CC.MPS)\n	 *	\n	 * PRP list contains a list of PRPs with generally no offsets\n	 * which means non-contiguous set of physical memory pages\n	 *\n	 * mm/dmapool.c:dma_pool_create(const char * name, struct device *dev, sizt_t size, size_t align, size_t boundary)\n	 * \n	 */\n\n\n	result = nvme_dev_start(dev);\n	/*\n	 * nvme_dev_start() {\n	 * 	nvme_dev_map(dev);\n	 * 	nvme_configure_admin_queue(dev);\n	 * 	list_add(&dev->node, &dev_list);\n	 * 	nvme_setup_io_queues(dev);\n	 * }\n	 */\n\n\n	result = nvme_dev_add(dev);\n\n\n}\n\n\n\ndrivers/block/nvme-core.c:\nstatic int nvme_configure_admin_queue(struct nvme_dev *dev)\n{\n}\n\n\n\ndrivers/block/nvme-core.c:\nstatic int nvme_setup_io_queues(struct nvme_dev *dev)\n{\n}\n\n\n\ndrivers/block/nvme-core.c:\nnvme_setup_io_queues()\n{\n	(int) nr_io_queues = num_online_cpus();\n\n}\n\n\n/*\n * __blusjune_memo__\n */\ndrivers/block/nvme-core.c:\nstatic int nvme_submit_io(struct nvme_ns *ns, struct nvme_user_io __user *uio)\n{\n	struct nvme_dev *dev = ns->dev;\n	struct nvme_queue *nvmeq;\n	struct nvme_user_io io;\n	struct nvme_command c;\n	unsigned length, meta_len;\n	int status, i;\n	struct nvme_iod *iod, *meta_iod = NULL;\n	dma_addr_t meta_dma_addr;\n	void *meta, *uninitialized_var(meta_mem);\n\n	if (copy_from_user(&io, uio, sizeof(io)))\n		return -EFAULT;\n\n        if (nvme_cmd_dsm != io.opcode) {\n	        length = (io.nblocks + 1) << ns->lba_shift;\n	        meta_len = (io.nblocks + 1) * ns->ms;\n        } else {\n	        length = (io.nblocks + 1) << NUM_DSM_RANGES_SHIFT;\n                meta_len = 0;\n        }\n\n	if (meta_len && ((io.metadata & 3) || !io.metadata))\n		return -EINVAL;\n\n	switch (io.opcode) {\n	case nvme_cmd_write:\n	case nvme_cmd_read:\n	case nvme_cmd_compare:\n        case nvme_cmd_dsm:\n		iod = nvme_map_user_pages(dev, io.opcode & 1, io.addr, length);\n		break;\n	case nvme_cmd_flush:\n                memset(&c, 0, sizeof(c));\n                c.rw.opcode = io.opcode;\n                c.rw.nsid = cpu_to_le32(ns->ns_id);\n                nvmeq = get_nvmeq(dev);\n                put_nvmeq(nvmeq);\n\n                status = nvme_submit_sync_cmd(nvmeq, &c, NULL, NVME_IO_TIMEOUT);\n\n                return status;\n	default:\n		return -EINVAL;\n	}\n\n	if (IS_ERR(iod))\n		return PTR_ERR(iod);\n\n	memset(&c, 0, sizeof(c));\n        if (nvme_cmd_dsm == io.opcode) {\n	        c.dsm.opcode = io.opcode;\n	        c.dsm.nsid = cpu_to_le32(ns->ns_id);\n	        c.dsm.nr = cpu_to_le32(io.nblocks);\n	        c.dsm.attributes = cpu_to_le32(io.dsmgmt);\n        } else {\n	        c.rw.opcode = io.opcode;\n	        c.rw.flags = io.flags;\n	        c.rw.nsid = cpu_to_le32(ns->ns_id);\n	        c.rw.slba = cpu_to_le64(io.slba);\n	        c.rw.length = cpu_to_le16(io.nblocks);\n	        c.rw.control = cpu_to_le16(io.control);\n	        c.rw.dsmgmt = cpu_to_le32(io.dsmgmt);\n	        c.rw.reftag = cpu_to_le32(io.reftag);\n	        c.rw.apptag = cpu_to_le16(io.apptag);\n	        c.rw.appmask = cpu_to_le16(io.appmask);\n        }\n\n	if (meta_len) {\n		meta_iod = nvme_map_user_pages(dev, io.opcode & 1, io.metadata, meta_len);\n		if (IS_ERR(meta_iod)) {\n			status = PTR_ERR(meta_iod);\n			meta_iod = NULL;\n			goto unmap;\n		}\n\n		meta_mem = dma_alloc_coherent(&dev->pci_dev->dev, meta_len,\n						&meta_dma_addr, GFP_KERNEL);\n		if (!meta_mem) {\n			status = -ENOMEM;\n			goto unmap;\n		}\n\n		if (io.opcode & 1) {\n			int meta_offset = 0;\n\n			for (i = 0; i < meta_iod->nents; i++) {\n#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 3, 0))\n                                meta = kmap_atomic(sg_page(&meta_iod->sg[i])) +\n#else\n                                meta = kmap_atomic(sg_page(&meta_iod->sg[i]), KM_USER0) +\n#endif\n						meta_iod->sg[i].offset;\n				memcpy(meta_mem + meta_offset, meta,\n						meta_iod->sg[i].length);\n#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 3, 0))\n                                kunmap_atomic(meta);\n#else\n                                kunmap_atomic(meta, KM_USER0);\n#endif\n				meta_offset += meta_iod->sg[i].length;\n			}\n		}\n\n		c.rw.metadata = cpu_to_le64(meta_dma_addr);\n	}\n\n	length = nvme_setup_prps(dev, &c.common, iod, length, GFP_KERNEL);\n\n	nvmeq = get_nvmeq(dev);\n	/*\n	 * Since nvme_submit_sync_cmd sleeps, we can\'t keep preemption\n	 * disabled.  We may be preempted at any point, and be rescheduled\n	 * to a different CPU.  That will cause cacheline bouncing, but no\n	 * additional races since q_lock already protects against other CPUs.\n	 */\n	put_nvmeq(nvmeq);\n	if ((length != (io.nblocks + 1) << ns->lba_shift) && (nvme_cmd_dsm != io.opcode))\n		status = -ENOMEM;\n        else if (!nvmeq || nvmeq->q_suspended)\n                status = -EBUSY;\n	else\n		status = nvme_submit_sync_cmd(nvmeq, &c, NULL, NVME_IO_TIMEOUT);\n\n	if (meta_len) {\n		if (status == NVME_SC_SUCCESS && !(io.opcode & 1)) {\n			int meta_offset = 0;\n\n			for (i = 0; i < meta_iod->nents; i++) {\n#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 3, 0))\n                                meta = kmap_atomic(sg_page(&meta_iod->sg[i])) +\n#else\n                                meta = kmap_atomic(sg_page(&meta_iod->sg[i]), KM_USER0) +\n#endif\n						meta_iod->sg[i].offset;\n				memcpy(meta, meta_mem + meta_offset,\n						meta_iod->sg[i].length);\n#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 3, 0))\n                                kunmap_atomic(meta);\n#else\n                                kunmap_atomic(meta, KM_USER0);\n#endif\n				meta_offset += meta_iod->sg[i].length;\n			}\n		}\n\n		dma_free_coherent(&dev->pci_dev->dev, meta_len, meta_mem,\n								meta_dma_addr);\n	}\n\n unmap:\n	nvme_unmap_user_pages(dev, io.opcode & 1, iod);\n	nvme_free_iod(dev, iod);\n\n	if (meta_iod) {\n		nvme_unmap_user_pages(dev, io.opcode & 1, meta_iod);\n		nvme_free_iod(dev, meta_iod);\n	}\n\n	return status;\n}\n\n\n\n\n/*\n * __blusjune_memo__\n * nvme_ioctl() -> nvme_submit_io()\n */\ndrivers/block/nvme-core.c:\nstatic int nvme_ioctl(struct block_device *bdev, fmode_t mode, unsigned int cmd,\n							unsigned long arg)\n{\n	struct nvme_ns *ns = bdev->bd_disk->private_data;\n\n	if (!ns || (test_bit(NVME_HOT_REM, &ns->dev->hp_flag)) ||\n		!bdev->bd_disk ||\n		!(bdev->bd_disk->flags & GENHD_FL_UP))\n		return -ENODEV;\n\n	switch (cmd) {\n	case NVME_IOCTL_ID:\n		force_successful_syscall_return();\n		return ns->ns_id;\n	case NVME_IOCTL_ADMIN_CMD:\n		return nvme_user_admin_cmd(ns->dev, (void __user *)arg);\n	case NVME_IOCTL_SUBMIT_IO:\n		return nvme_submit_io(ns, (void __user *)arg);\n	case SG_GET_VERSION_NUM:\n		return nvme_sg_get_version_num((void __user *)arg);\n	case SG_IO:\n		return nvme_sg_io(ns, (void __user *)arg);\n	default:\n		return -ENOTTY;\n	}\n}\n\n\n\n\n/*\n * __blusjune_memo__\n * \'nvme_fops.ioctl\' is actually \'nvme_ioctl()\'\n */\ndrivers/block/nvme-core.c:\nstatic const struct block_device_operations nvme_fops = {\n	.owner		= THIS_MODULE,\n	.open		= nvme_bd_open,\n	.release	= nvme_bd_release,\n	.getgeo         = nvme_getgeo,\n	.ioctl		= nvme_ioctl,\n	.compat_ioctl	= nvme_ioctl,\n};\n\n\n\n\n/*\n * __blusjune_memo__\n *\n * nvme_make_request() -> nvme_submit_bio_queue()\n *\n * Called with local interrupts disabled and the q_lock held.  May not sleep.\n */\ndrivers/block/nvme-core.c:\nstatic int nvme_submit_bio_queue(struct nvme_queue *nvmeq, struct nvme_ns *ns, struct bio *bio)\n{\n	struct nvme_command *cmnd;\n	struct nvme_iod *iod;\n	enum dma_data_direction dma_dir;\n	int cmdid, length, result;\n	u16 control;\n	u32 dsmgmt;\n	int psegs = bio_phys_segments(ns->queue, bio);\n\n	if (!(bio->bi_bdev->bd_disk->flags & GENHD_FL_UP)) {\n		 pr_err(\"%s:%d - No device\\n\",__func__, __LINE__);\n                  bio->bi_rw |= REQ_FAILFAST_DEV;\n                  bio_endio(bio, -ENODEV);\n                  return 0;\n        }\n\n	if ((bio->bi_rw & REQ_FLUSH) && psegs) {\n		result = nvme_submit_flush_data(nvmeq, ns);\n		if (result)\n			return result;\n	}\n\n	result = -ENOMEM;\n	iod = nvme_alloc_iod(psegs, bio->bi_size, GFP_ATOMIC);\n	if (!iod)\n		goto nomem;\n	iod->private = bio;\n\n	result = -EBUSY;\n	cmdid = alloc_cmdid(nvmeq, iod, bio_completion, NVME_IO_TIMEOUT);\n	if (unlikely(cmdid < 0))\n		goto free_iod;\n\n	if (bio->bi_rw & REQ_DISCARD) {\n		result = nvme_submit_discard(nvmeq, ns, bio, iod, cmdid);\n		if (result)\n			goto free_cmdid;\n		return result;\n	}\n\n	if ((bio->bi_rw & REQ_FLUSH) && !psegs)\n		return nvme_submit_flush(nvmeq, ns, cmdid);\n\n        if (bio->bi_rw & REQ_FAILFAST_DRIVER)\n		mdelay(100);\n\n	control = 0;\n\n	if (bio->bi_rw & REQ_FUA)\n		control |= NVME_RW_FUA;\n\n        if (bio->bi_rw & (REQ_FAILFAST_DEV | REQ_RAHEAD))\n		control |= NVME_RW_LR;\n\n	dsmgmt = 0;\n\n        if (bio->bi_rw & REQ_RAHEAD)\n		dsmgmt |= NVME_RW_DSM_FREQ_PREFETCH;\n\n	cmnd = &nvmeq->sq_cmds[nvmeq->sq_tail];\n\n	memset(cmnd, 0, sizeof(*cmnd));\n	if (bio_data_dir(bio)) {\n		cmnd->rw.opcode = nvme_cmd_write;\n		dma_dir = DMA_TO_DEVICE;\n	} else {\n		cmnd->rw.opcode = nvme_cmd_read;\n		dma_dir = DMA_FROM_DEVICE;\n	}\n\n	result = nvme_map_bio(nvmeq, iod, bio, dma_dir, psegs);\n	if (result <= 0)\n		goto free_cmdid;\n	length = result;\n\n	cmnd->rw.command_id = cmdid;\n	cmnd->rw.nsid = cpu_to_le32(ns->ns_id);\n	length = nvme_setup_prps(nvmeq->dev, &cmnd->common, iod, length,\n								GFP_ATOMIC);\n	cmnd->rw.slba = cpu_to_le64(nvme_block_nr(ns, bio->bi_sector));\n	cmnd->rw.length = cpu_to_le16((length >> ns->lba_shift) - 1);\n	cmnd->rw.control = cpu_to_le16(control);\n	cmnd->rw.dsmgmt = cpu_to_le32(dsmgmt);\n\n	if (++nvmeq->sq_tail == nvmeq->q_depth)\n		nvmeq->sq_tail = 0;\n	writel(nvmeq->sq_tail, nvmeq->q_db);\n\n	return 0;\n\n free_cmdid:\n	free_cmdid(nvmeq, cmdid, NULL);\n free_iod:\n	nvme_free_iod(nvmeq->dev, iod);\n nomem:\n	return result;\n}\n\n\n\n\n\ndrivers/block/nvme-core.c:\n#if (LINUX_VERSION_CODE < KERNEL_VERSION(3, 3, 0))\nstatic int nvme_make_request(struct request_queue *q, struct bio *bio)\n#else\nstatic void nvme_make_request(struct request_queue *q, struct bio *bio)\n#endif\n{\n	struct nvme_ns *ns = NULL;\n	struct nvme_queue *nvmeq = NULL;\n	int result = -EBUSY;\n\n	unsigned long flags = 0;\n\n	if (unlikely(!bio_has_data(bio))) {\n                bio_endio(bio, 0);\n                goto out;\n        }\n\n	if (likely(q && q->queuedata))\n		ns = q->queuedata;\n\n	if (unlikely(!ns)) {\n		pr_err(\"%s:%d - No device\\n\",__func__, __LINE__);\n		bio_endio(bio, -ENODEV);\n		goto out;\n	}\n\n	if ((test_bit(NVME_HOT_REM, &ns->dev->hp_flag)) ||\n		!(bio->bi_bdev->bd_disk->flags & GENHD_FL_UP)) {\n                bio->bi_rw |= REQ_FAILFAST_DEV;\n                bio_endio(bio, -ENODEV);\n                goto out;\n        }\n\n	nvmeq = get_nvmeq(ns->dev);\n\n	if (unlikely(!nvmeq)) {\n		pr_err(\"%s:%d - No device\\n\",__func__, __LINE__);\n		bio_endio(bio, -ENXIO);\n		goto out;\n	}\n\n	spin_lock_irqsave(&nvmeq->q_lock, flags);\n	if (!nvmeq->q_suspended && bio_list_empty(&nvmeq->sq_cong))\n		result = nvme_submit_bio_queue(nvmeq, ns, bio);\n	if (unlikely(result)) {\n		if (bio_list_empty(&nvmeq->sq_cong))\n			add_wait_queue(&nvmeq->sq_full, &nvmeq->sq_cong_wait);\n		bio_list_add(&nvmeq->sq_cong, bio);\n	}\n\n	nvme_process_cq(nvmeq);\n	spin_unlock_irqrestore(&nvmeq->q_lock, flags);\n\n	put_nvmeq(nvmeq);\n\nout:\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 2, 0)\n        return 0;\n#else\n        return;\n#endif\n}\n</pre>\n\n== ## bNote-2013-12-18 ==\n\n\n=== R-script to draw a barplot ===\n\n* $ ls -alF\n <pre>\nroot@grant-green:anal.12.lvm_raw %1# l\ntotal 36\ndrwxrwxr-x  2 blusjune blusjune 4096 Dec 20 19:04 ./\ndrwxrwxr-x 13 blusjune blusjune 4096 Dec 17 09:44 ../\n-rw-rw-r--  1 blusjune blusjune 2682 Dec 17 13:40 .RData\n-rw-------  1 blusjune blusjune 2010 Dec 17 13:40 .Rhistory\n-rw-------  1 blusjune blusjune 2464 Dec 17 14:21 .rcmd.R\n-rw-rw-r--  1 blusjune blusjune  756 Dec 17 09:46 fio_result.nvme_ssd_lvm.log\n-rw-rw-r--  1 blusjune blusjune  786 Dec 17 09:44 fio_result.nvme_ssd_raw.log\n-rw-rw-r--  1 blusjune blusjune  744 Dec 17 09:46 fio_result.sata_ssd_lvm.log\n-rw-rw-r--  1 blusjune blusjune  737 Dec 17 09:45 fio_result.sata_ssd_raw.log\n</pre>\n\n* cat .rcmd.R\n <pre>\nroot@grant-green:anal.12.lvm_raw %1# cat .rcmd.R \nd.nvme_ssd_raw <- read.table(file=\'fio_result.nvme_ssd_raw.log\', header=T)\nd.nvme_ssd_lvm <- read.table(file=\'fio_result.nvme_ssd_lvm.log\', header=T)\nd.sata_ssd_raw <- read.table(file=\'fio_result.sata_ssd_raw.log\', header=T)\nd.sata_ssd_lvm <- read.table(file=\'fio_result.sata_ssd_lvm.log\', header=T)\nmat.nvme_ssd_raw <- as.matrix(d.nvme_ssd_raw[,-1])\nmat.nvme_ssd_lvm <- as.matrix(d.nvme_ssd_lvm[,-1])\nmat.sata_ssd_raw <- as.matrix(d.sata_ssd_raw[,-1])\nmat.sata_ssd_lvm <- as.matrix(d.sata_ssd_lvm[,-1])\n\nrownames(mat.nvme_ssd_raw) <- c(\n		\"IODepth=1\",\n		\"IODepth=2\",\n		\"IODepth=4\",\n		\"IODepth=8\",\n		\"IODepth=16\",\n		\"IODepth=32\",\n		\"IODepth=64\",\n		\"IODepth=128\",\n		\"IODepth=256\"\n		);\n\nrownames(mat.nvme_ssd_lvm) <- c(\n		\"IODepth=1\",\n		\"IODepth=2\",\n		\"IODepth=4\",\n		\"IODepth=8\",\n		\"IODepth=16\",\n		\"IODepth=32\",\n		\"IODepth=64\",\n		\"IODepth=128\",\n		\"IODepth=256\"\n		);\n\nrownames(mat.sata_ssd_raw) <- c(\n		\"IODepth=1\",\n		\"IODepth=2\",\n		\"IODepth=4\",\n		\"IODepth=8\",\n		\"IODepth=16\",\n		\"IODepth=32\",\n		\"IODepth=64\",\n		\"IODepth=128\",\n		\"IODepth=256\"\n		);\n\nrownames(mat.sata_ssd_lvm) <- c(\n		\"IODepth=1\",\n		\"IODepth=2\",\n		\"IODepth=4\",\n		\"IODepth=8\",\n		\"IODepth=16\",\n		\"IODepth=32\",\n		\"IODepth=64\",\n		\"IODepth=128\",\n		\"IODepth=256\"\n		);\n\n\n\n\nif (readline(prompt=\"NVMe SSD Raw Chart? [Y|n] \") != \'n\') {\n	mat <- mat.nvme_ssd_raw; maintitle <- \"NVMe SSD (XS-1715, 400GB) Raw case - Performance Benchmark Result\";\n	print(mat); barplot(mat, col=rainbow(9), beside=T, legend=rownames(mat), main=maintitle);\n}\n\nif (readline(prompt=\"NVMe SSD LVM Chart? [Y|n] \") != \'n\') {\n	mat <- mat.nvme_ssd_lvm; maintitle <- \"NVMe SSD (XS-1715, 400GB) LVM case - Performance Benchmark Result\";\n	print(mat); barplot(mat, col=rainbow(9), beside=T, legend=rownames(mat), main=maintitle);\n}\n\nif (readline(prompt=\"SATA SSD Raw Chart? [Y|n] \") != \'n\') {\n	mat <- mat.sata_ssd_raw; maintitle <- \"SATA SSD (830, 128GB) Raw case - Performance Benchmark Result\";\n	print(mat); barplot(mat, col=rainbow(9), beside=T, legend=rownames(mat), main=maintitle);\n}\n\nif (readline(prompt=\"SATA SSD LVM Chart? [Y|n] \") != \'n\') {\n	mat <- mat.sata_ssd_lvm; maintitle <- \"SATA SSD (830, 128GB) LVM case - Performance Benchmark Result\";\n	print(mat); barplot(mat, col=rainbow(9), beside=T, legend=rownames(mat), main=maintitle);\n}\n\n\n\n\nmat_diff <- as.matrix((100 * (d.nvme_ssd_lvm - d.nvme_ssd_raw) / d.nvme_ssd_lvm)[, -1])\nbarplot(mat_diff, col=rainbow(9), beside=T, legend=rownames(mat_diff), main=\"NVMe SSD (LVM - Raw)\");\n\n\n\n\nroot@grant-green:anal.12.lvm_raw %1# \n</pre>\n\n\n\n=== TPC-C benchmark scripts ===\n\n* .benchmark.sh\n\n <pre>\nblusjune@grant-green:tpcc_mysql_bmt_with_ssd %1$ cat .benchmark.sh \n#!/bin/sh\n## _ver=20131218_224424\n\n\n_ts_t1=$(..ts); _ts_t1e=$(tstamp-e);\n\n\necho \"#>> 1. Stop MySQL\";\n(stop mysql;)\n\n\necho \"#>> 2. Unmount /var/lib/mysql/db_on_ssd\";\n(umount /var/lib/mysql/db_on_ssd;)\n\n\n_ts_1=$(..ts); _ts_1e=$(tstamp-e);\necho \"#>> 3. Make target SSD go into the steady-state\";\n(cd steady_state/fio_test_d/t/10.sata_ssd_steadystate; DEV=${_TARGET_DEV} export DEV; _BDX)\n_ts_2=$(..ts); _ts_2e=$(tstamp-e);\necho \"[3] Elapsed time: $(echo $_ts_2e - $_ts_1e | bc) seconds\\t( $_ts_1 ~ $_ts_2 )\n\"\n\n\necho \"#>> 4. {fdisk, mkfs, mount} /var/lib/mysql/db_on_ssd\";\n(fdisk ${_TARGET_DEV};)\n(mkfs.xfs ${_TARGET_DEV}1;)\n(mount ${_TARGET_DEV}1 /var/lib/mysql/db_on_ssd;)\n\n\necho \"#>> 5. Start MySQL\";\n(start mysql;)\n\n\n_ts_1=$(..ts); _ts_1e=$(tstamp-e);\necho \"#>> 6. Import tpcc2500 DB from MySQL dumpfile\";\n(mysql -p -u root < mysql_dump_file/tpcc2500.dump-20131218_164116.sql;)\n_ts_2=$(..ts); _ts_2e=$(tstamp-e);\necho \"[6] Elapsed time: $(echo $_ts_2e - $_ts_1e | bc) seconds\\t( $_ts_1 ~ $_ts_2 )\n\"\n\n\n_ts_1=$(..ts); _ts_1e=$(tstamp-e);\necho \"#>> 7. Execute TPC-C benchmark\";\n(cd bmt; ..ts; tpcc_start localhost tpcc2500 root kkk 2500 128 0 10800 > tpcc_result.${_ts}.log; ..ts;)\n_ts_2=$(..ts); _ts_2e=$(tstamp-e);\necho \"[7] Elapsed time: $(echo $_ts_2e - $_ts_1e | bc) seconds\\t( $_ts_1 ~ $_ts_2 )\n\"\n\n\n_ts_t2=$(..ts); _ts_t2e=$(tstamp-e);\necho \"[Total] Elapsed time: $(echo $_ts_t2e - $_ts_t1e | bc) seconds\\t( $_ts_t1 ~ $_ts_t2 )\n\"\n\n\nblusjune@grant-green:tpcc_mysql_bmt_with_ssd %1$ \n</pre>\n\n\n=== FIO-based benchmark scripts ===\n\n* fio_test_d.tgz.asc\n: script to make steady-state\n: script to run FIO benchmark\n: script to generate R input data from FIO result files\n\n <pre>\nblusjune@grant-green:steady_state %1$ cat fio_test_d.tgz.asc \n-----BEGIN PGP MESSAGE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\nComment: Brian M. JUNG <brian.m.jung@gmail.com> Fri Dec 20 18:56:02 KST 2013\n\n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\n8z39sMlXIMwdgQTNhZnsjz519X5vKlmF8sgP878bEls9Si8QDJwJaAbf3jzMZGO0\nEWEirBmOBTXjHgpzITBxPCzWV5lSsA8O1KJiKSH8uesWFIwcPN6QLGCiP3BF/rlv\n3bBS1I/3PbI7lScBwrw4OX8ywZsqOSyFzuTKzE5/nAP+GVNpUtK1GzI/oLGsm2G4\n3EnvqNeatTCSAMj+SsflS6nBzaj4XHPqjBX2zMqjKdR9NqaGBZYz/bZGOAC5wj6g\nDUjhBun7VXyi32HF2rQ4jXmDp70enQUXDDBXV+9uOzOY7x071pnmXyCTZI0im1rG\nKSKI/aSKQn3XZxHaQv/roMubim6rODcmsZ0vHtjdviCjHykP5y3DscFExl/T4M30\nCIoEvgOSx7LlpN2fENg1dj5WVjECjyayfyK4wp+jLaho43OMn9wGAjZ6wR2ZfMKv\nXd/R1TOTktMIMfoe2auQFeCKaR4xOOPYs/EHWvjq+nAxJZa+jr5XSyhyBRlCXZ6N\nWgUWR8+AcODTDnU8/64jDgsMYIhU3xItQ/VXInkU4T558fTB/ayNFZAeKnF49Dgq\ndb3JQr83+UXPGu0Y6/fanu7bM4FCW/m962IZBFi2HxX6qcfqIlwGbNeQZP9XQONM\nPVmIryKcP3BZ8cpgZeIPKQXgZWqbRXA5ab5SuW67h5TNr7ae68Q1emoJd9AxUGcU\nZBIORzYatkEihzD2aJqkJmIPR2d7nZLnueG0SXiR6QFeWBzaXqK2cIioEI3XsIlL\n/ivdk2NhvpQlk1cqtqLDTq5LyCsRptObQM17tdyvwqtWjS9CJR6ApIVOjtaBkrZ5\noYRNG3Ix6KBsVIRBGIXa9HrcrSD6GmijWYRULtcWtob+OMivQX3fiE5rSAtTW4H3\n2DhQ7Tq31wTuzhYLsqTMzIGsk3bHaZfT9kErIhnzBs5KRxO5tzj2n16whtoOl/jl\n+Y3ybxLg14YLPHJFuHkT4DmxPQZA3stfHS81kFO9YZztk7jpjyOg6NLSMNkMOgXt\n3B2DJaQ4RlSG/m0JM6wr7K1Rth+mtBx9ORoNjYFd3PdqtmGw5c5oGl0kv0J9Ce8s\nEW+SJ/33Mxf7FoDT2oVI+/MaaADWHagkYa4lHRGKktIK2AzeIvow1Qdd6MkZu6mZ\nowJu7JxjlrUbBihT3CeTIKlHvjbHOZfLL4PGtgrODFcu/rbUGeYCoJvlAl4L2dIE\n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\ncapck5nXYg==\n=E03c\n-----END PGP MESSAGE-----\n</pre>\n\n== ## bNote-2013-12-17 ==\n\n=== TPC-C test result example ===\n\n* How to understand the TPC-C test result\n <pre>\n  Count     New-Order           Payment        Order-Status         Delivery        Stock-Level\n num,  sl :rt90|max_rt  sl :rt90|max_rt  sl :rt90|max_rt  sl :rt90|max_rt  sl :rt90|max_rt\n 10, 12(2):5.595|8.443, 15 :1.091|1.303, 2 :0.309|0.342, 2 :3.841|4.503, 1 :12.433|12.518\n</pre>\n\n\n* Talk with Jinjin\n <pre>\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:05]:\n  Hi, Jinjin ^^ Good morning!\n  Any point that I can help you regarding that steady-state script?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:05]:\n  morning, Brian~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:06]:\n  Yeah, so nice morning!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:06]:\n  I haven\'t used that yet, now I\'m testing with virgin state\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:06]:\n  Oh, great news to hear \n  then,\n  you mean that\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:12]:\n  (I\'m sorry ^^;;; somebody interrupted me !! Now I\'m back)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:12]:\n  it\'s ok~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:12]:\n  oh, so nice of you!\n  ^^\n  it means that ~ you found the way to make securely erase the SSD through the HW RAID controller !!!\n\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:13]:\n  yes, i found a way yesterday, using HP\'s own tools\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:14]:\n  oh, really? !!!\n  in the BIOS-like screen?\n  at the early phase of booting?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:16]:\n  yes, and it also provide a way to do it in command line, i will try if it works today\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:16]:\n  oh, great!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:17]:\n  have you reproduce the problem?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:17]:\n  oh, not yet! \n  because\n  we just received the test SSD (samsung) yesterday \n  kkk\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:17]:\n  that\'s ok~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:17]:\n  and I just finished the test trial of TPC-C benchmark program \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:18]:\n  good~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:18]:\n  one question to you, Jinjin ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:18]:\n  yes, pls\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:18]:\n  I\'ve got the resultant data from TPC-C benchmark as the following:\n      1 ***************************************\n    2 *** ###easy### TPC-C Load Generator ***\n    3 ***************************************\n    4 clk_tck is 1000000\n    5 <Parameters>\n    6      [server]: localhost\n    7      [port]: 3306\n    8      [DBname]: tpcc2500\n    9        [user]: root\n   10        [pass]: kkk\n   11   [warehouse]: 2500\n   12  [connection]: 128\n   13      [rampup]: 0 (sec.)\n   14     [measure]: 10800 (sec.)\n   15\n   16 RAMP-UP TIME.(0 sec.)\n   17\n   18 MEASURING START.\n   19\n   20   10, 507 :4.305, 544 :4.003, 52 :4.167, 45 :4.837, 1 :5.649\n   21   20, 717 :1.642, 709 :0.205, 73 :1.238, 72 :3.388, 76 :9.220\n   22   30, 709 :1.648, 717 :0.471, 70 :0.776, 71 :2.719, 75 :8.246\n   23   40, 896 :1.634, 898 :0.195, 89 :0.567, 90 :3.304, 84 :9.342\n   24   50, 732 :1.904, 724 :0.357, 74 :1.285, 69 :2.550, 70 :8.955\n   25   60, 740 :1.963, 749 :0.338, 76 :1.077, 75 :3.398, 77 :8.299\n   26   70, 674 :2.102, 671 :0.205, 67 :1.318, 68 :3.802, 68 :10.643\n   27   80, 755 :1.697, 753 :0.149, 73 :1.238, 75 :3.092, 69 :7.773\n   28   90, 872 :1.925, 851 :0.163, 88 :1.723, 87 :3.118, 92 :8.543\n   29  100, 960 :1.191, 991 :0.220, 97 :0.646, 99 :3.025, 102 :7.037\n   30  110, 622 :2.165, 608 :0.196, 61 :1.583, 62 :3.117, 52 :8.393\n   31  120, 855 :1.297, 863 :0.246, 85 :0.733, 86 :2.792, 89 :8.357\n   32  130, 740 :1.531, 728 :0.277, 75 :0.943, 74 :2.532, 72 :8.471\n   33  140, 877 :1.811, 877 :0.321, 89 :1.176, 84 :2.845, 90 :8.562\n   34  150, 763 :1.497, 773 :0.302, 76 :1.238, 78 :2.565, 76 :8.322\n   35  160, 792 :1.041, 785 :0.399, 80 :0.815, 82 :2.119, 82 :7.633\n   36  170, 608 :2.126, 603 :0.171, 61 :2.191, 60 :2.766, 59 :8.979\n  ooooops \n  lots of unwanted emoticon ^^;;;\n  sorry ^^;;;\n  Could you teach me how to understand this data?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:19]:\n  hah, i understand~\n  sure\n  just a minute\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:19]:\n  maybe the first column means every 10-second~\n  oh, great!\n  So what I want is to draw a plot like you sent to us~\n  with this data ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:20]:\n  yes, the first column means every 10 seconds\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:21]:\n  ok, got it ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:21]:\n  Count     New-Order           Payment        Order-Status         Delivery        Stock-Level\n num,  sl :rt90|max_rt  sl :rt90|max_rt  sl :rt90|max_rt  sl :rt90|max_rt  sl :rt90|max_rt\n 10, 12(2):5.595|8.443, 15 :1.091|1.303, 2 :0.309|0.342, 2 :3.841|4.503, 1 :12.433|12.518\n  sl means num of successful and late transactions\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:22]:\n  Oh, it\'s somewhat different form of data from my result\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:23]:\n  the picture i draw is just the sl column of new-order\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:23]:\n  Oh I see~\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:23]:\n  oh, the above two lines are not from output data\n  i add them to explain\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:24]:\n  Got it, ^^ then, what number was picked from the data above ? 12?\n  or \"(2)\"?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:24]:\n  yes, 12\n  you\'re so smart^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:25]:\n  oh, ~ not like you!!!\n  your explanation was so great!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:25]:\n  you can draw the picture using gnuplot\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:25]:\n  great! I like that! ^^\n  ah, could I ask you the meaning of \'(2)\'\n  ?\n  just besides the number \'12\'\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:26]:\n  (2) means num of late transaction \n  unwanted emotions... \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:26]:\n  hahaha \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:26]:\n  the 12 includes the(2)\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:26]:\n  oh!\n  is there any criterion or threshold value to determine the \'late transaction\'?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:27]:\n  yes, sure\n  in the tool, they are:\n  #define RTIME_NEWORD   5\n#define RTIME_PAYMENT  5\n#define RTIME_ORDSTAT  5\n#define RTIME_DELIVERY 80\n#define RTIME_SLEV     20\n\n  different kinds of transaction has different thresholds\n  miniseconds\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:29]:\n  oh, now its clear!\n  it may determined by the \'convention\', that , \"in general, user feels uncomfortable when the response time is over this threshold value - so WE decide the transaction over this value as \'late response\' \"\n  is it right understanding?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:31]:\n  yse, you are so right!\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:31]:\n  Oh, thank you!!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:31]:\n  and the tpcc standard defines these, so we needn\'t change them\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:32]:\n  and rt90 must mean \'90% percentile response time\', and max_rt means \'latest response time\n  \' \n  right?\n  Got it!!! ^^ (no need to touch this value)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:32]:\n  yes^^\n  you are so smart~~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:32]:\n  Oh, you stole my word to you\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:33]:\n  in fact, in the code, rt90 actually is 99% percentile response time\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:33]:\n  oh, I see!\n  very nice and exactness of you!\n  ^^\n  thank you very very much! ^^ Xie-Xie, Jinjin!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:34]:\n  you\'re welcome \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:34]:\n  hahaha, and, then,~\n  If you need any help from me regarding using that steady-script, please feel free to contact me!!! anytime!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:35]:\n  btw, since the pecentage of different kinds of transactions are standard, so we just care about the new-order\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:36]:\n  oh, is that because of new-order is the starting point of new transaction?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:38]:\n  good question! I never thought of that\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:38]:\n  Oh, just out of curiosity ^_^;;;;;\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:39]:\n  it may be because the standard enforce that the pecentage of Payment>=43%, order-status>=4%, delivery>=4%, stock-level>=4%, and the others are new-order\n  you can check the end of the output data, there should be sth like:\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:41]:\n   [transaction percentage]\n        Payment: 43.48% (>=43.0%) [OK]\n   Order-Status: 4.35% (>= 4.0%) [OK]\n       Delivery: 4.35% (>= 4.0%) [OK]\n    Stock-Level: 4.35% (>= 4.0%) [OK]\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:41]:\n  Oh, that means New_order takes the 45% of whole transaction, so it is the most dominant type of transaction, \n  ah, maybe under 45% of transaction, New Order~\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  yes\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  ok~ I see ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:43]:\n  great!\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:43]:\n  I\'ll update to you if any progress from my side ^^\n  see you soon, again!!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:43]:\n  thank you!\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:43]:\n  thank you very much!! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:43]:\n  CU\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:43]:\n  CU ^^\n</pre>\n\n== ## bNote-2013-12-16 ==\n\n=== FIO test suites ===\n\n==== bsc.x9.bmt.fio.run_fio.sh ====\n <pre>\n</pre>\n\n\n==== bsc.x9.bmt.fio.gen_r_input.sh ====\n <pre>\n</pre>\n\n== ## bNote-2013-12-13 ==\n\n=== NVMe IO stack (advanced version created by Samsung) ===\n\n==== nvme.h ====\n\n===== nvme.h (S version) =====\n\n <pre>\nblusjune@buddy-guy:.files %1$ cat samsung_orig.nvme.h.asc \n-----BEGIN PGP MESSAGE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\nComment: Brian M. JUNG <brian.m.jung@gmail.com> Fri Dec 13 19:41:46 KST 2013\n\n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\nK3Wai1bUbw==\n=/70T\n-----END PGP MESSAGE-----\n\n</pre>\n\n===== include/linux/nvme.h (mainline kernel 3.13.0-rc2 version) =====\n <pre>\n#ifndef _LINUX_NVME_H\n#define _LINUX_NVME_H\n\n#endif /* _LINUX_NVME_H */\n</pre>\n\n\n* source code (include/linux/nvme.h)\n <pre>\nroot@buddy-guy:nvme_src_brian %1# cat /tmp/include_linux_nvme.h.asc\n-----BEGIN PGP MESSAGE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\nComment: Brian M. JUNG <brian.m.jung@gmail.com> Fri Dec 13 19:50:18 KST 2013\n\n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\n=o3yx\n-----END PGP MESSAGE-----\n</pre>\n\n===== include/uapi/linux/nvme.h (mainline kernel 3.13.0-rc2 version) =====\n\n: \'UAPI\' in the path \'include/uapi/linux/nvme.h\' means user side API which kernel exports for user application\n\n <pre>\n#ifndef _UAPI_LINUX_NVME_H\n#ifndef _UAPI_LINUX_NVME_H\n\n#ifndef /* _UAPI_LINUX_NVME_H */\n</pre>\n\n\n\n\n <pre>\nroot@buddy-guy:nvme_src_brian %1# cat /tmp/include_uapi_linux_nvme.h.asc\n-----BEGIN PGP MESSAGE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\nComment: Brian M. JUNG <brian.m.jung@gmail.com> Fri Dec 13 19:50:36 KST 2013\n\n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\n=1Cxo\n-----END PGP MESSAGE-----\n\n</pre>\n\n==== nvme-core.c ====\n\n <pre>\nblusjune@buddy-guy:block %1$ cat /tmp/nvme-core.c.asc \n-----BEGIN PGP MESSAGE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\nComment: Brian M. JUNG <brian.m.jung@gmail.com> Fri Dec 13 21:29:30 KST 2013\n\n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\neKfTLCLdvGR6d+ucWNMSvTDt\n=87Zh\n-----END PGP MESSAGE-----\n</pre>\n\n==== nvme-scsi.c ====\n\n <pre>\nblusjune@buddy-guy:block %1$ cat /tmp/nvme-scsi.c.asc\n-----BEGIN PGP MESSAGE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\nComment: Brian M. JUNG <brian.m.jung@gmail.com> Fri Dec 13 21:30:41 KST 2013\n\n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\naeAFFMDo\n=33/2\n-----END PGP MESSAGE-----\n</pre>\n\n== ## bNote-2013-12-12 ==\n\n=== MySQL handling ===\n\n* mysql> show status like \'innodb_%\'\n\n <pre>\nmysql> show status like \'innodb_%\';\n+---------------------------------------+---------+\n| Variable_name                         | Value   |\n+---------------------------------------+---------+\n| Innodb_buffer_pool_pages_data         | 389     |\n| Innodb_buffer_pool_bytes_data         | 6373376 |\n| Innodb_buffer_pool_pages_dirty        | 0       |\n| Innodb_buffer_pool_bytes_dirty        | 0       |\n| Innodb_buffer_pool_pages_flushed      | 0       |\n| Innodb_buffer_pool_pages_free         | 5119611 |\n| Innodb_buffer_pool_pages_misc         | 0       |\n| Innodb_buffer_pool_pages_total        | 5120000 |\n| Innodb_buffer_pool_read_ahead_rnd     | 0       |\n| Innodb_buffer_pool_read_ahead         | 0       |\n| Innodb_buffer_pool_read_ahead_evicted | 0       |\n| Innodb_buffer_pool_read_requests      | 5600    |\n| Innodb_buffer_pool_reads              | 390     |\n| Innodb_buffer_pool_wait_free          | 0       |\n| Innodb_buffer_pool_write_requests     | 0       |\n| Innodb_data_fsyncs                    | 3       |\n| Innodb_data_pending_fsyncs            | 0       |\n...\n</pre>\n\n== ## bNote-2013-12-11 ==\n\n=== Xian SSD Benchmark Test ===\n\n\n==== Environment: MySQL configuration (Brian\'s Dell PowerEdge R720) ====\n\n <pre>\nroot@grant-green:mysql %1# cat my.cnf \n#\n# The MySQL database server configuration file.\n#\n# You can copy this to one of:\n# - \"/etc/mysql/my.cnf\" to set global options,\n# - \"~/.my.cnf\" to set user-specific options.\n# \n# One can use all long options that the program supports.\n# Run program with --help to get a list of available options and with\n# --print-defaults to see which it would actually understand and use.\n#\n# For explanations see\n# http://dev.mysql.com/doc/mysql/en/server-system-variables.html\n\n# This will be passed to all mysql clients\n# It has been reported that passwords should be enclosed with ticks/quotes\n# escpecially if they contain \"#\" chars...\n# Remember to edit /etc/mysql/debian.cnf when changing the socket location.\n[client]\nport		= 3306\nsocket		= /var/run/mysqld/mysqld.sock\n\n# Here is entries for some specific programs\n# The following values assume you have at least 32M ram\n\n# This was formally known as [safe_mysqld]. Both versions are currently parsed.\n[mysqld_safe]\nsocket		= /var/run/mysqld/mysqld.sock\nnice		= 0\n\n[mysqld]\n#\n# * Basic Settings\n#\nuser		= mysql\npid-file	= /var/run/mysqld/mysqld.pid\nsocket		= /var/run/mysqld/mysqld.sock\nport		= 3306\nbasedir		= /usr\n#datadir		= /var/lib/mysql\ndatadir		= /var/lib/mysql/db_on_ssd\ntmpdir		= /tmp\nlc-messages-dir	= /usr/share/mysql\nskip-external-locking\n\n\n#\n# Instead of skip-networking the default is now to listen only on\n# localhost which is more compatible and is not less secure.\n#bind-address		= 127.0.0.1\n#bind-address		= 10.123.1.6\nbind-address		= 0.0.0.0\n\n#\n# * Fine Tuning\n#\nkey_buffer		= 16M\nmax_allowed_packet	= 16M\nthread_stack		= 192K\nthread_cache_size       = 8\n# This replaces the startup script and checks MyISAM tables if needed\n# the first time they are touched\nmyisam-recover         = BACKUP\n#max_connections        = 100\n#table_cache            = 64\n#thread_concurrency     = 10\n#\n# * Query Cache Configuration\n#\nquery_cache_limit	= 1M\n#query_cache_size        = 16M\n#\n# * Logging and Replication\n#\n# Both location gets rotated by the cronjob.\n# Be aware that this log type is a performance killer.\n# As of 5.1 you can enable the log at runtime!\n#general_log_file        = /var/log/mysql/mysql.log\n#general_log             = 1\n#\n# Error log - should be very few entries.\n#\nlog_error = /var/log/mysql/error.log\n#\n# Here you can see queries with especially long duration\n#log_slow_queries	= /var/log/mysql/mysql-slow.log\n#long_query_time = 2\n#log-queries-not-using-indexes\n#\n# The following can be used as easy to replay backup logs or for replication.\n# note: if you are setting up a replication slave, see README.Debian about\n#       other settings you may need to change.\n#server-id		= 1\n#log_bin			= /var/log/mysql/mysql-bin.log\nexpire_logs_days	= 10\nmax_binlog_size         = 100M\n#binlog_do_db		= include_database_name\n#binlog_ignore_db	= include_database_name\n#\n# * InnoDB\n#\n# InnoDB is enabled by default with a 10MB datafile in /var/lib/mysql/.\n# Read the manual for more InnoDB related options. There are many!\n#\n# * Security Features\n#\n# Read the manual, too, if you want chroot!\n# chroot = /var/lib/mysql/\n#\n# For generating SSL certificates I recommend the OpenSSL GUI \"tinyca\".\n#\n# ssl-ca=/etc/mysql/cacert.pem\n# ssl-cert=/etc/mysql/server-cert.pem\n# ssl-key=/etc/mysql/server-key.pem\n\n\n##\n## tpcc-mysql benchmark { # 2013-12-11 # blusjune\n##\n\nskip-grant-tables\nskip-name-resolve\nmax_connections = 3000\nquery_cache_size = 0\ninnodb_file_per_table # separate files per table # blusjune\n\ninnodb_buffer_pool_size = 80000M\ninnodb_thread_concurrency = 32\ninnodb_spin_wait_delay = 30 \ninnodb_sync_spin_loops = 100\ninnodb_max_dirty_pages_pct = 90\ninnodb_lock_wait_timeout = 120\ninnodb_doublewrite = 0\ninnodb_flush_method = O_DIRECT\n#innodb_log_buffer_size = 256M\n#innodb_log_file_size = 8192M\n#innodb_log_block_size = 4096\ninnodb_write_io_threads = 16\ninnodb_read_io_threads = 16\ninnodb_io_capacity = 20000\ninnodb_file_format = barracuda\n\n##\n## } tpcc-mysql benchmark\n##\n\n\n[mysqldump]\nquick\nquote-names\nmax_allowed_packet	= 16M\n\n[mysql]\n#no-auto-rehash	# faster start of mysql but no tab completition\n\n[isamchk]\nkey_buffer		= 16M\n\n#\n# * IMPORTANT: Additional settings that can override those from this file!\n#   The files must end with \'.cnf\', otherwise they\'ll be ignored.\n#\n!includedir /etc/mysql/conf.d/\n\n</pre>\n\n==== Environment (from Jinjin) ====\n\n <pre>\nHardware Server	HP DL380p Gen8\nCPU: 2xIntel XeonE5-2665@2.40GHz;\nMemory: 128GB\nStorage	Seagate HDD, 1TB, 7200rpm\nIntel SSD S3500, 480G\nSamsung SSD SM843Tns, 960G\n\nSoftware\nOS Centos 6.4 (2.6.32-358.el6.x86_64)\nI/O Scheduler: CFQ/Noop\nFile system	EXT4/XFS\nMySQL DB	Percona Server 5.6.14\n\nConfiguration:\nskip-grant-tables\ninnodb_buffer_pool_size = 80000M\ninnodb_thread_concurrency = 32 \ninnodb_spin_wait_delay = 30 \ninnodb_sync_spin_loops = 100\ninnodb_max_dirty_pages_pct = 90\ninnodb_lock_wait_timeout = 120\ninnodb_doublewrite = 0\ninnodb_flush_method = O_DIRECT\ninnodb_log_buffer_size = 256M\ninnodb_log_file_size = 8192M\ninnodb_log_block_size=4096\ninnodb_write_io_threads=16\ninnodb_read_io_threads=16\ninnodb_io_capacity=20000\ninnodb_file_format=barracuda\nmax_connections=3000\nquery_cache_size=0\nskip-name-resolve\n	tpcc-mysql	Revision 48. \nConfigurations\nThe CentOS is installed on HDD, filesystem is EXT4.\nThe Percona database is also installed on HDD, but the datadir is a directory on Samsung SSD.\nSamsung SSD SM843Tns 960GB is divided into two 480G partitions, XFS format. Only one partition is used for benchmarking, the other partition is fully written with unused data.\n\nPercona Server Installation\nResource: http://www.percona.com/downloads/Percona-Server-5.6/LATEST/RPM/rhel6/x86_64/\n\nInstall Step:\n1.Download Percona Server, client and shared rpm packages.\n2.Remove old mysql packages: \nyum –y remove mysql, mysql-server, mysql-libs-*.\n3.Install Percona shared, client, server packages:\n	rpm –ivhPercona-Server-shared-XXX.rpm\nrpm –ivhPercona-Server-client-XXX.rpm\nrpm –ivhPercona-Server-server-XXX.rpm\n4. Mysql secure installation: \nRun /usr/bin/mysql_secure_installation (default root user password is NULL)\n\nStart and Stop MySQL:\n	service mysql start/stop\n/etc/init.d/mysqlstart/stop\n\nLogin MySQL:\nmysql -uroot –p\n\nModify password:\nmysqladmin -uroot -p password\n\ntpcc-mysql installation\nResource:\nhttps://code.launchpad.net/~percona-dev/perconatools/tpcc-mysql\n\nInstall Step:\ncdsrc\nmake\n\nFAQ:\n1.	Can’t find header file\nexport C_INCLUDE_PATH=$MYSQL_HOME/include\n2.	Can’t find mysql_config\nexport PATH=$MYSQL_HOME/bin:$PATH\n3.	Can’t find mysql lib\nexport LD_LIBRARY_PATH=$MYSQL_HOME/lib\n\nLoad data:\n1.	Create database\nshell>mysqladmin create tpcc2500\nmysql> create database tpcc2500;\n2.	Create tables\nshell> mysql –uroot –p tpcc2500 <create_table.sql\n3.	Create indexes and FK\nshell> mysql –uroot –p tpcc2500 <add_fkey_idx.sql\n4.	Populate data (long time needed)\nsimple step:\nshell>./tpcc_loadlocalhost tpcc2500 root xxxx2500\nUsage:  tpcc_load [server] [DBname] [user] [pass] [warehouse]\nref. tpcc_load --help for all options\nload data in parallel (Recommanded)\nshell>./load.sh tpcc2500 2500\ncheck load.sh script, need to modify, add password\n\nStart benchmark:\n1.	Usage\ntpcc_start -h server_host -P port -d database_name -u mysql_user -p mysql_password -w warehouses -c connections -r warmup_time -l running_time -ireport_interval -f report_file -t trx_file\n2.	Example\n./tpcc_start -hlocalhost–dtpcc2500 -uroot -pxxxx–w2500 –c128 -r0 –l10800–i10\n\nBenchmarking parameters:\n2500 warehouses\n128 connections\nWarm up time: 0\nRunning time: 10800\nReport interval: 10 \n</pre>\n\n=== SSD initialization ===\n\n==== hdparm --security-set-pass ====\n\n <pre>\nroot@buddy-guy:fio_src %1# lsscsi\n[0:0:0:0]    cd/dvd  TSSTcorp DVD-ROM TS-H353B SC01  /dev/sr0\n[1:0:0:0]    disk    ATA      SAMSUNG HD502IJ  1AA0  /dev/sda\n[2:0:0:0]    disk    ATA      SAMSUNG HD501LJ  CR10  /dev/sdb\n[3:0:0:0]    disk    ATA      SAMSUNG MZ7PC128 CXM0  /dev/sdc\nroot@buddy-guy:fio_src %1# mount | grep \'dev/sdc\'\nroot@buddy-guy:fio_src %1# mount | grep \'dev/sd\' \n/dev/sda1 on /boot type ext2 (rw)\nroot@buddy-guy:fio_src %1# time hdparm --security-set-pass brian /dev/sdc\nsecurity_password=\"brian\"\n\n/dev/sdc:\n Issuing SECURITY_SET_PASS command, password=\"brian\", user=user, mode=high\n\nreal	0m0.008s\nuser	0m0.000s\nsys	0m0.000s\nroot@buddy-guy:fio_src %1# fdisk /dev/sdc\n\nCommand (m for help): p\n\nDisk /dev/sdc: 128.0 GB, 128035676160 bytes\n30 heads, 63 sectors/track, 132312 cylinders, total 250069680 sectors\nUnits = sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisk identifier: 0x34e3afbc\n\n   Device Boot      Start         End      Blocks   Id  System\n/dev/sdc1            2048   250069679   125033816    5  Extended\n/dev/sdc5            4096   250069679   125032792   8e  Linux LVM\n\nCommand (m for help):   \n\n</pre>\n\n\n==== ATA secure erase ====\n\n* [http://www.manualslib.com/manual/490034/Dell-Poweredge-External-Media-System-1434.html?page=14 Intel 320 SSD ATA Instant Secure Erase Functionality]\n: Intel 320 SSDs support cryptography-based Instant ATA secure erase functionality. The Intel 320 SSD Instant ATA secure ease feature is non-TCG (Trusted Computing Group) based. It supports two modes of crypto secure erase:\n\n:* Normal secure erase—Clears the encryption keys and erases NAND\n:* Enhanced secure erase—Generates new keys and clears NAND.\n\n: The PERC solution only supports the \"crypto erase\" function on TCG-compliant Enterprise SED (Self Encrypting Drive)drives. When an Intel 320 drive is connected to a PERC, there is an incompatibility between PERC TCG method of crypto erase and Intel 320 supported non-TCG based ATA instant secure erase.\n: <span style=\"background:gold\">As a result, the instant secure erase functionality can\'t be used with PERC based solution.</span> The only way to run instant ATA secure ease and use Intel 320 drive secure wiping feature is to connect the drives directly into the motherboard chipset\'s ATA port and issue secure erase command. Intel provides a free utility (Intel SSDToolbox) to instant secure erase the drive, which you can download from www.intel.com/go/ssdtoolbox\n\n==== Talk with JinJin ====\n <pre>\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:42]:\n  Hi, Jinjin  \n  My name is M.J. JUNG (brian.m.jung@samsung.com)\n  introduced by M.S. Kwon in recent mails\n  ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:42]:\n  Hi~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:42]:\n  Ni Hao~ ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:43]:\n  Can I call you Brian or MyungJune?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:43]:\n  Oh, Brian is preferred ! ^^\n  just call me brian  \n  can I call you JinJin?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:43]:\n  yes, sure\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:43]:\n  oh, great ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:43]:\n   \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:43]:\n  I\'ve got your mail regarding the benchmark ~\n  and could I ask you something on that issue? \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:44]:\n  of course\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:44]:\n  oh, thank you  \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:44]:\n  you\'re welcome \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:44]:\n  wow ^___^ \n  is there any reason to use percona version of mysql? ^^\n  actually my current system is Ubuntu running MySQL (original)\n  so, if I should make a test bed \n  exactly same as yours ~\n  I should remove my old DB (mysql) ^^;;;;\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:46]:\n  so special reason, mysql is also Ok, I think, but I\'m not sure whether you can reproduce it with mysql\n  no special reason\n  sorry, typo\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:46]:\n  oh, got your point!\n  (no need to say sorry  ^^ I\'m the king of typo generation hahah)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:47]:\n  haha, so nice of you\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:47]:\n  wow ^^ it\'s great for me to talk to you too!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:47]:\n  i think you can try it on your system first\n  if you can\'t reproduce, then use percona \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:48]:\n  oh, great! and then if I could not generate that same situation on my old system, then I SHOULD change my system, ^^\n  GOT IT!\n   \n  and one more thing to ask !\n  ^^\n  what about the Intel case? \n  I\'ve seen that the red line\n  in your graph~\n  Could you see the same type of red line \n  every time you tested?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:50]:\n  I just test once with Intel case\n  because of time limit\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:50]:\n  ok~ got it ^^\n  then, I can repeat the test for intel case to make it more complete test~ can this help you?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:51]:\n  I think intel case is ok since it\'s stable after one hour test\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:51]:\n  oh,\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:51]:\n  sure\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:51]:\n  did you make the SSD (intel, Samsung) in the  steady-state before each test?\n  (great ^^)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:52]:\n  I\'m not sure \n  i just remove all data on the disk\n  didn\'t erase \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:52]:\n  a-ha! ^^\n  got some point!  \n  we usually\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:52]:\n  maybe that\'s the reason\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:52]:\n  make the SSDs be in the \'steady-state\' before each test, \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:53]:\n  yes, i learn it today\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:53]:\n  because \'steady-state\' makes the performance of SSD be in the stable state\n  Oh great  ^^\n  You may find good article regarding \'steady state\' \n  in the SNIA\n  site\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:54]:\n  thank you! \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:54]:\n  http://www.snia.org/sites/default/education/tutorials/2011/fall/SolidState/EstherSpanjer_The_Why_How_SSD_Performance_Benchmarking.pdf\n  (oh, you\'re quite welcome)\n  oh, this is more updated version.\n  http://www.snia.org/sites/default/files/SNIASSSI.SSDPerformance-APrimer2013.pdf\n  And, maybe HJ Lim send you the script\n  to perform an operation to make \'steady-state\' SSD\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:55]:\n  thank you! I can open it \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:55]:\n  great!^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:56]:\n  yes, he did!\n  I also have one question\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:56]:\n  Please let me know any question or let me get your comments regarding this collaboration - Benchmark test -\n  ok, i\'m ready!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:56]:\n  should I use \"security erase\" or \"Enhanced security erase\" ?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:56]:\n  ah, physically, you mean?\n  maybe not, only if you perform the script HJ Lim gave. \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:57]:\n  in HJ Lim\'s guide, there are two kinds of security erase\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:57]:\n  to be sure, Could you send me the copy of the script that HJ Lim gave to you?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:57]:\n  I don\'t know which one to use\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:58]:\n  Let me check and then answer to you \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:58]:\n  ok, i will send to you\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:58]:\n  ok! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:00]:\n  I have sent it to you\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:00]:\n  Ok, I\'ll check it right now ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:01]:\n   \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:04]:\n  Oh, this way with \'hdparm\', let you have the SSD of clean state (at the virgin state when SSD is manufactured)\n  so, it is preferred  \n  If you have any problem with this, please let me know  \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:05]:\n  so what\'s the difference of steady state and virgin state?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:06]:\n  oh, great question!\n  usually state state means:\n  very bad condition to SSD\n  - because we introduce very harsh IOs to SSD to make the performance of SSD stable (sequential writes and then random writes to SSD for a long time)\n  but virgin state itself can give us the good performance (reportedly)\n  So, I proper to proceed like this.\n  firstly, make the SSD at the virgin state (manufactured state)\n  and then, make the SSD be in the steady-state (by introducing some harsh IO requests - there are well-known script to do this)\n  --- Regarding this way (two steps)\n  , I\'ll check the preferred script to use in this benchmark\n  and then let you know  \n  (also send it to you, if required)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:11]:\n  thank you! your answer is so good!\n  I got your point\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:11]:\n  oh, it\'s my honour to hear that from you\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:11]:\n  so do you have some script to do harsh IO requests?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:12]:\n  yes, my version ^^\n  using FIO\n  you know FIO?\n  (Flexible IO benchmark program)\n  http://freecode.com/projects/fio\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:12]:\n  yes, i have heard of it, but never use it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:13]:\n  But i\'m not sure that script is enough for our benchmark, so I SHOULD check it out to MS KWON.\n  wait a second, please. let me check   I\'ll be back. \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:14]:\n  ok, thank you. I will wait for you...\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:18]:\n  Oh, Jinjin, Long time no see! ^^\n  I\'m back! ^^\n  with a clear answer for you!\n  Ready to talk? ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:19]:\n  haha^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:19]:\n  seems you are ready ^^\n  ok~\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:20]:\n  yes, i\'m ready^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:20]:\n  ^^ yes!!!\n  We will go with Two cases!\n  first case is:\n  using only virgin state. (good for performance, maybe)\n  second case is:\n  make virgin state and then also dirtify script to make it steady state ^^\n  (this is preferred way that SNIA recommends - to make the performance test fair)\n  ----- was my explanation clear ?\n  if not, please ask ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:23]:\n  yes, very clear!\n  I got your point\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:23]:\n  oh, you \'re super smart!!!!!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:23]:\n  thank you !\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:24]:\n  thank you !!! ^___^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:24]:\n  haha^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:24]:\n  (actually, my English is not good~ so I\'ve worried that my talk was unclear -_-; \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:24]:\n  it\'s very happy to talk with you!!!\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:24]:\n  oh~ great for me! TOOO!!!!\n  let\'s have a talk from time to time, any time welcomed!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:25]:\n  I think your english is very good! your type much faster than me\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:25]:\n  oh~~~~~~~~~ ^^;;;\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:25]:\n  sure\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:26]:\n  sure, great!!! i\'ll get back to you when I get some progress! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:26]:\n  ok, thank you again for your help!!\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:26]:\n  oh, you\'re quite welcom!\n  my pleasure!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:27]:\n  any time any questions are welcomed!!!\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:27]:\n  wow, great!!!!^^\n  Ok, CU!! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:27]:\n  CU!\n   \n</pre>\n\n\n <pre>\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:40]:\n  Hi, Jinjin!!! ^^\n  any problem to use the FIO script?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:41]:\n  morning, Brian\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  wow~ Good morning, Jinjin!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  I haven\'t tried it yet\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  oh, no problem~ ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  yesterday, we tried the hdparm\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  if you need any help regarding that, please feel free to tell me ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  seems it doesn\'t work\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  ooops~\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  we are still trying to fix it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:43]:\n  i\'ve also heard sometimes it does not work on some types of SSD\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:43]:\n  there will be some errors when we use hdparm -I /dev/sdc\n  /dev/sdc:\nSG_IO: bad/missing sense data, sb[]:  70 00 05 00 00 00 00 0a 00 00 00 00 20 00                                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  do you have any idea about it?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:44]:\n  oh, did you check the capability with \'hdparm -I /dev/sdc\'\n  ?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:44]:\n  yes\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:44]:\n  large i option\n  oh~\n  what about the report from that command?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:45]:\n  [root@ds-me jinjin]# hdparm -I /dev/sdc\n\n/dev/sdc:\nSG_IO: bad/missing sense data, sb[]:  70 00 05 00 00 00 00 0a 00 00 00 00 20 00                                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n\nATA device, with non-removable media\nStandards:\n        Likely used: 1\nConfiguration:\n        Logical         max     current\n        cylinders       0       0\n        heads           0       0\n        sectors/track   0       0\n        --\n        Logical/Physical Sector size:           512 bytes\n        device size with M = 1024*1024:           0 MBytes\n        device size with M = 1000*1000:           0 MBytes\n        cache/buffer size  = unknown\nCapabilities:\n        IORDY not likely\n        Cannot perform double-word IO\n        R/W multiple sector transfer: not supported\n        DMA: not supported\n        PIO: pio0\n  that\'s the whole output, can you see it?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:46]:\n  oh, seems there\'s no section \'Security\'\n  you might also refer to the site http://tinyapps.org/docs/wipe_drives_hdparm.html\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:47]:\n  ok, thank you! i\'ll read it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:47]:\n  Ok, hope to hear good news from you ^__^\n  ah~\n  one more question ^^\n  Could I ask you how much is the DB file size (in GB) when population is completed?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:49]:\n  sure^^\n  if you populate 2500 warehouses\n  it\'s about 247GB\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:49]:\n  oh~ !!!\n  the place of the 9 DB files must be under /var/lib/mysql/tpcc...\n  right?\n  and one problematic thing for my case is, currently we have no such a super machine with over 128GB DRAM ~ -_-;;\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:52]:\n  yes, the default datadir path is /var/lib/mysql/tpcc...\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:52]:\n  so I could not configure db buffer pool size as 80GB yet \n  Ok, got it!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:53]:\n  you may need to store the tpcc2500 on the SSD for testing\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:53]:\n  you\'re right!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:53]:\n  that\'s ok, just set the db buffer pool size to about 70%~80% of your memory size\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:54]:\n  ok~ good advice! ^^\n  did you configure the place to store TPCC DB in /etc/mysql/my.cnf?\n  or, just using load.sh ?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:54]:\n  yes, you can using /etc/mysql/my.cnf\n  just write the following in my.cnf\n\n [mysqld]\ndatadir=/your/path\n\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:56]:\n  thank you so much, Jinjin! ^^\n  Ok, CU soon! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:57]:\n  you are welcome~~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:57]:\n  hahahah ^^ so nice of you!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:57]:\n  any questions, just let me know^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:58]:\n  oh, great!!!! thank you Jinjin, You Too!!!! (anytime welcomed!) ^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:49]:\n  hi, Jinjin~\n  ^^\n  some small update for you~\n  regarding secure erase failure you mentioned\n  reply anytime when you\'re ready to talk ^__^\n  (maybe you already found this info.)\n  http://www.manualslib.com/manual/490034/Dell-Poweredge-External-Media-System-1434.html?page=14\n  Please see the section \"Intel 320 SSD ATA Instant Secure Erase Functionality\"\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:52]:\n  Hi, Brian~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:52]:\n  Wow! Jinjin!\n  ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:52]:\n  thanks for the info\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:52]:\n  oh, you\'re welcome!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:52]:\n  our server is HP, not Dell\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:53]:\n  oh, I see!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:53]:\n  I\'m still looking for servier configuration\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:53]:\n  what about the HW RAID on your system?\n  do you use HW RAID to access that SSD?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:53]:\n  I think it\'s the server\'s smart array card \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:53]:\n  oh!\n  that\'s the point! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:54]:\n  so now i\'m looking for how to change it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:54]:\n  maybe, that means, your application access to your SSDs through that \"smart array card (HW RAID)\" ~\n  right?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:54]:\n  yes\n  we need to let app access ssd directly\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:55]:\n  yes!!! exactly ^^\n  If your HP system does not allow that bypassing,\n  then, we can try the Plan B.\n  Plan B means, \n  maybe that RAID card controlling screen (during boot? ) support direct Secure Erase (or something like that)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:56]:\n  sorry, brian, i have an urgent issue, i will be back in 15 min\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:56]:\n  ok!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:56]:\n  CU soon\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:56]:\n  no prob!\n  CU soon!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 6:23]:\n  Hi~ brian\n  i\'m back~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 6:24]:\n  Oh~~ ^^ Welcome back!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 6:25]:\n  yes, the plan B can be supported, I see in the guide they have a tool to do secure erase druing boot\n  but I haven\'t tried it\n  it\'s not convienent because we can\'t use script to do it\n  i\'ll try to find the way to bypass raid\n  thank you agian for your advice^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 6:46]:\n  Sorry Jinjin for no response (been away from my desk), ^^;;;;  Ok, I\'ll also check another way to work around  \n  Thank you for your kind explanation ^__^, and let\'s talk again tomorrow~  \n</pre>\n\n== ## bNote-2013-12-10 ==\n\n=== NVMe Tutorial ===\n\n: [http://www.flashmemorysummit.com/English/Collaterals/Proceedings/2013/20130812_PreConfD_Marks.pdf By Kevin Marks, Dell, Inc. Flash Memory Summit 2013 Santa Clara, CA]\n\n\n* NVMe defines an optimized queuing interface, command set, feature set for PCIe SSDs\n\n\n* NVMe release timeline\n:- NVMe 1.0 release (2011-03-01)\n::- Queuing interface\n::- NVM command set, admin command set\n::- End-to-end protection (DIF/DIX), security\n::- Physical region pages (PRPs)\n:- NVMe 1.1 release (2012-10-11)\n::- General Scatter/Gather Lists (SGLs)\n::- Multi-path I/O & namespace sharing\n::- Reservations\n::- Autonomous power transitions during idle\n\n\n* advanced points of NVMe relative to AHCI\n:- Remove uncacheable reads from command issue/completion\n::- ??? uncacheable reads? why so bad to remove?\n:- Minimize MIMO writes in command issue/completion path\n::- ??? MIMO? why bad to minimize?\n:- Support for deep command queues and to simplify command decoding and processing\n::- ??? what method to simplify?\n:- Support MSI-X / flexible interrupt aggregation\n::- ??? what is flexible interrupt aggregation? is it different from MSI-X?\n:- Support for many core systems\n::- ??? concretely how?\n:- Support enterprise features\n::- ??? exactly what?\n:- Comprehensive statistics / health status reporting / robust error reporting & handling\n::- ???\n\n\n* NVMe usage model\n:- Server caching\n::- used to reduce memory footprint\n::- for temporary data\n:- Server storage\n::- for persistent data\n::- Redundant (i.e., RAID\'ed)\n::- commonly used as tier-0 storage\n:- Client storage\n::- used for boot/os-partition/HDD-cache\n::- non-redundant\n::- power optimized\n:- External storage\n::- used for metadata or data\n::- multi-ported device\n::- redundancy based on usage\n\n\n* NVMe queues\n:- NVMe uses circular queues to pass messages (e.g., commands and command completion notifications.)\n:- The queues may be located anywhere in PCIe memory\n::- Typically queues are located in host memory\n::- Queues may consist of a contiguous block of physical memory\n::  or optionally a non-contiguous set of physical memory pages (defined by a PRP List)\n:- A Queue consists of set of fixed sized elements\n:- Tail\n::- Points to next free element\n::- If an element is added to the element pointed to by the tail,\n::  the tail is incremented to point to next free element taking wrapping into consideration\n:- Head\n::- Points to next entry to be pulled off, if queue is not empty\n::- If an element is removed from the element pointed to by the head,\n::  the head is incremented to point to the next element taking wrapping into consideration\n:- Queue Size (Usable)\n::- Number of entries in the queue - 1\n::- Minimum size is 2, Maximum is ~ 64K for IO  Queues and 4K for Admin Queue\n:- Queue Empty\n::- Head == Tail\n:- Queue Full\n::- Head == Tail + 1 (mod # of queue entries)\n\n\n* Types of queues\n:- Admin queue for admin command set\n::- One per NVMe controller with up to 4K elements per queue\n::- Used to configure IO queues and controller/feature management\n:- IO queues for IO command sets (e.g., NVM command set)\n::- Up to 64K queues per NVMe controller with up to 64K elements per queue\n::- Used to submit/complete IO commands\n:- , where each type of queue (admin queue, IO queues) has\n::- Submission queue (SQ)\n:::- Queues messages from host to controller\n:::- Used to submit commands\n:::- Identified by SQ ID\n::- Completion queue (CQ)\n:::- Queues messages from controller to host\n:::- Used to post command completions\n:::- Identified by CQ ID\n:::- May have an independent MSI-X interrupt per completion queue\n: /* NVMe queues are messaging queues, not command queues -- What does this mean? */\n\n\n\n* Scalable queuing interface\n:- Enables NUMA optimized drivers\n::- Per core: one or more SQ, one CQ, and one MSI-X interrupt\n::- High performance and low latency command issue\n::- No locking between cores\n:- Up to ~2^32 outstanding commands\n::- Support for up to ~64K IO submission and completion queues\n::- Each queue supports up to ~64K outstanding commands\n\n\n\n* Command arbitration\n:- All controllers support round robin (RR) arbitration\n::- RR{ASQ, SQ, SQ, ..., SQ}\n:- An NVMe controller may support weighted round robin (WRR) with urgent priority class arbitration\n::- Priority{Strict_Priority_1, Strict_Priority_2, Strict_Priority_3}\n:::- Strict_Priority_1{ASQ}\n:::- Strict_Priority_2{RR{SQ.urgent, SQ.urgent}}\n:::- Strict_Priority_3{WRR{\n::::- Weight_High.RR{SQ.high, SQ.high, SQ.high},\n::::- Weight_Medium.RR{SQ.medium, SQ.medium, SQ.medium},\n::::- Weight_Low.RR{SQ.low, SQ.low, SQ.low}\n::: }}\n\n\n\n* Arbitration primitives\n:- Priority Arb. Vs. WRR Arb.\n::- Example above shown with an arbitration burst of no limit\n::- NVMe supports an arbitration burst of 1, 2, 4, 8, 16, 32, 64 and no limit\n::- NVMe supports 8-bit WRR weights\n\n\n\n* NVMe controller register map\n{| class=\"wikitable sortable\"\n|-\n| Start || End || Symbol || Description\n|-\n| 00h || 07h || CAP || Controller Capabilities\n|-\n|}\n\n\n\n* Controller initialization\n\n\n\n* SQ element with PRBs (64B)\n\n\n\n* Physical Region Pages (PRBs)\n\n\n\n* Example: PRP, PRP list\n\n\n\n* SQ element with SGLs (64B)\n\n\n\n* Scatter Gather List (SGL)\n\n\n\n* CQ element (16B)\n\n\n\n* Phase tag operation\n\n\n\n* NVMe command sets\n:- Command set = { Admin Command Set, IO Command Set = { NVM Cmd Set, Rsvd #1, Rsvd #2, Rsvd #3 } }\n\n\n\n* Admin commands\n{| class=\"wikitable sortable\"\n|-\n| Category || Command || Required/Optional\n|-\n| rowspan=\"4\" | Queue Management\n| Create IO Submission Queue\n| Required\n|-\n| Delete IO Submission Queue\n| Required\n|-\n| Create IO Completion Queue\n| Required\n|-\n| Delete IO Completion Queue\n| Required\n|-\n| rowspan=\"3\" | Configuration\n| Identify\n| Required\n|-\n| Get Features\n| Required\n|-\n| Set Features\n| Required\n|-\n| rowspan=\"2\" | Status Reporting\n| Get Log Pages\n| Required\n|-\n| Asynchronous Event Request\n| Required\n|-\n| Abort Command\n| Abort\n| Required\n|-\n| rowspan=\"2\" | Firmware Update/Management\n| Firmware Image Download\n| Optional\n|-\n| Firmware Activate\n| Optional\n|-\n| IO Command Set Specific\n| IO Command Set Specific Commands\n| Optional\n|-\n| Vendor Specific\n| Vendor Specific Commands\n| Optional\n|-\n|}\n: All admin commands use PRPs\n\n\n\n* Create IO SQ\n:- Queue Priority (OPRIO)\n:- Physically Contiguous (PC)\n\n\n\n* Create IO CQ\n:- Interrupt Enable (IEN)\n:- Physically Contiguous (PC)\n\n\n\n* Identify\n\n\n\n* Active namespace reporting\n\n\n\n* Identify controller data structure\n\n== ## bNote-2013-12-09 ==\n\n\n\n=== NVMe IO stack analysis ===\n\n\n==== nvme source code ====\n\n\n <pre>\n\nblusjune@buddy-guy:~ %1$ cat /x/t/nvme_iostack_analysis.c\n\n\nnvme_probe(struct pci_dev *pdev, const struct pci_device_id *id)\n{\n        struct nvme_dev * dev;\n        /*\n         * memory space will be allocated to \'dev\'\n         * and then\n         * \'dev->entry\' will have memory space\n         *      proportional to the \'num_possible_cpus()\'\n         * \'dev->queues\' will have memory space\n         *      proportional to the \'num_possible_cpus() + 1\' <- why \'+1\' here?\n         * , where num_possible_cpus() means\n         *      number of cpus populatable (fixed at boot time),\n         *      i.e., set of CPU id\'s possible to be plugged in\n         *      at anytime during the life of system boot\n         */\n\n\n        // ...\n\n\n        dev->pci_dev = pdev; // pdev argument will be assigned to \'dev->pci_dev\'\n\n\n        result = nvme_set_instance(dev);\n        /*\n         * allocate new integer ID to dev->instance\n         *\n         * Internally, this uses Idr (integer ID management)\n         * , where Idr is a set of library functions\n         *      for the management of small integer ID numbers.\n         *      In essence, an idr object can be thought of\n         *      as a sparse array mapping integer IDs onto arbitrary pointers,\n         *      with a \"get me an available entry\" function as well.\n         *\n         * URL: http://lwn.net/Articles/103209/\n         */\n\n\n        result = nvme_setup_prp_pools(dev);\n        /*\n         * dev->prp_page_pool = dma_pool_create(\"prp list page\",\n         *      &dev->pci_dev->dev, PAGE_SIZE, PAGE_SIZE, 0)\n         *\n         * and the comment says that there is an optimization\n         * for I/Os between 4k and 128k (is it still 128k? not 256k?)\n         * by the following code:\n         * dev->prp_small_pool = dma_pool_create(\"prp list 256\",\n         *      &dev->pci_dev->dev, 256, 256, 0);\n         *\n         * PRPs (Physical Region Pages) contains\n         * the 64-bit physical memory page address.\n         * The lower bits (n:2) of this field indicate\n         * the offset within the memory page\n         * n is defined by the memory page size (CC.MPS)\n         *\n         * PRP list contains a list of PRPs with generally no offsets\n         * which means non-contiguous set of physical memory pages\n         *\n         * mm/dmapool.c:dma_pool_create(const char * name, struct device *dev, sizt_t size, size_t align, size_t boundary)\n         *\n         */\n\n\n        result = nvme_dev_start(dev);\n        /*\n         * nvme_dev_start() {\n         *      nvme_dev_map(dev);\n         *      nvme_configure_admin_queue(dev);\n         *      list_add(&dev->node, &dev_list);\n         *      nvme_setup_io_queues(dev);\n         * }\n         */\n\n\n        result = nvme_dev_add(dev);\n\n\n}\n\n\ndrivers/block/nvme-core.c:nvme_setup_io_queues()\n{\n        (int) nr_io_queues = num_online_cpus();\n\n}\n\n</pre>\n\n\n <pre>\nroot@buddy-guy:src %1# cat /x/t/nvme_iostack_analysis.c \n\n\nnvme_probe(struct pci_dev *pdev, const struct pci_device_id *id)\n{\n	struct nvme_dev * dev;\n	/*\n	 * memory space will be allocated to \'dev\'\n	 * and then\n	 * \'dev->entry\' will have memory space\n	 * 	proportional to the \'num_possible_cpus()\'\n	 * \'dev->queues\' will have memory space\n	 *	proportional to the \'num_possible_cpus() + 1\' <- why \'+1\' here?\n	 * , where num_possible_cpus() means\n	 *	number of cpus populatable (fixed at boot time),\n	 *	i.e., set of CPU id\'s possible to be plugged in\n	 *	at anytime during the life of system boot\n	 */\n\n\n	// ...\n\n\n	dev->pci_dev = pdev; // pdev argument will be assigned to \'dev->pci_dev\'\n\n\n	result = nvme_set_instance(dev);\n	/*\n	 * allocate new integer ID to dev->instance\n	 *\n	 * Internally, this uses Idr (integer ID management)\n	 * , where Idr is a set of library functions\n	 *	for the management of small integer ID numbers.\n	 *	In essence, an idr object can be thought of\n	 *	as a sparse array mapping integer IDs onto arbitrary pointers,\n	 *	with a \"get me an available entry\" function as well.\n	 *\n	 * URL: http://lwn.net/Articles/103209/\n	 */\n\n\n	result = nvme_setup_prp_pools(dev);\n	/*\n	 * dev->prp_page_pool = dma_pool_create(\"prp list page\",\n	 *	&dev->pci_dev->dev, PAGE_SIZE, PAGE_SIZE, 0)\n	 *\n	 * and the comment says that there is an optimization\n	 * for I/Os between 4k and 128k (is it still 128k? not 256k?)\n	 * by the following code:\n	 * dev->prp_small_pool = dma_pool_create(\"prp list 256\",\n	 *	&dev->pci_dev->dev, 256, 256, 0);\n	 *\n	 * PRPs (Physical Region Pages) contains\n	 * the 64-bit physical memory page address.\n	 * The lower bits (n:2) of this field indicate\n	 * the offset within the memory page\n	 * n is defined by the memory page size (CC.MPS)\n	 *	\n	 * PRP list contains a list of PRPs with generally no offsets\n	 * which means non-contiguous set of physical memory pages\n	 *\n	 * mm/dmapool.c:dma_pool_create(const char * name, struct device *dev, sizt_t size, size_t align, size_t boundary)\n	 * \n	 */\n\n\n	result = nvme_dev_start(dev);\n	/*\n	 * \n	 *\n	 *\n	 *\n	 */\n\n\n	result = nvme_dev_add(dev);\n\n\n}\n\n\ndrivers/block/nvme-core.c:nvme_setup_io_queues()\n{\n	(int) nr_io_queues = num_online_cpus();\n\n}\n\n\n\n</pre>\n\n\n\n==== Vectored I/O (a.k.a scatter/gather I/O) ====\n\n* <span style=\"background:gold\">Why vectored I/O in NVMe and DMA?</span>\n\n\n* Vectored I/O (a.k.a scatter/gather I/O) is a method of input and output by which a single procedure call sequentially writes data from multiple buffers to a single data stream or reads data from a data stream to multiple buffers.\n\n* The buffers are given in a vector of buffers. Scatter/gather refers to the process of gathering data from, or scattering data into, the given set of buffers.\n\n* Vectored I/O can operate synchronously or asynchronously.\n\n* The main reasons for using vectored I/O are efficiency and convenience.\n\n\n\n* Several usages for vectored I/O:\n\n:* Atomicity\n:: If the particular vectored I/O implementation supports atomicity, a process can write into or read from a set of buffers to or from a file without risk that another thread or process might perform I/O on the same file between the first process\' reads or writes, thereby corrupting the file or compromising the integrity of the input\n\n:* Concatenating output\n:: An application that wants to write non-sequentially placed data in memory can do so in one vectored I/O operation. For example, writing a fixed-size header and its associated payload data that are placed non-sequentially in memory can be done by a single vectored I/O operation without first concatenating the header and the payload to another buffer\n\n:* Efficiency\n:: One vectored I/O read or write can replace many ordinary reads or writes, and thus save on the overhead involved in syscalls\n\n:* Splitting input\n:: When reading data that is in a format that defines a fixed-size header, one can use a vector of buffers in which the first buffer is the size of that header; and the second buffer will contain the data associated with the header\n\n\n\n\n* Implementation cases as system calls\n: readv() and writev()\n\n=== Barrier option in Ext3/Ext4 file system ===\n\n\n* Article 1 (kernelnewbies.org) <ref>http://kernelnewbies.org/Ext4</ref>\nThis is an option that improves the integrity of the filesystem at the cost of some performance (you can disable it with \"mount -o barrier=0\", recommended trying it if you\'re benchmarking). From this LWN article: \"The filesystem code must, before writing the [journaling] commit record, be absolutely sure that all of the transaction\'s information has made it to the journal. Just doing the writes in the proper order is insufficient; contemporary drives maintain large internal caches and will reorder operations for better performance. So the filesystem must explicitly instruct the disk to get all of the journal data onto the media before writing the commit record; if the commit record gets written first, the journal may be corrupted. The kernel\'s block I/O subsystem makes this capability available through the use of barriers; in essence, a barrier forbids the writing of any blocks after the barrier until all blocks written before the barrier are committed to the media. \'\'\'By using barriers, filesystems can make sure that their on-disk structures remain consistent at all times.\"\'\'\'\n\n\n* Article 2 (Redhat) <ref>https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Storage_Administration_Guide/writebarrieronoff.html</ref>\nTo mitigate the risk of data corruption during power loss, some storage devices use battery-backed write caches. Generally, high-end arrays and some hardware controllers use battery-backed write caches. However, because the cache\'s volatility is not visible to the kernel, Red Hat Enterprise Linux 6 enables write barriers by default on all supported journaling file systems.\n\n:- Performance issues\n:: Write caches are designed to increase I/O performance. However, enabling write barriers means constantly flushing these caches, which can significantly reduce performance.\n\n:- How to disable barrier option?\n:: For devices with non-volatile, battery-backed write caches and those with write-caching disabled, you can safely disable write barriers at mount time using the -o nobarrier option for mount. However, some devices do not support write barriers; such devices will log an error message to /var/log/messages (refer to Table 22.1, “Write barrier error messages per file system”).\n\n:- Write barrier error messages per file system\n{| class=\"wikitable sortable\"\n|-\n| File system || Error Message\n|-\n| ext3/ext4 || JBD: barrier-based sync failed on device - disabling barriers\n|-\n| XFS || Filesystem device - Disabling barriers, trial barrier write failed\n|-\n| btrfs || btrfs: disabling barriers on dev device\n|-\n|}\n\n\n\n=== Virtualization (KVM/QEMU/Xen) & IO Management ===\n\n\n==== KVM and QEMU ====\n* KVM과 QEMU 간의 역할 분담?\n\n==== Xen and QEMU ====\n* Xen이 QEMU를 어떻게 사용하는가?\n\n\n==== KVM/QEMU Storage Stack Performance Discussion (2010 Linux Plumbers Conference) ====\n\n* The State of KVM Block I/O Performance: Where We Are\n: The 50,000-foot View – QEMU Storage Stack\n: Where We Are Against Another “Popular” Hypervisor\n\n* Discussion: KVM / QEMU Settings\n: VirtIO vs. IDE emulation\n: KVM caching (cache=none vs. cache=writethrough)\n: Linux AIO support\n: No Barrier (barrier is enabled by default in ext4)\n: IO Schedulers: Deadline vs. CFQ\n: x2APIC support\n: AIO vs. threads\n: File Systems\n\n* Discussion: KVM Block I/O Performance Issues\n: Low Throughput\n: High (Virtual) CPU Usage In KVM Guests\n: Virtual Disk Image Formats\n: Others ?\n\n== ## bNote-2013-12-07 ==\n\n# [[NVMe Vs. AHCI]]\n# NVMe queue management mechanism\n# NVMe problem statement (PCI1320 Bus fatal error on bus 0 device 2 function 0 Power cycle system)\n# [[NVMe stack in Linux kernel (3.13.0-rc2, 2013-12-05)]]\n# [[Mediawiki color map]]\n\n== ## bNote-2013-12-06 ==\n\n\n<!--\n=== All pages at Wikini as of 2013-12-06 ===\n\n <pre>\n\n(News) 네트워크 업계 \"기다렸다, 런던올림픽\"	(News) 아카마이, \"CDN 넘어 하이퍼커넥티드로\"	(News) 아카마이, \"스트리밍/보안 서비스를 빠르고 안전하게\"\n(News) 아카마이, \"쌩쌩 웹사이트 만들려면\"	(News) 아카마이, \'블레이즈\' 인수 - 인텔리전트 플랫폼 강화	(News) 아카마이, CDN 장악 가속화 ... 코텐도 인수설\nAcademia intelligence	Artificial Neural Network	Artificial neural network\nBcode python cache lru	Bnote - References ( Papers / Patents / Articles )	Bnote 2013\nBnote 2013-01	Bnote 2013-02	Bnote 2013-03\nBnote 2013-04	Bnote 2013-05	Bnote 2013-06\nBnote 2013-07	Bnote 2013-08	Bnote 2013-09\nBnote 2013-10	Bnote 2013-11	Bnote 2013-12\nBnote Frequent Itemset Mining (FIM) / Association Rule Mining (ARM)	Bnote R	Bnote patidea 2013\nBnote patidea 2013-001	Bnote patidea 2013-002	Bnote patidea 2013-003\nBnote python	Bnote scratchpad	Brian Myungjune JUNG\nByung-Gon Chun	Cache algorithms	Conference: ACM SIGMOD 2013\nCurriculum vitae - Brian Myungjune JUNG	Curriculum vitae - Brian Myungjune JUNG (CV Brian)	DIMM\nData analytics	Data mining	Deep learning\nDefense Logic -- Big Data Platform Research in SAIT	Dm-cache	Exemplary .gnuplot configuration file for beautiful gnuplot graphs\nFoobar	GRUB 2	Git server on my local machine\nHidden Markov model (HMM)	Hierarchical temporal memory	I/O Workload Analysis\nI/O tracing on Microsoft Windows using xperf	IBM GPFS	IEEE ICCE 2014 Paper\nIOWA.data.tpcc 250gb 48h.mysql.R.addr:: Offset 100K, Len 1K	Industry intelligence - Flash Memory Summit 2013	Industry intelligence - big data\nIndustry intelligence - storage	Intelligent Battery Management System	Kworker\nLecture: Neural Networks for Machine Learning (by Geoffrey Hinton)	Lecture notes and online courses	Linux kernel\nLinux kernel - block layer plug/unplug	List of English stop words	List of Meta Files in Windows NTFS\nList of important processes in Microsoft Windows operating systems	Main Page	Master File Table in NTFS\nMixture model	NVM express	Nimble Storage\nOnline courses	OpenStack	Operating systems - Linux kernel\nPCI Express	PaperStudy // An Analysis of Traces from a Production MapReduce Cluster // CCGrid 2010	Periodicity transform\nPure Storage	RapidIO	Restricted Boltzmann machines\nStatistical computing software	System info 16-node cluster	TPC-C\nTemplate patidea	Text summarization	Tf-idf\nThoughts on In Memory Databases (Part 1)	Trick mode	Tutorial -- SSD caching using dm-cache\nUSENIX FAST 2013	Why In-Memory Computing Needs Flash	Windows Programming on Linux with MinGW\nWorkload analysis-driven system architecture design	Writing guide - software patent	X intelligence\nXen hypervisor\n\n</pre>\n-->\n\n=== KVM/QEMU Architecture and IO Stack ===\n\n* [https://www.google.co.kr/search?q=why+is+qemu+windows+so+slow&rlz=1C1OPRB_enKR556KR556&oq=why+is+qemu+windows+so+slow&aqs=chrome..69i57.14138j0j4&sourceid=chrome&espv=210&es_sm=122&ie=UTF-8#es_sm=122&espv=210&newwindow=1&q=IO+stack+qemu Google{IO stack qemu}]\n\n* [http://pic.dhe.ibm.com/infocenter/lnxinfo/v3r0m0/topic/liaav/LPCKVMSSPV2.1.pdf \"KVM / QEMU Storage Stack Performance Discussion,\" IBM, Linux Plumbers Conference 2010]\n\n* [http://events.linuxfoundation.org/slides/2011/linuxcon-japan/lcj2011_hajnoczi.pdf \"An Updated Overview of the QEMU Storage Stack,\" IBM, LinuxCon Japan 2011]\n\n* [http://www.linuxplumbersconf.org/2010/ocw/system/presentations/651/original/Optimizing_the_QEMU_Storage_Stack.pdf \"Optimizing the QEMU Storage Stack,\" IBM, Linux Plumbers Conference 2010]\n\n* [http://www.fujitsu.com/downloads/MAG/vol47-3/paper18.pdf \"Kernel-based Virtual Machine Technology\", Yoshihito Goro, Fujitsu Journal 2011]\n\n\n=== NVMe DAS test bed architecture ===\n\n{| class=\'wikitable sortable\'\n|-\n| LVol-00 || LVol-01 || LVol-02 || LVol-03 || LVol-04 || LVol-05 || LVol-06 || LVol-07\n|-\n|-\n| colspan=5 | nvme0n1p1 (484.61 GiB)\n| colspan=3 | nvme1n1p1 (260.61 GiB)\n|-\n| colspan=4 | /dev/nvme0n1 (372.61 GiB)\n| colspan=4 | /dev/nvme1n1 (372.61 GiB)\n|-\n|}\n\n== ## bNote-2013-12-04 ==\n\n\n=== OpenStack quota-update ===\n\n <pre>\n\nroot@grant-green:work %1# keystone tenant-list\n+----------------------------------+---------+---------+\n|                id                |   name  | enabled |\n+----------------------------------+---------+---------+\n| df7559de417a4968ad34f95b9dda5a4e |  admin  |   True  |\n| ad4662d7ec1249789feb2fad24e9f2e5 | service |   True  |\n+----------------------------------+---------+---------+\n\nroot@grant-green:work %1# nova quota-show\n+-----------------------------+-------+\n| Quota                       | Limit |\n+-----------------------------+-------+\n| instances                   | 48    |\n| cores                       | 96    |\n| ram                         | 51200 |\n| floating_ips                | 10    |\n| fixed_ips                   | -1    |\n| metadata_items              | 128   |\n| injected_files              | 5     |\n| injected_file_content_bytes | 10240 |\n| injected_file_path_bytes    | 255   |\n| key_pairs                   | 100   |\n| security_groups             | 10    |\n| security_group_rules        | 20    |\n+-----------------------------+-------+\n\nroot@grant-green:work %1# nova quota-update --instance 48 --cores 96 df7559de417a4968ad34f95b9dda5a4e\n\nroot@grant-green:work %1# nova quota-show\n+-----------------------------+-------+\n| Quota                       | Limit |\n+-----------------------------+-------+\n| instances                   | 48    |\n| cores                       | 96    |\n| ram                         | 51200 |\n| floating_ips                | 10    |\n| fixed_ips                   | -1    |\n| metadata_items              | 128   |\n| injected_files              | 5     |\n| injected_file_content_bytes | 10240 |\n| injected_file_path_bytes    | 255   |\n| key_pairs                   | 100   |\n| security_groups             | 10    |\n| security_group_rules        | 20    |\n+-----------------------------+-------+\n\n</pre>\n\n=== Linux kernel debugging using QEMU ===\n\n* [http://files.meetup.com/1590495/debugging-with-qemu.pdf Debugging Linux systems using GDB and QEMU]\n* [http://elinux.org/Debugging_The_Linux_Kernel_Using_Gdb Debugging the Linux Kernel Using GDB]\n\n\n\n=== Linux kernel (3.8.0) NVMe stack ===\n\n\n==== include/linux/nvme.h ====\n\n <pre>\n 24 struct nvme_bar {\n 25         __u64                   cap;    /* Controller Capabilities */\n 26         __u32                   vs;     /* Version */\n 27         __u32                   intms;  /* Interrupt Mask Set */\n 28         __u32                   intmc;  /* Interrupt Mask Clear */\n 29         __u32                   cc;     /* Controller Configuration */\n 30         __u32                   rsvd1;  /* Reserved */\n 31         __u32                   csts;   /* Controller Status */\n 32         __u32                   rsvd2;  /* Reserved */\n 33         __u32                   aqa;    /* Admin Queue Attributes */\n 34         __u64                   asq;    /* Admin SQ Base Address */\n 35         __u64                   acq;    /* Admin CQ Base Address */\n 36 };\n</pre>\n\n\n\n <pre>\n 42 \n 43 enum {\n 44         NVME_CC_ENABLE          = 1 << 0,\n 45         NVME_CC_CSS_NVM         = 0 << 4,\n 46         NVME_CC_MPS_SHIFT       = 7,\n 47         NVME_CC_ARB_RR          = 0 << 11,\n 48         NVME_CC_ARB_WRRU        = 1 << 11,\n 49         NVME_CC_ARB_VS          = 7 << 11,\n 50         NVME_CC_SHN_NONE        = 0 << 14,\n 51         NVME_CC_SHN_NORMAL      = 1 << 14,\n 52         NVME_CC_SHN_ABRUPT      = 2 << 14,\n 53         NVME_CC_IOSQES          = 6 << 16,\n 54         NVME_CC_IOCQES          = 4 << 20,\n 55         NVME_CSTS_RDY           = 1 << 0,\n 56         NVME_CSTS_CFS           = 1 << 1,\n 57         NVME_CSTS_SHST_NORMAL   = 0 << 2,\n 58         NVME_CSTS_SHST_OCCUR    = 1 << 2,\n 59         NVME_CSTS_SHST_CMPLT    = 2 << 2,\n 60 };\n 61 \n</pre>\n\n\n\n <pre>\n109 \n110 struct nvme_lbaf {\n111         __le16                  ms;\n112         __u8                    ds;\n113         __u8                    rp;\n114 };\n115 \n116 struct nvme_id_ns {\n117         __le64                  nsze;\n118         __le64                  ncap;\n119         __le64                  nuse;\n120         __u8                    nsfeat;\n121         __u8                    nlbaf;\n122         __u8                    flbas;\n123         __u8                    mc;\n124         __u8                    dpc;\n125         __u8                    dps;\n126         __u8                    rsvd30[98];\n127         struct nvme_lbaf        lbaf[16];\n128         __u8                    rsvd192[192];\n129         __u8                    vs[3712];\n130 };\n131 \n132 enum {\n133         NVME_NS_FEAT_THIN       = 1 << 0,\n134         NVME_LBAF_RP_BEST       = 0,\n135         NVME_LBAF_RP_BETTER     = 1,\n136         NVME_LBAF_RP_GOOD       = 2,\n137         NVME_LBAF_RP_DEGRADED   = 3,\n138 };\n139 \n140 struct nvme_lba_range_type {\n141         __u8                    type;\n142         __u8                    attributes;\n143         __u8                    rsvd2[14];\n144         __u64                   slba;\n145         __u64                   nlb;\n146         __u8                    guid[16];\n147         __u8                    rsvd48[16];\n148 };\n149 \n150 enum {\n151         NVME_LBART_TYPE_FS      = 0x01,\n152         NVME_LBART_TYPE_RAID    = 0x02,\n153         NVME_LBART_TYPE_CACHE   = 0x03,\n154         NVME_LBART_TYPE_SWAP    = 0x04,\n155 \n156         NVME_LBART_ATTRIB_TEMP  = 1 << 0,\n157         NVME_LBART_ATTRIB_HIDE  = 1 << 1,\n158 };\n159 \n\n</pre>\n\n\n\n <pre>\n159 \n160 /* I/O commands */\n161 \n162 enum nvme_opcode {\n163         nvme_cmd_flush          = 0x00,\n164         nvme_cmd_write          = 0x01,\n165         nvme_cmd_read           = 0x02,\n166         nvme_cmd_write_uncor    = 0x04,\n167         nvme_cmd_compare        = 0x05,\n168         nvme_cmd_dsm            = 0x09,\n169 };\n170 \n171 struct nvme_common_command {\n172         __u8                    opcode;\n173         __u8                    flags;\n174         __u16                   command_id;\n175         __le32                  nsid;\n176         __u32                   cdw2[2];\n177         __le64                  metadata;\n178         __le64                  prp1;\n179         __le64                  prp2;\n180         __u32                   cdw10[6];\n181 };\n182 \n183 struct nvme_rw_command {\n184         __u8                    opcode;\n185         __u8                    flags;\n186         __u16                   command_id;\n187         __le32                  nsid;\n188         __u64                   rsvd2;\n189         __le64                  metadata;\n190         __le64                  prp1;\n191         __le64                  prp2;\n192         __le64                  slba;\n193         __le16                  length;\n194         __le16                  control;\n195         __le32                  dsmgmt;\n196         __le32                  reftag;\n197         __le16                  apptag;\n198         __le16                  appmask;\n199 };\n200 \n201 enum {\n202         NVME_RW_LR                      = 1 << 15,\n203         NVME_RW_FUA                     = 1 << 14,\n204         NVME_RW_DSM_FREQ_UNSPEC         = 0,\n205         NVME_RW_DSM_FREQ_TYPICAL        = 1,\n206         NVME_RW_DSM_FREQ_RARE           = 2,\n207         NVME_RW_DSM_FREQ_READS          = 3,\n208         NVME_RW_DSM_FREQ_WRITES         = 4,\n209         NVME_RW_DSM_FREQ_RW             = 5,\n210         NVME_RW_DSM_FREQ_ONCE           = 6,\n211         NVME_RW_DSM_FREQ_PREFETCH       = 7,\n212         NVME_RW_DSM_FREQ_TEMP           = 8,\n213         NVME_RW_DSM_LATENCY_NONE        = 0 << 4,\n214         NVME_RW_DSM_LATENCY_IDLE        = 1 << 4,\n215         NVME_RW_DSM_LATENCY_NORM        = 2 << 4,\n216         NVME_RW_DSM_LATENCY_LOW         = 3 << 4,\n217         NVME_RW_DSM_SEQ_REQ             = 1 << 6,\n218         NVME_RW_DSM_COMPRESSED          = 1 << 7,\n219 };\n220 \n221 /* Admin commands */\n222 \n223 enum nvme_admin_opcode {\n224         nvme_admin_delete_sq            = 0x00,\n225         nvme_admin_create_sq            = 0x01,\n226         nvme_admin_get_log_page         = 0x02,\n227         nvme_admin_delete_cq            = 0x04,\n228         nvme_admin_create_cq            = 0x05,\n229         nvme_admin_identify             = 0x06,\n230         nvme_admin_abort_cmd            = 0x08,\n231         nvme_admin_set_features         = 0x09,\n232         nvme_admin_get_features         = 0x0a,\n233         nvme_admin_async_event          = 0x0c,\n234         nvme_admin_activate_fw          = 0x10,\n235         nvme_admin_download_fw          = 0x11,\n236         nvme_admin_format_nvm           = 0x80,\n237         nvme_admin_security_send        = 0x81,\n238         nvme_admin_security_recv        = 0x82,\n239 };\n240 \n241 enum {\n242         NVME_QUEUE_PHYS_CONTIG  = (1 << 0),\n243         NVME_CQ_IRQ_ENABLED     = (1 << 1),\n244         NVME_SQ_PRIO_URGENT     = (0 << 1),\n245         NVME_SQ_PRIO_HIGH       = (1 << 1),\n246         NVME_SQ_PRIO_MEDIUM     = (2 << 1),\n247         NVME_SQ_PRIO_LOW        = (3 << 1),\n248         NVME_FEAT_ARBITRATION   = 0x01,\n249         NVME_FEAT_POWER_MGMT    = 0x02,\n250         NVME_FEAT_LBA_RANGE     = 0x03,\n251         NVME_FEAT_TEMP_THRESH   = 0x04,\n252         NVME_FEAT_ERR_RECOVERY  = 0x05,\n253         NVME_FEAT_VOLATILE_WC   = 0x06,\n254         NVME_FEAT_NUM_QUEUES    = 0x07,\n255         NVME_FEAT_IRQ_COALESCE  = 0x08,\n256         NVME_FEAT_IRQ_CONFIG    = 0x09,\n257         NVME_FEAT_WRITE_ATOMIC  = 0x0a,\n258         NVME_FEAT_ASYNC_EVENT   = 0x0b,\n259         NVME_FEAT_SW_PROGRESS   = 0x0c,\n260 };\n261 \n</pre>\n\n\n\n\n <pre>\n261 \n262 struct nvme_identify {\n263         __u8                    opcode;\n264         __u8                    flags;\n265         __u16                   command_id;\n266         __le32                  nsid;\n267         __u64                   rsvd2[2];\n268         __le64                  prp1;\n269         __le64                  prp2;\n270         __le32                  cns;\n271         __u32                   rsvd11[5];\n272 };\n273 \n274 struct nvme_features {\n275         __u8                    opcode;\n276         __u8                    flags;\n277         __u16                   command_id;\n278         __le32                  nsid;\n279         __u64                   rsvd2[2];\n280         __le64                  prp1;\n281         __le64                  prp2;\n282         __le32                  fid;\n283         __le32                  dword11;\n284         __u32                   rsvd12[4];\n285 };\n286 \n287 struct nvme_create_cq {\n288         __u8                    opcode;\n289         __u8                    flags;\n290         __u16                   command_id;\n291         __u32                   rsvd1[5];\n292         __le64                  prp1;\n293         __u64                   rsvd8;\n294         __le16                  cqid;\n295         __le16                  qsize;\n296         __le16                  cq_flags;\n297         __le16                  irq_vector;\n298         __u32                   rsvd12[4];\n299 };\n300 \n301 struct nvme_create_sq {\n302         __u8                    opcode;\n303         __u8                    flags;\n304         __u16                   command_id;\n305         __u32                   rsvd1[5];\n306         __le64                  prp1;\n307         __u64                   rsvd8;\n308         __le16                  sqid;\n309         __le16                  qsize;\n310         __le16                  sq_flags;\n311         __le16                  cqid;\n312         __u32                   rsvd12[4];\n313 };\n314 \n315 struct nvme_delete_queue {\n316         __u8                    opcode;\n317         __u8                    flags;\n318         __u16                   command_id;\n319         __u32                   rsvd1[9];\n320         __le16                  qid;\n321         __u16                   rsvd10;\n322         __u32                   rsvd11[5];\n323 };\n324 \n325 struct nvme_download_firmware {\n326         __u8                    opcode;\n327         __u8                    flags;\n328         __u16                   command_id;\n329         __u32                   rsvd1[5];\n330         __le64                  prp1;\n331         __le64                  prp2;\n332         __le32                  numd;\n333         __le32                  offset;\n334         __u32                   rsvd12[4];\n335 };\n336 \n</pre>\n\n\n\n\n <pre>\n336 \n337 struct nvme_command {\n338         union {\n339                 struct nvme_common_command common;\n340                 struct nvme_rw_command rw;\n341                 struct nvme_identify identify;\n342                 struct nvme_features features;\n343                 struct nvme_create_cq create_cq;\n344                 struct nvme_create_sq create_sq;\n345                 struct nvme_delete_queue delete_queue;\n346                 struct nvme_download_firmware dlfw;\n347         };\n348 };\n349 \n350 enum {\n351         NVME_SC_SUCCESS                 = 0x0,\n352         NVME_SC_INVALID_OPCODE          = 0x1,\n353         NVME_SC_INVALID_FIELD           = 0x2,\n354         NVME_SC_CMDID_CONFLICT          = 0x3,\n355         NVME_SC_DATA_XFER_ERROR         = 0x4,\n356         NVME_SC_POWER_LOSS              = 0x5,\n357         NVME_SC_INTERNAL                = 0x6,\n358         NVME_SC_ABORT_REQ               = 0x7,\n359         NVME_SC_ABORT_QUEUE             = 0x8,\n360         NVME_SC_FUSED_FAIL              = 0x9,\n361         NVME_SC_FUSED_MISSING           = 0xa,\n362         NVME_SC_INVALID_NS              = 0xb,\n363         NVME_SC_LBA_RANGE               = 0x80,\n364         NVME_SC_CAP_EXCEEDED            = 0x81,\n365         NVME_SC_NS_NOT_READY            = 0x82,\n366         NVME_SC_CQ_INVALID              = 0x100,\n367         NVME_SC_QID_INVALID             = 0x101,\n368         NVME_SC_QUEUE_SIZE              = 0x102,\n369         NVME_SC_ABORT_LIMIT             = 0x103,\n370         NVME_SC_ABORT_MISSING           = 0x104,\n371         NVME_SC_ASYNC_LIMIT             = 0x105,\n372         NVME_SC_FIRMWARE_SLOT           = 0x106,\n373         NVME_SC_FIRMWARE_IMAGE          = 0x107,\n374         NVME_SC_INVALID_VECTOR          = 0x108,\n375         NVME_SC_INVALID_LOG_PAGE        = 0x109,\n376         NVME_SC_INVALID_FORMAT          = 0x10a,\n377         NVME_SC_BAD_ATTRIBUTES          = 0x180,\n378         NVME_SC_WRITE_FAULT             = 0x280,\n379         NVME_SC_READ_ERROR              = 0x281,\n380         NVME_SC_GUARD_CHECK             = 0x282,\n381         NVME_SC_APPTAG_CHECK            = 0x283,\n382         NVME_SC_REFTAG_CHECK            = 0x284,\n383         NVME_SC_COMPARE_FAILED          = 0x285,\n384         NVME_SC_ACCESS_DENIED           = 0x286,\n385 };\n386 \n</pre>\n\n\n\n\n <pre>\n386 \n387 struct nvme_completion {\n388         __le32  result;         /* Used by admin commands to return data */\n389         __u32   rsvd;\n390         __le16  sq_head;        /* how much of this queue may be reclaimed */\n391         __le16  sq_id;          /* submission queue that generated this entry */\n392         __u16   command_id;     /* of the command which completed */\n393         __le16  status;         /* did the command fail, and if so, why? */\n394 };\n395 \n396 struct nvme_user_io {\n397         __u8    opcode;\n398         __u8    flags;\n399         __u16   control;\n400         __u16   nblocks;\n401         __u16   rsvd;\n402         __u64   metadata;\n403         __u64   addr;\n404         __u64   slba;\n405         __u32   dsmgmt;\n406         __u32   reftag;\n407         __u16   apptag;\n408         __u16   appmask;\n409 };\n410 \n411 struct nvme_admin_cmd {\n412         __u8    opcode;\n413         __u8    flags;\n414         __u16   rsvd1;\n415         __u32   nsid;\n416         __u32   cdw2;\n417         __u32   cdw3;\n418         __u64   metadata;\n419         __u64   addr;\n420         __u32   metadata_len;\n421         __u32   data_len;\n422         __u32   cdw10;\n423         __u32   cdw11;\n424         __u32   cdw12;\n425         __u32   cdw13;\n426         __u32   cdw14;\n427         __u32   cdw15;\n428         __u32   timeout_ms;\n429         __u32   result;\n430 };\n431 \n432 #define NVME_IOCTL_ID           _IO(\'N\', 0x40)\n433 #define NVME_IOCTL_ADMIN_CMD    _IOWR(\'N\', 0x41, struct nvme_admin_cmd)\n434 #define NVME_IOCTL_SUBMIT_IO    _IOW(\'N\', 0x42, struct nvme_user_io)\n435 \n\n</pre>\n\n\n==== drivers/block/nvme.c ====\n\n\n <pre>\n  44 \n  45 #define NVME_Q_DEPTH 1024\n  46 #define SQ_SIZE(depth)          (depth * sizeof(struct nvme_command))\n  47 #define CQ_SIZE(depth)          (depth * sizeof(struct nvme_completion))\n  48 #define NVME_MINORS 64\n  49 #define NVME_IO_TIMEOUT (5 * HZ)\n  50 #define ADMIN_TIMEOUT   (60 * HZ)\n  51 \n  52 static int nvme_major;\n  53 module_param(nvme_major, int, 0);\n  54 \n  55 static int use_threaded_interrupts;\n  56 module_param(use_threaded_interrupts, int, 0);\n  57 \n  58 static DEFINE_SPINLOCK(dev_list_lock);\n  59 static LIST_HEAD(dev_list);\n  60 static struct task_struct *nvme_thread;\n  61 \n</pre>\n\n\n\n\n <pre>\n  62 /*\n  63  * Represents an NVM Express device.  Each nvme_dev is a PCI function.\n  64  */\n  65 struct nvme_dev {\n  66         struct list_head node; \n  67         struct nvme_queue **queues;    \n  68         u32 __iomem *dbs;      \n  69         struct pci_dev *pci_dev;\n  70         struct dma_pool *prp_page_pool;\n  71         struct dma_pool *prp_small_pool;\n  72         int instance;\n  73         int queue_count;       \n  74         int db_stride;         \n  75         u32 ctrl_config;       \n  76         struct msix_entry *entry;\n  77         struct nvme_bar __iomem *bar;\n  78         struct list_head namespaces;\n  79         char serial[20];\n  80         char model[40];\n  81         char firmware_rev[8];\n  82         u32 max_hw_sectors;\n  83 };\n  84 \n  85 /*     \n  86  * An NVM Express namespace is equivalent to a SCSI LUN\n  87  */    \n  88 struct nvme_ns {\n  89         struct list_head list; \n  90        \n  91         struct nvme_dev *dev;  \n  92         struct request_queue *queue;\n  93         struct gendisk *disk;  \n  94        \n  95         int ns_id;\n  96         int lba_shift;         \n  97 };     \n  98 \n  99 /*     \n 100  * An NVM Express queue.  Each device has at least two (one for admin\n 101  * commands and one for I/O commands).\n 102  */\n 103 struct nvme_queue {\n 104         struct device *q_dmadev;\n 105         struct nvme_dev *dev;\n 106         spinlock_t q_lock;\n 107         struct nvme_command *sq_cmds;\n 108         volatile struct nvme_completion *cqes;\n 109         dma_addr_t sq_dma_addr;\n 110         dma_addr_t cq_dma_addr;\n 111         wait_queue_head_t sq_full;\n 112         wait_queue_t sq_cong_wait;\n 113         struct bio_list sq_cong;\n 114         u32 __iomem *q_db;\n 115         u16 q_depth;\n 116         u16 cq_vector;\n 117         u16 sq_head;\n 118         u16 sq_tail;\n 119         u16 cq_head;\n 120         u16 cq_phase;\n 121         unsigned long cmdid_data[];\n 122 };\n 123 \n</pre>\n\n== ## bNote-2013-12-03 ==\n\n=== Linux kernel IO stack: Block Layer ===\n\n==== Linux Documentation ====\n\n; Documentation/block/queue-sysfs.txt\n\n <pre>\n1	Queue sysfs files\n2	=================\n3	\n4	This text file will detail the queue files that are located in the sysfs tree\n5	for each block device. Note that stacked devices typically do not export\n6	any settings, since their queue merely functions are a remapping target.\n7	These files are the ones found in the /sys/block/xxx/queue/ directory.\n8	\n9	Files denoted with a RO postfix are readonly and the RW postfix means\n10	read-write.\n11	\n12	add_random (RW)\n13	----------------\n14	This file allows to trun off the disk entropy contribution. Default\n15	value of this file is \'1\'(on).\n16	\n17	discard_granularity (RO)\n18	-----------------------\n19	This shows the size of internal allocation of the device in bytes, if\n20	reported by the device. A value of \'0\' means device does not support\n21	the discard functionality.\n22	\n23	discard_max_bytes (RO)\n24	----------------------\n25	Devices that support discard functionality may have internal limits on\n26	the number of bytes that can be trimmed or unmapped in a single operation.\n27	The discard_max_bytes parameter is set by the device driver to the maximum\n28	number of bytes that can be discarded in a single operation. Discard\n29	requests issued to the device must not exceed this limit. A discard_max_bytes\n30	value of 0 means that the device does not support discard functionality.\n31	\n32	discard_zeroes_data (RO)\n33	------------------------\n34	When read, this file will show if the discarded block are zeroed by the\n35	device or not. If its value is \'1\' the blocks are zeroed otherwise not.\n36	\n37	hw_sector_size (RO)\n38	-------------------\n39	This is the hardware sector size of the device, in bytes.\n40	\n41	iostats (RW)\n42	-------------\n43	This file is used to control (on/off) the iostats accounting of the\n44	disk.\n45	\n46	logical_block_size (RO)\n47	-----------------------\n48	This is the logcal block size of the device, in bytes.\n49	\n50	max_hw_sectors_kb (RO)\n51	----------------------\n52	This is the maximum number of kilobytes supported in a single data transfer.\n53	\n54	max_integrity_segments (RO)\n55	---------------------------\n56	When read, this file shows the max limit of integrity segments as\n57	set by block layer which a hardware controller can handle.\n58	\n59	max_sectors_kb (RW)\n60	-------------------\n61	This is the maximum number of kilobytes that the block layer will allow\n62	for a filesystem request. Must be smaller than or equal to the maximum\n63	size allowed by the hardware.\n64	\n65	max_segments (RO)\n66	-----------------\n67	Maximum number of segments of the device.\n68	\n69	max_segment_size (RO)\n70	---------------------\n71	Maximum segment size of the device.\n72	\n73	minimum_io_size (RO)\n74	--------------------\n75	This is the smallest preferred io size reported by the device.\n76	\n77	nomerges (RW)\n78	-------------\n79	This enables the user to disable the lookup logic involved with IO\n80	merging requests in the block layer. By default (0) all merges are\n81	enabled. When set to 1 only simple one-hit merges will be tried. When\n82	set to 2 no merge algorithms will be tried (including one-hit or more\n83	complex tree/hash lookups).\n84	\n85	nr_requests (RW)\n86	----------------\n87	This controls how many requests may be allocated in the block layer for\n88	read or write requests. Note that the total allocated number may be twice\n89	this amount, since it applies only to reads or writes (not the accumulated\n90	sum).\n91	\n92	To avoid priority inversion through request starvation, a request\n93	queue maintains a separate request pool per each cgroup when\n94	CONFIG_BLK_CGROUP is enabled, and this parameter applies to each such\n95	per-block-cgroup request pool.  IOW, if there are N block cgroups,\n96	each request queue may have up to N request pools, each independently\n97	regulated by nr_requests.\n98	\n99	optimal_io_size (RO)\n100	--------------------\n101	This is the optimal io size reported by the device.\n102	\n103	physical_block_size (RO)\n104	------------------------\n105	This is the physical block size of device, in bytes.\n106	\n107	read_ahead_kb (RW)\n108	------------------\n109	Maximum number of kilobytes to read-ahead for filesystems on this block\n110	device.\n111	\n112	rotational (RW)\n113	---------------\n114	This file is used to stat if the device is of rotational type or\n115	non-rotational type.\n116	\n117	rq_affinity (RW)\n118	----------------\n119	If this option is \'1\', the block layer will migrate request completions to the\n120	cpu \"group\" that originally submitted the request. For some workloads this\n121	provides a significant reduction in CPU cycles due to caching effects.\n122	\n123	For storage configurations that need to maximize distribution of completion\n124	processing setting this option to \'2\' forces the completion to run on the\n125	requesting cpu (bypassing the \"group\" aggregation logic).\n126	\n127	scheduler (RW)\n128	--------------\n129	When read, this file will display the current and available IO schedulers\n130	for this block device. The currently active IO scheduler will be enclosed\n131	in [] brackets. Writing an IO scheduler name to this file will switch\n132	control of this block device to that new IO scheduler. Note that writing\n133	an IO scheduler name to this file will attempt to load that IO scheduler\n134	module, if it isn\'t already present in the system.\n135	\n136	\n137	\n138	Jens Axboe <jens.axboe@oracle.com>, February 2009\n</pre>\n\n\n\n\n==== Linux kernel 3.8.0 source code ====\n\n; block/blk-settings.c: blk_queue_make_request()\n <pre>\n\n152 /**\n153  * blk_queue_make_request - define an alternate make_request function for a device\n154  * @q:  the request queue for the device to be affected\n155  * @mfn: the alternate make_request function\n156  *\n157  * Description:\n158  *    The normal way for &struct bios to be passed to a device\n159  *    driver is for them to be collected into requests on a request\n160  *    queue, and then to allow the device driver to select requests\n161  *    off that queue when it is ready.  This works well for many block\n162  *    devices. However some block devices (typically virtual devices\n163  *    such as md or lvm) do not benefit from the processing on the\n164  *    request queue, and are served best by having the requests passed\n165  *    directly to them.  This can be achieved by providing a function\n166  *    to blk_queue_make_request().\n167  *\n168  * Caveat:\n169  *    The driver that does this *must* be able to deal appropriately\n170  *    with buffers in \"highmemory\". This can be accomplished by either calling\n171  *    __bio_kmap_atomic() to get a temporary kernel mapping, or by calling\n172  *    blk_queue_bounce() to create a buffer in normal memory.\n173  **/\n174 void blk_queue_make_request(struct request_queue *q, make_request_fn *mfn)\n175 {\n176         /*\n177          * set defaults\n178          */\n179         q->nr_requests = BLKDEV_MAX_RQ;\n180 \n181         q->make_request_fn = mfn;\n182         blk_queue_dma_alignment(q, 511);\n183         blk_queue_congestion_threshold(q);\n184         q->nr_batching = BLK_BATCH_REQ;\n185 \n186         blk_set_default_limits(&q->limits);\n187 \n188         /*\n189          * by default assume old behaviour and bounce for any highmem page\n190          */\n191         blk_queue_bounce_limit(q, BLK_BOUNCE_HIGH);\n192 }\n193 EXPORT_SYMBOL(blk_queue_make_request);\n\n</pre>\n\n\n\n\n; include/linux/blkdev.h: BLKDEV_MAX_RQ\n <pre>\n  38 #define BLKDEV_MAX_RQ   128     /* Default maximum */\n</pre>\n\n\n\n\n; block/blk-sysfs.c: /* Functions related to sysfs handling */\n <pre>\n 40 \n 41 static ssize_t queue_requests_show(struct request_queue *q, char *page)\n 42 {\n 43         return queue_var_show(q->nr_requests, (page));\n 44 }\n 45 \n 46 static ssize_t\n 47 queue_requests_store(struct request_queue *q, const char *page, size_t count)\n 48 {\n 49         struct request_list *rl;\n 50         unsigned long nr;\n 51         int ret;\n 52 \n 53         if (!q->request_fn)\n 54                 return -EINVAL;\n 55 \n 56         ret = queue_var_store(&nr, page, count);\n 57         if (ret < 0)\n 58                 return ret;\n 59 \n 60         if (nr < BLKDEV_MIN_RQ)\n 61                 nr = BLKDEV_MIN_RQ;\n 62 \n 63         spin_lock_irq(q->queue_lock);\n 64         q->nr_requests = nr;\n 65         blk_queue_congestion_threshold(q);\n 66 \n 67         /* congestion isn\'t cgroup aware and follows root blkcg for now */\n 68         rl = &q->root_rl;\n 69 \n 70         if (rl->count[BLK_RW_SYNC] >= queue_congestion_on_threshold(q))\n 71                 blk_set_queue_congested(q, BLK_RW_SYNC);\n 72         else if (rl->count[BLK_RW_SYNC] < queue_congestion_off_threshold(q))\n 73                 blk_clear_queue_congested(q, BLK_RW_SYNC);\n 74 \n 75         if (rl->count[BLK_RW_ASYNC] >= queue_congestion_on_threshold(q))\n 76                 blk_set_queue_congested(q, BLK_RW_ASYNC);\n 77         else if (rl->count[BLK_RW_ASYNC] < queue_congestion_off_threshold(q))\n 78                 blk_clear_queue_congested(q, BLK_RW_ASYNC);\n 79 \n 80         blk_queue_for_each_rl(rl, q) {\n 81                 if (rl->count[BLK_RW_SYNC] >= q->nr_requests) {\n 82                         blk_set_rl_full(rl, BLK_RW_SYNC);\n 83                 } else {\n 84                         blk_clear_rl_full(rl, BLK_RW_SYNC);\n 85                         wake_up(&rl->wait[BLK_RW_SYNC]);\n 86                 }\n 87 \n 88                 if (rl->count[BLK_RW_ASYNC] >= q->nr_requests) {\n 89                         blk_set_rl_full(rl, BLK_RW_ASYNC);\n 90                 } else {\n 91                         blk_clear_rl_full(rl, BLK_RW_ASYNC);\n 92                         wake_up(&rl->wait[BLK_RW_ASYNC]);\n 93                 }\n 94         }\n 95 \n 96         spin_unlock_irq(q->queue_lock);\n 97         return ret;\n 98 }\n 99 \n\n</pre>\n\n\n\n; drivers/block/nvme.c: NVME_Q_DEPTH\n <pre>\n  44 \n  45 #define NVME_Q_DEPTH 1024\n  46 #define SQ_SIZE(depth)          (depth * sizeof(struct nvme_command))\n  47 #define CQ_SIZE(depth)          (depth * sizeof(struct nvme_completion))\n  48 #define NVME_MINORS 64\n  49 #define NVME_IO_TIMEOUT (5 * HZ)\n  50 #define ADMIN_TIMEOUT   (60 * HZ)\n  51 \n</pre>\n\n== ## bNote-2013-12-02 ==\n\n=== XS-1715 Specification ===\n\n==== Key features ====\n\n* Performance\n: Optimized for 4KB random read and write workloads\n:- Performance Target\n::- More than 700K IOPS for 4KB random reads\n::- More than 200K IOPS for 4KB random writes (sustained)\n\n* Mapping Algorithm\n:- 4KB full page mapping\n:- FN21 4-planes program support \n:- FN21 4KB fast read support\n:- Hot/cold data separtion (ESP_MM_Mapping.c)\n:- Concurrent garbage collection during user page writes\n:- Non-blocking DRAM access to avoid pipeline bubbles of CPU\n:- No hardware register access at all during user read/write request processing\n:- Journal log information reduction for fast power-down and fast recovery at boot-up\n:- Flash RAID-5 support\n\n\n\n=== Admin/Misc ===\n\n* DS 인사 (전배관련): \'\'\'정영민 대리\'\'\', 박필 사원\n:-> 정영민 대리에게 확인. (OK)\n\n<!--\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:57]:\n  정대리님, 안녕하세요?\n  이번 10월 1일자로 기술원에서 SW개발팀으로 전배 온\n  정명준 책임입니다. \n  내년 승격 관련해서\n  문의드리고자 연락 드렸습니다\n  잠시 시간 되시는지요?\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:00]:\n  네\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:00]:\n  안녕하세요? 혹시 기술원의 김경진 차장으로부터\n  차년도 승격 관련해서\n  연락 받으셨던 것이 있으신지 궁금해서요~\n  제가 기술원 기준으로는 차년도 승격이 되는데\n  여기 전배를 오게 되면서, 승격 예외 대상자로 \n  예외 승격 대상자\n  로 분류해서 내년에 수석 진급이 보장될 수 있도록\n  해주겠다는 이야기를 들었었거든요\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:02]:\n  네 예전에 관련 결재를 통보받았으나, 책임님 명단이 있는지는 확인해봐야겠습니다\n  잠시만요\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:02]:\n  네~\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:05]:\n  네 확인했습니다. 책임님 승격되십니다\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:05]:\n  아 감사합니다~\n  이번에 저와 같이 오셨던\n  신현정 책임도 같이\n  승격 되는 것 맞죠?\n  저희 2명이 \n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:06]:\n  넵\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:06]:\n  된다고 들었었거든요\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:06]:\n  2명입니다\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:06]:\n  확인해주셔서 감사합니다. 그럼 저희 2명이 특별히\n  따로 더 할 일이\n  할 일은 없는 건지요?\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:06]:\n  넵\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:06]:\n  아, 잘 알겠습니다. \n  감사합니다. 좋은 오후 보내세요  \n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:07]:\n  네 수고하셔요~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:07]:\n  넵 감사합니다 ^^\n-->\n\n<!--\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:53]:\n  김과장님, 안녕하세요? 10월 1일자로 기술원에서 메모리사 S/W 개발팀으로 전배 온 정명준 책임입니다.\n  승격 관련해서 여쭙고자 연락 드렸습니다\n  잠시 시간 되시는지요?\n‎‎김효근(G5(과장)/담당과장/삼성전자)‎‎ [오후 1:54]:\n  아 네...\n  담당자는 박필 사원이나 \n  정영민 대리입니다. \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:55]:\n  아하 \n‎‎김효근(G5(과장)/담당과장/삼성전자)‎‎ [오후 1:55]:\n  정영민 대리는 지금 통화중이네요... \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:55]:\n  아, 그럼 잠시 후 정영민 대리에게 연락해보겠습니다 알려주셔서 감사합니다 ^_^\n‎‎김효근(G5(과장)/담당과장/삼성전자)‎‎ [오후 1:57]:\n  전 인력운영 담당자라 \n  승격에 대해서는 제가 정확한 답변을 못 드릴 것 같습니다. \n  정대리 전화 끊었네요\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:57]:\n  아, 감사합니다 ^^\n  연락해보겠습니다  \n-->\n\n<!--\n: <strike>DS 인사 담당: 김효근 과장, 이창익 대리 (인력 이동 관련)</strike> Updated: 정영민대리가 담당임.\n: 10/17 김경진 차장 - 내년 승격 대상자는 기술원 인사팀에서 본사에 얘기해놓았으며, 11.1일자 인력들과 같이 해서 예외 대상자들 품의를 받아 사업부에 뿌릴 예정이라고 함\n-->\n\n== References ==\n\n<references/>','utf-8'),(2155,'== Computer science conferences ==\n\n=== ACM/IEEE ISCA (International Symposium on Computer Architecture) ===\n\n=== ACM SOSP (Symposium on Operating Systems Principles) ===\n\n* [[ACM SOSP 2013]]\n\n=== USENIX OSDI (Operating Systems Design and Implementation) ===\n\n=== VLDB (Very Large Data Base Endowment) ===\n\n=== ACM SIGMOD (Management of Data) ===\n\n* [[Conference: ACM SIGMOD 2013]]\n\n=== ACM SIGKDD (Knowledge Discovery and Data Mining) ===\n\n=== NIPS (Neural Information Processing Systems) ===\n\n=== ACM SIGMETRICS (Computer Systems Performance Evaluation) ===\n\n=== USENIX FAST (File and Storage Technologies) ===\n\n=== IEEE MSST (Massive Storage Systems and Technologies) ===\n\n\n== See also ==\n\n* [[X intelligence]]\n\n== References ==\n\n<references/>','utf-8'),(2156,'== Computer science conferences ==\n\n=== ACM/IEEE ISCA (International Symposium on Computer Architecture) ===\n\n=== ACM SOSP (Symposium on Operating Systems Principles) ===\n\n* [[Conference: ACM SOSP 2013]]\n\n=== USENIX OSDI (Operating Systems Design and Implementation) ===\n\n=== VLDB (Very Large Data Base Endowment) ===\n\n=== ACM SIGMOD (Management of Data) ===\n\n* [[Conference: ACM SIGMOD 2013]]\n\n=== ACM SIGKDD (Knowledge Discovery and Data Mining) ===\n\n=== NIPS (Neural Information Processing Systems) ===\n\n=== ACM SIGMETRICS (Computer Systems Performance Evaluation) ===\n\n=== USENIX FAST (File and Storage Technologies) ===\n\n=== IEEE MSST (Massive Storage Systems and Technologies) ===\n\n\n== See also ==\n\n* [[X intelligence]]\n\n== References ==\n\n<references/>','utf-8'),(2157,'== SOSP 2013 Summary ==\n\n{| class=\"wikitable\" style=\"background:white\"\n|-\n|+ [http://sigops.org/sosp/sosp13/program.html SOSP 2013 The 24th ACM Symposium on Operating Systems Principles]\n|-\n! Pick\n! width=\"20%\" | Title\n! width=\"20%\" | Authors\n! width=\"10%\" | Keywords\n! width=\"50%\" | Memo\n|-\n| style=\"background:gold\" | S.4\n| (BestPaper) The Scalable Commutativity Rule: Designing Scalable Software for Multicore Processors\n| Austin T. Clements, M. Frans Kaashoek, Nickolai Zeldovich, Robert Morris (MIT CSAIL), Eddie Kohler (Harvard)\n| \n* Application scalability by commutative interface operations\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nThe Scalable Commutativity Rule: Designing Scalable Software for Multicore Processors\n----\nWhat fundamental opportunities for scalability are latent in interfaces, such as system call APIs? Can scalability opportunities be identified even before any implementation exists, simply by considering interface specifications? To answer these questions this paper introduces the following rule: Whenever interface operations commute, they can be implemented in a way that scales. This rule aids developers in building more scalable software starting from interface design and carrying on through implementation, testing, and evaluation.\n\nTo help developers apply the rule, a new tool named Commuter accepts high-level interface models and generates tests of operations that commute and hence could scale. Using these tests, Commuter can evaluate the scalability of an implementation. We apply Commuter to 18 POSIX calls and use the results to guide the implementation of a new research operating system kernel called sv6. Linux scales for 68% of the 13,664 tests generated by Commuter for these calls, and Commuter finds many problems that have been observed to limit application scalability. sv6 scales for 99% of the tests.</ref>\n* Key findings: Whenever interface operations commute, they can be implemented in a way that scales\n* Key questions: Can scalability opportunities be identified even before any implementation exists, simply by considering interface specifications?\n* Result (분석 필요): Linux scales for 68% of the 13,664 tests generated by Commuter for these calls\n* b.idea: New SmartSSD API for scalable In-Storage Computing (ISC)\n* b.question: ISC의 궁극적인 모습은 micro-server가 되는 것일까?\n\n\n\n\n|-\n| style=\"background:coral\" | S.5\n| Speedy Transactions in Multicore In-Memory Databases\n| Stephen Tu, Wenting Zheng (MIT), Eddie Kohler (Harvard), Barbara Liskov, Samuel Madden (MIT)\n|\n* In-memory database on multicore machines\n* Avoiding centralized contention points\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nSpeedy Transactions in Multicore In-Memory Databases\n----\nSilo is a new in-memory database that achieves excellent performance and scalability on modern multicore machines. Silo was designed from the ground up to use system memory and caches efficiently. For instance, it avoids all centralized contention points, including that of centralized transaction ID assignment. Silo\'s key contribution is a commit protocol based on optimistic concurrency control that provides serializability while avoiding all shared-memory writes for records that were only read. Though this might seem to complicate the enforcement of a serial order, correct logging and recovery is provided by linking periodically-updated epochs with the commit protocol. Silo provides the same guarantees as any serializable database without unnecessary scalability bottlenecks or much additional latency. Silo achieves almost 700,000 transactions per second on a standard TPC-C workload mix on a 32-core machine, as well as near-linear scalability. Considered per core, this is several times higher than previously reported results.</ref>\n* Silo is a new IMDB: achieving excellent performance and scalability on multicore machines\n* New design: to use system memory and caches efficiently\n* Avoiding: all centralized contention points (such as centralized transaction ID assignment)\n* Key contribution: a commit protocol based on optimistic concurrency control that provides serializability while avoiding all shared-memory writes for records that were only read\n* Result: almost 700,000 TPS on a standard TPC-C workload mix on a 32-core machine, as well as near-linear scalability.\n\n\n\n\n|-\n| style=\"background:darkslategray\" | S._\n| Everything You Always Wanted to Know about Synchronization but Were Afraid to Ask\n| Tudor David, Rachid Guerraoui, Vasileios Trigonakis (EPFL)\n|\n* Factors which impact on the scalability of synchronization\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nEverything You Always Wanted to Know about Synchronization but Were Afraid to Ask\n----\nThis paper presents the most exhaustive study of synchronization to date. We span multiple layers, from hardware cache-coherence protocols up to high-level concurrent software. We do so on different types of architectures, from single-socket -- uniform and non-uniform -- to multi-socket -- directory and broadcast-based -- many-cores. We draw a set of observations that, roughly speaking, imply that scalability of synchronization is mainly a property of the hardware.</ref>\n\n\n\n\n|-\n| style=\"background:darkslategray\" | S._\n| Dandelion: A Compiler and Runtime for Heterogeneous Systems\n| Christopher J Rossbach, Yuan Yu, Jon Currey, Jean-Philippe Martin, Dennis Fetterly (Microsoft Research Silicon Valley)\n|\n* User-friendly programming tool for heterogeneous systems\n* Automatic cross-compilation (.NET-to-CUDA)\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nDandelion: A Compiler and Runtime for Heterogeneous Systems\n----\nComputer systems increasingly rely on heterogeneity to achieve greater performance, scalability and energy efficiency. Because heterogeneous systems typically comprise multiple execution contexts with different programming abstractions and runtimes, programming them remains extremely challenging.\n\nDandelion is a system designed to address this programmability challenge for data-parallel applications. Dandelion provides a unified programming model for heterogeneous systems that span diverse execution contexts including CPUs, GPUs, FPGAs, and the cloud. It adopts the .NET LINQ (Language INtegrated Query) approach, integrating data-parallel operators into general purpose programming languages such as C# and F#. It therefore provides an expressive data model and native language integration for user-defined functions, enabling programmers to write applications using standard high-level languages and development tools.\n\nDandelion automatically and transparently distributes data-parallel portions of a program to available computing resources, including compute clusters for distributed execution and CPU and GPU cores of individual nodes for parallel execution. To enable automatic execution of .NET code on GPUs, Dandelion cross-compiles .NET code to CUDA kernels and uses the PTask runtime [85] to manage GPU execution. This paper discusses the design and implementation of Dandelion, focusing on the distributed CPU and GPU implementation. We evaluate the system using a diverse set of workloads.</ref>\n* Key contribution: user-friendly programming tool for heterogeneous systems\n* Dandelion automatically and transparently distributes data-parallel portions of a program to available computing resources\n* To enable automatic execution of .NET code on GPUs, Dandelion cross-compiles .NET code to CUDA kernels and uses the PTask runtime to manage GPU execution.\n\n\n\n\n|-\n| style=\"background:gold\" | S.4\n| Sparrow: Distributed, Low Latency Scheduling\n| Kay Ousterhout, Patrick Wendell, Matei Zaharia, Ion Stoica (UC Berkeley)\n|\n* Large-scale data analytics frameworks\n* Low latency towards shorter task durations and larger degrees of parallelism\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nSparrow: Distributed, Low Latency Scheduling\n----\nLarge-scale data analytics frameworks are shifting towards shorter task durations and larger degrees of parallelism to provide low latency. Scheduling highly parallel jobs that complete in hundreds of milliseconds poses a major challenge for task schedulers, which will need to schedule millions of tasks per second on appropriate machines while offering millisecond-level latency and high availability. We demonstrate that a decentralized, randomized sampling approach provides near-optimal performance while avoiding the throughput and availability limitations of a centralized design. We implement and deploy our scheduler, Sparrow, on a 110-machine cluster and demonstrate that Sparrow performs within 12% of an ideal scheduler.</ref>\n* Challenge: Scheduling highly parallel jobs that complete in hundreds of milliseconds poses a major challenge for task schedulers, which will need to schedule millions of tasks per second on appropriate machines while offering millisecond-level latency and high availability.\n* Approach: decentralized, randomized sampling approach (which provides near-optimal performance)\n* Result: Sparrow on a 110-machine cluster and demonstrate it performs within 12% of an ideal scheduler\n* b.question: definition of theoretical limit for ideal scheduler?\n* b.idea: compute-striping? compute-redundancy? for better performance and fault-tolerance\n\n\n\n\n|-\n| style=\"background:darkslategray\" | S._\n| Timecard: Controlling User-Perceived Delays in Server-Based Mobile Applications\n| Lenin Ravindranath (MIT), Jitendra Padhye, Ratul Mahajan (Microsoft Research), Hari Balakrishnan (MIT)\n|\n* Consistent response time for mobile applications\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nTimecard: Controlling User-Perceived Delays in Server-Based Mobile Applications\n----\nProviding consistent response times to users of mobile applications is challenging because there are several variable delays between the start of a user\'s request and the completion of the response. These delays include location lookup, sensor data acquisition, radio wake-up, network transmissions, and processing on both the client and server. To allow applications to achieve consistent response times in the face of these variable delays, this paper presents the design, implementation, and evaluation of the Timecard system. Timecard provides two abstractions: the first returns the time elapsed since the user started the request, and the second returns an estimate of the time it would take to transmit the response from the server to the client and process the response at the client. With these abstractions, the server can adapt its processing time to control the end-to-end delay for the request. Implementing these abstractions requires Timecard to track delays across multiple asynchronous activities, handle time skew between client and server, and estimate network transfer times. Experiments with Timecard incorporated into two mobile applications show that the end-to-end delay is within 50 ms of the target delay of 1200 ms over 90% of the time.</ref>\n* b.question: Can this be related to SILK browser from Amazon?\n* Challenge: providing consistent response time to users of mobile applications\n\n\n\n\n|-\n| style=\"background:gold\" | S.4\n| Fast Dynamic Binary Translation for the Kernel\n| Piyus Kedia, Sorav Bansal (IIT Delhi)\n|\n* Dynamic binary translation (DBT)\n* DBT for implementation of VMM\n* DBT for instrumentation <ref>instrumentation - In context of computer programming, instrumentation refers to an ability to monitor or measure the level of a product\'s performance, to diagnose errors and to write trace information. Programmers implement instrumentation in the form of code instructions that monitor specific components in a system (for example, instructions may output logging information to appear on screen). When an application contains instrumentation code, it can be managed using a management tool. Instrumentation is necessary to review the performance of the application. Instrumentation approaches can be of two types: Source instrumentation and binary instrumentation.</ref> in the OS kernel\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nFast Dynamic Binary Translation for the Kernel\n----\nDynamic binary translation (DBT) is a powerful technique with several important applications. System-level binary translators have been used for implementing a Virtual Machine Monitor [2] and for instrumentation in the OS kernel [10]. In current designs, the performance overhead of binary translation on kernel-intensive workloads is high. e.g., over 10x slowdowns were reported on the syscall nanobenchmark in [2], 2-5x slowdowns were reported on lmbench microbenchmarks in [10]. These overheads are primarily due to the extra work required to correctly handle kernel mechanisms like interrupts, exceptions, and physical CPU concurrency.\n\nWe present a kernel-level binary translation mechanism which exhibits near-native performance even on applications with large kernel activity. Our translator relaxes transparency requirements and aggressively takes advantage of kernel invariants to eliminate sources of slowdown. We have implemented our translator as a loadable module in unmodified Linux, and present performance and scalability experiments on multiprocessor hardware. Although our implementation is Linux specific, our mechanisms are quite general; we only take advantage of typical kernel design patterns, not Linux-specific features. For example, our translator performs 3x faster than previous kernel-level DBT implementations while running the Apache web server.</ref>\n* Contribution: a kernel-level binary translation mechanism - which exhibits near-native performance even on applications with large kernel activity.\n* Challenge: to reduce the overheads which are primarily due to the extra work required to correctly handle kernel mechanisms like interrupts, exceptions, and physical CPU concurrency.\n* Approach: relaxing transparency requirements and aggressively taking advantages of kernel invariants - to eliminate sources of slowdown.\n* (Note) DBT is widely used in\n:* virtualization <ref>K. Adams and O. Agesen. A comparison of software and hardware techniques for x86 virtualization. In ASPLOS \'06</ref>\n:* testing/verification <ref>S. Nagarakatte, S. Burckhardt, M. M. Martin, and M. Musuvathi. Multicore acceleration of priority-based schedulers for concurrency bug detection. In PLDI ’12.</ref>\n:* debugging <ref>Q. Zhao, R. Rabbah, S. Amarasinghe, L. Rudolph, and W.F. Wong. How to do a million watchpoints: efﬁcient debugging using dynamic instrumentation. In CC’08/ETAPS’08.</ref>\n:* profiling <ref>Q. Zhao, D. Koh, S. Raza, D. Bruening, W.-F. Wong, and S. Amarasinghe. Dynamic cache contention detection in multi-threaded applications. In VEE ’11.</ref>\n:* sandboxing <ref>V. Kiriansky, D. Bruening, and S. Amarasinghe. Secure execution via program shepherding. In USENIX Security \'02</ref>\n:* dynamic optimizations <ref>V. Bala, E. Duesterwald, and S. Banerjia. Dynamo: a transparent dynamic optimization system. ACM SIGPLAN Notices, 35(5):1–12, 2000.</ref>\n\n\n\n\n|-\n| style=\"background:darkseagreen\" | S.3\n| VirtuOS: An Operating System with Kernel Virtualization\n| Ruslan Nikolaev, Godmar Back (Virginia Polytechnic Institute)\n|\n|\n|-\n| style=\"background:darkseagreen\" | S.3\n| From L3 to seL4: What Have We Learnt in 20 Years of L4 Microkernels?\n| Kevin Elphinstone, Gernot Heiser (NICTA & UNSW)\n|\n|\n|-\n| style=\"background:darkseagreen\" | S.3\n| Replication, History, and Grafting in the Ori File System\n| Ali Mashtizadeh, Andrea Bittau, Yifeng Frank Huang, David Mazieres (Stanford University)\n|\n|\n|-\n| style=\"background:coral\" | S.5\n| An Analysis of Facebook Photo Caching\n| Qi Huang, Ken Birman, Robbert van Renesse (Cornell University), Wyatt Lloyd (Princeton University), Sanjeev Kumar, Harry C. Li (Facebook Inc.)\n|\n|\n|-\n| style=\"background:coral\" | S.5\n| IOFlow: A Software-Defined Storage Architecture\n| Eno Thereska, Hitesh Ballani, Greg O\'Shea, Thomas Karagiannis, Antony Rowstron (Microsoft Research), Tom Talpey (Microsoft), Richard Black (Microsoft Research), Timothy Zhu (Carnegie Mellon University)\n|\n|\n|-\n| style=\"background:gold\" | S.4\n| From ARIES to MARS: Transaction Support for Next-Generation, Solid-State Drives\n| Joel Coburn, Trevor Bunker, Meir Schwarz, Rajesh K. Gupta, Steven Swanson (University of California, San Diego)\n|\n* Write-ahead logging (WAL) <ref>Write-ahead logging (WAL) is a family of techniques for providing atomicity and durability in database systems. In a system using WAL, all modifications are written to a log before they are applied. WAL은 database가 in-place로 update될 수 있도록 한다. In-place update의 장점은 index와 block list를 수정할 필요를 줄여준다는 것이다. 반면 atomic update를 구현하기 위한 또 다른 방법인 shadow paging은 not-in-place (or out-of-place) update 방식이다. </ref>\n|\n|-\n|\n| Asynchronous Intrusion Recovery for Interconnected Web Services\n| Ramesh Chandra, Taesoo Kim, Nickolai Zeldovich (MIT CSAIL)\n|\n|\n|-\n| style=\"background:darkseagreen\" | S.3\n| Optimistic Crash Consistency\n| Vijay Chidambaram, Thanumalayan Sankaranarayana Pillai, Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau (University of Wisconsin-Madison)\n|\n|\n* Insights: for cold-storage?\n|-\n| style=\"background:darkseagreen\" | S.3\n| Do Not Blame Users for Misconfigurations\n| Tianyin Xu, Jiaqi Zhang, Peng Huang, Jing Zheng, Tianwei Sheng (UC San Diego), Ding Yuan (University of Toronto), Yuanyuan Zhou (UC San Diego), Shankar Pasupathy (NetApp Inc)\n|\n|\n* Insights: for automatic optimization?\n|-\n| style=\"background:darkseagreen\" | S.3\n| (BestPaper) Towards Optimization-Safe Systems: Analyzing the Impact of Undefined Behavior\n| Xi Wang, Nickolai Zeldovich, M. Frans Kaashoek, Armando Solar-Lezama (MIT CSAIL)\n|\n|\n|-\n|\n| Transaction Chains: Achieving Serializability with Low Latency in Geo-Distributed Storage Systems\n| Yang Zhang, Russell Power, Siyuan Zhou, Yair Sovran (NYU), Marcos K. Aguilera (Microsoft Research), Jinyang Li (NYU)\n|\n|\n|-\n| style=\"background:darkseagreen\" | S.3\n| SPANStore: Cost-Effective Geo-Replicated Storage Spanning Multiple Cloud Services\n| Zhe Wu, Michael Butkiewicz, Dorian Perkins (UC Riverside), Ethan Katz-Bassett (USC), Harsha V. Madhyastha (UC Riverside)\n|\n|\n|-\n| style=\"background:gold\" | S.4\n| Consistency-Based Service Level Agreements for Cloud Storage\n| Douglas B. Terry, Vijayan Prabhakaran, Ramakrishna Kotla, Mahesh Balakrishnan, Marcos K. Aguilera (Microsoft Research), Hussam Abu-Libdeh (Cornell University)\n|\n|\n* Insights: QoS?\n|-\n| style=\"background:coral\" | S.5\n| Tango: Distributed Data Structures over a Shared Log\n| Mahesh Balakrishnan, Dahlia Malkhi, Ted Wobber, Ming Wu, Vijayan Prabhakaran (Microsoft Research), Michael Wei (UCSD), John D. Davis (Microsoft Research), Sriram Rao (Microsoft), Tao Zou (Cornell University), Aviad Zuck (Tel-Aviv University)\n|\n|\n* Insights: new data structure model?\n|-\n| style=\"background:darkseagreen\" | S.3\n| Verifying Computations with State\n| Benjamin Braun (UT Austin), Ariel J. Feldman (University of Pennsylvania), Zuocheng Ren, Srinath Setty, Andrew J. Blumberg, Michael Walfish (UT Austin)\n|\n|\n|-\n|\n| There Is More Consensus In Egalitarian Parliaments\n| Iulian Moraru, David G. Andersen (Carnegie Mellon University), Michael Kaminsky (Intel Labs)\n|\n|\n|-\n|\n| ROOT: Replaying Multithreaded Traces with Resource-Oriented Ordering\n| Zev Weiss, Tyler Harter, Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau (University of Wisconsin-Madison)\n|\n|\n|-\n|\n| PARROT: A Practical Runtime for Deterministic, Stable, and Reliable Threads\n| Heming Cui (Columbia University), Jiri Simsa (Carnegie Mellon University), Yi-Hong Lin, Hao Li (Columbia University), Ben Blum (Carnegie Mellon University), Xinan Xu, Junfeng Yang (Columbia University), Garth A. Gibson, Randal E. Bryant (Carnegie Mellon University)\n|\n|\n|-\n|\n| RaceMob: Crowdsourced Data Race Detection\n| Baris Kasikci, Cristian Zamfir, George Candea (EPFL)\n|\n|\n|-\n| style=\"background:gold\" | S.4\n| Discretized Streams: Fault-Tolerant Streaming Computation at Scale\n| Matei Zaharia, Tathagata Das, Haoyuan Li, Timothy Hunter, Scott Shenker, Ion Stoica (UC Berkeley)\n|\n|\n|-\n| style=\"background:coral\" | S.5\n| (BestPaper) Naiad: A Timely Dataflow System\n| Derek G. Murray, Frank McSherry, Rebecca Isaacs, Michael Isard, Paul Barham, Martin Abadi (Microsoft Research)\n|\n|\n* Insights: Compute/IO Prediction?\n|-\n| style=\"background:darkseagreen\" | S.3\n| A Lightweight Infrastructure for Graph Analytics\n| Donald Nguyen, Andrew Lenharth, Keshav Pingali (University of Texas at Austin)\n|\n|\n|-\n| style=\"background:darkseagreen\" | S.3\n| X-Stream: Edge-Centric Graph Processing using Streaming Partitions\n| Amitabha Roy, Ivo Mihailovic, Willy Zwaenepoel (EPFL)\n|\n|\n|-\n| \n| \n| \n|\n|\n|-\n|}','utf-8'),(2158,'\n <pre>\n   December 2013\nSu Mo Tu We Th Fr Sa\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29 30 31\n</pre>\n\n\n== ## bNote-2013-12-27 ==\n\n\n=== SOSP 2013 Summary ===\n\n[[Conference: ACM SOSP 2013]]\n\n== ## bNote-2013-12-19 ==\n\n\n=== NVMe IO stack code analysis ===\n\n* .benchmark.sh\n\n* nvme_iostack_analysis.c\n\n <pre>\nblusjune@buddy-guy:execution %2$ cat /x/t/nvme_iostack_analysis.c \n\n\n\ninclude/linux/device.h:\n/**\n * struct device - The basic device structure\n * @parent:	The device\'s \"parent\" device, the device to which it is attached.\n * 		In most cases, a parent device is some sort of bus or host\n * 		controller. If parent is NULL, the device, is a top-level device,\n * 		which is not usually what you want.\n * @p:		Holds the private data of the driver core portions of the device.\n * 		See the comment of the struct device_private for detail.\n * @kobj:	A top-level, abstract class from which other classes are derived.\n * @init_name:	Initial name of the device.\n * @type:	The type of device.\n * 		This identifies the device type and carries type-specific\n * 		information.\n * @mutex:	Mutex to synchronize calls to its driver.\n * @bus:	Type of bus device is on.\n * @driver:	Which driver has allocated this\n * @platform_data: Platform data specific to the device.\n * 		Example: For devices on custom boards, as typical of embedded\n * 		and SOC based hardware, Linux often uses platform_data to point\n * 		to board-specific structures describing devices and how they\n * 		are wired.  That can include what ports are available, chip\n * 		variants, which GPIO pins act in what additional roles, and so\n * 		on.  This shrinks the \"Board Support Packages\" (BSPs) and\n * 		minimizes board-specific #ifdefs in drivers.\n * @power:	For device power management.\n * 		See Documentation/power/devices.txt for details.\n * @pm_domain:	Provide callbacks that are executed during system suspend,\n * 		hibernation, system resume and during runtime PM transitions\n * 		along with subsystem-level and driver-level callbacks.\n * @pins:	For device pin management.\n *		See Documentation/pinctrl.txt for details.\n * @numa_node:	NUMA node this device is close to.\n * @dma_mask:	Dma mask (if dma\'ble device).\n * @coherent_dma_mask: Like dma_mask, but for alloc_coherent mapping as not all\n * 		hardware supports 64-bit addresses for consistent allocations\n * 		such descriptors.\n * @dma_parms:	A low level driver may set these to teach IOMMU code about\n * 		segment limitations.\n * @dma_pools:	Dma pools (if dma\'ble device).\n * @dma_mem:	Internal for coherent mem override.\n * @cma_area:	Contiguous memory area for dma allocations\n * @archdata:	For arch-specific additions.\n * @of_node:	Associated device tree node.\n * @acpi_node:	Associated ACPI device node.\n * @devt:	For creating the sysfs \"dev\".\n * @id:		device instance\n * @devres_lock: Spinlock to protect the resource of the device.\n * @devres_head: The resources list of the device.\n * @knode_class: The node used to add the device to the class list.\n * @class:	The class of the device.\n * @groups:	Optional attribute groups.\n * @release:	Callback to free the device after all references have\n * 		gone away. This should be set by the allocator of the\n * 		device (i.e. the bus driver that discovered the device).\n * @iommu_group: IOMMU group the device belongs to.\n *\n * @offline_disabled: If set, the device is permanently online.\n * @offline:	Set after successful invocation of bus type\'s .offline().\n *\n * At the lowest level, every device in a Linux system is represented by an\n * instance of struct device. The device structure contains the information\n * that the device model core needs to model the system. Most subsystems,\n * however, track additional information about the devices they host. As a\n * result, it is rare for devices to be represented by bare device structures;\n * instead, that structure, like kobject structures, is usually embedded within\n * a higher-level representation of the device.\n */\nstruct device {\n	struct device		*parent;\n\n	struct device_private	*p;\n\n	struct kobject kobj;\n	const char		*init_name; /* initial name of the device */\n	const struct device_type *type;\n\n	struct mutex		mutex;	/* mutex to synchronize calls to\n					 * its driver.\n					 */\n\n	struct bus_type	*bus;		/* type of bus device is on */\n	struct device_driver *driver;	/* which driver has allocated this\n					   device */\n	void		*platform_data;	/* Platform specific data, device\n					   core doesn\'t touch it */\n	struct dev_pm_info	power;\n	struct dev_pm_domain	*pm_domain;\n\n#ifdef CONFIG_PINCTRL\n	struct dev_pin_info	*pins;\n#endif\n\n#ifdef CONFIG_NUMA\n	int		numa_node;	/* NUMA node this device is close to */\n#endif\n	u64		*dma_mask;	/* dma mask (if dma\'able device) */\n	u64		coherent_dma_mask;/* Like dma_mask, but for\n					     alloc_coherent mappings as\n					     not all hardware supports\n					     64 bit addresses for consistent\n					     allocations such descriptors. */\n\n	struct device_dma_parameters *dma_parms;\n\n	struct list_head	dma_pools;	/* dma pools (if dma\'ble) */\n\n	struct dma_coherent_mem	*dma_mem; /* internal for coherent mem\n					     override */\n#ifdef CONFIG_DMA_CMA\n	struct cma *cma_area;		/* contiguous memory area for dma\n					   allocations */\n#endif\n	/* arch specific additions */\n	struct dev_archdata	archdata;\n\n	struct device_node	*of_node; /* associated device tree node */\n	struct acpi_dev_node	acpi_node; /* associated ACPI device node */\n\n	dev_t			devt;	/* dev_t, creates the sysfs \"dev\" */\n	u32			id;	/* device instance */\n\n	spinlock_t		devres_lock;\n	struct list_head	devres_head;\n\n	struct klist_node	knode_class;\n	struct class		*class;\n	const struct attribute_group **groups;	/* optional groups */\n\n	void	(*release)(struct device *dev);\n	struct iommu_group	*iommu_group;\n\n	bool			offline_disabled:1;\n	bool			offline:1;\n};\n\n\n\n\n\ndrivers/block/nvme-core.c:\n/*\n * An NVM Express queue.  Each device has at least two (one for admin\n * commands and one for I/O commands).\n */\nstruct nvme_queue {\n	struct device *q_dmadev;\n	struct nvme_dev *dev;\n	spinlock_t q_lock;\n	struct nvme_command *sq_cmds;\n	volatile struct nvme_completion *cqes;\n	dma_addr_t sq_dma_addr;\n	dma_addr_t cq_dma_addr;\n	wait_queue_head_t sq_full;\n	wait_queue_t sq_cong_wait;\n	struct bio_list sq_cong;\n	u32 __iomem *q_db;\n	u16 q_depth;\n	u16 cq_vector;\n	u16 sq_head;\n	u16 sq_tail;\n	u16 cq_head;\n	u8 cq_phase;\n	u8 cqe_seen;\n	u8 q_suspended;\n\n	unsigned long cmdid_data[];\n};\n\n\n\n\ninclude/linux/nvme.h:\n/*\n * Represents an NVM Express device.  Each nvme_dev is a PCI function.\n */\nstruct nvme_dev {\n	struct list_head node;\n	struct nvme_queue **queues;\n	u32 __iomem *dbs;\n	struct pci_dev *pci_dev;\n	struct dma_pool *prp_page_pool;\n	struct dma_pool *prp_small_pool;\n	int instance;\n	int queue_count;\n	int db_stride;\n	u32 ctrl_config;\n	struct msix_entry *entry;\n	struct nvme_bar __iomem *bar;\n	struct list_head namespaces;\n	struct kref kref;\n	struct miscdevice miscdev;\n	char name[12];\n	char serial[20];\n	char model[40];\n	char firmware_rev[8];\n	u32 max_hw_sectors;\n	u32 stripe_size;\n	u16 oncs;\n\n	int stalen;\n	struct list_head stale_node;\n	volatile unsigned long hp_flag;\n	bool hp_resume;\n};\n\n\n\n\ninclude/linux/nvme.h:\n/*\n * An NVM Express namespace is equivalent to a SCSI LUN\n */\nstruct nvme_ns {\n	struct list_head list;\n\n	struct nvme_dev *dev;\n	struct request_queue *queue;\n	struct gendisk *disk;\n\n	unsigned ns_id;\n	int lba_shift;\n	int ms;\n	u64 mode_select_num_blocks;\n	u32 mode_select_block_len;\n\n	atomic_t refcount;\n	volatile unsigned long hp_flag;\n};\n\n\n\n\ninclude/uapi/linux/nvme.h:\n\n\ninclude/uapi/linux/nvme.h:\nstruct nvme_command {\n	union {\n		struct nvme_common_command common;\n		struct nvme_rw_command rw;\n		struct nvme_identify identify;\n		struct nvme_features features;\n		struct nvme_create_cq create_cq;\n		struct nvme_create_sq create_sq;\n		struct nvme_delete_queue delete_queue;\n		struct nvme_download_firmware dlfw;\n		struct nvme_format_cmd format;\n		struct nvme_dsm_cmd dsm; /* ???dsm */\n	};\n};\n\n\n/*\n * __blusjune_memo__ 20131216_233535\n * NVME_LBART_TYPE_{FS,RAID,CACHE,SWAP} is not used at this moment (2013-12-16)\n * only NVME_LBART_ATTRIB_HIDE is used\n */\ninclude/uapi/linux/nvme.h:\nenum {\n	NVME_LBART_TYPE_FS	= 0x01,\n	NVME_LBART_TYPE_RAID	= 0x02,\n	NVME_LBART_TYPE_CACHE	= 0x03,\n	NVME_LBART_TYPE_SWAP	= 0x04,\n\n	NVME_LBART_ATTRIB_TEMP	= 1 << 0,\n	NVME_LBART_ATTRIB_HIDE	= 1 << 1,\n};\n\n\n/* I/O commands */\ninclude/uapi/linux/nvme.h:\nenum nvme_opcode {\n	nvme_cmd_flush		= 0x00,\n	nvme_cmd_write		= 0x01,\n	nvme_cmd_read		= 0x02,\n	nvme_cmd_write_uncor	= 0x04,\n	nvme_cmd_compare	= 0x05,\n	nvme_cmd_dsm		= 0x09,\n};\n\ninclude/uapi/linux/nvme.h:\nstruct nvme_common_command {\n	__u8			opcode;\n	__u8			flags;\n	__u16			command_id;\n	__le32			nsid;\n	__le32			cdw2[2];\n	__le64			metadata;\n	__le64			prp1;\n	__le64			prp2;\n	__le32			cdw10[6];\n};\n\n\n\n/*\n * __blusjune_memo__ 20131216_233535\n */\ninclude/uapi/linux/nvme.h:\nstruct nvme_rw_command {\n	__u8			opcode;\n	__u8			flags;\n	__u16			command_id;\n	__le32			nsid;\n	__u64			rsvd2;\n	__le64			metadata;\n	__le64			prp1;\n	__le64			prp2;\n	__le64			slba;\n	__le16			length;\n	__le16			control;\n	__le32			dsmgmt; /* __u32 __bitwise */\n	__le32			reftag;\n	__le16			apptag;\n	__le16			appmask;\n};\n\n/*\n * __blusjune_memo__ 20131216_233535\n * DSM (Dataset Management) Context Attributes\n *\n * 6.6.1 Context Attributes\n *\n * The context attributes specified for each range provides information about how the range is intended to be used by host software.\n * The use of this information is optional and the controller is not required to perform any specific action.\n *\n * What if the host NVMe driver filles the \'Reserved\' area? what action is defined for the controller?\n *\n * [31:24] Command Access Size\n *	Number of logical blocks expected to be transferred\n *	in a single Read or Write command from this dataset.\n * [23:11] Reserved\n * [10] WP: Write Prepare\n *	If set to \'1\', then the provided range is expected to be written in the \'near future\'\n *	\'near future\'? how near/far?\n * [09] SW: Sequential Write Range\n *	If set to \'1\', then the dataset should be optimized for sequential write access.\n *	The host expects to perform operations on the dataset as a single object for writes.\n * [08] SR: Sequential Read Range\n *	If set to \'1\', then the dataset should be optimized for sequential read access.\n *	The host expects to perform operations on the dataset as a single object for reads.\n * [07:06] Reserved\n * [05:04] AL: Access Latency\n *	00b: None. No latency information provided.\n *	01b: Idle. Longer latency acceptable.\n *	10b: Normal. Typtical latency.\n *	11b: Low. Smallest possible latency. (PCIe Traffic Class can be used to perform the QoS)\n * [03:00] AF: Access Frequency\n *	0000b: No frequency information provided.\n *	0001b: Typical number of reads and writes expected for this LBA range.\n *	0010b: Infrequent writes and infrequent reads to the LBA range indicated.\n *	0011b: infrequent writes and frequent reads to the LBA range indicated.\n *	0100b: Frequent writes and infrequent reads to the LBA range indicated.\n *	0101b: Frequent writes and frequent reads to the LBA range indicated.\n *	0110b ~	1111b: Reserved\n *	\n */\ninclude/uapi/linux/nvme.h:\nenum {\n	NVME_RW_LR			= 1 << 15,\n	NVME_RW_FUA			= 1 << 14,\n	NVME_RW_DSM_FREQ_UNSPEC		= 0,\n	NVME_RW_DSM_FREQ_TYPICAL	= 1,\n	NVME_RW_DSM_FREQ_RARE		= 2,\n	NVME_RW_DSM_FREQ_READS		= 3,\n	NVME_RW_DSM_FREQ_WRITES		= 4,\n	NVME_RW_DSM_FREQ_RW		= 5,\n	NVME_RW_DSM_FREQ_ONCE		= 6,\n	NVME_RW_DSM_FREQ_PREFETCH	= 7,\n	NVME_RW_DSM_FREQ_TEMP		= 8,\n	NVME_RW_DSM_LATENCY_NONE	= 0 << 4,\n	NVME_RW_DSM_LATENCY_IDLE	= 1 << 4,\n	NVME_RW_DSM_LATENCY_NORM	= 2 << 4,\n	NVME_RW_DSM_LATENCY_LOW		= 3 << 4,\n	NVME_RW_DSM_SEQ_REQ		= 1 << 6,\n	NVME_RW_DSM_COMPRESSED		= 1 << 7,\n};\n\nstruct nvme_dsm_cmd {\n	__u8			opcode;\n	__u8			flags;\n	__u16			command_id;\n	__le32			nsid;\n	__u64			rsvd2[2];\n	__le64			prp1;\n	__le64			prp2;\n	__le32			nr;\n	__le32			attributes;\n	__u32			rsvd12[4];\n};\n\nenum {\n	NVME_DSMGMT_IDR		= 1 << 0,\n	NVME_DSMGMT_IDW		= 1 << 1,\n	NVME_DSMGMT_AD		= 1 << 2,\n};\n\nstruct nvme_dsm_range {\n	__le32			cattr;\n	__le32			nlb;\n	__le64			slba;\n};\n\n\ndrivers/block/nvme-core.c:\nnvme_probe(struct pci_dev *pdev, const struct pci_device_id *id)\n{\n	struct nvme_dev * dev;\n	/*\n	 * memory space will be allocated to \'dev\'\n	 * and then\n	 * \'dev->entry\' will have memory space\n	 * 	proportional to the \'num_possible_cpus()\'\n	 * \'dev->queues\' will have memory space\n	 *	proportional to the \'num_possible_cpus() + 1\' <- why \'+1\' here?\n	 * , where num_possible_cpus() means\n	 *	number of cpus populatable (fixed at boot time),\n	 *	i.e., set of CPU id\'s possible to be plugged in\n	 *	at anytime during the life of system boot\n	 */\n\n\n	// ...\n\n\n	dev->pci_dev = pdev; // pdev argument will be assigned to \'dev->pci_dev\'\n\n\n	result = nvme_set_instance(dev);\n	/*\n	 * allocate new integer ID to dev->instance\n	 *\n	 * Internally, this uses Idr (integer ID management)\n	 * , where Idr is a set of library functions\n	 *	for the management of small integer ID numbers.\n	 *	In essence, an idr object can be thought of\n	 *	as a sparse array mapping integer IDs onto arbitrary pointers,\n	 *	with a \"get me an available entry\" function as well.\n	 *\n	 * URL: http://lwn.net/Articles/103209/\n	 */\n\n\n	result = nvme_setup_prp_pools(dev);\n	/*\n	 * dev->prp_page_pool = dma_pool_create(\"prp list page\",\n	 *	&dev->pci_dev->dev, PAGE_SIZE, PAGE_SIZE, 0)\n	 *\n	 * and the comment says that there is an optimization\n	 * for I/Os between 4k and 128k (is it still 128k? not 256k?)\n	 * by the following code:\n	 * dev->prp_small_pool = dma_pool_create(\"prp list 256\",\n	 *	&dev->pci_dev->dev, 256, 256, 0);\n	 *\n	 * PRPs (Physical Region Pages) contains\n	 * the 64-bit physical memory page address.\n	 * The lower bits (n:2) of this field indicate\n	 * the offset within the memory page\n	 * n is defined by the memory page size (CC.MPS)\n	 *	\n	 * PRP list contains a list of PRPs with generally no offsets\n	 * which means non-contiguous set of physical memory pages\n	 *\n	 * mm/dmapool.c:dma_pool_create(const char * name, struct device *dev, sizt_t size, size_t align, size_t boundary)\n	 * \n	 */\n\n\n	result = nvme_dev_start(dev);\n	/*\n	 * nvme_dev_start() {\n	 * 	nvme_dev_map(dev);\n	 * 	nvme_configure_admin_queue(dev);\n	 * 	list_add(&dev->node, &dev_list);\n	 * 	nvme_setup_io_queues(dev);\n	 * }\n	 */\n\n\n	result = nvme_dev_add(dev);\n\n\n}\n\n\n\ndrivers/block/nvme-core.c:\nstatic int nvme_configure_admin_queue(struct nvme_dev *dev)\n{\n}\n\n\n\ndrivers/block/nvme-core.c:\nstatic int nvme_setup_io_queues(struct nvme_dev *dev)\n{\n}\n\n\n\ndrivers/block/nvme-core.c:\nnvme_setup_io_queues()\n{\n	(int) nr_io_queues = num_online_cpus();\n\n}\n\n\n/*\n * __blusjune_memo__\n */\ndrivers/block/nvme-core.c:\nstatic int nvme_submit_io(struct nvme_ns *ns, struct nvme_user_io __user *uio)\n{\n	struct nvme_dev *dev = ns->dev;\n	struct nvme_queue *nvmeq;\n	struct nvme_user_io io;\n	struct nvme_command c;\n	unsigned length, meta_len;\n	int status, i;\n	struct nvme_iod *iod, *meta_iod = NULL;\n	dma_addr_t meta_dma_addr;\n	void *meta, *uninitialized_var(meta_mem);\n\n	if (copy_from_user(&io, uio, sizeof(io)))\n		return -EFAULT;\n\n        if (nvme_cmd_dsm != io.opcode) {\n	        length = (io.nblocks + 1) << ns->lba_shift;\n	        meta_len = (io.nblocks + 1) * ns->ms;\n        } else {\n	        length = (io.nblocks + 1) << NUM_DSM_RANGES_SHIFT;\n                meta_len = 0;\n        }\n\n	if (meta_len && ((io.metadata & 3) || !io.metadata))\n		return -EINVAL;\n\n	switch (io.opcode) {\n	case nvme_cmd_write:\n	case nvme_cmd_read:\n	case nvme_cmd_compare:\n        case nvme_cmd_dsm:\n		iod = nvme_map_user_pages(dev, io.opcode & 1, io.addr, length);\n		break;\n	case nvme_cmd_flush:\n                memset(&c, 0, sizeof(c));\n                c.rw.opcode = io.opcode;\n                c.rw.nsid = cpu_to_le32(ns->ns_id);\n                nvmeq = get_nvmeq(dev);\n                put_nvmeq(nvmeq);\n\n                status = nvme_submit_sync_cmd(nvmeq, &c, NULL, NVME_IO_TIMEOUT);\n\n                return status;\n	default:\n		return -EINVAL;\n	}\n\n	if (IS_ERR(iod))\n		return PTR_ERR(iod);\n\n	memset(&c, 0, sizeof(c));\n        if (nvme_cmd_dsm == io.opcode) {\n	        c.dsm.opcode = io.opcode;\n	        c.dsm.nsid = cpu_to_le32(ns->ns_id);\n	        c.dsm.nr = cpu_to_le32(io.nblocks);\n	        c.dsm.attributes = cpu_to_le32(io.dsmgmt);\n        } else {\n	        c.rw.opcode = io.opcode;\n	        c.rw.flags = io.flags;\n	        c.rw.nsid = cpu_to_le32(ns->ns_id);\n	        c.rw.slba = cpu_to_le64(io.slba);\n	        c.rw.length = cpu_to_le16(io.nblocks);\n	        c.rw.control = cpu_to_le16(io.control);\n	        c.rw.dsmgmt = cpu_to_le32(io.dsmgmt);\n	        c.rw.reftag = cpu_to_le32(io.reftag);\n	        c.rw.apptag = cpu_to_le16(io.apptag);\n	        c.rw.appmask = cpu_to_le16(io.appmask);\n        }\n\n	if (meta_len) {\n		meta_iod = nvme_map_user_pages(dev, io.opcode & 1, io.metadata, meta_len);\n		if (IS_ERR(meta_iod)) {\n			status = PTR_ERR(meta_iod);\n			meta_iod = NULL;\n			goto unmap;\n		}\n\n		meta_mem = dma_alloc_coherent(&dev->pci_dev->dev, meta_len,\n						&meta_dma_addr, GFP_KERNEL);\n		if (!meta_mem) {\n			status = -ENOMEM;\n			goto unmap;\n		}\n\n		if (io.opcode & 1) {\n			int meta_offset = 0;\n\n			for (i = 0; i < meta_iod->nents; i++) {\n#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 3, 0))\n                                meta = kmap_atomic(sg_page(&meta_iod->sg[i])) +\n#else\n                                meta = kmap_atomic(sg_page(&meta_iod->sg[i]), KM_USER0) +\n#endif\n						meta_iod->sg[i].offset;\n				memcpy(meta_mem + meta_offset, meta,\n						meta_iod->sg[i].length);\n#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 3, 0))\n                                kunmap_atomic(meta);\n#else\n                                kunmap_atomic(meta, KM_USER0);\n#endif\n				meta_offset += meta_iod->sg[i].length;\n			}\n		}\n\n		c.rw.metadata = cpu_to_le64(meta_dma_addr);\n	}\n\n	length = nvme_setup_prps(dev, &c.common, iod, length, GFP_KERNEL);\n\n	nvmeq = get_nvmeq(dev);\n	/*\n	 * Since nvme_submit_sync_cmd sleeps, we can\'t keep preemption\n	 * disabled.  We may be preempted at any point, and be rescheduled\n	 * to a different CPU.  That will cause cacheline bouncing, but no\n	 * additional races since q_lock already protects against other CPUs.\n	 */\n	put_nvmeq(nvmeq);\n	if ((length != (io.nblocks + 1) << ns->lba_shift) && (nvme_cmd_dsm != io.opcode))\n		status = -ENOMEM;\n        else if (!nvmeq || nvmeq->q_suspended)\n                status = -EBUSY;\n	else\n		status = nvme_submit_sync_cmd(nvmeq, &c, NULL, NVME_IO_TIMEOUT);\n\n	if (meta_len) {\n		if (status == NVME_SC_SUCCESS && !(io.opcode & 1)) {\n			int meta_offset = 0;\n\n			for (i = 0; i < meta_iod->nents; i++) {\n#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 3, 0))\n                                meta = kmap_atomic(sg_page(&meta_iod->sg[i])) +\n#else\n                                meta = kmap_atomic(sg_page(&meta_iod->sg[i]), KM_USER0) +\n#endif\n						meta_iod->sg[i].offset;\n				memcpy(meta, meta_mem + meta_offset,\n						meta_iod->sg[i].length);\n#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 3, 0))\n                                kunmap_atomic(meta);\n#else\n                                kunmap_atomic(meta, KM_USER0);\n#endif\n				meta_offset += meta_iod->sg[i].length;\n			}\n		}\n\n		dma_free_coherent(&dev->pci_dev->dev, meta_len, meta_mem,\n								meta_dma_addr);\n	}\n\n unmap:\n	nvme_unmap_user_pages(dev, io.opcode & 1, iod);\n	nvme_free_iod(dev, iod);\n\n	if (meta_iod) {\n		nvme_unmap_user_pages(dev, io.opcode & 1, meta_iod);\n		nvme_free_iod(dev, meta_iod);\n	}\n\n	return status;\n}\n\n\n\n\n/*\n * __blusjune_memo__\n * nvme_ioctl() -> nvme_submit_io()\n */\ndrivers/block/nvme-core.c:\nstatic int nvme_ioctl(struct block_device *bdev, fmode_t mode, unsigned int cmd,\n							unsigned long arg)\n{\n	struct nvme_ns *ns = bdev->bd_disk->private_data;\n\n	if (!ns || (test_bit(NVME_HOT_REM, &ns->dev->hp_flag)) ||\n		!bdev->bd_disk ||\n		!(bdev->bd_disk->flags & GENHD_FL_UP))\n		return -ENODEV;\n\n	switch (cmd) {\n	case NVME_IOCTL_ID:\n		force_successful_syscall_return();\n		return ns->ns_id;\n	case NVME_IOCTL_ADMIN_CMD:\n		return nvme_user_admin_cmd(ns->dev, (void __user *)arg);\n	case NVME_IOCTL_SUBMIT_IO:\n		return nvme_submit_io(ns, (void __user *)arg);\n	case SG_GET_VERSION_NUM:\n		return nvme_sg_get_version_num((void __user *)arg);\n	case SG_IO:\n		return nvme_sg_io(ns, (void __user *)arg);\n	default:\n		return -ENOTTY;\n	}\n}\n\n\n\n\n/*\n * __blusjune_memo__\n * \'nvme_fops.ioctl\' is actually \'nvme_ioctl()\'\n */\ndrivers/block/nvme-core.c:\nstatic const struct block_device_operations nvme_fops = {\n	.owner		= THIS_MODULE,\n	.open		= nvme_bd_open,\n	.release	= nvme_bd_release,\n	.getgeo         = nvme_getgeo,\n	.ioctl		= nvme_ioctl,\n	.compat_ioctl	= nvme_ioctl,\n};\n\n\n\n\n/*\n * __blusjune_memo__\n *\n * nvme_make_request() -> nvme_submit_bio_queue()\n *\n * Called with local interrupts disabled and the q_lock held.  May not sleep.\n */\ndrivers/block/nvme-core.c:\nstatic int nvme_submit_bio_queue(struct nvme_queue *nvmeq, struct nvme_ns *ns, struct bio *bio)\n{\n	struct nvme_command *cmnd;\n	struct nvme_iod *iod;\n	enum dma_data_direction dma_dir;\n	int cmdid, length, result;\n	u16 control;\n	u32 dsmgmt;\n	int psegs = bio_phys_segments(ns->queue, bio);\n\n	if (!(bio->bi_bdev->bd_disk->flags & GENHD_FL_UP)) {\n		 pr_err(\"%s:%d - No device\\n\",__func__, __LINE__);\n                  bio->bi_rw |= REQ_FAILFAST_DEV;\n                  bio_endio(bio, -ENODEV);\n                  return 0;\n        }\n\n	if ((bio->bi_rw & REQ_FLUSH) && psegs) {\n		result = nvme_submit_flush_data(nvmeq, ns);\n		if (result)\n			return result;\n	}\n\n	result = -ENOMEM;\n	iod = nvme_alloc_iod(psegs, bio->bi_size, GFP_ATOMIC);\n	if (!iod)\n		goto nomem;\n	iod->private = bio;\n\n	result = -EBUSY;\n	cmdid = alloc_cmdid(nvmeq, iod, bio_completion, NVME_IO_TIMEOUT);\n	if (unlikely(cmdid < 0))\n		goto free_iod;\n\n	if (bio->bi_rw & REQ_DISCARD) {\n		result = nvme_submit_discard(nvmeq, ns, bio, iod, cmdid);\n		if (result)\n			goto free_cmdid;\n		return result;\n	}\n\n	if ((bio->bi_rw & REQ_FLUSH) && !psegs)\n		return nvme_submit_flush(nvmeq, ns, cmdid);\n\n        if (bio->bi_rw & REQ_FAILFAST_DRIVER)\n		mdelay(100);\n\n	control = 0;\n\n	if (bio->bi_rw & REQ_FUA)\n		control |= NVME_RW_FUA;\n\n        if (bio->bi_rw & (REQ_FAILFAST_DEV | REQ_RAHEAD))\n		control |= NVME_RW_LR;\n\n	dsmgmt = 0;\n\n        if (bio->bi_rw & REQ_RAHEAD)\n		dsmgmt |= NVME_RW_DSM_FREQ_PREFETCH;\n\n	cmnd = &nvmeq->sq_cmds[nvmeq->sq_tail];\n\n	memset(cmnd, 0, sizeof(*cmnd));\n	if (bio_data_dir(bio)) {\n		cmnd->rw.opcode = nvme_cmd_write;\n		dma_dir = DMA_TO_DEVICE;\n	} else {\n		cmnd->rw.opcode = nvme_cmd_read;\n		dma_dir = DMA_FROM_DEVICE;\n	}\n\n	result = nvme_map_bio(nvmeq, iod, bio, dma_dir, psegs);\n	if (result <= 0)\n		goto free_cmdid;\n	length = result;\n\n	cmnd->rw.command_id = cmdid;\n	cmnd->rw.nsid = cpu_to_le32(ns->ns_id);\n	length = nvme_setup_prps(nvmeq->dev, &cmnd->common, iod, length,\n								GFP_ATOMIC);\n	cmnd->rw.slba = cpu_to_le64(nvme_block_nr(ns, bio->bi_sector));\n	cmnd->rw.length = cpu_to_le16((length >> ns->lba_shift) - 1);\n	cmnd->rw.control = cpu_to_le16(control);\n	cmnd->rw.dsmgmt = cpu_to_le32(dsmgmt);\n\n	if (++nvmeq->sq_tail == nvmeq->q_depth)\n		nvmeq->sq_tail = 0;\n	writel(nvmeq->sq_tail, nvmeq->q_db);\n\n	return 0;\n\n free_cmdid:\n	free_cmdid(nvmeq, cmdid, NULL);\n free_iod:\n	nvme_free_iod(nvmeq->dev, iod);\n nomem:\n	return result;\n}\n\n\n\n\n\ndrivers/block/nvme-core.c:\n#if (LINUX_VERSION_CODE < KERNEL_VERSION(3, 3, 0))\nstatic int nvme_make_request(struct request_queue *q, struct bio *bio)\n#else\nstatic void nvme_make_request(struct request_queue *q, struct bio *bio)\n#endif\n{\n	struct nvme_ns *ns = NULL;\n	struct nvme_queue *nvmeq = NULL;\n	int result = -EBUSY;\n\n	unsigned long flags = 0;\n\n	if (unlikely(!bio_has_data(bio))) {\n                bio_endio(bio, 0);\n                goto out;\n        }\n\n	if (likely(q && q->queuedata))\n		ns = q->queuedata;\n\n	if (unlikely(!ns)) {\n		pr_err(\"%s:%d - No device\\n\",__func__, __LINE__);\n		bio_endio(bio, -ENODEV);\n		goto out;\n	}\n\n	if ((test_bit(NVME_HOT_REM, &ns->dev->hp_flag)) ||\n		!(bio->bi_bdev->bd_disk->flags & GENHD_FL_UP)) {\n                bio->bi_rw |= REQ_FAILFAST_DEV;\n                bio_endio(bio, -ENODEV);\n                goto out;\n        }\n\n	nvmeq = get_nvmeq(ns->dev);\n\n	if (unlikely(!nvmeq)) {\n		pr_err(\"%s:%d - No device\\n\",__func__, __LINE__);\n		bio_endio(bio, -ENXIO);\n		goto out;\n	}\n\n	spin_lock_irqsave(&nvmeq->q_lock, flags);\n	if (!nvmeq->q_suspended && bio_list_empty(&nvmeq->sq_cong))\n		result = nvme_submit_bio_queue(nvmeq, ns, bio);\n	if (unlikely(result)) {\n		if (bio_list_empty(&nvmeq->sq_cong))\n			add_wait_queue(&nvmeq->sq_full, &nvmeq->sq_cong_wait);\n		bio_list_add(&nvmeq->sq_cong, bio);\n	}\n\n	nvme_process_cq(nvmeq);\n	spin_unlock_irqrestore(&nvmeq->q_lock, flags);\n\n	put_nvmeq(nvmeq);\n\nout:\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 2, 0)\n        return 0;\n#else\n        return;\n#endif\n}\n</pre>\n\n== ## bNote-2013-12-18 ==\n\n\n=== R-script to draw a barplot ===\n\n* $ ls -alF\n <pre>\nroot@grant-green:anal.12.lvm_raw %1# l\ntotal 36\ndrwxrwxr-x  2 blusjune blusjune 4096 Dec 20 19:04 ./\ndrwxrwxr-x 13 blusjune blusjune 4096 Dec 17 09:44 ../\n-rw-rw-r--  1 blusjune blusjune 2682 Dec 17 13:40 .RData\n-rw-------  1 blusjune blusjune 2010 Dec 17 13:40 .Rhistory\n-rw-------  1 blusjune blusjune 2464 Dec 17 14:21 .rcmd.R\n-rw-rw-r--  1 blusjune blusjune  756 Dec 17 09:46 fio_result.nvme_ssd_lvm.log\n-rw-rw-r--  1 blusjune blusjune  786 Dec 17 09:44 fio_result.nvme_ssd_raw.log\n-rw-rw-r--  1 blusjune blusjune  744 Dec 17 09:46 fio_result.sata_ssd_lvm.log\n-rw-rw-r--  1 blusjune blusjune  737 Dec 17 09:45 fio_result.sata_ssd_raw.log\n</pre>\n\n* cat .rcmd.R\n <pre>\nroot@grant-green:anal.12.lvm_raw %1# cat .rcmd.R \nd.nvme_ssd_raw <- read.table(file=\'fio_result.nvme_ssd_raw.log\', header=T)\nd.nvme_ssd_lvm <- read.table(file=\'fio_result.nvme_ssd_lvm.log\', header=T)\nd.sata_ssd_raw <- read.table(file=\'fio_result.sata_ssd_raw.log\', header=T)\nd.sata_ssd_lvm <- read.table(file=\'fio_result.sata_ssd_lvm.log\', header=T)\nmat.nvme_ssd_raw <- as.matrix(d.nvme_ssd_raw[,-1])\nmat.nvme_ssd_lvm <- as.matrix(d.nvme_ssd_lvm[,-1])\nmat.sata_ssd_raw <- as.matrix(d.sata_ssd_raw[,-1])\nmat.sata_ssd_lvm <- as.matrix(d.sata_ssd_lvm[,-1])\n\nrownames(mat.nvme_ssd_raw) <- c(\n		\"IODepth=1\",\n		\"IODepth=2\",\n		\"IODepth=4\",\n		\"IODepth=8\",\n		\"IODepth=16\",\n		\"IODepth=32\",\n		\"IODepth=64\",\n		\"IODepth=128\",\n		\"IODepth=256\"\n		);\n\nrownames(mat.nvme_ssd_lvm) <- c(\n		\"IODepth=1\",\n		\"IODepth=2\",\n		\"IODepth=4\",\n		\"IODepth=8\",\n		\"IODepth=16\",\n		\"IODepth=32\",\n		\"IODepth=64\",\n		\"IODepth=128\",\n		\"IODepth=256\"\n		);\n\nrownames(mat.sata_ssd_raw) <- c(\n		\"IODepth=1\",\n		\"IODepth=2\",\n		\"IODepth=4\",\n		\"IODepth=8\",\n		\"IODepth=16\",\n		\"IODepth=32\",\n		\"IODepth=64\",\n		\"IODepth=128\",\n		\"IODepth=256\"\n		);\n\nrownames(mat.sata_ssd_lvm) <- c(\n		\"IODepth=1\",\n		\"IODepth=2\",\n		\"IODepth=4\",\n		\"IODepth=8\",\n		\"IODepth=16\",\n		\"IODepth=32\",\n		\"IODepth=64\",\n		\"IODepth=128\",\n		\"IODepth=256\"\n		);\n\n\n\n\nif (readline(prompt=\"NVMe SSD Raw Chart? [Y|n] \") != \'n\') {\n	mat <- mat.nvme_ssd_raw; maintitle <- \"NVMe SSD (XS-1715, 400GB) Raw case - Performance Benchmark Result\";\n	print(mat); barplot(mat, col=rainbow(9), beside=T, legend=rownames(mat), main=maintitle);\n}\n\nif (readline(prompt=\"NVMe SSD LVM Chart? [Y|n] \") != \'n\') {\n	mat <- mat.nvme_ssd_lvm; maintitle <- \"NVMe SSD (XS-1715, 400GB) LVM case - Performance Benchmark Result\";\n	print(mat); barplot(mat, col=rainbow(9), beside=T, legend=rownames(mat), main=maintitle);\n}\n\nif (readline(prompt=\"SATA SSD Raw Chart? [Y|n] \") != \'n\') {\n	mat <- mat.sata_ssd_raw; maintitle <- \"SATA SSD (830, 128GB) Raw case - Performance Benchmark Result\";\n	print(mat); barplot(mat, col=rainbow(9), beside=T, legend=rownames(mat), main=maintitle);\n}\n\nif (readline(prompt=\"SATA SSD LVM Chart? [Y|n] \") != \'n\') {\n	mat <- mat.sata_ssd_lvm; maintitle <- \"SATA SSD (830, 128GB) LVM case - Performance Benchmark Result\";\n	print(mat); barplot(mat, col=rainbow(9), beside=T, legend=rownames(mat), main=maintitle);\n}\n\n\n\n\nmat_diff <- as.matrix((100 * (d.nvme_ssd_lvm - d.nvme_ssd_raw) / d.nvme_ssd_lvm)[, -1])\nbarplot(mat_diff, col=rainbow(9), beside=T, legend=rownames(mat_diff), main=\"NVMe SSD (LVM - Raw)\");\n\n\n\n\nroot@grant-green:anal.12.lvm_raw %1# \n</pre>\n\n\n\n=== TPC-C benchmark scripts ===\n\n* .benchmark.sh\n\n <pre>\nblusjune@grant-green:tpcc_mysql_bmt_with_ssd %1$ cat .benchmark.sh \n#!/bin/sh\n## _ver=20131218_224424\n\n\n_ts_t1=$(..ts); _ts_t1e=$(tstamp-e);\n\n\necho \"#>> 1. Stop MySQL\";\n(stop mysql;)\n\n\necho \"#>> 2. Unmount /var/lib/mysql/db_on_ssd\";\n(umount /var/lib/mysql/db_on_ssd;)\n\n\n_ts_1=$(..ts); _ts_1e=$(tstamp-e);\necho \"#>> 3. Make target SSD go into the steady-state\";\n(cd steady_state/fio_test_d/t/10.sata_ssd_steadystate; DEV=${_TARGET_DEV} export DEV; _BDX)\n_ts_2=$(..ts); _ts_2e=$(tstamp-e);\necho \"[3] Elapsed time: $(echo $_ts_2e - $_ts_1e | bc) seconds\\t( $_ts_1 ~ $_ts_2 )\n\"\n\n\necho \"#>> 4. {fdisk, mkfs, mount} /var/lib/mysql/db_on_ssd\";\n(fdisk ${_TARGET_DEV};)\n(mkfs.xfs ${_TARGET_DEV}1;)\n(mount ${_TARGET_DEV}1 /var/lib/mysql/db_on_ssd;)\n\n\necho \"#>> 5. Start MySQL\";\n(start mysql;)\n\n\n_ts_1=$(..ts); _ts_1e=$(tstamp-e);\necho \"#>> 6. Import tpcc2500 DB from MySQL dumpfile\";\n(mysql -p -u root < mysql_dump_file/tpcc2500.dump-20131218_164116.sql;)\n_ts_2=$(..ts); _ts_2e=$(tstamp-e);\necho \"[6] Elapsed time: $(echo $_ts_2e - $_ts_1e | bc) seconds\\t( $_ts_1 ~ $_ts_2 )\n\"\n\n\n_ts_1=$(..ts); _ts_1e=$(tstamp-e);\necho \"#>> 7. Execute TPC-C benchmark\";\n(cd bmt; ..ts; tpcc_start localhost tpcc2500 root kkk 2500 128 0 10800 > tpcc_result.${_ts}.log; ..ts;)\n_ts_2=$(..ts); _ts_2e=$(tstamp-e);\necho \"[7] Elapsed time: $(echo $_ts_2e - $_ts_1e | bc) seconds\\t( $_ts_1 ~ $_ts_2 )\n\"\n\n\n_ts_t2=$(..ts); _ts_t2e=$(tstamp-e);\necho \"[Total] Elapsed time: $(echo $_ts_t2e - $_ts_t1e | bc) seconds\\t( $_ts_t1 ~ $_ts_t2 )\n\"\n\n\nblusjune@grant-green:tpcc_mysql_bmt_with_ssd %1$ \n</pre>\n\n\n=== FIO-based benchmark scripts ===\n\n* fio_test_d.tgz.asc\n: script to make steady-state\n: script to run FIO benchmark\n: script to generate R input data from FIO result files\n\n <pre>\nblusjune@grant-green:steady_state %1$ cat fio_test_d.tgz.asc \n-----BEGIN PGP MESSAGE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\nComment: Brian M. JUNG <brian.m.jung@gmail.com> Fri Dec 20 18:56:02 KST 2013\n\n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\n8z39sMlXIMwdgQTNhZnsjz519X5vKlmF8sgP878bEls9Si8QDJwJaAbf3jzMZGO0\nEWEirBmOBTXjHgpzITBxPCzWV5lSsA8O1KJiKSH8uesWFIwcPN6QLGCiP3BF/rlv\n3bBS1I/3PbI7lScBwrw4OX8ywZsqOSyFzuTKzE5/nAP+GVNpUtK1GzI/oLGsm2G4\n3EnvqNeatTCSAMj+SsflS6nBzaj4XHPqjBX2zMqjKdR9NqaGBZYz/bZGOAC5wj6g\nDUjhBun7VXyi32HF2rQ4jXmDp70enQUXDDBXV+9uOzOY7x071pnmXyCTZI0im1rG\nKSKI/aSKQn3XZxHaQv/roMubim6rODcmsZ0vHtjdviCjHykP5y3DscFExl/T4M30\nCIoEvgOSx7LlpN2fENg1dj5WVjECjyayfyK4wp+jLaho43OMn9wGAjZ6wR2ZfMKv\nXd/R1TOTktMIMfoe2auQFeCKaR4xOOPYs/EHWvjq+nAxJZa+jr5XSyhyBRlCXZ6N\nWgUWR8+AcODTDnU8/64jDgsMYIhU3xItQ/VXInkU4T558fTB/ayNFZAeKnF49Dgq\ndb3JQr83+UXPGu0Y6/fanu7bM4FCW/m962IZBFi2HxX6qcfqIlwGbNeQZP9XQONM\nPVmIryKcP3BZ8cpgZeIPKQXgZWqbRXA5ab5SuW67h5TNr7ae68Q1emoJd9AxUGcU\nZBIORzYatkEihzD2aJqkJmIPR2d7nZLnueG0SXiR6QFeWBzaXqK2cIioEI3XsIlL\n/ivdk2NhvpQlk1cqtqLDTq5LyCsRptObQM17tdyvwqtWjS9CJR6ApIVOjtaBkrZ5\noYRNG3Ix6KBsVIRBGIXa9HrcrSD6GmijWYRULtcWtob+OMivQX3fiE5rSAtTW4H3\n2DhQ7Tq31wTuzhYLsqTMzIGsk3bHaZfT9kErIhnzBs5KRxO5tzj2n16whtoOl/jl\n+Y3ybxLg14YLPHJFuHkT4DmxPQZA3stfHS81kFO9YZztk7jpjyOg6NLSMNkMOgXt\n3B2DJaQ4RlSG/m0JM6wr7K1Rth+mtBx9ORoNjYFd3PdqtmGw5c5oGl0kv0J9Ce8s\nEW+SJ/33Mxf7FoDT2oVI+/MaaADWHagkYa4lHRGKktIK2AzeIvow1Qdd6MkZu6mZ\nowJu7JxjlrUbBihT3CeTIKlHvjbHOZfLL4PGtgrODFcu/rbUGeYCoJvlAl4L2dIE\n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\ncapck5nXYg==\n=E03c\n-----END PGP MESSAGE-----\n</pre>\n\n== ## bNote-2013-12-17 ==\n\n=== TPC-C test result example ===\n\n* How to understand the TPC-C test result\n <pre>\n  Count     New-Order           Payment        Order-Status         Delivery        Stock-Level\n num,  sl :rt90|max_rt  sl :rt90|max_rt  sl :rt90|max_rt  sl :rt90|max_rt  sl :rt90|max_rt\n 10, 12(2):5.595|8.443, 15 :1.091|1.303, 2 :0.309|0.342, 2 :3.841|4.503, 1 :12.433|12.518\n</pre>\n\n\n* Talk with Jinjin\n <pre>\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:05]:\n  Hi, Jinjin ^^ Good morning!\n  Any point that I can help you regarding that steady-state script?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:05]:\n  morning, Brian~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:06]:\n  Yeah, so nice morning!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:06]:\n  I haven\'t used that yet, now I\'m testing with virgin state\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:06]:\n  Oh, great news to hear \n  then,\n  you mean that\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:12]:\n  (I\'m sorry ^^;;; somebody interrupted me !! Now I\'m back)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:12]:\n  it\'s ok~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:12]:\n  oh, so nice of you!\n  ^^\n  it means that ~ you found the way to make securely erase the SSD through the HW RAID controller !!!\n\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:13]:\n  yes, i found a way yesterday, using HP\'s own tools\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:14]:\n  oh, really? !!!\n  in the BIOS-like screen?\n  at the early phase of booting?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:16]:\n  yes, and it also provide a way to do it in command line, i will try if it works today\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:16]:\n  oh, great!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:17]:\n  have you reproduce the problem?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:17]:\n  oh, not yet! \n  because\n  we just received the test SSD (samsung) yesterday \n  kkk\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:17]:\n  that\'s ok~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:17]:\n  and I just finished the test trial of TPC-C benchmark program \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:18]:\n  good~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:18]:\n  one question to you, Jinjin ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:18]:\n  yes, pls\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:18]:\n  I\'ve got the resultant data from TPC-C benchmark as the following:\n      1 ***************************************\n    2 *** ###easy### TPC-C Load Generator ***\n    3 ***************************************\n    4 clk_tck is 1000000\n    5 <Parameters>\n    6      [server]: localhost\n    7      [port]: 3306\n    8      [DBname]: tpcc2500\n    9        [user]: root\n   10        [pass]: kkk\n   11   [warehouse]: 2500\n   12  [connection]: 128\n   13      [rampup]: 0 (sec.)\n   14     [measure]: 10800 (sec.)\n   15\n   16 RAMP-UP TIME.(0 sec.)\n   17\n   18 MEASURING START.\n   19\n   20   10, 507 :4.305, 544 :4.003, 52 :4.167, 45 :4.837, 1 :5.649\n   21   20, 717 :1.642, 709 :0.205, 73 :1.238, 72 :3.388, 76 :9.220\n   22   30, 709 :1.648, 717 :0.471, 70 :0.776, 71 :2.719, 75 :8.246\n   23   40, 896 :1.634, 898 :0.195, 89 :0.567, 90 :3.304, 84 :9.342\n   24   50, 732 :1.904, 724 :0.357, 74 :1.285, 69 :2.550, 70 :8.955\n   25   60, 740 :1.963, 749 :0.338, 76 :1.077, 75 :3.398, 77 :8.299\n   26   70, 674 :2.102, 671 :0.205, 67 :1.318, 68 :3.802, 68 :10.643\n   27   80, 755 :1.697, 753 :0.149, 73 :1.238, 75 :3.092, 69 :7.773\n   28   90, 872 :1.925, 851 :0.163, 88 :1.723, 87 :3.118, 92 :8.543\n   29  100, 960 :1.191, 991 :0.220, 97 :0.646, 99 :3.025, 102 :7.037\n   30  110, 622 :2.165, 608 :0.196, 61 :1.583, 62 :3.117, 52 :8.393\n   31  120, 855 :1.297, 863 :0.246, 85 :0.733, 86 :2.792, 89 :8.357\n   32  130, 740 :1.531, 728 :0.277, 75 :0.943, 74 :2.532, 72 :8.471\n   33  140, 877 :1.811, 877 :0.321, 89 :1.176, 84 :2.845, 90 :8.562\n   34  150, 763 :1.497, 773 :0.302, 76 :1.238, 78 :2.565, 76 :8.322\n   35  160, 792 :1.041, 785 :0.399, 80 :0.815, 82 :2.119, 82 :7.633\n   36  170, 608 :2.126, 603 :0.171, 61 :2.191, 60 :2.766, 59 :8.979\n  ooooops \n  lots of unwanted emoticon ^^;;;\n  sorry ^^;;;\n  Could you teach me how to understand this data?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:19]:\n  hah, i understand~\n  sure\n  just a minute\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:19]:\n  maybe the first column means every 10-second~\n  oh, great!\n  So what I want is to draw a plot like you sent to us~\n  with this data ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:20]:\n  yes, the first column means every 10 seconds\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:21]:\n  ok, got it ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:21]:\n  Count     New-Order           Payment        Order-Status         Delivery        Stock-Level\n num,  sl :rt90|max_rt  sl :rt90|max_rt  sl :rt90|max_rt  sl :rt90|max_rt  sl :rt90|max_rt\n 10, 12(2):5.595|8.443, 15 :1.091|1.303, 2 :0.309|0.342, 2 :3.841|4.503, 1 :12.433|12.518\n  sl means num of successful and late transactions\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:22]:\n  Oh, it\'s somewhat different form of data from my result\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:23]:\n  the picture i draw is just the sl column of new-order\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:23]:\n  Oh I see~\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:23]:\n  oh, the above two lines are not from output data\n  i add them to explain\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:24]:\n  Got it, ^^ then, what number was picked from the data above ? 12?\n  or \"(2)\"?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:24]:\n  yes, 12\n  you\'re so smart^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:25]:\n  oh, ~ not like you!!!\n  your explanation was so great!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:25]:\n  you can draw the picture using gnuplot\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:25]:\n  great! I like that! ^^\n  ah, could I ask you the meaning of \'(2)\'\n  ?\n  just besides the number \'12\'\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:26]:\n  (2) means num of late transaction \n  unwanted emotions... \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:26]:\n  hahaha \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:26]:\n  the 12 includes the(2)\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:26]:\n  oh!\n  is there any criterion or threshold value to determine the \'late transaction\'?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:27]:\n  yes, sure\n  in the tool, they are:\n  #define RTIME_NEWORD   5\n#define RTIME_PAYMENT  5\n#define RTIME_ORDSTAT  5\n#define RTIME_DELIVERY 80\n#define RTIME_SLEV     20\n\n  different kinds of transaction has different thresholds\n  miniseconds\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:29]:\n  oh, now its clear!\n  it may determined by the \'convention\', that , \"in general, user feels uncomfortable when the response time is over this threshold value - so WE decide the transaction over this value as \'late response\' \"\n  is it right understanding?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:31]:\n  yse, you are so right!\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:31]:\n  Oh, thank you!!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:31]:\n  and the tpcc standard defines these, so we needn\'t change them\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:32]:\n  and rt90 must mean \'90% percentile response time\', and max_rt means \'latest response time\n  \' \n  right?\n  Got it!!! ^^ (no need to touch this value)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:32]:\n  yes^^\n  you are so smart~~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:32]:\n  Oh, you stole my word to you\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:33]:\n  in fact, in the code, rt90 actually is 99% percentile response time\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:33]:\n  oh, I see!\n  very nice and exactness of you!\n  ^^\n  thank you very very much! ^^ Xie-Xie, Jinjin!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:34]:\n  you\'re welcome \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:34]:\n  hahaha, and, then,~\n  If you need any help from me regarding using that steady-script, please feel free to contact me!!! anytime!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:35]:\n  btw, since the pecentage of different kinds of transactions are standard, so we just care about the new-order\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:36]:\n  oh, is that because of new-order is the starting point of new transaction?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:38]:\n  good question! I never thought of that\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:38]:\n  Oh, just out of curiosity ^_^;;;;;\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:39]:\n  it may be because the standard enforce that the pecentage of Payment>=43%, order-status>=4%, delivery>=4%, stock-level>=4%, and the others are new-order\n  you can check the end of the output data, there should be sth like:\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:41]:\n   [transaction percentage]\n        Payment: 43.48% (>=43.0%) [OK]\n   Order-Status: 4.35% (>= 4.0%) [OK]\n       Delivery: 4.35% (>= 4.0%) [OK]\n    Stock-Level: 4.35% (>= 4.0%) [OK]\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:41]:\n  Oh, that means New_order takes the 45% of whole transaction, so it is the most dominant type of transaction, \n  ah, maybe under 45% of transaction, New Order~\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  yes\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  ok~ I see ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:43]:\n  great!\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:43]:\n  I\'ll update to you if any progress from my side ^^\n  see you soon, again!!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:43]:\n  thank you!\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:43]:\n  thank you very much!! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:43]:\n  CU\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:43]:\n  CU ^^\n</pre>\n\n== ## bNote-2013-12-16 ==\n\n=== FIO test suites ===\n\n==== bsc.x9.bmt.fio.run_fio.sh ====\n <pre>\n</pre>\n\n\n==== bsc.x9.bmt.fio.gen_r_input.sh ====\n <pre>\n</pre>\n\n== ## bNote-2013-12-13 ==\n\n=== NVMe IO stack (advanced version created by Samsung) ===\n\n==== nvme.h ====\n\n===== nvme.h (S version) =====\n\n <pre>\nblusjune@buddy-guy:.files %1$ cat samsung_orig.nvme.h.asc \n-----BEGIN PGP MESSAGE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\nComment: Brian M. JUNG <brian.m.jung@gmail.com> Fri Dec 13 19:41:46 KST 2013\n\n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\nK3Wai1bUbw==\n=/70T\n-----END PGP MESSAGE-----\n\n</pre>\n\n===== include/linux/nvme.h (mainline kernel 3.13.0-rc2 version) =====\n <pre>\n#ifndef _LINUX_NVME_H\n#define _LINUX_NVME_H\n\n#endif /* _LINUX_NVME_H */\n</pre>\n\n\n* source code (include/linux/nvme.h)\n <pre>\nroot@buddy-guy:nvme_src_brian %1# cat /tmp/include_linux_nvme.h.asc\n-----BEGIN PGP MESSAGE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\nComment: Brian M. JUNG <brian.m.jung@gmail.com> Fri Dec 13 19:50:18 KST 2013\n\n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\n=o3yx\n-----END PGP MESSAGE-----\n</pre>\n\n===== include/uapi/linux/nvme.h (mainline kernel 3.13.0-rc2 version) =====\n\n: \'UAPI\' in the path \'include/uapi/linux/nvme.h\' means user side API which kernel exports for user application\n\n <pre>\n#ifndef _UAPI_LINUX_NVME_H\n#ifndef _UAPI_LINUX_NVME_H\n\n#ifndef /* _UAPI_LINUX_NVME_H */\n</pre>\n\n\n\n\n <pre>\nroot@buddy-guy:nvme_src_brian %1# cat /tmp/include_uapi_linux_nvme.h.asc\n-----BEGIN PGP MESSAGE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\nComment: Brian M. JUNG <brian.m.jung@gmail.com> Fri Dec 13 19:50:36 KST 2013\n\n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\n=1Cxo\n-----END PGP MESSAGE-----\n\n</pre>\n\n==== nvme-core.c ====\n\n <pre>\nblusjune@buddy-guy:block %1$ cat /tmp/nvme-core.c.asc \n-----BEGIN PGP MESSAGE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\nComment: Brian M. JUNG <brian.m.jung@gmail.com> Fri Dec 13 21:29:30 KST 2013\n\n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\neKfTLCLdvGR6d+ucWNMSvTDt\n=87Zh\n-----END PGP MESSAGE-----\n</pre>\n\n==== nvme-scsi.c ====\n\n <pre>\nblusjune@buddy-guy:block %1$ cat /tmp/nvme-scsi.c.asc\n-----BEGIN PGP MESSAGE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\nComment: Brian M. JUNG <brian.m.jung@gmail.com> Fri Dec 13 21:30:41 KST 2013\n\n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\naeAFFMDo\n=33/2\n-----END PGP MESSAGE-----\n</pre>\n\n== ## bNote-2013-12-12 ==\n\n=== MySQL handling ===\n\n* mysql> show status like \'innodb_%\'\n\n <pre>\nmysql> show status like \'innodb_%\';\n+---------------------------------------+---------+\n| Variable_name                         | Value   |\n+---------------------------------------+---------+\n| Innodb_buffer_pool_pages_data         | 389     |\n| Innodb_buffer_pool_bytes_data         | 6373376 |\n| Innodb_buffer_pool_pages_dirty        | 0       |\n| Innodb_buffer_pool_bytes_dirty        | 0       |\n| Innodb_buffer_pool_pages_flushed      | 0       |\n| Innodb_buffer_pool_pages_free         | 5119611 |\n| Innodb_buffer_pool_pages_misc         | 0       |\n| Innodb_buffer_pool_pages_total        | 5120000 |\n| Innodb_buffer_pool_read_ahead_rnd     | 0       |\n| Innodb_buffer_pool_read_ahead         | 0       |\n| Innodb_buffer_pool_read_ahead_evicted | 0       |\n| Innodb_buffer_pool_read_requests      | 5600    |\n| Innodb_buffer_pool_reads              | 390     |\n| Innodb_buffer_pool_wait_free          | 0       |\n| Innodb_buffer_pool_write_requests     | 0       |\n| Innodb_data_fsyncs                    | 3       |\n| Innodb_data_pending_fsyncs            | 0       |\n...\n</pre>\n\n== ## bNote-2013-12-11 ==\n\n=== Xian SSD Benchmark Test ===\n\n\n==== Environment: MySQL configuration (Brian\'s Dell PowerEdge R720) ====\n\n <pre>\nroot@grant-green:mysql %1# cat my.cnf \n#\n# The MySQL database server configuration file.\n#\n# You can copy this to one of:\n# - \"/etc/mysql/my.cnf\" to set global options,\n# - \"~/.my.cnf\" to set user-specific options.\n# \n# One can use all long options that the program supports.\n# Run program with --help to get a list of available options and with\n# --print-defaults to see which it would actually understand and use.\n#\n# For explanations see\n# http://dev.mysql.com/doc/mysql/en/server-system-variables.html\n\n# This will be passed to all mysql clients\n# It has been reported that passwords should be enclosed with ticks/quotes\n# escpecially if they contain \"#\" chars...\n# Remember to edit /etc/mysql/debian.cnf when changing the socket location.\n[client]\nport		= 3306\nsocket		= /var/run/mysqld/mysqld.sock\n\n# Here is entries for some specific programs\n# The following values assume you have at least 32M ram\n\n# This was formally known as [safe_mysqld]. Both versions are currently parsed.\n[mysqld_safe]\nsocket		= /var/run/mysqld/mysqld.sock\nnice		= 0\n\n[mysqld]\n#\n# * Basic Settings\n#\nuser		= mysql\npid-file	= /var/run/mysqld/mysqld.pid\nsocket		= /var/run/mysqld/mysqld.sock\nport		= 3306\nbasedir		= /usr\n#datadir		= /var/lib/mysql\ndatadir		= /var/lib/mysql/db_on_ssd\ntmpdir		= /tmp\nlc-messages-dir	= /usr/share/mysql\nskip-external-locking\n\n\n#\n# Instead of skip-networking the default is now to listen only on\n# localhost which is more compatible and is not less secure.\n#bind-address		= 127.0.0.1\n#bind-address		= 10.123.1.6\nbind-address		= 0.0.0.0\n\n#\n# * Fine Tuning\n#\nkey_buffer		= 16M\nmax_allowed_packet	= 16M\nthread_stack		= 192K\nthread_cache_size       = 8\n# This replaces the startup script and checks MyISAM tables if needed\n# the first time they are touched\nmyisam-recover         = BACKUP\n#max_connections        = 100\n#table_cache            = 64\n#thread_concurrency     = 10\n#\n# * Query Cache Configuration\n#\nquery_cache_limit	= 1M\n#query_cache_size        = 16M\n#\n# * Logging and Replication\n#\n# Both location gets rotated by the cronjob.\n# Be aware that this log type is a performance killer.\n# As of 5.1 you can enable the log at runtime!\n#general_log_file        = /var/log/mysql/mysql.log\n#general_log             = 1\n#\n# Error log - should be very few entries.\n#\nlog_error = /var/log/mysql/error.log\n#\n# Here you can see queries with especially long duration\n#log_slow_queries	= /var/log/mysql/mysql-slow.log\n#long_query_time = 2\n#log-queries-not-using-indexes\n#\n# The following can be used as easy to replay backup logs or for replication.\n# note: if you are setting up a replication slave, see README.Debian about\n#       other settings you may need to change.\n#server-id		= 1\n#log_bin			= /var/log/mysql/mysql-bin.log\nexpire_logs_days	= 10\nmax_binlog_size         = 100M\n#binlog_do_db		= include_database_name\n#binlog_ignore_db	= include_database_name\n#\n# * InnoDB\n#\n# InnoDB is enabled by default with a 10MB datafile in /var/lib/mysql/.\n# Read the manual for more InnoDB related options. There are many!\n#\n# * Security Features\n#\n# Read the manual, too, if you want chroot!\n# chroot = /var/lib/mysql/\n#\n# For generating SSL certificates I recommend the OpenSSL GUI \"tinyca\".\n#\n# ssl-ca=/etc/mysql/cacert.pem\n# ssl-cert=/etc/mysql/server-cert.pem\n# ssl-key=/etc/mysql/server-key.pem\n\n\n##\n## tpcc-mysql benchmark { # 2013-12-11 # blusjune\n##\n\nskip-grant-tables\nskip-name-resolve\nmax_connections = 3000\nquery_cache_size = 0\ninnodb_file_per_table # separate files per table # blusjune\n\ninnodb_buffer_pool_size = 80000M\ninnodb_thread_concurrency = 32\ninnodb_spin_wait_delay = 30 \ninnodb_sync_spin_loops = 100\ninnodb_max_dirty_pages_pct = 90\ninnodb_lock_wait_timeout = 120\ninnodb_doublewrite = 0\ninnodb_flush_method = O_DIRECT\n#innodb_log_buffer_size = 256M\n#innodb_log_file_size = 8192M\n#innodb_log_block_size = 4096\ninnodb_write_io_threads = 16\ninnodb_read_io_threads = 16\ninnodb_io_capacity = 20000\ninnodb_file_format = barracuda\n\n##\n## } tpcc-mysql benchmark\n##\n\n\n[mysqldump]\nquick\nquote-names\nmax_allowed_packet	= 16M\n\n[mysql]\n#no-auto-rehash	# faster start of mysql but no tab completition\n\n[isamchk]\nkey_buffer		= 16M\n\n#\n# * IMPORTANT: Additional settings that can override those from this file!\n#   The files must end with \'.cnf\', otherwise they\'ll be ignored.\n#\n!includedir /etc/mysql/conf.d/\n\n</pre>\n\n==== Environment (from Jinjin) ====\n\n <pre>\nHardware Server	HP DL380p Gen8\nCPU: 2xIntel XeonE5-2665@2.40GHz;\nMemory: 128GB\nStorage	Seagate HDD, 1TB, 7200rpm\nIntel SSD S3500, 480G\nSamsung SSD SM843Tns, 960G\n\nSoftware\nOS Centos 6.4 (2.6.32-358.el6.x86_64)\nI/O Scheduler: CFQ/Noop\nFile system	EXT4/XFS\nMySQL DB	Percona Server 5.6.14\n\nConfiguration:\nskip-grant-tables\ninnodb_buffer_pool_size = 80000M\ninnodb_thread_concurrency = 32 \ninnodb_spin_wait_delay = 30 \ninnodb_sync_spin_loops = 100\ninnodb_max_dirty_pages_pct = 90\ninnodb_lock_wait_timeout = 120\ninnodb_doublewrite = 0\ninnodb_flush_method = O_DIRECT\ninnodb_log_buffer_size = 256M\ninnodb_log_file_size = 8192M\ninnodb_log_block_size=4096\ninnodb_write_io_threads=16\ninnodb_read_io_threads=16\ninnodb_io_capacity=20000\ninnodb_file_format=barracuda\nmax_connections=3000\nquery_cache_size=0\nskip-name-resolve\n	tpcc-mysql	Revision 48. \nConfigurations\nThe CentOS is installed on HDD, filesystem is EXT4.\nThe Percona database is also installed on HDD, but the datadir is a directory on Samsung SSD.\nSamsung SSD SM843Tns 960GB is divided into two 480G partitions, XFS format. Only one partition is used for benchmarking, the other partition is fully written with unused data.\n\nPercona Server Installation\nResource: http://www.percona.com/downloads/Percona-Server-5.6/LATEST/RPM/rhel6/x86_64/\n\nInstall Step:\n1.Download Percona Server, client and shared rpm packages.\n2.Remove old mysql packages: \nyum –y remove mysql, mysql-server, mysql-libs-*.\n3.Install Percona shared, client, server packages:\n	rpm –ivhPercona-Server-shared-XXX.rpm\nrpm –ivhPercona-Server-client-XXX.rpm\nrpm –ivhPercona-Server-server-XXX.rpm\n4. Mysql secure installation: \nRun /usr/bin/mysql_secure_installation (default root user password is NULL)\n\nStart and Stop MySQL:\n	service mysql start/stop\n/etc/init.d/mysqlstart/stop\n\nLogin MySQL:\nmysql -uroot –p\n\nModify password:\nmysqladmin -uroot -p password\n\ntpcc-mysql installation\nResource:\nhttps://code.launchpad.net/~percona-dev/perconatools/tpcc-mysql\n\nInstall Step:\ncdsrc\nmake\n\nFAQ:\n1.	Can’t find header file\nexport C_INCLUDE_PATH=$MYSQL_HOME/include\n2.	Can’t find mysql_config\nexport PATH=$MYSQL_HOME/bin:$PATH\n3.	Can’t find mysql lib\nexport LD_LIBRARY_PATH=$MYSQL_HOME/lib\n\nLoad data:\n1.	Create database\nshell>mysqladmin create tpcc2500\nmysql> create database tpcc2500;\n2.	Create tables\nshell> mysql –uroot –p tpcc2500 <create_table.sql\n3.	Create indexes and FK\nshell> mysql –uroot –p tpcc2500 <add_fkey_idx.sql\n4.	Populate data (long time needed)\nsimple step:\nshell>./tpcc_loadlocalhost tpcc2500 root xxxx2500\nUsage:  tpcc_load [server] [DBname] [user] [pass] [warehouse]\nref. tpcc_load --help for all options\nload data in parallel (Recommanded)\nshell>./load.sh tpcc2500 2500\ncheck load.sh script, need to modify, add password\n\nStart benchmark:\n1.	Usage\ntpcc_start -h server_host -P port -d database_name -u mysql_user -p mysql_password -w warehouses -c connections -r warmup_time -l running_time -ireport_interval -f report_file -t trx_file\n2.	Example\n./tpcc_start -hlocalhost–dtpcc2500 -uroot -pxxxx–w2500 –c128 -r0 –l10800–i10\n\nBenchmarking parameters:\n2500 warehouses\n128 connections\nWarm up time: 0\nRunning time: 10800\nReport interval: 10 \n</pre>\n\n=== SSD initialization ===\n\n==== hdparm --security-set-pass ====\n\n <pre>\nroot@buddy-guy:fio_src %1# lsscsi\n[0:0:0:0]    cd/dvd  TSSTcorp DVD-ROM TS-H353B SC01  /dev/sr0\n[1:0:0:0]    disk    ATA      SAMSUNG HD502IJ  1AA0  /dev/sda\n[2:0:0:0]    disk    ATA      SAMSUNG HD501LJ  CR10  /dev/sdb\n[3:0:0:0]    disk    ATA      SAMSUNG MZ7PC128 CXM0  /dev/sdc\nroot@buddy-guy:fio_src %1# mount | grep \'dev/sdc\'\nroot@buddy-guy:fio_src %1# mount | grep \'dev/sd\' \n/dev/sda1 on /boot type ext2 (rw)\nroot@buddy-guy:fio_src %1# time hdparm --security-set-pass brian /dev/sdc\nsecurity_password=\"brian\"\n\n/dev/sdc:\n Issuing SECURITY_SET_PASS command, password=\"brian\", user=user, mode=high\n\nreal	0m0.008s\nuser	0m0.000s\nsys	0m0.000s\nroot@buddy-guy:fio_src %1# fdisk /dev/sdc\n\nCommand (m for help): p\n\nDisk /dev/sdc: 128.0 GB, 128035676160 bytes\n30 heads, 63 sectors/track, 132312 cylinders, total 250069680 sectors\nUnits = sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisk identifier: 0x34e3afbc\n\n   Device Boot      Start         End      Blocks   Id  System\n/dev/sdc1            2048   250069679   125033816    5  Extended\n/dev/sdc5            4096   250069679   125032792   8e  Linux LVM\n\nCommand (m for help):   \n\n</pre>\n\n\n==== ATA secure erase ====\n\n* [http://www.manualslib.com/manual/490034/Dell-Poweredge-External-Media-System-1434.html?page=14 Intel 320 SSD ATA Instant Secure Erase Functionality]\n: Intel 320 SSDs support cryptography-based Instant ATA secure erase functionality. The Intel 320 SSD Instant ATA secure ease feature is non-TCG (Trusted Computing Group) based. It supports two modes of crypto secure erase:\n\n:* Normal secure erase—Clears the encryption keys and erases NAND\n:* Enhanced secure erase—Generates new keys and clears NAND.\n\n: The PERC solution only supports the \"crypto erase\" function on TCG-compliant Enterprise SED (Self Encrypting Drive)drives. When an Intel 320 drive is connected to a PERC, there is an incompatibility between PERC TCG method of crypto erase and Intel 320 supported non-TCG based ATA instant secure erase.\n: <span style=\"background:gold\">As a result, the instant secure erase functionality can\'t be used with PERC based solution.</span> The only way to run instant ATA secure ease and use Intel 320 drive secure wiping feature is to connect the drives directly into the motherboard chipset\'s ATA port and issue secure erase command. Intel provides a free utility (Intel SSDToolbox) to instant secure erase the drive, which you can download from www.intel.com/go/ssdtoolbox\n\n==== Talk with JinJin ====\n <pre>\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:42]:\n  Hi, Jinjin  \n  My name is M.J. JUNG (brian.m.jung@samsung.com)\n  introduced by M.S. Kwon in recent mails\n  ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:42]:\n  Hi~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:42]:\n  Ni Hao~ ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:43]:\n  Can I call you Brian or MyungJune?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:43]:\n  Oh, Brian is preferred ! ^^\n  just call me brian  \n  can I call you JinJin?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:43]:\n  yes, sure\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:43]:\n  oh, great ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:43]:\n   \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:43]:\n  I\'ve got your mail regarding the benchmark ~\n  and could I ask you something on that issue? \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:44]:\n  of course\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:44]:\n  oh, thank you  \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:44]:\n  you\'re welcome \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:44]:\n  wow ^___^ \n  is there any reason to use percona version of mysql? ^^\n  actually my current system is Ubuntu running MySQL (original)\n  so, if I should make a test bed \n  exactly same as yours ~\n  I should remove my old DB (mysql) ^^;;;;\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:46]:\n  so special reason, mysql is also Ok, I think, but I\'m not sure whether you can reproduce it with mysql\n  no special reason\n  sorry, typo\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:46]:\n  oh, got your point!\n  (no need to say sorry  ^^ I\'m the king of typo generation hahah)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:47]:\n  haha, so nice of you\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:47]:\n  wow ^^ it\'s great for me to talk to you too!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:47]:\n  i think you can try it on your system first\n  if you can\'t reproduce, then use percona \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:48]:\n  oh, great! and then if I could not generate that same situation on my old system, then I SHOULD change my system, ^^\n  GOT IT!\n   \n  and one more thing to ask !\n  ^^\n  what about the Intel case? \n  I\'ve seen that the red line\n  in your graph~\n  Could you see the same type of red line \n  every time you tested?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:50]:\n  I just test once with Intel case\n  because of time limit\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:50]:\n  ok~ got it ^^\n  then, I can repeat the test for intel case to make it more complete test~ can this help you?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:51]:\n  I think intel case is ok since it\'s stable after one hour test\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:51]:\n  oh,\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:51]:\n  sure\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:51]:\n  did you make the SSD (intel, Samsung) in the  steady-state before each test?\n  (great ^^)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:52]:\n  I\'m not sure \n  i just remove all data on the disk\n  didn\'t erase \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:52]:\n  a-ha! ^^\n  got some point!  \n  we usually\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:52]:\n  maybe that\'s the reason\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:52]:\n  make the SSDs be in the \'steady-state\' before each test, \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:53]:\n  yes, i learn it today\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:53]:\n  because \'steady-state\' makes the performance of SSD be in the stable state\n  Oh great  ^^\n  You may find good article regarding \'steady state\' \n  in the SNIA\n  site\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:54]:\n  thank you! \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:54]:\n  http://www.snia.org/sites/default/education/tutorials/2011/fall/SolidState/EstherSpanjer_The_Why_How_SSD_Performance_Benchmarking.pdf\n  (oh, you\'re quite welcome)\n  oh, this is more updated version.\n  http://www.snia.org/sites/default/files/SNIASSSI.SSDPerformance-APrimer2013.pdf\n  And, maybe HJ Lim send you the script\n  to perform an operation to make \'steady-state\' SSD\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:55]:\n  thank you! I can open it \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:55]:\n  great!^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:56]:\n  yes, he did!\n  I also have one question\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:56]:\n  Please let me know any question or let me get your comments regarding this collaboration - Benchmark test -\n  ok, i\'m ready!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:56]:\n  should I use \"security erase\" or \"Enhanced security erase\" ?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:56]:\n  ah, physically, you mean?\n  maybe not, only if you perform the script HJ Lim gave. \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:57]:\n  in HJ Lim\'s guide, there are two kinds of security erase\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:57]:\n  to be sure, Could you send me the copy of the script that HJ Lim gave to you?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:57]:\n  I don\'t know which one to use\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:58]:\n  Let me check and then answer to you \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 3:58]:\n  ok, i will send to you\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 3:58]:\n  ok! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:00]:\n  I have sent it to you\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:00]:\n  Ok, I\'ll check it right now ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:01]:\n   \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:04]:\n  Oh, this way with \'hdparm\', let you have the SSD of clean state (at the virgin state when SSD is manufactured)\n  so, it is preferred  \n  If you have any problem with this, please let me know  \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:05]:\n  so what\'s the difference of steady state and virgin state?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:06]:\n  oh, great question!\n  usually state state means:\n  very bad condition to SSD\n  - because we introduce very harsh IOs to SSD to make the performance of SSD stable (sequential writes and then random writes to SSD for a long time)\n  but virgin state itself can give us the good performance (reportedly)\n  So, I proper to proceed like this.\n  firstly, make the SSD at the virgin state (manufactured state)\n  and then, make the SSD be in the steady-state (by introducing some harsh IO requests - there are well-known script to do this)\n  --- Regarding this way (two steps)\n  , I\'ll check the preferred script to use in this benchmark\n  and then let you know  \n  (also send it to you, if required)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:11]:\n  thank you! your answer is so good!\n  I got your point\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:11]:\n  oh, it\'s my honour to hear that from you\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:11]:\n  so do you have some script to do harsh IO requests?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:12]:\n  yes, my version ^^\n  using FIO\n  you know FIO?\n  (Flexible IO benchmark program)\n  http://freecode.com/projects/fio\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:12]:\n  yes, i have heard of it, but never use it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:13]:\n  But i\'m not sure that script is enough for our benchmark, so I SHOULD check it out to MS KWON.\n  wait a second, please. let me check   I\'ll be back. \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:14]:\n  ok, thank you. I will wait for you...\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:18]:\n  Oh, Jinjin, Long time no see! ^^\n  I\'m back! ^^\n  with a clear answer for you!\n  Ready to talk? ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:19]:\n  haha^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:19]:\n  seems you are ready ^^\n  ok~\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:20]:\n  yes, i\'m ready^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:20]:\n  ^^ yes!!!\n  We will go with Two cases!\n  first case is:\n  using only virgin state. (good for performance, maybe)\n  second case is:\n  make virgin state and then also dirtify script to make it steady state ^^\n  (this is preferred way that SNIA recommends - to make the performance test fair)\n  ----- was my explanation clear ?\n  if not, please ask ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:23]:\n  yes, very clear!\n  I got your point\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:23]:\n  oh, you \'re super smart!!!!!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:23]:\n  thank you !\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:24]:\n  thank you !!! ^___^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:24]:\n  haha^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:24]:\n  (actually, my English is not good~ so I\'ve worried that my talk was unclear -_-; \n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:24]:\n  it\'s very happy to talk with you!!!\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:24]:\n  oh~ great for me! TOOO!!!!\n  let\'s have a talk from time to time, any time welcomed!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:25]:\n  I think your english is very good! your type much faster than me\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:25]:\n  oh~~~~~~~~~ ^^;;;\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:25]:\n  sure\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:26]:\n  sure, great!!! i\'ll get back to you when I get some progress! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:26]:\n  ok, thank you again for your help!!\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:26]:\n  oh, you\'re quite welcom!\n  my pleasure!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:27]:\n  any time any questions are welcomed!!!\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 4:27]:\n  wow, great!!!!^^\n  Ok, CU!! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 4:27]:\n  CU!\n   \n</pre>\n\n\n <pre>\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:40]:\n  Hi, Jinjin!!! ^^\n  any problem to use the FIO script?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:41]:\n  morning, Brian\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  wow~ Good morning, Jinjin!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  I haven\'t tried it yet\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  oh, no problem~ ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  yesterday, we tried the hdparm\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  if you need any help regarding that, please feel free to tell me ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  seems it doesn\'t work\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:42]:\n  ooops~\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:42]:\n  we are still trying to fix it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:43]:\n  i\'ve also heard sometimes it does not work on some types of SSD\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:43]:\n  there will be some errors when we use hdparm -I /dev/sdc\n  /dev/sdc:\nSG_IO: bad/missing sense data, sb[]:  70 00 05 00 00 00 00 0a 00 00 00 00 20 00                                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  do you have any idea about it?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:44]:\n  oh, did you check the capability with \'hdparm -I /dev/sdc\'\n  ?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:44]:\n  yes\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:44]:\n  large i option\n  oh~\n  what about the report from that command?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:45]:\n  [root@ds-me jinjin]# hdparm -I /dev/sdc\n\n/dev/sdc:\nSG_IO: bad/missing sense data, sb[]:  70 00 05 00 00 00 00 0a 00 00 00 00 20 00                                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n\nATA device, with non-removable media\nStandards:\n        Likely used: 1\nConfiguration:\n        Logical         max     current\n        cylinders       0       0\n        heads           0       0\n        sectors/track   0       0\n        --\n        Logical/Physical Sector size:           512 bytes\n        device size with M = 1024*1024:           0 MBytes\n        device size with M = 1000*1000:           0 MBytes\n        cache/buffer size  = unknown\nCapabilities:\n        IORDY not likely\n        Cannot perform double-word IO\n        R/W multiple sector transfer: not supported\n        DMA: not supported\n        PIO: pio0\n  that\'s the whole output, can you see it?\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:46]:\n  oh, seems there\'s no section \'Security\'\n  you might also refer to the site http://tinyapps.org/docs/wipe_drives_hdparm.html\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:47]:\n  ok, thank you! i\'ll read it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:47]:\n  Ok, hope to hear good news from you ^__^\n  ah~\n  one more question ^^\n  Could I ask you how much is the DB file size (in GB) when population is completed?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:49]:\n  sure^^\n  if you populate 2500 warehouses\n  it\'s about 247GB\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:49]:\n  oh~ !!!\n  the place of the 9 DB files must be under /var/lib/mysql/tpcc...\n  right?\n  and one problematic thing for my case is, currently we have no such a super machine with over 128GB DRAM ~ -_-;;\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:52]:\n  yes, the default datadir path is /var/lib/mysql/tpcc...\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:52]:\n  so I could not configure db buffer pool size as 80GB yet \n  Ok, got it!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:53]:\n  you may need to store the tpcc2500 on the SSD for testing\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:53]:\n  you\'re right!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:53]:\n  that\'s ok, just set the db buffer pool size to about 70%~80% of your memory size\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:54]:\n  ok~ good advice! ^^\n  did you configure the place to store TPCC DB in /etc/mysql/my.cnf?\n  or, just using load.sh ?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:54]:\n  yes, you can using /etc/mysql/my.cnf\n  just write the following in my.cnf\n\n [mysqld]\ndatadir=/your/path\n\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:56]:\n  thank you so much, Jinjin! ^^\n  Ok, CU soon! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:57]:\n  you are welcome~~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:57]:\n  hahahah ^^ so nice of you!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오전 10:57]:\n  any questions, just let me know^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오전 10:58]:\n  oh, great!!!! thank you Jinjin, You Too!!!! (anytime welcomed!) ^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:49]:\n  hi, Jinjin~\n  ^^\n  some small update for you~\n  regarding secure erase failure you mentioned\n  reply anytime when you\'re ready to talk ^__^\n  (maybe you already found this info.)\n  http://www.manualslib.com/manual/490034/Dell-Poweredge-External-Media-System-1434.html?page=14\n  Please see the section \"Intel 320 SSD ATA Instant Secure Erase Functionality\"\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:52]:\n  Hi, Brian~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:52]:\n  Wow! Jinjin!\n  ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:52]:\n  thanks for the info\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:52]:\n  oh, you\'re welcome!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:52]:\n  our server is HP, not Dell\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:53]:\n  oh, I see!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:53]:\n  I\'m still looking for servier configuration\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:53]:\n  what about the HW RAID on your system?\n  do you use HW RAID to access that SSD?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:53]:\n  I think it\'s the server\'s smart array card \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:53]:\n  oh!\n  that\'s the point! ^^\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:54]:\n  so now i\'m looking for how to change it\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:54]:\n  maybe, that means, your application access to your SSDs through that \"smart array card (HW RAID)\" ~\n  right?\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:54]:\n  yes\n  we need to let app access ssd directly\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:55]:\n  yes!!! exactly ^^\n  If your HP system does not allow that bypassing,\n  then, we can try the Plan B.\n  Plan B means, \n  maybe that RAID card controlling screen (during boot? ) support direct Secure Erase (or something like that)\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:56]:\n  sorry, brian, i have an urgent issue, i will be back in 15 min\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:56]:\n  ok!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 5:56]:\n  CU soon\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 5:56]:\n  no prob!\n  CU soon!!!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 6:23]:\n  Hi~ brian\n  i\'m back~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 6:24]:\n  Oh~~ ^^ Welcome back!\n‎‎Jinjin Li(Engineer/Samsung Electronics)‎‎ [오후 6:25]:\n  yes, the plan B can be supported, I see in the guide they have a tool to do secure erase druing boot\n  but I haven\'t tried it\n  it\'s not convienent because we can\'t use script to do it\n  i\'ll try to find the way to bypass raid\n  thank you agian for your advice^^\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 6:46]:\n  Sorry Jinjin for no response (been away from my desk), ^^;;;;  Ok, I\'ll also check another way to work around  \n  Thank you for your kind explanation ^__^, and let\'s talk again tomorrow~  \n</pre>\n\n== ## bNote-2013-12-10 ==\n\n=== NVMe Tutorial ===\n\n: [http://www.flashmemorysummit.com/English/Collaterals/Proceedings/2013/20130812_PreConfD_Marks.pdf By Kevin Marks, Dell, Inc. Flash Memory Summit 2013 Santa Clara, CA]\n\n\n* NVMe defines an optimized queuing interface, command set, feature set for PCIe SSDs\n\n\n* NVMe release timeline\n:- NVMe 1.0 release (2011-03-01)\n::- Queuing interface\n::- NVM command set, admin command set\n::- End-to-end protection (DIF/DIX), security\n::- Physical region pages (PRPs)\n:- NVMe 1.1 release (2012-10-11)\n::- General Scatter/Gather Lists (SGLs)\n::- Multi-path I/O & namespace sharing\n::- Reservations\n::- Autonomous power transitions during idle\n\n\n* advanced points of NVMe relative to AHCI\n:- Remove uncacheable reads from command issue/completion\n::- ??? uncacheable reads? why so bad to remove?\n:- Minimize MIMO writes in command issue/completion path\n::- ??? MIMO? why bad to minimize?\n:- Support for deep command queues and to simplify command decoding and processing\n::- ??? what method to simplify?\n:- Support MSI-X / flexible interrupt aggregation\n::- ??? what is flexible interrupt aggregation? is it different from MSI-X?\n:- Support for many core systems\n::- ??? concretely how?\n:- Support enterprise features\n::- ??? exactly what?\n:- Comprehensive statistics / health status reporting / robust error reporting & handling\n::- ???\n\n\n* NVMe usage model\n:- Server caching\n::- used to reduce memory footprint\n::- for temporary data\n:- Server storage\n::- for persistent data\n::- Redundant (i.e., RAID\'ed)\n::- commonly used as tier-0 storage\n:- Client storage\n::- used for boot/os-partition/HDD-cache\n::- non-redundant\n::- power optimized\n:- External storage\n::- used for metadata or data\n::- multi-ported device\n::- redundancy based on usage\n\n\n* NVMe queues\n:- NVMe uses circular queues to pass messages (e.g., commands and command completion notifications.)\n:- The queues may be located anywhere in PCIe memory\n::- Typically queues are located in host memory\n::- Queues may consist of a contiguous block of physical memory\n::  or optionally a non-contiguous set of physical memory pages (defined by a PRP List)\n:- A Queue consists of set of fixed sized elements\n:- Tail\n::- Points to next free element\n::- If an element is added to the element pointed to by the tail,\n::  the tail is incremented to point to next free element taking wrapping into consideration\n:- Head\n::- Points to next entry to be pulled off, if queue is not empty\n::- If an element is removed from the element pointed to by the head,\n::  the head is incremented to point to the next element taking wrapping into consideration\n:- Queue Size (Usable)\n::- Number of entries in the queue - 1\n::- Minimum size is 2, Maximum is ~ 64K for IO  Queues and 4K for Admin Queue\n:- Queue Empty\n::- Head == Tail\n:- Queue Full\n::- Head == Tail + 1 (mod # of queue entries)\n\n\n* Types of queues\n:- Admin queue for admin command set\n::- One per NVMe controller with up to 4K elements per queue\n::- Used to configure IO queues and controller/feature management\n:- IO queues for IO command sets (e.g., NVM command set)\n::- Up to 64K queues per NVMe controller with up to 64K elements per queue\n::- Used to submit/complete IO commands\n:- , where each type of queue (admin queue, IO queues) has\n::- Submission queue (SQ)\n:::- Queues messages from host to controller\n:::- Used to submit commands\n:::- Identified by SQ ID\n::- Completion queue (CQ)\n:::- Queues messages from controller to host\n:::- Used to post command completions\n:::- Identified by CQ ID\n:::- May have an independent MSI-X interrupt per completion queue\n: /* NVMe queues are messaging queues, not command queues -- What does this mean? */\n\n\n\n* Scalable queuing interface\n:- Enables NUMA optimized drivers\n::- Per core: one or more SQ, one CQ, and one MSI-X interrupt\n::- High performance and low latency command issue\n::- No locking between cores\n:- Up to ~2^32 outstanding commands\n::- Support for up to ~64K IO submission and completion queues\n::- Each queue supports up to ~64K outstanding commands\n\n\n\n* Command arbitration\n:- All controllers support round robin (RR) arbitration\n::- RR{ASQ, SQ, SQ, ..., SQ}\n:- An NVMe controller may support weighted round robin (WRR) with urgent priority class arbitration\n::- Priority{Strict_Priority_1, Strict_Priority_2, Strict_Priority_3}\n:::- Strict_Priority_1{ASQ}\n:::- Strict_Priority_2{RR{SQ.urgent, SQ.urgent}}\n:::- Strict_Priority_3{WRR{\n::::- Weight_High.RR{SQ.high, SQ.high, SQ.high},\n::::- Weight_Medium.RR{SQ.medium, SQ.medium, SQ.medium},\n::::- Weight_Low.RR{SQ.low, SQ.low, SQ.low}\n::: }}\n\n\n\n* Arbitration primitives\n:- Priority Arb. Vs. WRR Arb.\n::- Example above shown with an arbitration burst of no limit\n::- NVMe supports an arbitration burst of 1, 2, 4, 8, 16, 32, 64 and no limit\n::- NVMe supports 8-bit WRR weights\n\n\n\n* NVMe controller register map\n{| class=\"wikitable sortable\"\n|-\n| Start || End || Symbol || Description\n|-\n| 00h || 07h || CAP || Controller Capabilities\n|-\n|}\n\n\n\n* Controller initialization\n\n\n\n* SQ element with PRBs (64B)\n\n\n\n* Physical Region Pages (PRBs)\n\n\n\n* Example: PRP, PRP list\n\n\n\n* SQ element with SGLs (64B)\n\n\n\n* Scatter Gather List (SGL)\n\n\n\n* CQ element (16B)\n\n\n\n* Phase tag operation\n\n\n\n* NVMe command sets\n:- Command set = { Admin Command Set, IO Command Set = { NVM Cmd Set, Rsvd #1, Rsvd #2, Rsvd #3 } }\n\n\n\n* Admin commands\n{| class=\"wikitable sortable\"\n|-\n| Category || Command || Required/Optional\n|-\n| rowspan=\"4\" | Queue Management\n| Create IO Submission Queue\n| Required\n|-\n| Delete IO Submission Queue\n| Required\n|-\n| Create IO Completion Queue\n| Required\n|-\n| Delete IO Completion Queue\n| Required\n|-\n| rowspan=\"3\" | Configuration\n| Identify\n| Required\n|-\n| Get Features\n| Required\n|-\n| Set Features\n| Required\n|-\n| rowspan=\"2\" | Status Reporting\n| Get Log Pages\n| Required\n|-\n| Asynchronous Event Request\n| Required\n|-\n| Abort Command\n| Abort\n| Required\n|-\n| rowspan=\"2\" | Firmware Update/Management\n| Firmware Image Download\n| Optional\n|-\n| Firmware Activate\n| Optional\n|-\n| IO Command Set Specific\n| IO Command Set Specific Commands\n| Optional\n|-\n| Vendor Specific\n| Vendor Specific Commands\n| Optional\n|-\n|}\n: All admin commands use PRPs\n\n\n\n* Create IO SQ\n:- Queue Priority (OPRIO)\n:- Physically Contiguous (PC)\n\n\n\n* Create IO CQ\n:- Interrupt Enable (IEN)\n:- Physically Contiguous (PC)\n\n\n\n* Identify\n\n\n\n* Active namespace reporting\n\n\n\n* Identify controller data structure\n\n== ## bNote-2013-12-09 ==\n\n\n\n=== NVMe IO stack analysis ===\n\n\n==== nvme source code ====\n\n\n <pre>\n\nblusjune@buddy-guy:~ %1$ cat /x/t/nvme_iostack_analysis.c\n\n\nnvme_probe(struct pci_dev *pdev, const struct pci_device_id *id)\n{\n        struct nvme_dev * dev;\n        /*\n         * memory space will be allocated to \'dev\'\n         * and then\n         * \'dev->entry\' will have memory space\n         *      proportional to the \'num_possible_cpus()\'\n         * \'dev->queues\' will have memory space\n         *      proportional to the \'num_possible_cpus() + 1\' <- why \'+1\' here?\n         * , where num_possible_cpus() means\n         *      number of cpus populatable (fixed at boot time),\n         *      i.e., set of CPU id\'s possible to be plugged in\n         *      at anytime during the life of system boot\n         */\n\n\n        // ...\n\n\n        dev->pci_dev = pdev; // pdev argument will be assigned to \'dev->pci_dev\'\n\n\n        result = nvme_set_instance(dev);\n        /*\n         * allocate new integer ID to dev->instance\n         *\n         * Internally, this uses Idr (integer ID management)\n         * , where Idr is a set of library functions\n         *      for the management of small integer ID numbers.\n         *      In essence, an idr object can be thought of\n         *      as a sparse array mapping integer IDs onto arbitrary pointers,\n         *      with a \"get me an available entry\" function as well.\n         *\n         * URL: http://lwn.net/Articles/103209/\n         */\n\n\n        result = nvme_setup_prp_pools(dev);\n        /*\n         * dev->prp_page_pool = dma_pool_create(\"prp list page\",\n         *      &dev->pci_dev->dev, PAGE_SIZE, PAGE_SIZE, 0)\n         *\n         * and the comment says that there is an optimization\n         * for I/Os between 4k and 128k (is it still 128k? not 256k?)\n         * by the following code:\n         * dev->prp_small_pool = dma_pool_create(\"prp list 256\",\n         *      &dev->pci_dev->dev, 256, 256, 0);\n         *\n         * PRPs (Physical Region Pages) contains\n         * the 64-bit physical memory page address.\n         * The lower bits (n:2) of this field indicate\n         * the offset within the memory page\n         * n is defined by the memory page size (CC.MPS)\n         *\n         * PRP list contains a list of PRPs with generally no offsets\n         * which means non-contiguous set of physical memory pages\n         *\n         * mm/dmapool.c:dma_pool_create(const char * name, struct device *dev, sizt_t size, size_t align, size_t boundary)\n         *\n         */\n\n\n        result = nvme_dev_start(dev);\n        /*\n         * nvme_dev_start() {\n         *      nvme_dev_map(dev);\n         *      nvme_configure_admin_queue(dev);\n         *      list_add(&dev->node, &dev_list);\n         *      nvme_setup_io_queues(dev);\n         * }\n         */\n\n\n        result = nvme_dev_add(dev);\n\n\n}\n\n\ndrivers/block/nvme-core.c:nvme_setup_io_queues()\n{\n        (int) nr_io_queues = num_online_cpus();\n\n}\n\n</pre>\n\n\n <pre>\nroot@buddy-guy:src %1# cat /x/t/nvme_iostack_analysis.c \n\n\nnvme_probe(struct pci_dev *pdev, const struct pci_device_id *id)\n{\n	struct nvme_dev * dev;\n	/*\n	 * memory space will be allocated to \'dev\'\n	 * and then\n	 * \'dev->entry\' will have memory space\n	 * 	proportional to the \'num_possible_cpus()\'\n	 * \'dev->queues\' will have memory space\n	 *	proportional to the \'num_possible_cpus() + 1\' <- why \'+1\' here?\n	 * , where num_possible_cpus() means\n	 *	number of cpus populatable (fixed at boot time),\n	 *	i.e., set of CPU id\'s possible to be plugged in\n	 *	at anytime during the life of system boot\n	 */\n\n\n	// ...\n\n\n	dev->pci_dev = pdev; // pdev argument will be assigned to \'dev->pci_dev\'\n\n\n	result = nvme_set_instance(dev);\n	/*\n	 * allocate new integer ID to dev->instance\n	 *\n	 * Internally, this uses Idr (integer ID management)\n	 * , where Idr is a set of library functions\n	 *	for the management of small integer ID numbers.\n	 *	In essence, an idr object can be thought of\n	 *	as a sparse array mapping integer IDs onto arbitrary pointers,\n	 *	with a \"get me an available entry\" function as well.\n	 *\n	 * URL: http://lwn.net/Articles/103209/\n	 */\n\n\n	result = nvme_setup_prp_pools(dev);\n	/*\n	 * dev->prp_page_pool = dma_pool_create(\"prp list page\",\n	 *	&dev->pci_dev->dev, PAGE_SIZE, PAGE_SIZE, 0)\n	 *\n	 * and the comment says that there is an optimization\n	 * for I/Os between 4k and 128k (is it still 128k? not 256k?)\n	 * by the following code:\n	 * dev->prp_small_pool = dma_pool_create(\"prp list 256\",\n	 *	&dev->pci_dev->dev, 256, 256, 0);\n	 *\n	 * PRPs (Physical Region Pages) contains\n	 * the 64-bit physical memory page address.\n	 * The lower bits (n:2) of this field indicate\n	 * the offset within the memory page\n	 * n is defined by the memory page size (CC.MPS)\n	 *	\n	 * PRP list contains a list of PRPs with generally no offsets\n	 * which means non-contiguous set of physical memory pages\n	 *\n	 * mm/dmapool.c:dma_pool_create(const char * name, struct device *dev, sizt_t size, size_t align, size_t boundary)\n	 * \n	 */\n\n\n	result = nvme_dev_start(dev);\n	/*\n	 * \n	 *\n	 *\n	 *\n	 */\n\n\n	result = nvme_dev_add(dev);\n\n\n}\n\n\ndrivers/block/nvme-core.c:nvme_setup_io_queues()\n{\n	(int) nr_io_queues = num_online_cpus();\n\n}\n\n\n\n</pre>\n\n\n\n==== Vectored I/O (a.k.a scatter/gather I/O) ====\n\n* <span style=\"background:gold\">Why vectored I/O in NVMe and DMA?</span>\n\n\n* Vectored I/O (a.k.a scatter/gather I/O) is a method of input and output by which a single procedure call sequentially writes data from multiple buffers to a single data stream or reads data from a data stream to multiple buffers.\n\n* The buffers are given in a vector of buffers. Scatter/gather refers to the process of gathering data from, or scattering data into, the given set of buffers.\n\n* Vectored I/O can operate synchronously or asynchronously.\n\n* The main reasons for using vectored I/O are efficiency and convenience.\n\n\n\n* Several usages for vectored I/O:\n\n:* Atomicity\n:: If the particular vectored I/O implementation supports atomicity, a process can write into or read from a set of buffers to or from a file without risk that another thread or process might perform I/O on the same file between the first process\' reads or writes, thereby corrupting the file or compromising the integrity of the input\n\n:* Concatenating output\n:: An application that wants to write non-sequentially placed data in memory can do so in one vectored I/O operation. For example, writing a fixed-size header and its associated payload data that are placed non-sequentially in memory can be done by a single vectored I/O operation without first concatenating the header and the payload to another buffer\n\n:* Efficiency\n:: One vectored I/O read or write can replace many ordinary reads or writes, and thus save on the overhead involved in syscalls\n\n:* Splitting input\n:: When reading data that is in a format that defines a fixed-size header, one can use a vector of buffers in which the first buffer is the size of that header; and the second buffer will contain the data associated with the header\n\n\n\n\n* Implementation cases as system calls\n: readv() and writev()\n\n=== Barrier option in Ext3/Ext4 file system ===\n\n\n* Article 1 (kernelnewbies.org) <ref>http://kernelnewbies.org/Ext4</ref>\nThis is an option that improves the integrity of the filesystem at the cost of some performance (you can disable it with \"mount -o barrier=0\", recommended trying it if you\'re benchmarking). From this LWN article: \"The filesystem code must, before writing the [journaling] commit record, be absolutely sure that all of the transaction\'s information has made it to the journal. Just doing the writes in the proper order is insufficient; contemporary drives maintain large internal caches and will reorder operations for better performance. So the filesystem must explicitly instruct the disk to get all of the journal data onto the media before writing the commit record; if the commit record gets written first, the journal may be corrupted. The kernel\'s block I/O subsystem makes this capability available through the use of barriers; in essence, a barrier forbids the writing of any blocks after the barrier until all blocks written before the barrier are committed to the media. \'\'\'By using barriers, filesystems can make sure that their on-disk structures remain consistent at all times.\"\'\'\'\n\n\n* Article 2 (Redhat) <ref>https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Storage_Administration_Guide/writebarrieronoff.html</ref>\nTo mitigate the risk of data corruption during power loss, some storage devices use battery-backed write caches. Generally, high-end arrays and some hardware controllers use battery-backed write caches. However, because the cache\'s volatility is not visible to the kernel, Red Hat Enterprise Linux 6 enables write barriers by default on all supported journaling file systems.\n\n:- Performance issues\n:: Write caches are designed to increase I/O performance. However, enabling write barriers means constantly flushing these caches, which can significantly reduce performance.\n\n:- How to disable barrier option?\n:: For devices with non-volatile, battery-backed write caches and those with write-caching disabled, you can safely disable write barriers at mount time using the -o nobarrier option for mount. However, some devices do not support write barriers; such devices will log an error message to /var/log/messages (refer to Table 22.1, “Write barrier error messages per file system”).\n\n:- Write barrier error messages per file system\n{| class=\"wikitable sortable\"\n|-\n| File system || Error Message\n|-\n| ext3/ext4 || JBD: barrier-based sync failed on device - disabling barriers\n|-\n| XFS || Filesystem device - Disabling barriers, trial barrier write failed\n|-\n| btrfs || btrfs: disabling barriers on dev device\n|-\n|}\n\n\n\n=== Virtualization (KVM/QEMU/Xen) & IO Management ===\n\n\n==== KVM and QEMU ====\n* KVM과 QEMU 간의 역할 분담?\n\n==== Xen and QEMU ====\n* Xen이 QEMU를 어떻게 사용하는가?\n\n\n==== KVM/QEMU Storage Stack Performance Discussion (2010 Linux Plumbers Conference) ====\n\n* The State of KVM Block I/O Performance: Where We Are\n: The 50,000-foot View – QEMU Storage Stack\n: Where We Are Against Another “Popular” Hypervisor\n\n* Discussion: KVM / QEMU Settings\n: VirtIO vs. IDE emulation\n: KVM caching (cache=none vs. cache=writethrough)\n: Linux AIO support\n: No Barrier (barrier is enabled by default in ext4)\n: IO Schedulers: Deadline vs. CFQ\n: x2APIC support\n: AIO vs. threads\n: File Systems\n\n* Discussion: KVM Block I/O Performance Issues\n: Low Throughput\n: High (Virtual) CPU Usage In KVM Guests\n: Virtual Disk Image Formats\n: Others ?\n\n== ## bNote-2013-12-07 ==\n\n# [[NVMe Vs. AHCI]]\n# NVMe queue management mechanism\n# NVMe problem statement (PCI1320 Bus fatal error on bus 0 device 2 function 0 Power cycle system)\n# [[NVMe stack in Linux kernel (3.13.0-rc2, 2013-12-05)]]\n# [[Mediawiki color map]]\n\n== ## bNote-2013-12-06 ==\n\n\n<!--\n=== All pages at Wikini as of 2013-12-06 ===\n\n <pre>\n\n(News) 네트워크 업계 \"기다렸다, 런던올림픽\"	(News) 아카마이, \"CDN 넘어 하이퍼커넥티드로\"	(News) 아카마이, \"스트리밍/보안 서비스를 빠르고 안전하게\"\n(News) 아카마이, \"쌩쌩 웹사이트 만들려면\"	(News) 아카마이, \'블레이즈\' 인수 - 인텔리전트 플랫폼 강화	(News) 아카마이, CDN 장악 가속화 ... 코텐도 인수설\nAcademia intelligence	Artificial Neural Network	Artificial neural network\nBcode python cache lru	Bnote - References ( Papers / Patents / Articles )	Bnote 2013\nBnote 2013-01	Bnote 2013-02	Bnote 2013-03\nBnote 2013-04	Bnote 2013-05	Bnote 2013-06\nBnote 2013-07	Bnote 2013-08	Bnote 2013-09\nBnote 2013-10	Bnote 2013-11	Bnote 2013-12\nBnote Frequent Itemset Mining (FIM) / Association Rule Mining (ARM)	Bnote R	Bnote patidea 2013\nBnote patidea 2013-001	Bnote patidea 2013-002	Bnote patidea 2013-003\nBnote python	Bnote scratchpad	Brian Myungjune JUNG\nByung-Gon Chun	Cache algorithms	Conference: ACM SIGMOD 2013\nCurriculum vitae - Brian Myungjune JUNG	Curriculum vitae - Brian Myungjune JUNG (CV Brian)	DIMM\nData analytics	Data mining	Deep learning\nDefense Logic -- Big Data Platform Research in SAIT	Dm-cache	Exemplary .gnuplot configuration file for beautiful gnuplot graphs\nFoobar	GRUB 2	Git server on my local machine\nHidden Markov model (HMM)	Hierarchical temporal memory	I/O Workload Analysis\nI/O tracing on Microsoft Windows using xperf	IBM GPFS	IEEE ICCE 2014 Paper\nIOWA.data.tpcc 250gb 48h.mysql.R.addr:: Offset 100K, Len 1K	Industry intelligence - Flash Memory Summit 2013	Industry intelligence - big data\nIndustry intelligence - storage	Intelligent Battery Management System	Kworker\nLecture: Neural Networks for Machine Learning (by Geoffrey Hinton)	Lecture notes and online courses	Linux kernel\nLinux kernel - block layer plug/unplug	List of English stop words	List of Meta Files in Windows NTFS\nList of important processes in Microsoft Windows operating systems	Main Page	Master File Table in NTFS\nMixture model	NVM express	Nimble Storage\nOnline courses	OpenStack	Operating systems - Linux kernel\nPCI Express	PaperStudy // An Analysis of Traces from a Production MapReduce Cluster // CCGrid 2010	Periodicity transform\nPure Storage	RapidIO	Restricted Boltzmann machines\nStatistical computing software	System info 16-node cluster	TPC-C\nTemplate patidea	Text summarization	Tf-idf\nThoughts on In Memory Databases (Part 1)	Trick mode	Tutorial -- SSD caching using dm-cache\nUSENIX FAST 2013	Why In-Memory Computing Needs Flash	Windows Programming on Linux with MinGW\nWorkload analysis-driven system architecture design	Writing guide - software patent	X intelligence\nXen hypervisor\n\n</pre>\n-->\n\n=== KVM/QEMU Architecture and IO Stack ===\n\n* [https://www.google.co.kr/search?q=why+is+qemu+windows+so+slow&rlz=1C1OPRB_enKR556KR556&oq=why+is+qemu+windows+so+slow&aqs=chrome..69i57.14138j0j4&sourceid=chrome&espv=210&es_sm=122&ie=UTF-8#es_sm=122&espv=210&newwindow=1&q=IO+stack+qemu Google{IO stack qemu}]\n\n* [http://pic.dhe.ibm.com/infocenter/lnxinfo/v3r0m0/topic/liaav/LPCKVMSSPV2.1.pdf \"KVM / QEMU Storage Stack Performance Discussion,\" IBM, Linux Plumbers Conference 2010]\n\n* [http://events.linuxfoundation.org/slides/2011/linuxcon-japan/lcj2011_hajnoczi.pdf \"An Updated Overview of the QEMU Storage Stack,\" IBM, LinuxCon Japan 2011]\n\n* [http://www.linuxplumbersconf.org/2010/ocw/system/presentations/651/original/Optimizing_the_QEMU_Storage_Stack.pdf \"Optimizing the QEMU Storage Stack,\" IBM, Linux Plumbers Conference 2010]\n\n* [http://www.fujitsu.com/downloads/MAG/vol47-3/paper18.pdf \"Kernel-based Virtual Machine Technology\", Yoshihito Goro, Fujitsu Journal 2011]\n\n\n=== NVMe DAS test bed architecture ===\n\n{| class=\'wikitable sortable\'\n|-\n| LVol-00 || LVol-01 || LVol-02 || LVol-03 || LVol-04 || LVol-05 || LVol-06 || LVol-07\n|-\n|-\n| colspan=5 | nvme0n1p1 (484.61 GiB)\n| colspan=3 | nvme1n1p1 (260.61 GiB)\n|-\n| colspan=4 | /dev/nvme0n1 (372.61 GiB)\n| colspan=4 | /dev/nvme1n1 (372.61 GiB)\n|-\n|}\n\n== ## bNote-2013-12-04 ==\n\n\n=== OpenStack quota-update ===\n\n <pre>\n\nroot@grant-green:work %1# keystone tenant-list\n+----------------------------------+---------+---------+\n|                id                |   name  | enabled |\n+----------------------------------+---------+---------+\n| df7559de417a4968ad34f95b9dda5a4e |  admin  |   True  |\n| ad4662d7ec1249789feb2fad24e9f2e5 | service |   True  |\n+----------------------------------+---------+---------+\n\nroot@grant-green:work %1# nova quota-show\n+-----------------------------+-------+\n| Quota                       | Limit |\n+-----------------------------+-------+\n| instances                   | 48    |\n| cores                       | 96    |\n| ram                         | 51200 |\n| floating_ips                | 10    |\n| fixed_ips                   | -1    |\n| metadata_items              | 128   |\n| injected_files              | 5     |\n| injected_file_content_bytes | 10240 |\n| injected_file_path_bytes    | 255   |\n| key_pairs                   | 100   |\n| security_groups             | 10    |\n| security_group_rules        | 20    |\n+-----------------------------+-------+\n\nroot@grant-green:work %1# nova quota-update --instance 48 --cores 96 df7559de417a4968ad34f95b9dda5a4e\n\nroot@grant-green:work %1# nova quota-show\n+-----------------------------+-------+\n| Quota                       | Limit |\n+-----------------------------+-------+\n| instances                   | 48    |\n| cores                       | 96    |\n| ram                         | 51200 |\n| floating_ips                | 10    |\n| fixed_ips                   | -1    |\n| metadata_items              | 128   |\n| injected_files              | 5     |\n| injected_file_content_bytes | 10240 |\n| injected_file_path_bytes    | 255   |\n| key_pairs                   | 100   |\n| security_groups             | 10    |\n| security_group_rules        | 20    |\n+-----------------------------+-------+\n\n</pre>\n\n=== Linux kernel debugging using QEMU ===\n\n* [http://files.meetup.com/1590495/debugging-with-qemu.pdf Debugging Linux systems using GDB and QEMU]\n* [http://elinux.org/Debugging_The_Linux_Kernel_Using_Gdb Debugging the Linux Kernel Using GDB]\n\n\n\n=== Linux kernel (3.8.0) NVMe stack ===\n\n\n==== include/linux/nvme.h ====\n\n <pre>\n 24 struct nvme_bar {\n 25         __u64                   cap;    /* Controller Capabilities */\n 26         __u32                   vs;     /* Version */\n 27         __u32                   intms;  /* Interrupt Mask Set */\n 28         __u32                   intmc;  /* Interrupt Mask Clear */\n 29         __u32                   cc;     /* Controller Configuration */\n 30         __u32                   rsvd1;  /* Reserved */\n 31         __u32                   csts;   /* Controller Status */\n 32         __u32                   rsvd2;  /* Reserved */\n 33         __u32                   aqa;    /* Admin Queue Attributes */\n 34         __u64                   asq;    /* Admin SQ Base Address */\n 35         __u64                   acq;    /* Admin CQ Base Address */\n 36 };\n</pre>\n\n\n\n <pre>\n 42 \n 43 enum {\n 44         NVME_CC_ENABLE          = 1 << 0,\n 45         NVME_CC_CSS_NVM         = 0 << 4,\n 46         NVME_CC_MPS_SHIFT       = 7,\n 47         NVME_CC_ARB_RR          = 0 << 11,\n 48         NVME_CC_ARB_WRRU        = 1 << 11,\n 49         NVME_CC_ARB_VS          = 7 << 11,\n 50         NVME_CC_SHN_NONE        = 0 << 14,\n 51         NVME_CC_SHN_NORMAL      = 1 << 14,\n 52         NVME_CC_SHN_ABRUPT      = 2 << 14,\n 53         NVME_CC_IOSQES          = 6 << 16,\n 54         NVME_CC_IOCQES          = 4 << 20,\n 55         NVME_CSTS_RDY           = 1 << 0,\n 56         NVME_CSTS_CFS           = 1 << 1,\n 57         NVME_CSTS_SHST_NORMAL   = 0 << 2,\n 58         NVME_CSTS_SHST_OCCUR    = 1 << 2,\n 59         NVME_CSTS_SHST_CMPLT    = 2 << 2,\n 60 };\n 61 \n</pre>\n\n\n\n <pre>\n109 \n110 struct nvme_lbaf {\n111         __le16                  ms;\n112         __u8                    ds;\n113         __u8                    rp;\n114 };\n115 \n116 struct nvme_id_ns {\n117         __le64                  nsze;\n118         __le64                  ncap;\n119         __le64                  nuse;\n120         __u8                    nsfeat;\n121         __u8                    nlbaf;\n122         __u8                    flbas;\n123         __u8                    mc;\n124         __u8                    dpc;\n125         __u8                    dps;\n126         __u8                    rsvd30[98];\n127         struct nvme_lbaf        lbaf[16];\n128         __u8                    rsvd192[192];\n129         __u8                    vs[3712];\n130 };\n131 \n132 enum {\n133         NVME_NS_FEAT_THIN       = 1 << 0,\n134         NVME_LBAF_RP_BEST       = 0,\n135         NVME_LBAF_RP_BETTER     = 1,\n136         NVME_LBAF_RP_GOOD       = 2,\n137         NVME_LBAF_RP_DEGRADED   = 3,\n138 };\n139 \n140 struct nvme_lba_range_type {\n141         __u8                    type;\n142         __u8                    attributes;\n143         __u8                    rsvd2[14];\n144         __u64                   slba;\n145         __u64                   nlb;\n146         __u8                    guid[16];\n147         __u8                    rsvd48[16];\n148 };\n149 \n150 enum {\n151         NVME_LBART_TYPE_FS      = 0x01,\n152         NVME_LBART_TYPE_RAID    = 0x02,\n153         NVME_LBART_TYPE_CACHE   = 0x03,\n154         NVME_LBART_TYPE_SWAP    = 0x04,\n155 \n156         NVME_LBART_ATTRIB_TEMP  = 1 << 0,\n157         NVME_LBART_ATTRIB_HIDE  = 1 << 1,\n158 };\n159 \n\n</pre>\n\n\n\n <pre>\n159 \n160 /* I/O commands */\n161 \n162 enum nvme_opcode {\n163         nvme_cmd_flush          = 0x00,\n164         nvme_cmd_write          = 0x01,\n165         nvme_cmd_read           = 0x02,\n166         nvme_cmd_write_uncor    = 0x04,\n167         nvme_cmd_compare        = 0x05,\n168         nvme_cmd_dsm            = 0x09,\n169 };\n170 \n171 struct nvme_common_command {\n172         __u8                    opcode;\n173         __u8                    flags;\n174         __u16                   command_id;\n175         __le32                  nsid;\n176         __u32                   cdw2[2];\n177         __le64                  metadata;\n178         __le64                  prp1;\n179         __le64                  prp2;\n180         __u32                   cdw10[6];\n181 };\n182 \n183 struct nvme_rw_command {\n184         __u8                    opcode;\n185         __u8                    flags;\n186         __u16                   command_id;\n187         __le32                  nsid;\n188         __u64                   rsvd2;\n189         __le64                  metadata;\n190         __le64                  prp1;\n191         __le64                  prp2;\n192         __le64                  slba;\n193         __le16                  length;\n194         __le16                  control;\n195         __le32                  dsmgmt;\n196         __le32                  reftag;\n197         __le16                  apptag;\n198         __le16                  appmask;\n199 };\n200 \n201 enum {\n202         NVME_RW_LR                      = 1 << 15,\n203         NVME_RW_FUA                     = 1 << 14,\n204         NVME_RW_DSM_FREQ_UNSPEC         = 0,\n205         NVME_RW_DSM_FREQ_TYPICAL        = 1,\n206         NVME_RW_DSM_FREQ_RARE           = 2,\n207         NVME_RW_DSM_FREQ_READS          = 3,\n208         NVME_RW_DSM_FREQ_WRITES         = 4,\n209         NVME_RW_DSM_FREQ_RW             = 5,\n210         NVME_RW_DSM_FREQ_ONCE           = 6,\n211         NVME_RW_DSM_FREQ_PREFETCH       = 7,\n212         NVME_RW_DSM_FREQ_TEMP           = 8,\n213         NVME_RW_DSM_LATENCY_NONE        = 0 << 4,\n214         NVME_RW_DSM_LATENCY_IDLE        = 1 << 4,\n215         NVME_RW_DSM_LATENCY_NORM        = 2 << 4,\n216         NVME_RW_DSM_LATENCY_LOW         = 3 << 4,\n217         NVME_RW_DSM_SEQ_REQ             = 1 << 6,\n218         NVME_RW_DSM_COMPRESSED          = 1 << 7,\n219 };\n220 \n221 /* Admin commands */\n222 \n223 enum nvme_admin_opcode {\n224         nvme_admin_delete_sq            = 0x00,\n225         nvme_admin_create_sq            = 0x01,\n226         nvme_admin_get_log_page         = 0x02,\n227         nvme_admin_delete_cq            = 0x04,\n228         nvme_admin_create_cq            = 0x05,\n229         nvme_admin_identify             = 0x06,\n230         nvme_admin_abort_cmd            = 0x08,\n231         nvme_admin_set_features         = 0x09,\n232         nvme_admin_get_features         = 0x0a,\n233         nvme_admin_async_event          = 0x0c,\n234         nvme_admin_activate_fw          = 0x10,\n235         nvme_admin_download_fw          = 0x11,\n236         nvme_admin_format_nvm           = 0x80,\n237         nvme_admin_security_send        = 0x81,\n238         nvme_admin_security_recv        = 0x82,\n239 };\n240 \n241 enum {\n242         NVME_QUEUE_PHYS_CONTIG  = (1 << 0),\n243         NVME_CQ_IRQ_ENABLED     = (1 << 1),\n244         NVME_SQ_PRIO_URGENT     = (0 << 1),\n245         NVME_SQ_PRIO_HIGH       = (1 << 1),\n246         NVME_SQ_PRIO_MEDIUM     = (2 << 1),\n247         NVME_SQ_PRIO_LOW        = (3 << 1),\n248         NVME_FEAT_ARBITRATION   = 0x01,\n249         NVME_FEAT_POWER_MGMT    = 0x02,\n250         NVME_FEAT_LBA_RANGE     = 0x03,\n251         NVME_FEAT_TEMP_THRESH   = 0x04,\n252         NVME_FEAT_ERR_RECOVERY  = 0x05,\n253         NVME_FEAT_VOLATILE_WC   = 0x06,\n254         NVME_FEAT_NUM_QUEUES    = 0x07,\n255         NVME_FEAT_IRQ_COALESCE  = 0x08,\n256         NVME_FEAT_IRQ_CONFIG    = 0x09,\n257         NVME_FEAT_WRITE_ATOMIC  = 0x0a,\n258         NVME_FEAT_ASYNC_EVENT   = 0x0b,\n259         NVME_FEAT_SW_PROGRESS   = 0x0c,\n260 };\n261 \n</pre>\n\n\n\n\n <pre>\n261 \n262 struct nvme_identify {\n263         __u8                    opcode;\n264         __u8                    flags;\n265         __u16                   command_id;\n266         __le32                  nsid;\n267         __u64                   rsvd2[2];\n268         __le64                  prp1;\n269         __le64                  prp2;\n270         __le32                  cns;\n271         __u32                   rsvd11[5];\n272 };\n273 \n274 struct nvme_features {\n275         __u8                    opcode;\n276         __u8                    flags;\n277         __u16                   command_id;\n278         __le32                  nsid;\n279         __u64                   rsvd2[2];\n280         __le64                  prp1;\n281         __le64                  prp2;\n282         __le32                  fid;\n283         __le32                  dword11;\n284         __u32                   rsvd12[4];\n285 };\n286 \n287 struct nvme_create_cq {\n288         __u8                    opcode;\n289         __u8                    flags;\n290         __u16                   command_id;\n291         __u32                   rsvd1[5];\n292         __le64                  prp1;\n293         __u64                   rsvd8;\n294         __le16                  cqid;\n295         __le16                  qsize;\n296         __le16                  cq_flags;\n297         __le16                  irq_vector;\n298         __u32                   rsvd12[4];\n299 };\n300 \n301 struct nvme_create_sq {\n302         __u8                    opcode;\n303         __u8                    flags;\n304         __u16                   command_id;\n305         __u32                   rsvd1[5];\n306         __le64                  prp1;\n307         __u64                   rsvd8;\n308         __le16                  sqid;\n309         __le16                  qsize;\n310         __le16                  sq_flags;\n311         __le16                  cqid;\n312         __u32                   rsvd12[4];\n313 };\n314 \n315 struct nvme_delete_queue {\n316         __u8                    opcode;\n317         __u8                    flags;\n318         __u16                   command_id;\n319         __u32                   rsvd1[9];\n320         __le16                  qid;\n321         __u16                   rsvd10;\n322         __u32                   rsvd11[5];\n323 };\n324 \n325 struct nvme_download_firmware {\n326         __u8                    opcode;\n327         __u8                    flags;\n328         __u16                   command_id;\n329         __u32                   rsvd1[5];\n330         __le64                  prp1;\n331         __le64                  prp2;\n332         __le32                  numd;\n333         __le32                  offset;\n334         __u32                   rsvd12[4];\n335 };\n336 \n</pre>\n\n\n\n\n <pre>\n336 \n337 struct nvme_command {\n338         union {\n339                 struct nvme_common_command common;\n340                 struct nvme_rw_command rw;\n341                 struct nvme_identify identify;\n342                 struct nvme_features features;\n343                 struct nvme_create_cq create_cq;\n344                 struct nvme_create_sq create_sq;\n345                 struct nvme_delete_queue delete_queue;\n346                 struct nvme_download_firmware dlfw;\n347         };\n348 };\n349 \n350 enum {\n351         NVME_SC_SUCCESS                 = 0x0,\n352         NVME_SC_INVALID_OPCODE          = 0x1,\n353         NVME_SC_INVALID_FIELD           = 0x2,\n354         NVME_SC_CMDID_CONFLICT          = 0x3,\n355         NVME_SC_DATA_XFER_ERROR         = 0x4,\n356         NVME_SC_POWER_LOSS              = 0x5,\n357         NVME_SC_INTERNAL                = 0x6,\n358         NVME_SC_ABORT_REQ               = 0x7,\n359         NVME_SC_ABORT_QUEUE             = 0x8,\n360         NVME_SC_FUSED_FAIL              = 0x9,\n361         NVME_SC_FUSED_MISSING           = 0xa,\n362         NVME_SC_INVALID_NS              = 0xb,\n363         NVME_SC_LBA_RANGE               = 0x80,\n364         NVME_SC_CAP_EXCEEDED            = 0x81,\n365         NVME_SC_NS_NOT_READY            = 0x82,\n366         NVME_SC_CQ_INVALID              = 0x100,\n367         NVME_SC_QID_INVALID             = 0x101,\n368         NVME_SC_QUEUE_SIZE              = 0x102,\n369         NVME_SC_ABORT_LIMIT             = 0x103,\n370         NVME_SC_ABORT_MISSING           = 0x104,\n371         NVME_SC_ASYNC_LIMIT             = 0x105,\n372         NVME_SC_FIRMWARE_SLOT           = 0x106,\n373         NVME_SC_FIRMWARE_IMAGE          = 0x107,\n374         NVME_SC_INVALID_VECTOR          = 0x108,\n375         NVME_SC_INVALID_LOG_PAGE        = 0x109,\n376         NVME_SC_INVALID_FORMAT          = 0x10a,\n377         NVME_SC_BAD_ATTRIBUTES          = 0x180,\n378         NVME_SC_WRITE_FAULT             = 0x280,\n379         NVME_SC_READ_ERROR              = 0x281,\n380         NVME_SC_GUARD_CHECK             = 0x282,\n381         NVME_SC_APPTAG_CHECK            = 0x283,\n382         NVME_SC_REFTAG_CHECK            = 0x284,\n383         NVME_SC_COMPARE_FAILED          = 0x285,\n384         NVME_SC_ACCESS_DENIED           = 0x286,\n385 };\n386 \n</pre>\n\n\n\n\n <pre>\n386 \n387 struct nvme_completion {\n388         __le32  result;         /* Used by admin commands to return data */\n389         __u32   rsvd;\n390         __le16  sq_head;        /* how much of this queue may be reclaimed */\n391         __le16  sq_id;          /* submission queue that generated this entry */\n392         __u16   command_id;     /* of the command which completed */\n393         __le16  status;         /* did the command fail, and if so, why? */\n394 };\n395 \n396 struct nvme_user_io {\n397         __u8    opcode;\n398         __u8    flags;\n399         __u16   control;\n400         __u16   nblocks;\n401         __u16   rsvd;\n402         __u64   metadata;\n403         __u64   addr;\n404         __u64   slba;\n405         __u32   dsmgmt;\n406         __u32   reftag;\n407         __u16   apptag;\n408         __u16   appmask;\n409 };\n410 \n411 struct nvme_admin_cmd {\n412         __u8    opcode;\n413         __u8    flags;\n414         __u16   rsvd1;\n415         __u32   nsid;\n416         __u32   cdw2;\n417         __u32   cdw3;\n418         __u64   metadata;\n419         __u64   addr;\n420         __u32   metadata_len;\n421         __u32   data_len;\n422         __u32   cdw10;\n423         __u32   cdw11;\n424         __u32   cdw12;\n425         __u32   cdw13;\n426         __u32   cdw14;\n427         __u32   cdw15;\n428         __u32   timeout_ms;\n429         __u32   result;\n430 };\n431 \n432 #define NVME_IOCTL_ID           _IO(\'N\', 0x40)\n433 #define NVME_IOCTL_ADMIN_CMD    _IOWR(\'N\', 0x41, struct nvme_admin_cmd)\n434 #define NVME_IOCTL_SUBMIT_IO    _IOW(\'N\', 0x42, struct nvme_user_io)\n435 \n\n</pre>\n\n\n==== drivers/block/nvme.c ====\n\n\n <pre>\n  44 \n  45 #define NVME_Q_DEPTH 1024\n  46 #define SQ_SIZE(depth)          (depth * sizeof(struct nvme_command))\n  47 #define CQ_SIZE(depth)          (depth * sizeof(struct nvme_completion))\n  48 #define NVME_MINORS 64\n  49 #define NVME_IO_TIMEOUT (5 * HZ)\n  50 #define ADMIN_TIMEOUT   (60 * HZ)\n  51 \n  52 static int nvme_major;\n  53 module_param(nvme_major, int, 0);\n  54 \n  55 static int use_threaded_interrupts;\n  56 module_param(use_threaded_interrupts, int, 0);\n  57 \n  58 static DEFINE_SPINLOCK(dev_list_lock);\n  59 static LIST_HEAD(dev_list);\n  60 static struct task_struct *nvme_thread;\n  61 \n</pre>\n\n\n\n\n <pre>\n  62 /*\n  63  * Represents an NVM Express device.  Each nvme_dev is a PCI function.\n  64  */\n  65 struct nvme_dev {\n  66         struct list_head node; \n  67         struct nvme_queue **queues;    \n  68         u32 __iomem *dbs;      \n  69         struct pci_dev *pci_dev;\n  70         struct dma_pool *prp_page_pool;\n  71         struct dma_pool *prp_small_pool;\n  72         int instance;\n  73         int queue_count;       \n  74         int db_stride;         \n  75         u32 ctrl_config;       \n  76         struct msix_entry *entry;\n  77         struct nvme_bar __iomem *bar;\n  78         struct list_head namespaces;\n  79         char serial[20];\n  80         char model[40];\n  81         char firmware_rev[8];\n  82         u32 max_hw_sectors;\n  83 };\n  84 \n  85 /*     \n  86  * An NVM Express namespace is equivalent to a SCSI LUN\n  87  */    \n  88 struct nvme_ns {\n  89         struct list_head list; \n  90        \n  91         struct nvme_dev *dev;  \n  92         struct request_queue *queue;\n  93         struct gendisk *disk;  \n  94        \n  95         int ns_id;\n  96         int lba_shift;         \n  97 };     \n  98 \n  99 /*     \n 100  * An NVM Express queue.  Each device has at least two (one for admin\n 101  * commands and one for I/O commands).\n 102  */\n 103 struct nvme_queue {\n 104         struct device *q_dmadev;\n 105         struct nvme_dev *dev;\n 106         spinlock_t q_lock;\n 107         struct nvme_command *sq_cmds;\n 108         volatile struct nvme_completion *cqes;\n 109         dma_addr_t sq_dma_addr;\n 110         dma_addr_t cq_dma_addr;\n 111         wait_queue_head_t sq_full;\n 112         wait_queue_t sq_cong_wait;\n 113         struct bio_list sq_cong;\n 114         u32 __iomem *q_db;\n 115         u16 q_depth;\n 116         u16 cq_vector;\n 117         u16 sq_head;\n 118         u16 sq_tail;\n 119         u16 cq_head;\n 120         u16 cq_phase;\n 121         unsigned long cmdid_data[];\n 122 };\n 123 \n</pre>\n\n== ## bNote-2013-12-03 ==\n\n=== Linux kernel IO stack: Block Layer ===\n\n==== Linux Documentation ====\n\n; Documentation/block/queue-sysfs.txt\n\n <pre>\n1	Queue sysfs files\n2	=================\n3	\n4	This text file will detail the queue files that are located in the sysfs tree\n5	for each block device. Note that stacked devices typically do not export\n6	any settings, since their queue merely functions are a remapping target.\n7	These files are the ones found in the /sys/block/xxx/queue/ directory.\n8	\n9	Files denoted with a RO postfix are readonly and the RW postfix means\n10	read-write.\n11	\n12	add_random (RW)\n13	----------------\n14	This file allows to trun off the disk entropy contribution. Default\n15	value of this file is \'1\'(on).\n16	\n17	discard_granularity (RO)\n18	-----------------------\n19	This shows the size of internal allocation of the device in bytes, if\n20	reported by the device. A value of \'0\' means device does not support\n21	the discard functionality.\n22	\n23	discard_max_bytes (RO)\n24	----------------------\n25	Devices that support discard functionality may have internal limits on\n26	the number of bytes that can be trimmed or unmapped in a single operation.\n27	The discard_max_bytes parameter is set by the device driver to the maximum\n28	number of bytes that can be discarded in a single operation. Discard\n29	requests issued to the device must not exceed this limit. A discard_max_bytes\n30	value of 0 means that the device does not support discard functionality.\n31	\n32	discard_zeroes_data (RO)\n33	------------------------\n34	When read, this file will show if the discarded block are zeroed by the\n35	device or not. If its value is \'1\' the blocks are zeroed otherwise not.\n36	\n37	hw_sector_size (RO)\n38	-------------------\n39	This is the hardware sector size of the device, in bytes.\n40	\n41	iostats (RW)\n42	-------------\n43	This file is used to control (on/off) the iostats accounting of the\n44	disk.\n45	\n46	logical_block_size (RO)\n47	-----------------------\n48	This is the logcal block size of the device, in bytes.\n49	\n50	max_hw_sectors_kb (RO)\n51	----------------------\n52	This is the maximum number of kilobytes supported in a single data transfer.\n53	\n54	max_integrity_segments (RO)\n55	---------------------------\n56	When read, this file shows the max limit of integrity segments as\n57	set by block layer which a hardware controller can handle.\n58	\n59	max_sectors_kb (RW)\n60	-------------------\n61	This is the maximum number of kilobytes that the block layer will allow\n62	for a filesystem request. Must be smaller than or equal to the maximum\n63	size allowed by the hardware.\n64	\n65	max_segments (RO)\n66	-----------------\n67	Maximum number of segments of the device.\n68	\n69	max_segment_size (RO)\n70	---------------------\n71	Maximum segment size of the device.\n72	\n73	minimum_io_size (RO)\n74	--------------------\n75	This is the smallest preferred io size reported by the device.\n76	\n77	nomerges (RW)\n78	-------------\n79	This enables the user to disable the lookup logic involved with IO\n80	merging requests in the block layer. By default (0) all merges are\n81	enabled. When set to 1 only simple one-hit merges will be tried. When\n82	set to 2 no merge algorithms will be tried (including one-hit or more\n83	complex tree/hash lookups).\n84	\n85	nr_requests (RW)\n86	----------------\n87	This controls how many requests may be allocated in the block layer for\n88	read or write requests. Note that the total allocated number may be twice\n89	this amount, since it applies only to reads or writes (not the accumulated\n90	sum).\n91	\n92	To avoid priority inversion through request starvation, a request\n93	queue maintains a separate request pool per each cgroup when\n94	CONFIG_BLK_CGROUP is enabled, and this parameter applies to each such\n95	per-block-cgroup request pool.  IOW, if there are N block cgroups,\n96	each request queue may have up to N request pools, each independently\n97	regulated by nr_requests.\n98	\n99	optimal_io_size (RO)\n100	--------------------\n101	This is the optimal io size reported by the device.\n102	\n103	physical_block_size (RO)\n104	------------------------\n105	This is the physical block size of device, in bytes.\n106	\n107	read_ahead_kb (RW)\n108	------------------\n109	Maximum number of kilobytes to read-ahead for filesystems on this block\n110	device.\n111	\n112	rotational (RW)\n113	---------------\n114	This file is used to stat if the device is of rotational type or\n115	non-rotational type.\n116	\n117	rq_affinity (RW)\n118	----------------\n119	If this option is \'1\', the block layer will migrate request completions to the\n120	cpu \"group\" that originally submitted the request. For some workloads this\n121	provides a significant reduction in CPU cycles due to caching effects.\n122	\n123	For storage configurations that need to maximize distribution of completion\n124	processing setting this option to \'2\' forces the completion to run on the\n125	requesting cpu (bypassing the \"group\" aggregation logic).\n126	\n127	scheduler (RW)\n128	--------------\n129	When read, this file will display the current and available IO schedulers\n130	for this block device. The currently active IO scheduler will be enclosed\n131	in [] brackets. Writing an IO scheduler name to this file will switch\n132	control of this block device to that new IO scheduler. Note that writing\n133	an IO scheduler name to this file will attempt to load that IO scheduler\n134	module, if it isn\'t already present in the system.\n135	\n136	\n137	\n138	Jens Axboe <jens.axboe@oracle.com>, February 2009\n</pre>\n\n\n\n\n==== Linux kernel 3.8.0 source code ====\n\n; block/blk-settings.c: blk_queue_make_request()\n <pre>\n\n152 /**\n153  * blk_queue_make_request - define an alternate make_request function for a device\n154  * @q:  the request queue for the device to be affected\n155  * @mfn: the alternate make_request function\n156  *\n157  * Description:\n158  *    The normal way for &struct bios to be passed to a device\n159  *    driver is for them to be collected into requests on a request\n160  *    queue, and then to allow the device driver to select requests\n161  *    off that queue when it is ready.  This works well for many block\n162  *    devices. However some block devices (typically virtual devices\n163  *    such as md or lvm) do not benefit from the processing on the\n164  *    request queue, and are served best by having the requests passed\n165  *    directly to them.  This can be achieved by providing a function\n166  *    to blk_queue_make_request().\n167  *\n168  * Caveat:\n169  *    The driver that does this *must* be able to deal appropriately\n170  *    with buffers in \"highmemory\". This can be accomplished by either calling\n171  *    __bio_kmap_atomic() to get a temporary kernel mapping, or by calling\n172  *    blk_queue_bounce() to create a buffer in normal memory.\n173  **/\n174 void blk_queue_make_request(struct request_queue *q, make_request_fn *mfn)\n175 {\n176         /*\n177          * set defaults\n178          */\n179         q->nr_requests = BLKDEV_MAX_RQ;\n180 \n181         q->make_request_fn = mfn;\n182         blk_queue_dma_alignment(q, 511);\n183         blk_queue_congestion_threshold(q);\n184         q->nr_batching = BLK_BATCH_REQ;\n185 \n186         blk_set_default_limits(&q->limits);\n187 \n188         /*\n189          * by default assume old behaviour and bounce for any highmem page\n190          */\n191         blk_queue_bounce_limit(q, BLK_BOUNCE_HIGH);\n192 }\n193 EXPORT_SYMBOL(blk_queue_make_request);\n\n</pre>\n\n\n\n\n; include/linux/blkdev.h: BLKDEV_MAX_RQ\n <pre>\n  38 #define BLKDEV_MAX_RQ   128     /* Default maximum */\n</pre>\n\n\n\n\n; block/blk-sysfs.c: /* Functions related to sysfs handling */\n <pre>\n 40 \n 41 static ssize_t queue_requests_show(struct request_queue *q, char *page)\n 42 {\n 43         return queue_var_show(q->nr_requests, (page));\n 44 }\n 45 \n 46 static ssize_t\n 47 queue_requests_store(struct request_queue *q, const char *page, size_t count)\n 48 {\n 49         struct request_list *rl;\n 50         unsigned long nr;\n 51         int ret;\n 52 \n 53         if (!q->request_fn)\n 54                 return -EINVAL;\n 55 \n 56         ret = queue_var_store(&nr, page, count);\n 57         if (ret < 0)\n 58                 return ret;\n 59 \n 60         if (nr < BLKDEV_MIN_RQ)\n 61                 nr = BLKDEV_MIN_RQ;\n 62 \n 63         spin_lock_irq(q->queue_lock);\n 64         q->nr_requests = nr;\n 65         blk_queue_congestion_threshold(q);\n 66 \n 67         /* congestion isn\'t cgroup aware and follows root blkcg for now */\n 68         rl = &q->root_rl;\n 69 \n 70         if (rl->count[BLK_RW_SYNC] >= queue_congestion_on_threshold(q))\n 71                 blk_set_queue_congested(q, BLK_RW_SYNC);\n 72         else if (rl->count[BLK_RW_SYNC] < queue_congestion_off_threshold(q))\n 73                 blk_clear_queue_congested(q, BLK_RW_SYNC);\n 74 \n 75         if (rl->count[BLK_RW_ASYNC] >= queue_congestion_on_threshold(q))\n 76                 blk_set_queue_congested(q, BLK_RW_ASYNC);\n 77         else if (rl->count[BLK_RW_ASYNC] < queue_congestion_off_threshold(q))\n 78                 blk_clear_queue_congested(q, BLK_RW_ASYNC);\n 79 \n 80         blk_queue_for_each_rl(rl, q) {\n 81                 if (rl->count[BLK_RW_SYNC] >= q->nr_requests) {\n 82                         blk_set_rl_full(rl, BLK_RW_SYNC);\n 83                 } else {\n 84                         blk_clear_rl_full(rl, BLK_RW_SYNC);\n 85                         wake_up(&rl->wait[BLK_RW_SYNC]);\n 86                 }\n 87 \n 88                 if (rl->count[BLK_RW_ASYNC] >= q->nr_requests) {\n 89                         blk_set_rl_full(rl, BLK_RW_ASYNC);\n 90                 } else {\n 91                         blk_clear_rl_full(rl, BLK_RW_ASYNC);\n 92                         wake_up(&rl->wait[BLK_RW_ASYNC]);\n 93                 }\n 94         }\n 95 \n 96         spin_unlock_irq(q->queue_lock);\n 97         return ret;\n 98 }\n 99 \n\n</pre>\n\n\n\n; drivers/block/nvme.c: NVME_Q_DEPTH\n <pre>\n  44 \n  45 #define NVME_Q_DEPTH 1024\n  46 #define SQ_SIZE(depth)          (depth * sizeof(struct nvme_command))\n  47 #define CQ_SIZE(depth)          (depth * sizeof(struct nvme_completion))\n  48 #define NVME_MINORS 64\n  49 #define NVME_IO_TIMEOUT (5 * HZ)\n  50 #define ADMIN_TIMEOUT   (60 * HZ)\n  51 \n</pre>\n\n== ## bNote-2013-12-02 ==\n\n=== XS-1715 Specification ===\n\n==== Key features ====\n\n* Performance\n: Optimized for 4KB random read and write workloads\n:- Performance Target\n::- More than 700K IOPS for 4KB random reads\n::- More than 200K IOPS for 4KB random writes (sustained)\n\n* Mapping Algorithm\n:- 4KB full page mapping\n:- FN21 4-planes program support \n:- FN21 4KB fast read support\n:- Hot/cold data separtion (ESP_MM_Mapping.c)\n:- Concurrent garbage collection during user page writes\n:- Non-blocking DRAM access to avoid pipeline bubbles of CPU\n:- No hardware register access at all during user read/write request processing\n:- Journal log information reduction for fast power-down and fast recovery at boot-up\n:- Flash RAID-5 support\n\n\n\n=== Admin/Misc ===\n\n* DS 인사 (전배관련): \'\'\'정영민 대리\'\'\', 박필 사원\n:-> 정영민 대리에게 확인. (OK)\n\n<!--\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:57]:\n  정대리님, 안녕하세요?\n  이번 10월 1일자로 기술원에서 SW개발팀으로 전배 온\n  정명준 책임입니다. \n  내년 승격 관련해서\n  문의드리고자 연락 드렸습니다\n  잠시 시간 되시는지요?\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:00]:\n  네\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:00]:\n  안녕하세요? 혹시 기술원의 김경진 차장으로부터\n  차년도 승격 관련해서\n  연락 받으셨던 것이 있으신지 궁금해서요~\n  제가 기술원 기준으로는 차년도 승격이 되는데\n  여기 전배를 오게 되면서, 승격 예외 대상자로 \n  예외 승격 대상자\n  로 분류해서 내년에 수석 진급이 보장될 수 있도록\n  해주겠다는 이야기를 들었었거든요\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:02]:\n  네 예전에 관련 결재를 통보받았으나, 책임님 명단이 있는지는 확인해봐야겠습니다\n  잠시만요\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:02]:\n  네~\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:05]:\n  네 확인했습니다. 책임님 승격되십니다\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:05]:\n  아 감사합니다~\n  이번에 저와 같이 오셨던\n  신현정 책임도 같이\n  승격 되는 것 맞죠?\n  저희 2명이 \n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:06]:\n  넵\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:06]:\n  된다고 들었었거든요\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:06]:\n  2명입니다\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:06]:\n  확인해주셔서 감사합니다. 그럼 저희 2명이 특별히\n  따로 더 할 일이\n  할 일은 없는 건지요?\n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:06]:\n  넵\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:06]:\n  아, 잘 알겠습니다. \n  감사합니다. 좋은 오후 보내세요  \n‎‎정영민(G4(대리)/대리/삼성전자)‎‎ [오후 2:07]:\n  네 수고하셔요~\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 2:07]:\n  넵 감사합니다 ^^\n-->\n\n<!--\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:53]:\n  김과장님, 안녕하세요? 10월 1일자로 기술원에서 메모리사 S/W 개발팀으로 전배 온 정명준 책임입니다.\n  승격 관련해서 여쭙고자 연락 드렸습니다\n  잠시 시간 되시는지요?\n‎‎김효근(G5(과장)/담당과장/삼성전자)‎‎ [오후 1:54]:\n  아 네...\n  담당자는 박필 사원이나 \n  정영민 대리입니다. \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:55]:\n  아하 \n‎‎김효근(G5(과장)/담당과장/삼성전자)‎‎ [오후 1:55]:\n  정영민 대리는 지금 통화중이네요... \n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:55]:\n  아, 그럼 잠시 후 정영민 대리에게 연락해보겠습니다 알려주셔서 감사합니다 ^_^\n‎‎김효근(G5(과장)/담당과장/삼성전자)‎‎ [오후 1:57]:\n  전 인력운영 담당자라 \n  승격에 대해서는 제가 정확한 답변을 못 드릴 것 같습니다. \n  정대리 전화 끊었네요\n‎‎정명준(S5(책임)/책임/삼성전자)‎‎ [오후 1:57]:\n  아, 감사합니다 ^^\n  연락해보겠습니다  \n-->\n\n<!--\n: <strike>DS 인사 담당: 김효근 과장, 이창익 대리 (인력 이동 관련)</strike> Updated: 정영민대리가 담당임.\n: 10/17 김경진 차장 - 내년 승격 대상자는 기술원 인사팀에서 본사에 얘기해놓았으며, 11.1일자 인력들과 같이 해서 예외 대상자들 품의를 받아 사업부에 뿌릴 예정이라고 함\n-->\n\n== References ==\n\n<references/>','utf-8'),(2159,'== SOSP 2013 Summary ==\n\n{| class=\"wikitable\" style=\"background:white\"\n|-\n|+ [http://sigops.org/sosp/sosp13/program.html SOSP 2013 The 24th ACM Symposium on Operating Systems Principles]\n|-\n! Pick\n! width=\"20%\" | Title\n! width=\"20%\" | Authors\n! width=\"10%\" | Keywords\n! width=\"50%\" | Memo\n|-\n| style=\"background:gold\" | S.4\n| (BestPaper) The Scalable Commutativity Rule: Designing Scalable Software for Multicore Processors\n| Austin T. Clements, M. Frans Kaashoek, Nickolai Zeldovich, Robert Morris (MIT CSAIL), Eddie Kohler (Harvard)\n| \n* Application scalability by commutative interface operations\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nThe Scalable Commutativity Rule: Designing Scalable Software for Multicore Processors\n----\nWhat fundamental opportunities for scalability are latent in interfaces, such as system call APIs? Can scalability opportunities be identified even before any implementation exists, simply by considering interface specifications? To answer these questions this paper introduces the following rule: Whenever interface operations commute, they can be implemented in a way that scales. This rule aids developers in building more scalable software starting from interface design and carrying on through implementation, testing, and evaluation.\n\nTo help developers apply the rule, a new tool named Commuter accepts high-level interface models and generates tests of operations that commute and hence could scale. Using these tests, Commuter can evaluate the scalability of an implementation. We apply Commuter to 18 POSIX calls and use the results to guide the implementation of a new research operating system kernel called sv6. Linux scales for 68% of the 13,664 tests generated by Commuter for these calls, and Commuter finds many problems that have been observed to limit application scalability. sv6 scales for 99% of the tests.</ref>\n* Key findings: Whenever interface operations commute, they can be implemented in a way that scales\n* Key questions: Can scalability opportunities be identified even before any implementation exists, simply by considering interface specifications?\n* Result (분석 필요): Linux scales for 68% of the 13,664 tests generated by Commuter for these calls\n* b.idea: New SmartSSD API for scalable In-Storage Computing (ISC)\n* b.question: ISC의 궁극적인 모습은 micro-server가 되는 것일까?\n\n\n\n\n|-\n| style=\"background:coral\" | S.5\n| Speedy Transactions in Multicore In-Memory Databases\n| Stephen Tu, Wenting Zheng (MIT), Eddie Kohler (Harvard), Barbara Liskov, Samuel Madden (MIT)\n|\n* In-memory database on multicore machines\n* Avoiding centralized contention points\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nSpeedy Transactions in Multicore In-Memory Databases\n----\nSilo is a new in-memory database that achieves excellent performance and scalability on modern multicore machines. Silo was designed from the ground up to use system memory and caches efficiently. For instance, it avoids all centralized contention points, including that of centralized transaction ID assignment. Silo\'s key contribution is a commit protocol based on optimistic concurrency control that provides serializability while avoiding all shared-memory writes for records that were only read. Though this might seem to complicate the enforcement of a serial order, correct logging and recovery is provided by linking periodically-updated epochs with the commit protocol. Silo provides the same guarantees as any serializable database without unnecessary scalability bottlenecks or much additional latency. Silo achieves almost 700,000 transactions per second on a standard TPC-C workload mix on a 32-core machine, as well as near-linear scalability. Considered per core, this is several times higher than previously reported results.</ref>\n* Silo is a new IMDB: achieving excellent performance and scalability on multicore machines\n* New design: to use system memory and caches efficiently\n* Avoiding: all centralized contention points (such as centralized transaction ID assignment)\n* Key contribution: a commit protocol based on optimistic concurrency control that provides serializability while avoiding all shared-memory writes for records that were only read\n* Result: almost 700,000 TPS on a standard TPC-C workload mix on a 32-core machine, as well as near-linear scalability.\n\n\n\n\n|-\n| style=\"background:darkslategray\" | S._\n| Everything You Always Wanted to Know about Synchronization but Were Afraid to Ask\n| Tudor David, Rachid Guerraoui, Vasileios Trigonakis (EPFL)\n|\n* Factors which impact on the scalability of synchronization\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nEverything You Always Wanted to Know about Synchronization but Were Afraid to Ask\n----\nThis paper presents the most exhaustive study of synchronization to date. We span multiple layers, from hardware cache-coherence protocols up to high-level concurrent software. We do so on different types of architectures, from single-socket -- uniform and non-uniform -- to multi-socket -- directory and broadcast-based -- many-cores. We draw a set of observations that, roughly speaking, imply that scalability of synchronization is mainly a property of the hardware.</ref>\n\n\n\n\n|-\n| style=\"background:darkslategray\" | S._\n| Dandelion: A Compiler and Runtime for Heterogeneous Systems\n| Christopher J Rossbach, Yuan Yu, Jon Currey, Jean-Philippe Martin, Dennis Fetterly (Microsoft Research Silicon Valley)\n|\n* User-friendly programming tool for heterogeneous systems\n* Automatic cross-compilation (.NET-to-CUDA)\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nDandelion: A Compiler and Runtime for Heterogeneous Systems\n----\nComputer systems increasingly rely on heterogeneity to achieve greater performance, scalability and energy efficiency. Because heterogeneous systems typically comprise multiple execution contexts with different programming abstractions and runtimes, programming them remains extremely challenging.\n\nDandelion is a system designed to address this programmability challenge for data-parallel applications. Dandelion provides a unified programming model for heterogeneous systems that span diverse execution contexts including CPUs, GPUs, FPGAs, and the cloud. It adopts the .NET LINQ (Language INtegrated Query) approach, integrating data-parallel operators into general purpose programming languages such as C# and F#. It therefore provides an expressive data model and native language integration for user-defined functions, enabling programmers to write applications using standard high-level languages and development tools.\n\nDandelion automatically and transparently distributes data-parallel portions of a program to available computing resources, including compute clusters for distributed execution and CPU and GPU cores of individual nodes for parallel execution. To enable automatic execution of .NET code on GPUs, Dandelion cross-compiles .NET code to CUDA kernels and uses the PTask runtime [85] to manage GPU execution. This paper discusses the design and implementation of Dandelion, focusing on the distributed CPU and GPU implementation. We evaluate the system using a diverse set of workloads.</ref>\n* Key contribution: user-friendly programming tool for heterogeneous systems\n* Dandelion automatically and transparently distributes data-parallel portions of a program to available computing resources\n* To enable automatic execution of .NET code on GPUs, Dandelion cross-compiles .NET code to CUDA kernels and uses the PTask runtime to manage GPU execution.\n\n\n\n\n|-\n| style=\"background:gold\" | S.4\n| Sparrow: Distributed, Low Latency Scheduling\n| Kay Ousterhout, Patrick Wendell, Matei Zaharia, Ion Stoica (UC Berkeley)\n|\n* Large-scale data analytics frameworks\n* Low latency towards shorter task durations and larger degrees of parallelism\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nSparrow: Distributed, Low Latency Scheduling\n----\nLarge-scale data analytics frameworks are shifting towards shorter task durations and larger degrees of parallelism to provide low latency. Scheduling highly parallel jobs that complete in hundreds of milliseconds poses a major challenge for task schedulers, which will need to schedule millions of tasks per second on appropriate machines while offering millisecond-level latency and high availability. We demonstrate that a decentralized, randomized sampling approach provides near-optimal performance while avoiding the throughput and availability limitations of a centralized design. We implement and deploy our scheduler, Sparrow, on a 110-machine cluster and demonstrate that Sparrow performs within 12% of an ideal scheduler.</ref>\n* Challenge: Scheduling highly parallel jobs that complete in hundreds of milliseconds poses a major challenge for task schedulers, which will need to schedule millions of tasks per second on appropriate machines while offering millisecond-level latency and high availability.\n* Approach: decentralized, randomized sampling approach (which provides near-optimal performance)\n* Result: Sparrow on a 110-machine cluster and demonstrate it performs within 12% of an ideal scheduler\n* b.question: definition of theoretical limit for ideal scheduler?\n* b.idea: compute-striping? compute-redundancy? for better performance and fault-tolerance\n\n\n\n\n|-\n| style=\"background:darkslategray\" | S._\n| Timecard: Controlling User-Perceived Delays in Server-Based Mobile Applications\n| Lenin Ravindranath (MIT), Jitendra Padhye, Ratul Mahajan (Microsoft Research), Hari Balakrishnan (MIT)\n|\n* Consistent response time for mobile applications\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nTimecard: Controlling User-Perceived Delays in Server-Based Mobile Applications\n----\nProviding consistent response times to users of mobile applications is challenging because there are several variable delays between the start of a user\'s request and the completion of the response. These delays include location lookup, sensor data acquisition, radio wake-up, network transmissions, and processing on both the client and server. To allow applications to achieve consistent response times in the face of these variable delays, this paper presents the design, implementation, and evaluation of the Timecard system. Timecard provides two abstractions: the first returns the time elapsed since the user started the request, and the second returns an estimate of the time it would take to transmit the response from the server to the client and process the response at the client. With these abstractions, the server can adapt its processing time to control the end-to-end delay for the request. Implementing these abstractions requires Timecard to track delays across multiple asynchronous activities, handle time skew between client and server, and estimate network transfer times. Experiments with Timecard incorporated into two mobile applications show that the end-to-end delay is within 50 ms of the target delay of 1200 ms over 90% of the time.</ref>\n* b.question: Can this be related to SILK browser from Amazon?\n* Challenge: providing consistent response time to users of mobile applications\n\n\n\n\n|-\n| style=\"background:gold\" | S.4\n| Fast Dynamic Binary Translation for the Kernel\n| Piyus Kedia, Sorav Bansal (IIT Delhi)\n|\n* Dynamic binary translation (DBT)\n* DBT for implementation of VMM\n* DBT for instrumentation <ref>instrumentation - In context of computer programming, instrumentation refers to an ability to monitor or measure the level of a product\'s performance, to diagnose errors and to write trace information. Programmers implement instrumentation in the form of code instructions that monitor specific components in a system (for example, instructions may output logging information to appear on screen). When an application contains instrumentation code, it can be managed using a management tool. Instrumentation is necessary to review the performance of the application. Instrumentation approaches can be of two types: Source instrumentation and binary instrumentation.</ref> in the OS kernel\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nFast Dynamic Binary Translation for the Kernel\n----\nDynamic binary translation (DBT) is a powerful technique with several important applications. System-level binary translators have been used for implementing a Virtual Machine Monitor [2] and for instrumentation in the OS kernel [10]. In current designs, the performance overhead of binary translation on kernel-intensive workloads is high. e.g., over 10x slowdowns were reported on the syscall nanobenchmark in [2], 2-5x slowdowns were reported on lmbench microbenchmarks in [10]. These overheads are primarily due to the extra work required to correctly handle kernel mechanisms like interrupts, exceptions, and physical CPU concurrency.\n\nWe present a kernel-level binary translation mechanism which exhibits near-native performance even on applications with large kernel activity. Our translator relaxes transparency requirements and aggressively takes advantage of kernel invariants to eliminate sources of slowdown. We have implemented our translator as a loadable module in unmodified Linux, and present performance and scalability experiments on multiprocessor hardware. Although our implementation is Linux specific, our mechanisms are quite general; we only take advantage of typical kernel design patterns, not Linux-specific features. For example, our translator performs 3x faster than previous kernel-level DBT implementations while running the Apache web server.</ref>\n* Contribution: a kernel-level binary translation mechanism - which exhibits near-native performance even on applications with large kernel activity.\n* Challenge: to reduce the overheads which are primarily due to the extra work required to correctly handle kernel mechanisms like interrupts, exceptions, and physical CPU concurrency.\n* Approach: relaxing transparency requirements and aggressively taking advantages of kernel invariants - to eliminate sources of slowdown.\n* (Note) DBT is widely used in\n:* virtualization <ref>K. Adams and O. Agesen. A comparison of software and hardware techniques for x86 virtualization. In ASPLOS \'06</ref>\n:* testing/verification <ref>S. Nagarakatte, S. Burckhardt, M. M. Martin, and M. Musuvathi. Multicore acceleration of priority-based schedulers for concurrency bug detection. In PLDI ’12.</ref>\n:* debugging <ref>Q. Zhao, R. Rabbah, S. Amarasinghe, L. Rudolph, and W.F. Wong. How to do a million watchpoints: efﬁcient debugging using dynamic instrumentation. In CC’08/ETAPS’08.</ref>\n:* profiling <ref>Q. Zhao, D. Koh, S. Raza, D. Bruening, W.-F. Wong, and S. Amarasinghe. Dynamic cache contention detection in multi-threaded applications. In VEE ’11.</ref>\n:* sandboxing <ref>V. Kiriansky, D. Bruening, and S. Amarasinghe. Secure execution via program shepherding. In USENIX Security \'02</ref>\n:* dynamic optimizations <ref>V. Bala, E. Duesterwald, and S. Banerjia. Dynamo: a transparent dynamic optimization system. ACM SIGPLAN Notices, 35(5):1–12, 2000.</ref>\n\n\n\n\n|-\n| style=\"background:darkseagreen\" | S.3\n| VirtuOS: An Operating System with Kernel Virtualization\n| Ruslan Nikolaev, Godmar Back (Virginia Polytechnic Institute)\n|\n|\n|-\n| style=\"background:darkseagreen\" | S.3\n| From L3 to seL4: What Have We Learnt in 20 Years of L4 Microkernels?\n| Kevin Elphinstone, Gernot Heiser (NICTA & UNSW)\n|\n|\n|-\n| style=\"background:darkseagreen\" | S.3\n| Replication, History, and Grafting in the Ori File System\n| Ali Mashtizadeh, Andrea Bittau, Yifeng Frank Huang, David Mazieres (Stanford University)\n|\n|\n|-\n| style=\"background:coral\" | S.5\n| An Analysis of Facebook Photo Caching\n| Qi Huang, Ken Birman, Robbert van Renesse (Cornell University), Wyatt Lloyd (Princeton University), Sanjeev Kumar, Harry C. Li (Facebook Inc.)\n|\n|\n|-\n| style=\"background:coral\" | S.5\n| IOFlow: A Software-Defined Storage Architecture\n| Eno Thereska, Hitesh Ballani, Greg O\'Shea, Thomas Karagiannis, Antony Rowstron (Microsoft Research), Tom Talpey (Microsoft), Richard Black (Microsoft Research), Timothy Zhu (Carnegie Mellon University)\n|\n|\n|-\n| style=\"background:gold\" | S.4\n| From ARIES to MARS: Transaction Support for Next-Generation, Solid-State Drives\n| Joel Coburn, Trevor Bunker, Meir Schwarz, Rajesh K. Gupta, Steven Swanson (University of California, San Diego)\n|\n* Write-ahead logging (WAL) <ref>Write-ahead logging (WAL) is a family of techniques for providing atomicity and durability in database systems. In a system using WAL, all modifications are written to a log before they are applied. WAL은 database가 in-place로 update될 수 있도록 한다. In-place update의 장점은 index와 block list를 수정할 필요를 줄여준다는 것이다. 반면 atomic update를 구현하기 위한 또 다른 방법인 shadow paging은 not-in-place (or out-of-place) update 방식이다. </ref>\n|\n|-\n|\n| Asynchronous Intrusion Recovery for Interconnected Web Services\n| Ramesh Chandra, Taesoo Kim, Nickolai Zeldovich (MIT CSAIL)\n|\n|\n|-\n| style=\"background:darkseagreen\" | S.3\n| Optimistic Crash Consistency\n| Vijay Chidambaram, Thanumalayan Sankaranarayana Pillai, Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau (University of Wisconsin-Madison)\n|\n|\n* Insights: for cold-storage?\n|-\n| style=\"background:darkseagreen\" | S.3\n| Do Not Blame Users for Misconfigurations\n| Tianyin Xu, Jiaqi Zhang, Peng Huang, Jing Zheng, Tianwei Sheng (UC San Diego), Ding Yuan (University of Toronto), Yuanyuan Zhou (UC San Diego), Shankar Pasupathy (NetApp Inc)\n|\n|\n* Insights: for automatic optimization?\n|-\n| style=\"background:darkseagreen\" | S.3\n| (BestPaper) Towards Optimization-Safe Systems: Analyzing the Impact of Undefined Behavior\n| Xi Wang, Nickolai Zeldovich, M. Frans Kaashoek, Armando Solar-Lezama (MIT CSAIL)\n|\n|\n|-\n|\n| Transaction Chains: Achieving Serializability with Low Latency in Geo-Distributed Storage Systems\n| Yang Zhang, Russell Power, Siyuan Zhou, Yair Sovran (NYU), Marcos K. Aguilera (Microsoft Research), Jinyang Li (NYU)\n|\n|\n|-\n| style=\"background:darkseagreen\" | S.3\n| SPANStore: Cost-Effective Geo-Replicated Storage Spanning Multiple Cloud Services\n| Zhe Wu, Michael Butkiewicz, Dorian Perkins (UC Riverside), Ethan Katz-Bassett (USC), Harsha V. Madhyastha (UC Riverside)\n|\n|\n|-\n| style=\"background:gold\" | S.4\n| Consistency-Based Service Level Agreements for Cloud Storage\n| Douglas B. Terry, Vijayan Prabhakaran, Ramakrishna Kotla, Mahesh Balakrishnan, Marcos K. Aguilera (Microsoft Research), Hussam Abu-Libdeh (Cornell University)\n|\n|\n* Insights: QoS?\n|-\n| style=\"background:coral\" | S.5\n| Tango: Distributed Data Structures over a Shared Log\n| Mahesh Balakrishnan, Dahlia Malkhi, Ted Wobber, Ming Wu, Vijayan Prabhakaran (Microsoft Research), Michael Wei (UCSD), John D. Davis (Microsoft Research), Sriram Rao (Microsoft), Tao Zou (Cornell University), Aviad Zuck (Tel-Aviv University)\n|\n|\n* Insights: new data structure model?\n|-\n| style=\"background:darkseagreen\" | S.3\n| Verifying Computations with State\n| Benjamin Braun (UT Austin), Ariel J. Feldman (University of Pennsylvania), Zuocheng Ren, Srinath Setty, Andrew J. Blumberg, Michael Walfish (UT Austin)\n|\n|\n|-\n|\n| There Is More Consensus In Egalitarian Parliaments\n| Iulian Moraru, David G. Andersen (Carnegie Mellon University), Michael Kaminsky (Intel Labs)\n|\n|\n|-\n|\n| ROOT: Replaying Multithreaded Traces with Resource-Oriented Ordering\n| Zev Weiss, Tyler Harter, Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau (University of Wisconsin-Madison)\n|\n|\n|-\n|\n| PARROT: A Practical Runtime for Deterministic, Stable, and Reliable Threads\n| Heming Cui (Columbia University), Jiri Simsa (Carnegie Mellon University), Yi-Hong Lin, Hao Li (Columbia University), Ben Blum (Carnegie Mellon University), Xinan Xu, Junfeng Yang (Columbia University), Garth A. Gibson, Randal E. Bryant (Carnegie Mellon University)\n|\n|\n|-\n|\n| RaceMob: Crowdsourced Data Race Detection\n| Baris Kasikci, Cristian Zamfir, George Candea (EPFL)\n|\n|\n|-\n| style=\"background:gold\" | S.4\n| Discretized Streams: Fault-Tolerant Streaming Computation at Scale\n| Matei Zaharia, Tathagata Das, Haoyuan Li, Timothy Hunter, Scott Shenker, Ion Stoica (UC Berkeley)\n|\n|\n|-\n| style=\"background:coral\" | S.5\n| (BestPaper) Naiad: A Timely Dataflow System\n| Derek G. Murray, Frank McSherry, Rebecca Isaacs, Michael Isard, Paul Barham, Martin Abadi (Microsoft Research)\n|\n|\n* Insights: Compute/IO Prediction?\n|-\n| style=\"background:darkseagreen\" | S.3\n| A Lightweight Infrastructure for Graph Analytics\n| Donald Nguyen, Andrew Lenharth, Keshav Pingali (University of Texas at Austin)\n|\n|\n|-\n| style=\"background:darkseagreen\" | S.3\n| X-Stream: Edge-Centric Graph Processing using Streaming Partitions\n| Amitabha Roy, Ivo Mihailovic, Willy Zwaenepoel (EPFL)\n|\n|\n|-\n| \n| \n| \n|\n|\n|-\n|}\n\n\n\n\n== References ==\n\n<references/>','utf-8'),(2160,'== SOSP 2013 Summary ==\n\n{| class=\"wikitable\" style=\"background:white\"\n|-\n|+ [http://sigops.org/sosp/sosp13/program.html SOSP 2013 The 24th ACM Symposium on Operating Systems Principles]\n|-\n! Pick\n! width=\"20%\" | Title\n! width=\"20%\" | Authors\n! width=\"10%\" | Keywords\n! width=\"50%\" | Memo\n|-\n| style=\"background:gold\" | S.4\n| (BestPaper) The Scalable Commutativity Rule: Designing Scalable Software for Multicore Processors\n| Austin T. Clements, M. Frans Kaashoek, Nickolai Zeldovich, Robert Morris (MIT CSAIL), Eddie Kohler (Harvard)\n| \n* Application scalability by commutative interface operations\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nThe Scalable Commutativity Rule: Designing Scalable Software for Multicore Processors\n----\nWhat fundamental opportunities for scalability are latent in interfaces, such as system call APIs? Can scalability opportunities be identified even before any implementation exists, simply by considering interface specifications? To answer these questions this paper introduces the following rule: Whenever interface operations commute, they can be implemented in a way that scales. This rule aids developers in building more scalable software starting from interface design and carrying on through implementation, testing, and evaluation.\n\nTo help developers apply the rule, a new tool named Commuter accepts high-level interface models and generates tests of operations that commute and hence could scale. Using these tests, Commuter can evaluate the scalability of an implementation. We apply Commuter to 18 POSIX calls and use the results to guide the implementation of a new research operating system kernel called sv6. Linux scales for 68% of the 13,664 tests generated by Commuter for these calls, and Commuter finds many problems that have been observed to limit application scalability. sv6 scales for 99% of the tests.</ref>\n* Key findings: Whenever interface operations commute, they can be implemented in a way that scales\n* Key questions: Can scalability opportunities be identified even before any implementation exists, simply by considering interface specifications?\n* Result (분석 필요): Linux scales for 68% of the 13,664 tests generated by Commuter for these calls\n* b.idea: New SmartSSD API for scalable In-Storage Computing (ISC)\n* b.question: ISC의 궁극적인 모습은 micro-server가 되는 것일까?\n\n\n\n\n|-\n| style=\"background:coral\" | S.5\n| Speedy Transactions in Multicore In-Memory Databases\n| Stephen Tu, Wenting Zheng (MIT), Eddie Kohler (Harvard), Barbara Liskov, Samuel Madden (MIT)\n|\n* In-memory database on multicore machines\n* Avoiding centralized contention points\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nSpeedy Transactions in Multicore In-Memory Databases\n----\nSilo is a new in-memory database that achieves excellent performance and scalability on modern multicore machines. Silo was designed from the ground up to use system memory and caches efficiently. For instance, it avoids all centralized contention points, including that of centralized transaction ID assignment. Silo\'s key contribution is a commit protocol based on optimistic concurrency control that provides serializability while avoiding all shared-memory writes for records that were only read. Though this might seem to complicate the enforcement of a serial order, correct logging and recovery is provided by linking periodically-updated epochs with the commit protocol. Silo provides the same guarantees as any serializable database without unnecessary scalability bottlenecks or much additional latency. Silo achieves almost 700,000 transactions per second on a standard TPC-C workload mix on a 32-core machine, as well as near-linear scalability. Considered per core, this is several times higher than previously reported results.</ref>\n* Silo is a new IMDB: achieving excellent performance and scalability on multicore machines\n* New design: to use system memory and caches efficiently\n* Avoiding: all centralized contention points (such as centralized transaction ID assignment)\n* Key contribution: a commit protocol based on optimistic concurrency control that provides serializability while avoiding all shared-memory writes for records that were only read\n* Result: almost 700,000 TPS on a standard TPC-C workload mix on a 32-core machine, as well as near-linear scalability.\n\n\n\n\n|-\n| style=\"background:darkslategray\" | S._\n| Everything You Always Wanted to Know about Synchronization but Were Afraid to Ask\n| Tudor David, Rachid Guerraoui, Vasileios Trigonakis (EPFL)\n|\n* Factors which impact on the scalability of synchronization\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nEverything You Always Wanted to Know about Synchronization but Were Afraid to Ask\n----\nThis paper presents the most exhaustive study of synchronization to date. We span multiple layers, from hardware cache-coherence protocols up to high-level concurrent software. We do so on different types of architectures, from single-socket -- uniform and non-uniform -- to multi-socket -- directory and broadcast-based -- many-cores. We draw a set of observations that, roughly speaking, imply that scalability of synchronization is mainly a property of the hardware.</ref>\n\n\n\n\n|-\n| style=\"background:darkslategray\" | S._\n| Dandelion: A Compiler and Runtime for Heterogeneous Systems\n| Christopher J Rossbach, Yuan Yu, Jon Currey, Jean-Philippe Martin, Dennis Fetterly (Microsoft Research Silicon Valley)\n|\n* User-friendly programming tool for heterogeneous systems\n* Automatic cross-compilation (.NET-to-CUDA)\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nDandelion: A Compiler and Runtime for Heterogeneous Systems\n----\nComputer systems increasingly rely on heterogeneity to achieve greater performance, scalability and energy efficiency. Because heterogeneous systems typically comprise multiple execution contexts with different programming abstractions and runtimes, programming them remains extremely challenging.\n\nDandelion is a system designed to address this programmability challenge for data-parallel applications. Dandelion provides a unified programming model for heterogeneous systems that span diverse execution contexts including CPUs, GPUs, FPGAs, and the cloud. It adopts the .NET LINQ (Language INtegrated Query) approach, integrating data-parallel operators into general purpose programming languages such as C# and F#. It therefore provides an expressive data model and native language integration for user-defined functions, enabling programmers to write applications using standard high-level languages and development tools.\n\nDandelion automatically and transparently distributes data-parallel portions of a program to available computing resources, including compute clusters for distributed execution and CPU and GPU cores of individual nodes for parallel execution. To enable automatic execution of .NET code on GPUs, Dandelion cross-compiles .NET code to CUDA kernels and uses the PTask runtime [85] to manage GPU execution. This paper discusses the design and implementation of Dandelion, focusing on the distributed CPU and GPU implementation. We evaluate the system using a diverse set of workloads.</ref>\n* Key contribution: user-friendly programming tool for heterogeneous systems\n* Dandelion automatically and transparently distributes data-parallel portions of a program to available computing resources\n* To enable automatic execution of .NET code on GPUs, Dandelion cross-compiles .NET code to CUDA kernels and uses the PTask runtime to manage GPU execution.\n\n\n\n\n|-\n| style=\"background:gold\" | S.4\n| Sparrow: Distributed, Low Latency Scheduling\n| Kay Ousterhout, Patrick Wendell, Matei Zaharia, Ion Stoica (UC Berkeley)\n|\n* Large-scale data analytics frameworks\n* Low latency towards shorter task durations and larger degrees of parallelism\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nSparrow: Distributed, Low Latency Scheduling\n----\nLarge-scale data analytics frameworks are shifting towards shorter task durations and larger degrees of parallelism to provide low latency. Scheduling highly parallel jobs that complete in hundreds of milliseconds poses a major challenge for task schedulers, which will need to schedule millions of tasks per second on appropriate machines while offering millisecond-level latency and high availability. We demonstrate that a decentralized, randomized sampling approach provides near-optimal performance while avoiding the throughput and availability limitations of a centralized design. We implement and deploy our scheduler, Sparrow, on a 110-machine cluster and demonstrate that Sparrow performs within 12% of an ideal scheduler.</ref>\n* Challenge: Scheduling highly parallel jobs that complete in hundreds of milliseconds poses a major challenge for task schedulers, which will need to schedule millions of tasks per second on appropriate machines while offering millisecond-level latency and high availability.\n* Approach: decentralized, randomized sampling approach (which provides near-optimal performance)\n* Result: Sparrow on a 110-machine cluster and demonstrate it performs within 12% of an ideal scheduler\n* b.question: definition of theoretical limit for ideal scheduler?\n* b.idea: compute-striping? compute-redundancy? for better performance and fault-tolerance\n\n\n\n\n|-\n| style=\"background:darkslategray\" | S._\n| Timecard: Controlling User-Perceived Delays in Server-Based Mobile Applications\n| Lenin Ravindranath (MIT), Jitendra Padhye, Ratul Mahajan (Microsoft Research), Hari Balakrishnan (MIT)\n|\n* Consistent response time for mobile applications\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nTimecard: Controlling User-Perceived Delays in Server-Based Mobile Applications\n----\nProviding consistent response times to users of mobile applications is challenging because there are several variable delays between the start of a user\'s request and the completion of the response. These delays include location lookup, sensor data acquisition, radio wake-up, network transmissions, and processing on both the client and server. To allow applications to achieve consistent response times in the face of these variable delays, this paper presents the design, implementation, and evaluation of the Timecard system. Timecard provides two abstractions: the first returns the time elapsed since the user started the request, and the second returns an estimate of the time it would take to transmit the response from the server to the client and process the response at the client. With these abstractions, the server can adapt its processing time to control the end-to-end delay for the request. Implementing these abstractions requires Timecard to track delays across multiple asynchronous activities, handle time skew between client and server, and estimate network transfer times. Experiments with Timecard incorporated into two mobile applications show that the end-to-end delay is within 50 ms of the target delay of 1200 ms over 90% of the time.</ref>\n* b.question: Can this be related to SILK browser from Amazon?\n* Challenge: providing consistent response time to users of mobile applications\n\n\n\n\n|-\n| style=\"background:gold\" | S.4\n| Fast Dynamic Binary Translation for the Kernel\n| Piyus Kedia, Sorav Bansal (IIT Delhi)\n|\n* Dynamic binary translation (DBT)\n* DBT for implementation of VMM\n* DBT for instrumentation <ref>instrumentation - In context of computer programming, instrumentation refers to an ability to monitor or measure the level of a product\'s performance, to diagnose errors and to write trace information. Programmers implement instrumentation in the form of code instructions that monitor specific components in a system (for example, instructions may output logging information to appear on screen). When an application contains instrumentation code, it can be managed using a management tool. Instrumentation is necessary to review the performance of the application. Instrumentation approaches can be of two types: Source instrumentation and binary instrumentation.</ref> in the OS kernel\n|\n* Abstract <ref>\'\'\'Abstract\'\'\'\nFast Dynamic Binary Translation for the Kernel\n----\nDynamic binary translation (DBT) is a powerful technique with several important applications. System-level binary translators have been used for implementing a Virtual Machine Monitor [2] and for instrumentation in the OS kernel [10]. In current designs, the performance overhead of binary translation on kernel-intensive workloads is high. e.g., over 10x slowdowns were reported on the syscall nanobenchmark in [2], 2-5x slowdowns were reported on lmbench microbenchmarks in [10]. These overheads are primarily due to the extra work required to correctly handle kernel mechanisms like interrupts, exceptions, and physical CPU concurrency.\n\nWe present a kernel-level binary translation mechanism which exhibits near-native performance even on applications with large kernel activity. Our translator relaxes transparency requirements and aggressively takes advantage of kernel invariants to eliminate sources of slowdown. We have implemented our translator as a loadable module in unmodified Linux, and present performance and scalability experiments on multiprocessor hardware. Although our implementation is Linux specific, our mechanisms are quite general; we only take advantage of typical kernel design patterns, not Linux-specific features. For example, our translator performs 3x faster than previous kernel-level DBT implementations while running the Apache web server.</ref>\n* Contribution: a kernel-level binary translation mechanism - which exhibits near-native performance even on applications with large kernel activity.\n* Challenge: to reduce the overheads which are primarily due to the extra work required to correctly handle kernel mechanisms like interrupts, exceptions, and physical CPU concurrency.\n* Approach: relaxing transparency requirements and aggressively taking advantages of kernel invariants - to eliminate sources of slowdown.\n* (Note) DBT is widely used in\n:* virtualization <ref>K. Adams and O. Agesen. A comparison of software and hardware techniques for x86 virtualization. In ASPLOS \'06</ref>\n:* testing/verification <ref>S. Nagarakatte, S. Burckhardt, M. M. Martin, and M. Musuvathi. Multicore acceleration of priority-based schedulers for concurrency bug detection. In PLDI ’12.</ref>\n:* debugging <ref>Q. Zhao, R. Rabbah, S. Amarasinghe, L. Rudolph, and W.F. Wong. How to do a million watchpoints: efﬁcient debugging using dynamic instrumentation. In CC’08/ETAPS’08.</ref>\n:* profiling <ref>Q. Zhao, D. Koh, S. Raza, D. Bruening, W.-F. Wong, and S. Amarasinghe. Dynamic cache contention detection in multi-threaded applications. In VEE ’11.</ref>\n:* sandboxing <ref>V. Kiriansky, D. Bruening, and S. Amarasinghe. Secure execution via program shepherding. In USENIX Security \'02</ref>\n:* dynamic optimizations <ref>V. Bala, E. Duesterwald, and S. Banerjia. Dynamo: a transparent dynamic optimization system. ACM SIGPLAN Notices, 35(5):1–12, 2000.</ref>\n\n\n\n\n|-\n| style=\"background:darkseagreen\" | S.3\n| VirtuOS: An Operating System with Kernel Virtualization\n| Ruslan Nikolaev, Godmar Back (Virginia Polytechnic Institute)\n|\n|\n|-\n| style=\"background:darkseagreen\" | S.3\n| From L3 to seL4: What Have We Learnt in 20 Years of L4 Microkernels?\n| Kevin Elphinstone, Gernot Heiser (NICTA & UNSW)\n|\n|\n|-\n| style=\"background:darkseagreen\" | S.3\n| Replication, History, and Grafting in the Ori File System\n| Ali Mashtizadeh, Andrea Bittau, Yifeng Frank Huang, David Mazieres (Stanford University)\n|\n|\n|-\n| style=\"background:coral\" | S.5\n| An Analysis of Facebook Photo Caching\n| Qi Huang, Ken Birman, Robbert van Renesse (Cornell University), Wyatt Lloyd (Princeton University), Sanjeev Kumar, Harry C. Li (Facebook Inc.)\n|\n|\n|-\n| style=\"background:coral\" | S.5\n| IOFlow: A Software-Defined Storage Architecture\n| Eno Thereska, Hitesh Ballani, Greg O\'Shea, Thomas Karagiannis, Antony Rowstron (Microsoft Research), Tom Talpey (Microsoft), Richard Black (Microsoft Research), Timothy Zhu (Carnegie Mellon University)\n|\n|\n|-\n| style=\"background:gold\" | S.4\n| From ARIES to MARS: Transaction Support for Next-Generation, Solid-State Drives\n| Joel Coburn, Trevor Bunker, Meir Schwarz, Rajesh K. Gupta, Steven Swanson (University of California, San Diego)\n|\n* Write-ahead logging (WAL) <ref> Write-ahead logging (WAL)은 database system에서 atomicity와 durability를 제공하기 위한 기술의 한 부류이다. WAL을 이용하는 system에서는 모든 modification들은 apply되기 전에 우선 log에 쓰여진다. WAL은 database가 in-place로 update될 수 있도록 한다. (index와 block list를 수정할 필요를 줄여준다는 것이 in-place update의 주요 장점임.) 반면 atomic update를 구현하는 또 다른 방법인 shadow paging은 not-in-place (or out-of-place) update 방식이다. </ref>\n|\n|-\n|\n| Asynchronous Intrusion Recovery for Interconnected Web Services\n| Ramesh Chandra, Taesoo Kim, Nickolai Zeldovich (MIT CSAIL)\n|\n|\n|-\n| style=\"background:darkseagreen\" | S.3\n| Optimistic Crash Consistency\n| Vijay Chidambaram, Thanumalayan Sankaranarayana Pillai, Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau (University of Wisconsin-Madison)\n|\n|\n* Insights: for cold-storage?\n|-\n| style=\"background:darkseagreen\" | S.3\n| Do Not Blame Users for Misconfigurations\n| Tianyin Xu, Jiaqi Zhang, Peng Huang, Jing Zheng, Tianwei Sheng (UC San Diego), Ding Yuan (University of Toronto), Yuanyuan Zhou (UC San Diego), Shankar Pasupathy (NetApp Inc)\n|\n|\n* Insights: for automatic optimization?\n|-\n| style=\"background:darkseagreen\" | S.3\n| (BestPaper) Towards Optimization-Safe Systems: Analyzing the Impact of Undefined Behavior\n| Xi Wang, Nickolai Zeldovich, M. Frans Kaashoek, Armando Solar-Lezama (MIT CSAIL)\n|\n|\n|-\n|\n| Transaction Chains: Achieving Serializability with Low Latency in Geo-Distributed Storage Systems\n| Yang Zhang, Russell Power, Siyuan Zhou, Yair Sovran (NYU), Marcos K. Aguilera (Microsoft Research), Jinyang Li (NYU)\n|\n|\n|-\n| style=\"background:darkseagreen\" | S.3\n| SPANStore: Cost-Effective Geo-Replicated Storage Spanning Multiple Cloud Services\n| Zhe Wu, Michael Butkiewicz, Dorian Perkins (UC Riverside), Ethan Katz-Bassett (USC), Harsha V. Madhyastha (UC Riverside)\n|\n|\n|-\n| style=\"background:gold\" | S.4\n| Consistency-Based Service Level Agreements for Cloud Storage\n| Douglas B. Terry, Vijayan Prabhakaran, Ramakrishna Kotla, Mahesh Balakrishnan, Marcos K. Aguilera (Microsoft Research), Hussam Abu-Libdeh (Cornell University)\n|\n|\n* Insights: QoS?\n|-\n| style=\"background:coral\" | S.5\n| Tango: Distributed Data Structures over a Shared Log\n| Mahesh Balakrishnan, Dahlia Malkhi, Ted Wobber, Ming Wu, Vijayan Prabhakaran (Microsoft Research), Michael Wei (UCSD), John D. Davis (Microsoft Research), Sriram Rao (Microsoft), Tao Zou (Cornell University), Aviad Zuck (Tel-Aviv University)\n|\n|\n* Insights: new data structure model?\n|-\n| style=\"background:darkseagreen\" | S.3\n| Verifying Computations with State\n| Benjamin Braun (UT Austin), Ariel J. Feldman (University of Pennsylvania), Zuocheng Ren, Srinath Setty, Andrew J. Blumberg, Michael Walfish (UT Austin)\n|\n|\n|-\n|\n| There Is More Consensus In Egalitarian Parliaments\n| Iulian Moraru, David G. Andersen (Carnegie Mellon University), Michael Kaminsky (Intel Labs)\n|\n|\n|-\n|\n| ROOT: Replaying Multithreaded Traces with Resource-Oriented Ordering\n| Zev Weiss, Tyler Harter, Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau (University of Wisconsin-Madison)\n|\n|\n|-\n|\n| PARROT: A Practical Runtime for Deterministic, Stable, and Reliable Threads\n| Heming Cui (Columbia University), Jiri Simsa (Carnegie Mellon University), Yi-Hong Lin, Hao Li (Columbia University), Ben Blum (Carnegie Mellon University), Xinan Xu, Junfeng Yang (Columbia University), Garth A. Gibson, Randal E. Bryant (Carnegie Mellon University)\n|\n|\n|-\n|\n| RaceMob: Crowdsourced Data Race Detection\n| Baris Kasikci, Cristian Zamfir, George Candea (EPFL)\n|\n|\n|-\n| style=\"background:gold\" | S.4\n| Discretized Streams: Fault-Tolerant Streaming Computation at Scale\n| Matei Zaharia, Tathagata Das, Haoyuan Li, Timothy Hunter, Scott Shenker, Ion Stoica (UC Berkeley)\n|\n|\n|-\n| style=\"background:coral\" | S.5\n| (BestPaper) Naiad: A Timely Dataflow System\n| Derek G. Murray, Frank McSherry, Rebecca Isaacs, Michael Isard, Paul Barham, Martin Abadi (Microsoft Research)\n|\n|\n* Insights: Compute/IO Prediction?\n|-\n| style=\"background:darkseagreen\" | S.3\n| A Lightweight Infrastructure for Graph Analytics\n| Donald Nguyen, Andrew Lenharth, Keshav Pingali (University of Texas at Austin)\n|\n|\n|-\n| style=\"background:darkseagreen\" | S.3\n| X-Stream: Edge-Centric Graph Processing using Streaming Partitions\n| Amitabha Roy, Ivo Mihailovic, Willy Zwaenepoel (EPFL)\n|\n|\n|-\n| \n| \n| \n|\n|\n|-\n|}\n\n== References ==\n\n<references/>','utf-8'),(2161,'\n\n== ## bNote-2014-02-12 ==\n\n=== MySQL replication ===\n\n* On the master,\n:- enable binary logging\n:- configure a unique server ID (might require a server restart)\n: [http://dev.mysql.com/doc/refman/5.7/en/replication-howto-masterbaseconfig.html Section 16.1.1.1, “Setting the Replication Master Configuration”]\n\n* On each slave (you want to connect to the master)\n:- configure a unique server ID (might require a server restart)\n: [http://dev.mysql.com/doc/refman/5.7/en/replication-howto-slavebaseconfig.html Section 16.1.1.2, “Setting the Replication Slave Configuration”]\n\n\n* http://www.linux-kvm.org/wiki/images/f/f9/2012-forum-virtio-blk-performance-improvement.pdf\n\n* https://dev.mysql.com/doc/refman/5.7/en/innodb-memcached-intro.html\n\n* https://dev.mysql.com/doc/refman/5.1/en/mysql-cluster-replication-multi-master.html\n\n* https://dev.mysql.com/doc/refman/5.7/en/replication-solutions-scaleout.html\n\n* http://dev.mysql.com/doc/refman/5.0/en/replication-howto.html\n\n* https://www.facebook.com/notes/facebook-engineering/mcdipper-a-key-value-cache-for-flash-storage/10151347090423920\n\n* http://antirez.com/news/52\n\n* http://redis.io/documentation\n\n* http://stackoverflow.com/questions/10137857/is-redis-just-a-cache\n\n* http://stackoverflow.com/questions/10558465/memcache-vs-redis\n\n* https://github.com/twitter/fatcache\n\n* http://www.tipcache.com/tip/How_to_Balance_Database_Load_Across_Multiple_MySQL_Servers_6.html\n\n* http://www.severalnines.com/resources/clustercontrol-mysql-haproxy-load-balancing-tutorial\n\n* http://theory.uwinnipeg.ca/mysql/load-balancer.html\n\n\n* http://www.mysql.com/products/cluster/features.html\n\n\n=== WW07_MSL_STAR ===\n\n: \'14-03 週次 MSL 業務 報告\n\n□ Parthenon 1.0 (DC Testbed & Workload 분석 Framework)\n \n- Realistic DC Testbed 확보를 위해 고객 DC에서 사용하고 있는 것으로 알려진 Replicated DB Server Network 구축 작업을 진행하고 있습니다. Replication을 위한 다양한 Architecture Option들 중, 빠른 시간 내에 구축이 가능한 비동기 방식의 Master-Slave 방식부터 시작하기로 하였습니다. Load Balancer 1 Node 포함, Master DB 1 Node, Slave DB 2 Node로 구성되는 4-Node DB Network 구조로 설계하고 있으며, Load Balancer를 통해 Query Split이 가능하도록 구성할 계획입니다.\n \n- N-tier 구조에서의 Cache Deployment Architecture를 설계하고 있습니다. 실제 DC 현장에서는 DB 성능 가속화를 위해 Cache를 적극적으로 활용하고 있기 때문에 본 Testbed에서도 이러한 상황을 반영하고자 합니다. DB 가속화를 위한 Cache 방식은 Query Cache 방식과 Block Cache 방식으로 나눌 수 있으며, Query Cache 방식은 다시, DB Server 앞 단에서 동작하는 Standalone Server 방식, DB Server Local에서 동작하는 3rd-Party Cache Plug-in 방식, DB Server 자체적으로 제공하는 Query Cache Engine 방식으로 분류 가능합니다. DB Query 문맥과 상관 없이 Block Layer에서 동작하는 Block Cache는 Query Cache와 결합 사용하는 것이 가능하므로, 각 DB Server에 기본적으로 탑재하기로 결정하였습니다. 한편, Query Cache의 경우는 DB Query Pattern에 따라 성능 향상에 기여하는 정도가 상이할 수 있기 때문에, Query Cache로 성능을 얻기 위해서는 DB Workload에 대한 이해가 필수적입니다. Static Data를 주로 Service하는 경우에는 Query Cache 방식이 전체 성능에 큰 기여를 할 수 있겠으나, OLTP Workload에서는 상황이 같지 않을 것으로 예상됩니다. OLTP Style의 DB Workload에 대한 분석을 차주부터 진행할 계획입니다.\n\n== ## bNote-2014-02-11 ==\n\n\n\n=== tpcc-mysql source code analysis ===\n\ntpcc_start 는 TPC-C benchmark procedure를 실제로 수행하는 binary executable로서, 다음과 같은 parameter가 전달될 수 있다.\n <pre>\ntpcc_start\n-h server_host\n-P port\n-d database_name\n-u mysql_user\n-p mysql_password\n-w warehouse\n-c connections\n-r rampup_time\n-i report_interval\n-f report_file\n-t trx_file\n</pre>\n\ntpcc_start 프로그램의 main() 함수는\ntpcc-mysql/src/main.c 에 정의되어 있으며,\nmain() 함수 내에서 호출되는 seq_init() 함수에 의해\ntpcc_start 프로그램의 parameter 값이 다음과 같이 설정된다.\n\n* src/main.c\n <pre>\n348   if(valuable_flg==0){\n349     seq_init(10,10,1,1,1); /* normal ratio */\n350   }else{\n351     seq_init( atoi(argv[9 + arg_offset]), atoi(argv[10 + arg_offset]), atoi(argv[11 + arg_offset]),\n352               atoi(argv[12 + arg_offset]), atoi(argv[13 + arg_offset]) );\n353   }\n</pre>\n\n* src/sequenc.c\n: 여기서 no, py, os, dl, sl 등은 각각 neworder, payment, orderstatus, delivery, stocklevel에 해당된다.\n <pre>\n 49 void seq_init( int n, int p, int o, int d, int s )\n 50 {\n 51   pthread_mutex_init( &mutex, NULL );\n 52   no = n;\n 53   py = p;\n 54   os = o;\n 55   dl = d;\n 56   sl = s;\n 57   total = n + p + o + d + s;\n 58   seq = malloc( sizeof(int) * total );\n 59   shuffle();\n 60   next_num = 0;\n 61 }\n</pre>\n\n\n=== Links ===\n\n* [http://en.wikipedia.org/wiki/Write-ahead_logging Write-ahead logging (WAL)]\n\n* [http://en.wikipedia.org/wiki/In-place_algorithm In-place algorithm]\n\n* [http://en.wikipedia.org/wiki/Shadow_paging Shadow paging]\n\n* MySQL Scale-out Approach for better performance and scalability as a key factor for wikipedia\'s growth, by Asen Bozhikov\n\n* MySQL Proxy for Load Balancing\n\n* Ultramonkey? for Load Balancing or HA?\n\n* http://www.howtoforge.com/loadbalanced_mysql_cluster_debian_p5\n\n* http://www.ultramonkey.org/\n\n* http://forums.phpfreaks.com/topic/244687-best-architectures-for-separating-phpmysql-readswrites/\n\n* http://pic.dhe.ibm.com/infocenter/lnxinfo/v3r0m0/index.jsp?topic=%2Fperformance%2Ftuneforsybase%2Ffilesystem.htm\n\n* http://www.redhat.com/f/pdf/RHEL6_FileSystem_WP_5677547_0311_dm_web.pdf\n: Choosing a local file system (Redhat) ((B.GOOD))\n: variants will be faster. In general Ext3 or Ext4 is better if an application uses a single read/write\nthread and small files, while XFS shines when an application uses multiple read/write threads\nand bigger files.\nWe recommend that you measure the performance of your specific application on your target\nserver and storage system to make sure you choose the appropriate type of filesystem.\nRed Hat Enterprise Linux 6 has new filesystem capabilities and performance characteristics.\nKey features that have been introduced in Red Hat Enterprise Linux 6 include support for the\nSSD “trim” command, support for thinly provisioned storage, and automated detection and\nalignment of new filesystems on many types of storage devices.\n\n\n* http://forums.mysql.com/read.php?26,426824,427088#msg-427088\n\n* http://forums.mysql.com/read.php?26,539151,541520\n\n* http://dev.mysql.com/doc/connector-j/en/connector-j-master-slave-replication-connection.html\n\n* http://www.diglinux.com/2012/05/25/mysql-read-write-load-balance-using-mysql-proxy/\n\n* http://serverfault.com/questions/462361/is-mysql-proxy-ready-for-production-use\n\n* http://www.openlogic.com/wazi/bid/259864/Simple-database-load-balancing-with-MySQL-Proxy\n\n* https://www.usenix.org/system/files/conference/nsdi13/nsdi13-final170_update.pdf\n\n* https://github.com/clofresh/mysql-proxy-cache\n\n* http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=5662735&tag=1\n\n* http://www.thomas-krenn.com/de/wikiDE/images/2/22/Linux-io-stack-diagram_v0.1.pdf\n\n\n\n* http://slashdot.org/topic/bi/mariadb-vs-mysql-a-comparison/\n\n* http://cfresearch.org/files/HPCA-2011.pdf\n\n* http://www.percona.com/doc/percona-server/5.5/performance/atomic_fio.html\n\n* http://dev.mysql.com/doc/refman/5.7/en/innodb-performance.html#innodb-performance-adaptive_flushing\n\n* http://dev.mysql.com/doc/refman/5.7/en/replication-howto.html\n\n* http://www.rackspace.com/knowledge_center/article/mysql-replication-masterslave\n\n* https://dev.mysql.com/doc/refman/5.7/en/mysql-proxy-using.html\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=== 시스템 출장 품의 ===\n\n <pre>\n\n안녕하세요. Solution개발실 박혜빈입니다.\n\n \n\n \'14년 3월 해외출장 계획 실장님 보고 완료되었습니다.\n\n  2/14(금) 13:00까지 하기 본문 참고하시어 시스템 입력 및 취합 요청드립니다.\n\n \n\n \n\n출장국가 / 도시 방문처 출장기간 부 서 이 름 직 급 동반출장자 목 적\n미국 / San Diego NVMW (Non-Volatile\nMemories Workshop) 3/8~3/14 Solution개발실 박지형 책임 　 NVMW (Non-Volatile Memories Workshop)에 참석하여 작년 MSL 에서 진행하였던 OSWAP을 발표하고자 합니다.\n미국 / Napa Valley, CA　 Linux FS/MM/\nCollaboration Summit　 　3/24~3/28 Solution개발실　 김재극　 책임 　 Linux top 개발자들과 technical issue에 대해 교류하여 최신 기술이나 업계 동향을 센싱하고자 함\n대만 / Linkou Quanta Computer 3/3~3/7 Solution개발실 정명준 책임 　 * 중국 차세대 Data Center Server 아키텍쳐 및 SSD 배치/사용 방식 정보 확인\n* \'14년 메가 혁신과제 (Data Center 향 SSD 평가 Platform 구축 - 코드명 파르테논)로 진행하는 Data Center Testbed 설계 및 구축에 반영\n\n\n\n</pre>\n\n== ## bNote-2014-02-07 ==\n\n=== Real DB Transaction 규모 ===\n\n아래 정보를 이용하여 아마존 1초당 426개 물품 판매했다는 규모의 workload를 TPC-C 값으로 환산할 수 있을까?\n\n* https://www.google.co.kr/search?q=Naver+%EC%B4%88%EB%8B%B9+%EC%A0%91%EC%86%8D%EC%9E%90&rlz=1C1OPRB_enKR556KR556&oq=Naver+%EC%B4%88%EB%8B%B9+%EC%A0%91%EC%86%8D%EC%9E%90&aqs=chrome..69i57j69i64.11155j0j7&sourceid=chrome&espv=210&es_sm=122&ie=UTF-8#newwindow=1&q=Amazon+426+IOPS+transactions\n\n* http://www.bodnara.co.kr/bbs/article.html?D=7&cate=34&d_category=8&num=104870\n: 아마존, 초당 426개 물품 판매 기록.. 창사 이래 연말 최대 매출\n\n\n\n=== Fusion IO patents ===\n\n==== Fusion IO US 8019938 B2 (Apparatus, system, and method for solid-state storage as cache for high-capacity, non-volatile storage) ====\n\n* [https://www.google.com/patents/US8019938?pg=PA1&dq=US+8019938&hl=en&sa=X&ei=0h7zUqjMF7CwiQfC14Bw&ved=0CDUQ6AEwAA US 8019938 B2]\n: Apparatus, system, and method for solid-state storage as cache for high-capacity, non-volatile storage\n\n\n\n\n===== (US 8019938 B2) Abstracts =====\n\nAn apparatus, system, and method are disclosed for solid-state storage as cache for high-capacity, non-volatile storage. The apparatus, system, and method are provided with a plurality of modules including a cache front-end module and a cache back-end module. The cache front-end module manages data transfers associated with a storage request. The data transfers between a requesting device and solid-state storage function as cache for one or more HCNV storage devices, and the data transfers may include one or more of data, metadata, and metadata indexes. The solid-state storage may include an array of non-volatile, solid-state data storage elements. The cache back-end module manages data transfers between the solid-state storage and the one or more HCNV storage devices.\n\n\n===== (US 8019938 B2) Figures =====\n\n:* Cache Front-end Module과 Cache Back-end Module이 정확히 어느 도면의 어느 부분에 매핑되는지?\n\n:* 본 발명에서, Fig. 1A, 1B, 1C가 동일한 중요도로 기능하는지?\n::* Fig. 1A의 Solid-State Storage Controller (104)는 Fig. 2B의 SSS Controller (104a)~(104n) 에 해당되는가?\n::* Fig. 1B, 1C의 Storage Controller (152a)~(152n)은 Fig. 2A의 Storage Controller (152)에 해당되는가?\n\n:* Fig. 1C에서 Front-End RAID Module (174)와 Back-End RAID Module (176) 이 이 발명에서 중요한 차별화/역할을 수행하는지?\n\n:* Fig. 2A에서 Storage Controller (152)에 대해.\n::* 이 모듈이 본 발명의 핵심? 혹은 Cache Front-end Module에 해당?\n::* 그리고 Storage Controller (152)의 Packetizer (302)가 있는 이유는 networked caching을 위한 것인지? 여기서 Packet은 SSS device로 보내기 위한 data packet을 의미.\n::* 여기서 Object Request Receiver Module (260), Parsing Module (262), Command Execution Module (264) 등은 Cache Front-end Module에 해당하는지?\n::* Object Index Module (266), Object Request Queuing Module (268), Object Index Reconstruction Module (272) 등은 Caching되어야 할 Object들을 Cache 용도로 관리하는 부분들인지?\n\n\n:* Fig. 3은 SSS Controller (104)의 내부 구조를 보여주고 있음. (Read Data Pipeline, Write Data Pipeline, Control & Status Registers 등)\n\n\n:* Fig. 4A, 4B는 Bank Interleave Controller (324 in Fig. 3)에 대한 실시 예를 보이고 있음.\n\n\n:* Fig. 5A ~ Fig. 7은 SSS device 내의 data 처리 순서 / 방법을 도시하고 있음.\n::* Fig. 5A는 data pipeline을 이용한 solid-state storage device 내의 data를 manage하는 방법을 도시하고 있음. (SSD에 write하는 경우의 data pipeline 방법으로서, input buffer에 data segment를 받고, data segment를 packetize한 후, ECC 생성, data packetization, write sync buffer에 data packet buffering, storage I/O bus를 통해 SSS storage device에다가 packet을 write)\n::* Fig. 5B는 SAN 경우 (조금 붕 뜨는 느낌. 급 추가된 느낌.)\n::* Fig. 6은 SSD에 write하는 경우와 SSD로부터 read하는 경우, data pipeline을 이용한 처리 순서를 도시. (Fig. 6의 위 절반은 Fig. 5A에 해당)\n::* Fig. 7은 Bank Interleave를 사용하는 경우의 처리 순서를 도시. (command type에 따라 두 개 혹은 그 이상의 Queue들에게 command를 전달. 그리고 SSS device의 bank들 간의 command execution을 coordinate함.)\n\n\n:* Fig. 8, Fig. 9는 SSS Device 내의 garbage collection 모듈에 대한 것임.\n::* Fig. 8은SSS device 내에서의 garbage collection 모듈의 구조를 도시하였음. (Erase, Garbage 마킹, Data 복구, Storage Division 선택/복구, Sequential Storage Module 등으로 구성)\n::* Fig. 9는 GC 처리 순서를 도시.\n\n\n:* Fig. 10은 (1) progressive RAID, (2) front-end distributed RAID, (3) shared, front-end distributed RAID의 구조를 도시하고 있음.\n\n\n:* Fig. 11, Fig. 12는 Front-end distributed RAID에 대한 것임\n::* Fig. 11는 구조도\n::* Fig. 12는 순서도\n\n\n:* Fig. 13, Fig. 14는 shared, front-end distributed RAID에 대한 것임.\n::* Fig. 13은 구조도\n::* Fig. 14는 순서도\n\n\n:* Fig. 15, 16, 17은 RAID로 연결된 HCNV Storage Devices (HDD 등)에 대한 Cache로 사용되는 SSD 간의 관계를 표현하고 있음.\n::* Fig 15는 Cache로 사용되는 SSD와 대용량 저장장치의 묶음인 HCNV RAID간의 배치를 도시하고 있음.\n::* Fig. 16은 Fig. 15에서 도시된 Storage Controller (152)의 내부 구조를 도시하였으며, Cache Front-end Module (3502)과 Cache Back-end Module (3504)를 보이고 있음.\n::* Fig. 17은 Cache Front-end Module (3604)과 Cache Back-end Module (3606)이 연결되어 수행되는 순서에 대한 단순 도시임.\n\n(핵심은 Fig. 15임)\n\n===== (US 8019938 B2) Claims =====\n\n독립 청구항 1:\n\n1. An apparatus for managing the storage of data on one or more high capacity, non-volatile (“HCNV”) storage devices, the apparatus comprising:\n:- a cache front-end module that manages data transfers associated with a storage request, the data transfers between a requesting device and a solid-state storage device functioning as a cache for one or more HCNV storage devices, the solid-state storage device comprising an array of non-volatile, solid-state storage elements;\n:- a cache back-end module that manages data transfers between the solid-state storage device and the one or more HCNV storage devices; and\n:- a sequential storage module that temporally orders data sent to the cache within a storage division of the solid-state storage device, the sequential storage module ordering the data sequentially by order of processing, the sequential storage module further managing a temporal order of storage divisions by way of a sequential order for storage divisions.\n\n19. A system for managing the storage of data on one or more high capacity, non-volatile (“HCNV”) storage devices, the system comprising:\n:- a solid-state storage device comprising an array of non-volatile, solid-state storage elements;\n:- one or more HCNV storage devices; and\n:- a storage controller comprising\n::- a solid-state storage controller;\n::- an HCNV storage device controller;\n::- a cache front-end module that manages data transfers associated with a storage request, the data transfers between a requesting device and the solid-state storage device functioning as cache for the one or more HCNV storage devices;\n::- a cache back-end module that manages data transfers between the solid-state storage device and the one or more HCNV storage devices; and\n::- a sequential storage module that temporally orders data sent to the cache within a storage division of the solid-state storage device, the sequential storage module ordering the data sequentially by order of processing, the sequential storage module further managing a temporal order of storage divisions by way of a sequential order for storage divisions.\n\n23. A computer program product comprising a computer readable medium having computer usable program code executable to perform operations for managing the storage of data on one or more high capacity, non-volatile (“HCNV”) storage devices, the operations of the computer program product comprising:\n:- managing data transfers associated with a storage request, the data transfers between a requesting device and solid-state storage device functioning as cache for one or more HCNV storage devices, the solid-state storage device comprising an array of non-volatile, solid-state storage elements;\n:- managing data transfers between the solid-state storage device and the one or more HCNV storage devices; and\n:- temporally ordering data sent to the cache within a storage division of the solid-state storage device, wherein temporal ordering is sequential by order of processing;\n:- managing a temporal order of storage divisions by way of a sequential order for storage divisions.\n\n24. A method for managing the storage of data on one or more high capacity, non-volatile (“HCNV”) storage devices, the method comprising:\n:- managing data transfers associated with a storage request, the data transfers between a requesting device and a solid-state storage device functioning as cache for one or more HCNV storage devices, the solid-state storage device comprising an array of non-volatile, solid-state storage elements;\n:- managing data transfers between the solid-state storage device and the one or more HCNV storage devices; and\n:- temporally ordering data sent to the cache within a storage division of the solid-state storage device, wherein temporal ordering is sequential sequentially by order of processing;\n:- managing a temporal order of storage divisions by way of a sequential order for storage divisions.\n\n===== (US 8019938 B2) Description =====\n\nSome storage devices and systems include cache in HCNV storage devices. Some HCNV storage devices contain non-volatile solid state cache; these provide benefit in reducing access times, but can only deliver performance consistent with the usually limited capability of the HCNV storage device interface. Some non-volatile solid-state cache storage devices exist that are typically placed on a motherboard; these devices cannot be used in multi-client environments as no cache coherence is provided. Some controllers of HCNV devices also include cache. Where redundant HCNV cache controllers are shared between multiple clients, sophisticated cache coherency algorithms are required to ensure that data is not corrupted.\n\n:* HCNV (High-capacity and Non-volatile - HDD, Optical Disk, Tape 등을 의미) storage device 내에 solid-state cache 가 존재하는 경우가 있긴 하지만, HCNV storage device의 interface (SATA 등을 의미)의 제약에 bound된다는 한계점이 있음.\n:* Motherboard에 위치하는 solid state cache storage device의 경우, cache coherence가 제공되지 않으므로 multi-client 환경에서 바로 사용되기 어려움. 설령 HCNV device의 controller가 cache를 가지고 있는 경우라 하더라도, data가 corrupt되지 않게 하기 위한, 복잡하고 정밀한 cache coherency algorithm이 필요하다는 문제점이 있음. (network으로 share되지 않는 기존 모델의 단점)\n\n----\nTypically, caches are implemented in DRAM, making cache capacity a premium, and requiring relatively high power per performance. If power supporting the volatile cache is lost, data stored in the cache is lost. Typically, some battery backup is used to avoid data loss in case of power failure, with sufficient capability to flush the cache to non-volatile memory prior to failure of the batter backup. In addition, battery backup systems consume power, require redundancy, negatively impact reliability and consume space. Batteries must also be serviced on a regular basis and battery backup can be relatively expensive.\n\n:* DRAM 기반 cache가 빠르긴 하지만 power failure에 대한 대응이 어렵고, battery backup 시스템의 추가 운영이 필요하다는 제약점에 대해 언급. (결국 SSD cache가 필요하다는 주장을 위한 떡밥)\n\n----\nFrom the foregoing discussion, it should be apparent that a need exists for an apparatus, system, and method that manage data using solid-state storage as cache. Beneficially, such an apparatus, system, and method would provide a non-volatile cache that consumes little power, provides significantly larger capacity and does not require a battery backup to maintain data stored in the cache.\n:* DRAM cache 대비 SSD cache의 장점으로서, 상대적으로 저전력 소모, 더 큰 용량, battery backing의 불필요 등을 언급.\n\n----\nThe present invention has been developed in response to the present state of the art, and in particular, in response to the problems and needs in the art that have not yet been fully solved by currently available systems for managing data storage. Accordingly, the present invention has been developed to provide an apparatus, system, and method for managing the storage of data on one or more high capacity, non-volatile (“HCNV”) storage devices that overcome many or all of the above-discussed shortcomings in the art.\n:* 본 발명이 나오게 된 배경임. SSD를 cache로 사용하기 위해, 하나 혹은 복수 개의 HCNV에 저장된 data를 관리하는 방법, 시스템 구조를 제안함.\n\n----\nThe apparatus is provided, in one embodiment, with a plurality of modules including a cache front-end module and a cache back-end module. The cache front-end module manages data transfers associated with a storage request. The data transfers are between a requesting device and solid-state storage function as cache for one or more HCNV storage devices, and the data transfers may include one or more of data, metadata, and metadata indexes. The solid-state storage may include an array of non-volatile, solid-state data storage elements. The cache back-end module manages data transfers between the solid-state storage and the one or more HCNV storage devices.\n:* cache front-end module 및 back-end module로 구성되는 구조 언급.\n:* cache front-end module은 (1) IO requst를 유발한 device와 (2) cache로 동작하는 solid-state storage 간의 data transfer (1-2)를 관리.\n::* 여기서 cache라 함은, 단/복수의 HCNV storage device들에 대한 cache를 의미.\n::* 여기서 data transfer라 함은, data 그 자체 뿐만 아니라 metadata, metadata index들에 대한 transfer를 의미.\n:* cache back-end module은 (2) solid-state storage와 (3) 하나 혹은 복수개의 HCNV storage device들 간의 data transfer (2-3)를 관리.\n\n----\nIn one embodiment of the apparatus, the cache front-end module and the cache back-end module are co-located with a solid-state storage controller that manages the solid-state storage. In a further embodiment, the cache front-end module, the cache back-end module, and the solid-state storage controller may operate autonomously from the requesting device.\n:* 필요 및 환경에 따라서, (1) cache front-end module과 cache back-end module이 solid-state storage controller 내에 같이 존재할 수도 있지만, (2) cache front-end module과 cache back-end module, 그리고 solid-state storage controller 등이 IO requesting device와 개별적으로 동작하는 구조가 될 수도 있음.\n\n----\nIn one embodiment, the apparatus includes an HCNV RAID module that stores data cached in the solid-state storage in two or more HCNV storage devices in redundant array of independent drives (“RAID”) consistent with a RAID level. The data may appear to a requesting device as a whole. In another embodiment, the solid-state storage and the one or more HCNV storage devices may include a hybrid storage device within a hybrid storage device set that is configured as a RAID group. A data segment cached in the solid-state storage and later stored on an HCNV device may include one of N data segments of a stripe or a parity data segment of the stripe. The hybrid storage device typically receives storage requests from one or more clients independent of data segments of a RAID stripe. In a further embodiment, the hybrid storage device may be a storage device of a shared, front-end distributed RAID group that receives two or more simultaneous storage requests from two or more clients.\n\nIn an additional embodiment of the apparatus, the HCNV storage device may be a hard disk drive (“HDD”), an optical drive, or a tape storage. In another embodiment, the solid-state storage and the one or more HCNV storage devices may be a hybrid storage device. In one embodiment, the apparatus may also include a standard device emulation module that provides access to the hybrid storage device by emulating a standard device attached to one or more requesting devices prior to loading the one or more requesting devices with code specific to the operation of the hybrid storage device. The standard device typically may be supported by an industry standard BIOS.\n\nIn another embodiment, the solid-state storage device may be partitioned into two or more regions, wherein one or more partitions may be used as solid-state storage independent of the solid-state storage functioning as cache for the HCNV storage devices. In yet another embodiment, one or more clients send cache control messages to the cache front-end module and the cache back-end module to manage a state of one or more of files or objects stored within the solid-state storage device and the one or more HCNV storage devices.\n\nIn one embodiment of the apparatus, the cache control messages may include one or more control messages. Various embodiments of the control messages may include a control message that causes the cache back-end module to pin a portion of an object or file in the solid-state storage or a control message that causes the cache back-end module to unpin a portion of an object or file in the solid-state storage. Other embodiments of the control messages may include a control message that causes the cache back-end module to flush a portion of an object or file from the solid-state storage to the one or more HCVN storage devices or a control message causes the cache back-end module to preload a portion of an object or file to the solid-state storage from the one or more HCVN storage devices. Yet another embodiment of a control message may be a control message that causes the cache back-end module to offload one or more portions of one or more objects or files from the solid-state storage to the one or more HCVN storage devices in order to free up a determined amount of storage space in the solid-state storage. In one embodiment, the cache control messages are communicated through metadata (“cache control metadata”) for the object or file. In a further embodiment, the cache control metadata may be persistent. In another embodiment, the cache control metadata may be established through attributes set at a time of creation of the file or object. In yet another embodiment, the cache control metadata may be obtained from a file or object management system.\n\nIn one embodiment of the apparatus, the apparatus may include a volatile cache storage element wherein the cache front-end module and the cache back-end module store data in the volatile cache storage element and manage data stored in the solid-state storage and volatile cache storage element. The back-end storage module may further manage data transfers between the volatile cache storage element, the solid state storage, and the HCVN storage devices. In a further embodiment, metadata and/or index metadata for objects and files stored in the HCVN storage devices may be maintained within the solid-state storage device and the volatile cache storage element.\n\nIn an additional embodiment of the apparatus, metadata and/or index metadata for objects and files stored in the HCVN storage devices may be maintained within the solid-state storage device. In another embodiment, the solid-state storage and the one or more HCNV storage devices may include a storage device such that the HCNV storage devices are hidden from view of a client connected to the storage device.\n\nA system of the present invention is also presented. The system substantially includes the modules and embodiments described above with regard to the apparatus. In one embodiment, the system includes a solid-state storage that includes an array of non-volatile, solid-state data storage elements. The system also includes one or more HCNV storage devices and a storage controller. The storage controller, in one embodiment, may include a solid-state storage controller and an HCNV storage device controller. The storage controller may also include a cache front-end module and a cache back-end module. The cache front-end module manages data transfers associated with a storage request. The data transfers are typically between a requesting device and the solid-state storage functioning as cache for the one or more HCNV storage devices. The data transfers may include one or more of data, metadata, and metadata indexes. The cache back-end module manages data transfers between the solid-state storage and the one or more HCNV storage devices.\n\nIn one embodiment, the system includes a network interface connected to the storage controller, wherein the network interface facilitates data transfers between the requesting device and the solid-state storage controller through a computer network. In another embodiment, the system includes a server that includes the solid-state storage, the one or more HCNV storage devices, and the storage controller. In yet another embodiment, the one or more HCNV storage devices are connected to the storage controller through a storage area network (“SAN”).\n\nA method of the present invention is also presented for sharing a device between multiple hosts. The method in the disclosed embodiments substantially includes the steps necessary to carry out the functions presented above with respect to the operation of the described apparatus and system. In one embodiment, the method includes managing data transfers associated with a storage request, wherein the data transfers are between a requesting device and solid-state storage functioning as cache for one or more HCNV storage devices. The data transfers may include one or more of data, metadata, and metadata indexes. The solid-state storage may include an array of non-volatile, solid-state data storage elements. The method may also include managing data transfers between the solid-state storage and the one or more HCNV storage devices.\n\nReference throughout this specification to features, advantages, or similar language does not imply that all of the features and advantages that may be realized with the present invention should be or are in any single embodiment of the invention. Rather, language referring to the features and advantages is understood to mean that a specific feature, advantage, or characteristic described in connection with an embodiment is included in at least one embodiment of the present invention. Thus, discussion of the features and advantages, and similar language, throughout this specification may, but do not necessarily, refer to the same embodiment.\n\nFurthermore, the described features, advantages, and characteristics of the invention may be combined in any suitable manner in one or more embodiments. One skilled in the relevant art will recognize that the invention may be practiced without one or more of the specific features or advantages of a particular embodiment. In other instances, additional features and advantages may be recognized in certain embodiments that may not be present in all embodiments of the invention.\n\nThese features and advantages of the present invention will become more fully apparent from the following description and appended claims, or may be learned by the practice of the invention as set forth hereinafter.\n\n==== Fusion IO US 8019940 B2 (Apparatus, system, and method for a front-end, distributed raid) ====\n\n* [https://www.google.com/patents/US8019940?dq=US+8019940&hl=en&sa=X&ei=wh7zUuLhGbC8iAfMrYEw&ved=0CDUQ6AEwAA US 8019940 B2]\n: Apparatus, system, and method for a front-end, distributed raid\n\n===== (US 8019940 B2) Abstract =====\n\nAn apparatus, system, and method are disclosed for a front-end, distributed redundant array of independent drives (“RAID”). A storage request receiver module receives a storage request to store object or file data in a set of autonomous storage devices forming a RAID group. The storage devices independently receive storage requests from a client over a network, and one or more of the storage devices are designated as parity-mirror storage devices for a stripe. The striping association module calculates a stripe pattern for the data. Each stripe includes N data segments, each associated with N storage devices. The parity-mirror association module associates a set of the N data segments with one or more parity-mirror storage devices. The storage request transmitter module transmits storage requests to each storage device. Each storage request is sufficient to store onto the storage device the associated data segments. The storage requests are substantially free of data.\n\n\n\n\n===== (US 8019940 B2) 기존 기술의 한계/문제점 =====\n\nTraditional RAID systems are configured with a RAID controller that functions to receive data, calculate striping patterns for the data, divide the data into data segments, calculate a parity stripe, store the data on storage devices, update the data segments, etc. While some RAID controllers allow some functions to be distributed, the storage devices managed by the RAID controller do not communicate with clients directly for storing data striped in a RAID. Instead storage requests and data for RAIDing pass through the storage controller.\n:* 기존 경우, RAID controller에 물린 storage device들은 client와 직접 통신하지 못했음. (근데 이러면 무슨 문제인가?)\n\nRequiring the RAID controller to touch all of the data to be stored in a RAID is inefficient because it creates a dataflow bottleneck. This is especially true during a read-modify-write process where bandwidth and performance of all of the drives in the RAID group is consumed while only a subset is actually updated.\n:* RAID controller가 RAID group 내 저장되는 모든 data의 처리에 관여하는 것은 data flow 병목을 야기할 수 있으며, 특히 read-modify-write process 중에 병목이 될 수 있음. (subset of data가 update되는 경우라 하더라도, RAID group 내의 모든 drive들의 bandwidth 및 performance가 영향을 받을 수 있음)\n\nIn addition, a region of the storage device designated for data managed by the RAID controller is typically dedicated to the RAID group and cannot be accessed independently. Access to a storage device by a client must typically be accomplished by partitioning the storage device. Where partitioning is used, partitions accessible for general storage are not used for RAID and partitions allocated to the RAID group are not accessible for general data storage. Schemes that oversubscribe partitions in order to globally optimize utilization are complex and more difficult to manage. In addition, storage space allocated for one RAID group cannot be accessed by more than one RAID controller unless one is designated as master and other RAID controllers act as slaves unless the master RAID controller is inactive, non-functional, etc.\n\nTypical RAID controllers also generate parity data segments outside of the storage devices of the RAID group. This can be inefficient because parity data segments are typically generated and then are sent to a storage device for storage, which requires computing capacity of the RAID controller. Tracking parity data segment location and updates must also be done at the RAID controller instead of autonomously at a storage device.\n:* 전형적인 RAID controller에서의 parity 생성 방법의 비효율성. RAID group 내의 storage device inside가 아닌 outside (즉 RAID controller)에서 parity data를 생성하여 다시 storage device에 저장하게 됨. parity data segment의 위치 및 update 연산이 storage device 자체에서 일어나는 것이 아니라 RAID controller에서 이루어져야 하기 때문에 RAID group의 IO 성능은 RAID controller의 computing capacity에 영향을 받게 된다.\n\nWhere it is necessary to ensure that the data remains available if the separate RAID controller is offline, RAID controllers are typically cross connected to the drives and to each other, and/or mirrored as complete sets, making data availability expensive and difficult to manage, and dramatically reducing the reliability of the storage subsystem.\n:* RAID controller의 failure/offline 경우에도 data access가 가능하려면 모든 drives들에 RAID controller가 cross로 연결되고, mirroring 되도록 구성되어야 한다. 이러한 방식은 매우 고비용을 초래한다는 단점이 있다.\n\n\n\n===== (US 8019940 B2) 본 발명의 필요성 =====\n\n* What is needed is a system, apparatus, and method for\n: front-end distributed RAID\n:: that allows RAIDing on a\n::: per data segment,\n::: per object,\n::: per file, or similar basis\n:: and that eliminates the need for\n::: RAID controllers and RAID controller couplets\n:::: situated between the client and the storage devices.\n\n\n* In such a system, apparatus, and method,\n: a RAID group can be\n:: created for one\n::: data segment,\n::: object,\n::: or file\n:: and managed\n::: within one group of storage devices\n:: by one RAID controller\n: while a second RAID group may be\n:: created for another\n::: data segment,\n::: object,\n::: or file\n:: that encompasses\n::: some of the same storage devices of the first RAID group.\n\n\n* The RAID control functions may be distributed among\n: clients,\n: a third-party RAID management device,\n: or among storage devices.\n\n\n* The front-end distributed RAID system, apparatus, and method\n: may also send commands to storage devices of a RAID group\n: and may allow the storage devices to\n::: directly access\n::: and copy data\n:: through\n::: direct memory access (“DMA”),\n::: or remote DMA (“RDMA”).\n\n===== (US 8019940 B2) 본 발명의 구성 =====\n\nThe apparatus is provided with a plurality of modules including a storage request receiver module, a striping association module, a parity-mirror association module, and a storage request transmitter module. The storage request receiver module receives a storage request to store data in a storage device set. The data is from a file or an object. The storage device set includes autonomous storage devices forming a RAID group. The storage devices independently receive storage requests from a client over a network. One or more of the autonomous storage devices within the storage device set are designated as parity-mirror storage devices for a stripe.\n\nThe striping association module calculates a stripe pattern for the data, where the stripe pattern includes one or more stripes. Each stripe includes a set of N data segments and associates each of the N data segments with one of N storage devices in the storage device set assigned to the stripe. The parity-mirror association module associates a set of the N data segments with one or more parity-mirror storage devices in the storage device set. The one or more parity-mirror storage devices are in addition to the N storage devices. The storage request transmitter module transmits one or more storage requests to each storage device in the storage device set. Each storage request is sufficient to store onto the storage device the one or more data segments associated with the storage device receiving the storage request. The storage requests are substantially free of data identified by the storage requests.\n\n===== (US 8019940 B2) Figures =====\n\n* FIG. 1A is a schematic block diagram illustrating one embodiment of a system for data management in a solid-state storage device in accordance with the present invention;\n\n* FIG. 1B is a schematic block diagram illustrating one embodiment of a system for object management in a storage device in accordance with the present invention;\n\n* FIG. 1C is a schematic block diagram illustrating one embodiment of a system for an in-server storage area network in accordance with the present invention;\n\n* FIG. 2A is a schematic block diagram illustrating one embodiment of an apparatus for object management in a storage device in accordance with the present invention;\n\nFIG. 2B is a schematic block diagram illustrating one embodiment of a solid-state storage device controller in a solid-state storage device in accordance with the present invention;\n\nFIG. 3 is a schematic block diagram illustrating one embodiment of a solid-state storage controller with a write data pipeline and a read data pipeline in a solid-state storage device in accordance with the present invention;\n\nFIG. 4A is a schematic block diagram illustrating one embodiment of a bank interleave controller in the solid-state storage controller in accordance with the present invention;\n\nFIG. 4B is a schematic block diagram illustrating an alternate embodiment of a bank interleave controller in the solid-state storage controller in accordance with the present invention;\n\nFIG. 5A is a schematic flow chart diagram illustrating one embodiment of a method for managing data in a solid-state storage device using a data pipeline in accordance with the present invention;\n\nFIG. 5B is a schematic flow chart diagram illustrating one embodiment of a method for in-Server SAN in accordance with the present invention;\n\nFIG. 6 is a schematic flow chart diagram illustrating another embodiment of a method for managing data in a solid-state storage device using a data pipeline in accordance with the present invention;\n\nFIG. 7 is a schematic flow chart diagram illustrating an embodiment of a method for managing data in a solid-state storage device using a bank interleave in accordance with the present invention;\n\nFIG. 8 is a schematic block diagram illustrating one embodiment of an apparatus for garbage collection in a solid-state storage device in accordance with the present invention;\n\nFIG. 9 is a schematic flow chart diagram illustrating one embodiment of a method for garbage collection in a solid state storage device in accordance with the present invention;\n\nFIG. 10 is a schematic block diagram illustrating one embodiment of a system for progressive RAID and front-end distributed RAID in accordance with the present inventions;\n\nFIG. 11 is a schematic block diagram illustrating one embodiment of an apparatus for progressive RAID in accordance with the present invention;\n\nFIG. 12 is a schematic block diagram illustrating one embodiment of an apparatus for updating a data segment using progressive RAID in accordance with the present invention;\n\nFIG. 13 is a schematic flow chart diagram illustrating an embodiment of a method for managing data using progressive RAIDing in accordance with the present invention;\n\nFIG. 14 is a schematic flow chart diagram illustrating an embodiment of a method for updating a data segment using progressive RAIDing in accordance with the present invention;\n\nFIG. 15 is a schematic block diagram illustrating one embodiment of an apparatus for front-end distributed RAID in accordance with the present invention;\n\nFIG. 16 is a schematic flow chart diagram illustrating an embodiment of a method for front-end distributed RAID in accordance with the present invention;\n\n===== (US 8019940 B2) Claims =====\n\n\n1. An apparatus for high performance, distributed storage, the apparatus comprising:\n\n:- a front-end controller executed on a processor, the front-end controller comprising:\n\n::- a <span style=\"color:red\">\'\'\'storage request receiver\'\'\'</span> module that receives a storage request to store data in a storage device set, comprising a plurality of autonomous storage devices configured to independently receive and service storage requests from a client;\n\n::- a <span style=\"color:blue\">\'\'\'striping association module\'\'\'</span> that calculates a stripe pattern for the data, the stripe pattern comprising one or more stripes, each stripe comprising a set of N data segments, and associates each of the N data segments with one of N storage devices in the storage device set; and\n\n::- a <span style=\"color:green\">\'\'\'storage request transmitter module\'\'\'</span> that transmits one or more storage requests to each of the N storage devices associated with a data segment, each storage request to configure a storage device to access data segments of the set of N data segments directly, independent of the front-end controller.\n\n== ## bNote-2014-02-06 ==\n\n* [[RDBMS MySQL]]\n: Started study of MySQL and InnoDB\n\n== ## bNote-2014-02-05 ==\n\n=== tpcc-mysql test script (.run_test_and_trace.sh.gz.asc) ===\n\n\n <pre>\nblusjune@miles-davis:execution %1$ cat .run_test_and_trace.sh.gz.asc\n-----BEGIN PGP MESSAGE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\nComment: Brian M. JUNG <brian.m.jung@gmail.com> Fri Feb  7 19:23:51 KST 2014\n\njA0ECgMChHOvNZmTsF5g0uoBipxj+UW2TA1mhmf1gCfgMOdKpkgs7ESI+k4IFl78\nemiUWho9K962kq8cf0EbkBtkSXEuT9w7OZ1ECsVCQ0EY8g1lUjcZDzpGPxjbnE1b\nW17Cmw9PxkKn6bCmxzIEkt/7F8OyoWr+ThldNHY0OlyuOOnaV3dcJcuggKq7z5Rk\n7kkmQGxNDppR+nG+p0L3Jltynjd9FJ6RLJXoFnlThd4DkFNOWccEusNj1q9KmX8s\n+DwV5qHyFgmtp41R+nIFKzap+LAmpKCHOqJp6GudygjgqhSbdqpFueXGmkqSpotQ\n7YwByizFt1zkiSUBWT/rm/2Qg8/UehxOLloP1pUvTSxS5/GDkcHLb+UEXU8OQJH4\n7zCRJIir1VFGX/v/GlFF/uV2C6oSrzv7X1snYm2fxWKhqRyKYPuKfYl4aN+nK4ZJ\nr2CgXpyF0elBwsYJSBCzKAnZQl66qnmeQoJx0nSZAalB6d7p7CNaMzzALYi9BkZB\nM1LnijVGCPnw4uHN3Pe6h/5GfWeai+KLI9RYJzyAwFx+tmyS/Rn4kMXIPhWnOjlV\ncpUxrRTVCsTWiELSJMmF6p1xbny/qbfvdHKETxneNxAHBv759f1s+dCi78qtH5M2\n2isDA4bxMP+Bu9jBtexKpMaFVHxHCFtohrsruVl2nzo1pSMZNig97Gn9uPhUdzaz\njqenVQHKo/4THDNgfsBHXhk+trQh33dJtFBuc/iFH41/fkw7fyiMRAg+G/mYlmw4\nxhXWC+klE+Xt3BlA9u0qTGcxIsrym1dcge5z2EOOSbkAcxvk7UipRyeeRdhomwdc\nRanenCLLVRR2s5veASMLWBGYhQa9xjmui/GkdJi167eU8Hly2hjElpYZG+CWAnsm\nxmlJy6Gq7Cl/GNZNFIIhogTWCC8exJCWbas/oy66wiMiOG6MXE2oQwyLfe2CnloE\nR7t02R6omHJqMPdcvHafDXTYGm7Ml+/ZkDtp5JakftXgoZWo6jfLG91s8hEWAFBN\nktVhmJATVNply5e2la6rJqA9RARxEDeCmO7mNPjoucgOIMrnb0k4pv+1bL5l9M8R\nH0AD4BcRACR3vATltMNAuXoqFWcNe0T5H01l8vPV8s0ou/V7WLgH1clMBFeD+bvb\nXgB60xO48BzwkutJWRQZu0EwUpCI2ClwteQE3QqUXxb9SystNqSKmpxzkVIrahwB\ndKLQi5/x9QSDp5U7KbX1oeZ9NE/kWK1POmTkM/kAoz+Grp7QpSmtkpx189pBCAqt\nCC4io3afl+dEX3efqJOCesD4DJG26/9lkRxZmlOl2JYVfbPVvMphHEQJWA9WRlmG\nJp9JyfgYdJZpB4Mk3csKqlt96AOYiZfmsGmJzEkbzeibcwEBZrjqQleFcikMqiMP\n/q0BzTJNjFFbsLBLDO2cqBkRo9o/nJ3I9/ciYYIUrhhKMiEex7c4DRGSHcMsbj/V\naAc3WXmOJF/cm9Ou9njJHe0sOTMzAuoMLKkwElEsQFPscK86Dj54GRLTjRqH1FE2\nbKvPFsM=\n=a1t5\n-----END PGP MESSAGE-----\n</pre>\n\n== ## bNote-2014-02-04 ==\n\n=== Fusion IO Patents ===\n\n* [https://www.google.com/patents/US8489817?dq=fusion+io+8489817+caching+data&hl=en&sa=X&ei=R8DwUvXCJI2FlAXNgoHYAQ&ved=0CDMQ6AEwAA Apparatus, system, and method for caching data (US 8489817 B2)]\n\n=== Cache organization ===\n\n* N-way set-associative cache, Direct-mapped cache, Fully associated cache\n\n: http://www.cs.umd.edu/class/spring2003/cmsc311/Notes/Memory/fully.html\n: http://www.ecs.umass.edu/ece/koren/architecture/Cache/tutorial.html\n: http://homepage.cs.uiowa.edu/~ghosh/10-31-13.pdf\n\n=== SSD Reliability ===\n\n* [http://www.datacenterknowledge.com/archives/2011/01/27/ssds-vs-disks-which-are-more-reliable/ SSDs vs. Disks - Which are more reliable? // 2011-01-27]\n\n* [http://www.tomshardware.com/reviews/ssd-reliability-failure-rate,2923.html Investigation: Is your SSD more reliable than a hard drive? // 2011-07-28]\n\n* [http://blog.backblaze.com/2013/11/12/how-long-do-disk-drives-last/ How long do disk drives last? // 2013-11-12]\n\n* [http://www.networkcomputing.com/tapes-and-disks/disk-drive-failure-an-unavoidable-realit/240164207 Disk Drive Failure: An Unavoidable Reality // 2013-11-22]\n\n* [http://www.pcworld.com/article/129558/article.html Study: Hard Drive Failure Rates Much Higher Than Makers Estimate // PC world // 2007-03-02]\n\n* [http://www.cs.virginia.edu/~gurumurthi/papers/acmtos13.pdf Datacenter Scale Evaluation of the Impact of Temperature on Hard Disk Drive Failures // Microsoft, Univ. of Virginia // ACMTOS13]\n\n* [http://static.googleusercontent.com/media/research.google.com/en//archive/disk_failures.pdf Failure Trends in a Large Disk Drive Population // Google // FAST 2007]\n\n\n\n\n\n\n\n=== Distributed & Multi Aspect Tracing Items ===\n\n==== Key Questions ====\n\n* LBA 수준의 Block Trace를 가지고서 최신 NVMe SSD에게 Friendly한 Workload를 구별할 수 있을까? 여전히 SSD들이 Random Read에는 강하고 Random Write에는 약한 것일까? 그리고 Sequential Read와 Sequential Write에 대해서 성능은 어떻게 나오는 것일까? 이러한 변화를 야기하게 된 SSD의 HW 및 FW 적인 변화에는 어떤 것들이 있을까?\n\n* 성능 Tuning을 위해 SSD FW를 작성하고 SSD HW Architecture를 잡을 때, workload의 어떤 측면들을 중요하게 고려하는가? 그 Workload의 측면1, 측면2, ..., 측면N에 대해서 각각 어떻게 Tuning을 하게 되는가? 그리고 측면i와 측면j 간의 교호효과 (reciprocal effect, mutually affective)에 대해서는 어떻게 대응하도록 설계할까?\n\n* Block Layer Access Pattern의 서로 다른 Orthogonal Property들 간의 교호효과로 인해 성능, 수명, 오류에 미치는 영향을 알 수 있을까?\n\n* 교호효과를 미칠 수 있는 Orthogonal Property들을 정의할 때 꼭 같은 Horizontal Layer에 있는 Factor들만 고려해야 하는 것일까? 혹은 Vertical Layer의 Factor 들 간에도 교호작용이라는 것을 생각할 수 있는 것일까?\n\n* IO Stack에서의 교호작용이라는 것을 먼저 정의해야 함.\n\n\n\n\n=== What is a superblock, inode, dentry, and a file? ===\n\n* References\n: [http://unix.stackexchange.com/questions/4402/what-is-a-superblock-inode-dentry-and-a-file What is a Superblock, Inode, Dentry and a File?]\n\n\n* First and foremost, and I realize that it was not one of the terms from your question, you must understand metadata. Succinctly, and stolen from Wikipedia, metadata is data about data. That is to say that metadata contains information about a piece of data. For example, if I own a car then I have a set of information about the car but which is not part of the car itself. Information such as the registration number, make, model, year of manufacture, insurance information, and so on. All of that information is collectively referred to as the metadata. In Linux and UNIX file systems metadata exists at multiple levels of organization as you will see.\n\n* Superblock은 metadata에 대한 metadata로서, file system type, size, status, 그리고 다른 metadata 구조에 대한 정보를 담고 있음. 워낙 중요한 정보이기 때문에 multiple redundant copies를 둔다.\n: The superblock is essentially file system metadata and defines the file system type, size, status, and information about other metadata structures (metadata of metadata). The superblock is very critical to the file system and therefore is stored in multiple redundant copies for each file system. The superblock is a very \"high level\" metadata structure for the file system. For example, if the superblock of a partition, /var, becomes corrupt then the file system in question (/var) cannot be mounted by the operating system. Commonly in this event fsck is run and will automatically select an alternate, backup copy of the superblock and attempt to recover the file system. The backup copies themselves are stored in block groups spread through the file system with the first stored at a 1 block offset from the start of the partition. This is important in the event that a manual recovery is necessary. You may view information about superblock backups with the command dumpe2fs /dev/foo | grep -i superblock which is useful in the event of a manual recovery attempt. Let us suppose that the dumpe2fs command outputs the line Backup superblock at 163840, Group descriptors at 163841-163841. We can use this information, and additional knowledge about the file system structure, to attempt to use this superblock backup: /sbin/fsck.ext3 -b 163840 -B 1024 /dev/foo. Please note that I have assumed a block size of 1024 bytes for this example.\n\n* Inode는 file에 대한 metadata를 나타낸다. 여기서 file이 될 수 있는 대상은, UNIX에서는, 거의 모든 것이다. actual files, directories, devices, 등등. 그러나 실제로 inode가 포함하고 있는 metadata에는 filename에 대한 정보는 없다. 오히려 해당 file에 대한 ownership (user, group), access mode (read, write, execute permissions), file type 등에 대한 정보를 가지고 있다.\n: An inode exists in, or on, a file system and represents metadata about a file. For clarity, all objects in a Linux or UNIX system are files; actual files, directories, devices, and so on. Please note that, among the metadata contained in an inode, there is no file name as humans think of it, this will be important later. An inode contains essentially information about ownership (user, group), access mode (read, write, execute permissions) and file type.\n\n* Dentry는 inode number를 file name과 연결시키는 역할을 수행하며, directory caching을 통해 자주 access되는 file을 더 빨리 access할 수 있도록 한다.\n: A dentry is the glue that holds inodes and files together by relating inode numbers to file names. Dentries also play a role in directory caching which, ideally, keeps the most frequently used files on-hand for faster access. File system traversal is another aspect of the dentry as it maintains a relationship between directories and their files.\n\n* File? file은 file이다.\n: A file, in addition to being what humans typically think of when presented with the word, is really just a block of logically related arbitrary data. Comparatively very dull considering all of the work done (above) to keep track of them.\n\nI fully realize that a few sentences do not provide a full explanation of any of these concepts so please feel free to ask for additional details when and where necessary.\n\n\n\n\n=== tpcc-mysql setup ===\n\n* Download\n bzr branch -Ossl.cert_reqs=none lp:~percona-dev/perconatools/tpcc-mysql\n\n\n\n\n=== Sol.PE Test Cases in depth ===\n\n\n* [http://12.30.21.21:8080/edms/docview.jsp?DocID=090310cf825f0860&SInfo=1B|MjAxNDAyMDQxMzE5MTg=&BackFlag=T Solution PE팀(메모리) > SSD Lab > SSD Lab Coverage > 30_계획과제 > 2013 > UBX Whiitebox화 검증 > 20140203_WhiteBox_자료정리_이승철사원.XLSX]\n\n <pre>\n------- Original Message -------\n\nSender : 이승철<s.yi@samsung.com> S3(사원)/사원/Solution PE팀(메모리)/삼성전자\n\nDate : 2014-02-04 13:20 (GMT+09:00)\n\nTitle : Fwd: White Box 평가 방식 입니다.\n\n \n\n안녕하십니까. 이승철 사원입니다.\n\n \n\nEDM 권한 문제로 자료를 검토하는데 다소 시간이 걸렸습니다.\n\n늦어서 죄송합니다.\n\n\nSolution PE팀(메모리) > SSD Lab > SSD Lab Coverage > 30_계획과제 > 2013 > UBX Whiitebox화 검증 > 20140203_WhiteBox_자료정리_이승철사원.XLSX\n\n \n상기 경로에 TC현황 및 종류, 컨셉, 불량 List들을 정리한 문서를 링크시켰습니다.\n\n\n감사합니다.\n\n---------------------------------\n\n\n- 이승철 드림 -\n</pre>\n\n\n\n <pre>\n------- Original Message -------\n\nSender : 김돈학<donhak2.kim@samsung.com> S4(선임)/선임/Solution PE팀(메모리)/삼성전자\n\nDate : 2014-02-03 20:41 (GMT+09:00)\n\nTitle : White Box 평가 방식 입니다.\n\n\n\n안녕하세요 김돈학 선임입니다.\n\n\n\nMFX 과제 당시의 평가 계획입니다.\n\n[http://12.30.21.21:8080/edms/docview.jsp?DocID=090310cf81604713&SInfo=1B|MjAxNDAyMDMyMDM3MDI=&BackFlag=T Solution PE팀(메모리) > SSD Lab > SSD Lab Coverage > 30_계획과제 > 2012 > MFX Whitebox화 검증 > 01_회의 > SSD Claim 근원적 대책 > MFX Whitebox소개_20130128_문민수책임.PPTX]\n\n\n\nMEX 과제당시의 평가 계획입니다.\n\n[http://12.30.21.21:8080/edms/docview.jsp?DocID=090310cf817562bd&SInfo=1B|MjAxNDAyMDMyMDM1MTE=&BackFlag=T Solution PE팀(메모리) > SSD Lab > SSD Lab Coverage > 30_계획과제 > 2013 > MEX Whitebox화 검증 > 01_회의 > MEX FW Whitebox 평가 계획공유_20130322.PPTX]\n\n\n \nUBX 과제는 따로 평가 계획을 만들지 않아 자료로 존재 하는것이 없습니다.\n\n \n\n기본적인 White Box 평가방식 입니다. (급하게 만들어서 부족한 부분이 많이 있습니다.)\n\n[http://12.30.21.21:8080/edms/docview.jsp?DocID=090310cf825db9e6&SInfo=1B|MjAxNDAyMDMyMDM5MDk=&BackFlag=T Solution PE팀(메모리) > SSD Lab > SSD Lab Coverage > 30_계획과제 > 2013 > MEX Whitebox화 검증 > WhiteBox_평가방식.PPTX]\n \n\nWhiteBox 평가의 세부사항에 대해서는 이승철사원이 정리하고 있어서 그것을 보시면 좋을것같습니다.\n\n그리고 현재 조직이 변경되어서 ( Flash 개발실 -> Solution 개발실) 기존 EDM자료가 권한이 많이 상실되었\n\n습니다. 내일(2/4) 이승렬선임을 통해\n\n정리가 된다고 합니다. 정리가 되면 더 조사해서 보내드릴것이 있는지 확인해보도록 하겠습니다.\n\n \n\n감사합니다.\n\n \n\n김돈학 드림-\n\n</pre>\n\n\n\n\n\n\n\n\n==== TC Platform 경과보고_20131025.pptx ====\n\n* TOOB Test Case 분류\n:- Spec Validation\n:- General TOOB\n:- General TOOB + Fault Injection\n:- Exception Test\n:- Margin Test\n\n\n\n* Test Coverage : Items to test\n\n{| class=\"wikitable sortable\"\n|-\n| Items\n| 평가 설비\n| Test Case\n| 평가 수량\n| 평가 시간\n| VCC\n| Temp.\n| No. of Test Cases\n|-\n| Spec. Verification\n| Oppa, scope\n| 개별 Script\n| Density 별 최소 1ea\n| 24Hr\n| M\n| Room\n| 48\n|-\n| Rx Margin\n| Oppa, scope\n| 개별 Script\n| Density 별 최소 1ea\n| 24Hr\n| M\n| Room\n| 126\n|-\n| Exception Case\n| Titan\n| 개별 Script\n| Density 별 최소 3ea\n| 48Hr\n| L/M/H\n| 3Temp\n| 531,169,969\n|-\n| General\n| Titan\n| 통합 Script\n| Density 별 최소 5ea\n| 168Hr\n| L/M/H\n| 3Temp\n| Total TC\n|-\n|}\n\n\n\n==== CaseDefine_GC_정진호사원.pptx ====\n\n* 약어 파악\n:- AB: Available Block\n:- RAN AB: Random Available Block\n:- SEQ AB: Sequential Available Block\n:- SBI Write\n:- L2P Write\n:- SB\n:- VPC\n\nZone당 Total SB 개수 (Zone 당 VPC 개수를 SB 개수로 변환)이 Min인 Zone을 Victim Zone으로 선정\n\n* Zone 내 Victim AB 선정 조건\n:- Scatter 조건 X (Scatter 조건 시 Urgent인 상황이어야 AB를 선정함)\n:- DB가 Valid Page로 가득 차 있을 때 (선정되면 모두 옮겨도 FB 생성 확률 적어서 선정 X)\n:- 위 조건 만족 시 RAN AB, SEQ AB를 비교하여 Min VPC인 AB를 Victim SB로 선정\n\n\n\n==== MEX Whitebox소개_20130128_문민수책임.pptx ====\n\n* 별첨. SW최적화LAB: MFX Whitebox 평가 (2/2) (P.7)\n:- 수명 평가 환경 셋업\n::- eMMC 6GB Workload 인가 시 2년 내에 ECNT 3000 도달\n::- Cache S/W (IRST, Dataplex 등) 설치 후 수명 측정용 Host 패턴 (Non-data op. Power off) 추출 예정\n::- 여기 그림 <eMMC 패턴에 대한 SB의 Erase Count 변화> 은 어떻게 이해해야 하는가?\n\n\n\n==== MEX FW Whitebox 평가 계획공유_20130322.pptx ====\n\n* FW Whitebox 평가의 역할\n: BLockbox 방식인 실장평가 Coverage 보완\n:: -> FTL 계층에 집중, 재현성 100%, 재현 시간 1분 이내\n: SW 개발팀 Burden 최소화, 개발기간 단축, FW Quality 향상에 기여\n:: -> 초도 분석 후 진성 불량만 보고\n\n* Concept (GC+SPOR)\n: \'모든 NAND Program에 Fault Injection 발생\' 그림을 어떻게 이해하면 좋은가?\n\n* WhiteBox Approach Vs. BlackBox Approach\n: SSD FW의 Defect을 잡는 데에는 매우 유용할 것으로 보임.\n: WhiteBox Approach를 통해서 SSD HW 자체의 Failure를 잡아낸 경우도 많이 있는가? 이러한 Failure 발생 패턴은 SSD FW가 변경되더라도 유사한 구조의 HW를 사용하게 되면 Failure가 재현될 가능성이 많이 있는 것은 아닐까?\n: 그러나 Client 환경에서 Data Center 환경으로 이동하면서 발생하는 환경 및 Workload의 변화를 WhiteBox Test Approach가 잘 반영할 수 있을까? 오히려 이러한 환경의 변화로 야기되는 SSD 동작 특성 및 성능 패턴 변화를 알기 위해서는 BlackBox Approach로 가는 것이 적절한 것은 아닐까?\n\n* WhiteBox 평가 결과의 재활용\n: 오히려, WhiteBox Approach이기 때문에, 과거 Client SSD에 대해서 수행하였던 WhiteBox 평가 수행 결과를 기반으로 DC 환경에서도 SSD가 Failure 발생하는 환경을 거꾸로 구축해볼 수 있지는 않을까?\n\n== ## bNote-2014-02-03 ==\n\n\n=== DC Infra 구축 기술 이전 Curriculum ===\n\nN-tier 구조의 DC Infra 구축의 핵심 요소 기술 중\n대표적인 것을 선정하여\n2월~3월 동안 집중적으로 기술 전수할 계획이며,\nTarget 및 일정은 다음과 같습니다.\n(3월 후반, 4월부터는 본격적으로 Testbed Infra Setup 및 System Tuning에 돌입해야 하므로, 2월~3월 내로 기본이 되는 기술을 체득하는 것이 필요하다고 판단, 아래와 같이 구성하였습니다.)\n\n:- Workload Generator 부분: \'\'\'TPCC-MySQL\'\'\' Benchmark  (2월)\n:- Cache SW 부분: \'\'\'DM-Cache\'\'\' SSD Cache Kernel Module (3월)\n:- Backend DB 부분: MySQL 호환 DBMS Family 설명 (\'\'\'MySQL\'\'\', \'\'\'Percona\'\'\', \'\'\'MariaDB\'\'\') (2월) 및 \'\'\'InnoDB\'\'\' Storage Engine (3월)\n:- Tracing 부분: \'\'\'Block Layer Tracer\'\'\' 및 \'\'\'Runtime IO Status Monitor\'\'\' (3월)\n:- 기본 Server System 부분: Scope의 광범위성을 고려, 상기 내용 집중적으로 기술 전수하면서 관련 부분 설명하는 형태로 진행\n\n{| class=\"wikitable sortable\"\n|-\n! 항목\n! 일정\n|-\n| 1. Workload Generator 부분: \'\'\'TPCC-MySQL\'\'\' Benchmark\n| \'14년 W06, W07 (2/3~2/14)\n|-\n| 2. Cache SW 부분: \'\'\'DM-Cache\'\'\' SSD Cache Kernel Module\n| \'14년 W12, W13 (3/17~3/28)\n|-\n| 3. Backend DB 부분: MySQL 호환 DBMS Family \'\'\'MySQL\'\'\', \'\'\'Percona\'\'\', \'\'\'MariaDB\'\'\'\n| \'14년 W08, W09 (2/17~2/28)\n|-\n| 4. Backend DB 부분: \'\'\'InnoDB\'\'\' Storage Engine\n| \'14년 W10, W11 (3/3~3/14)\n|-\n| 5. 기본 Server System 부분: Scope의 광범위성을 고려, 상기 내용 집중적으로 기술 전수하면서 관련 부분 설명하는 형태로 진행\n| \'14년 기술 전수 기간 동안\n|-\n|}\n\n기술전수 방식은 다음과 같습니다.\n:- 협력 연구원분들 대상으로 구두/자료 기반의 세미나 실시 후,\n:- Real Testbed 환경에서 Setup 및 Tuning 경험을 통해 기술을 체득할 수 있도록 진행하고,\n:- 필요 시 추가 기술 컨설팅 제공\n\n\n다음은, 이번 기술전수 Main Target은 아니지만,\n유사한 기능을 수행하는 SW들의 목록입니다.\n본 과제와 별도로 추가적인 Testbed Infra 구성 시 참고하시기 바랍니다.\n\n==== Workload Generator ====\n\n* OLTP Workload\n: <span style=\"color:red\">tpcc-mysql</span>, sysbench, benchmarksql, benchmark factory\n\n\n==== Cache SW ====\n\n* Cache Server\n: Memcached, Memcachedb, Redis, Couchbase\n\n* In-memory Data Grid\n: Hazelcast\n\n* SSD Cache\n: <span style=\"color:red\">DM-cache</span>, Bcache, EnhanceIO\n\n\n==== Backend DB SW ====\n\n* RDBMS <ref> [http://en.wikipedia.org/wiki/Comparison_of_relational_database_management_systems Comparison of RDBMS] </ref>\n:* Open Source\n:: <span style=\"color:red\">MySQL, Percona, MariaDB</span> (이상 MySQL 호환 Family)\n:: PostgreSQL, SQLite, Apache Derby, NHN CUBRID\n:* Proprietary\n:: Oracle, Microsoft SQL Server, SAP HANA, IBM DB2\n\n* MySQL의 Storage Engine\n: <span style=\"color:red\">InnoDB</span><ref>[http://intomysql.blogspot.kr/2010/12/innodb_9912.html InnoDB Illustrated]</ref> <ref>[http://stackoverflow.com/questions/3927690/howto-clean-a-mysql-innodb-storage-engine InnoDB Architecture - Stackoverflow]</ref> <ref>[http://mysqlunlimited.blogspot.kr/2012/06/mysql-innodb-disk-and-memory-layout.html InnoDB Storage Engine Disk and Memory Layout]</ref> <ref>[http://www.askdbexperts.com/2012/04/optmial-innodb-configuration.html Optimal InnoDB Configuration]</ref>, XtraDB, Aria\n\n=== DPM에서 부산물 (SSD 시료) 이체 (from Sol.PE to MSL) ===\n\n* 시스템 Path\n: mySingle 첫 화면\n: > DS 사내업무 시스템\n: > DPM (Development Process Management)\n: > 부산물관리\n: > 부산물센터\n: > 개인업무 현황\n: > 현 재공 조회\n\n <pre>\nSel 입고일 Part ID Lot ID 보안구분 Type LOT Type 귀속자 Qty 보관일 위치구분 현 위치 상태 목적지 T\n2014-02-03 MZ7TE1T0HMHP-000H1-0E1 20GU000326 대외비 CA EE 정명준 4 2014-04-18 개인 정명준 보관중  \n2014-01-24 MZ7TE1T0HMHP-000H1-0E1 20GU000326 대외비 CA EE 윤슬아 30 2014-02-18 개인 윤슬아 보관중  \n2013-10-24 MZ7TE1T0HMHP-000H1-0E1 20GU000326 대외비 CA EE 이경은 4 2014-04-18 개인 이경은 보관중  \n2013-10-23 MZ7TE1T0HMHP-000H1-0E1 20GU000326 대외비 CA EE 이광헌 10 2014-04-18 개인 이광헌 보관중  \n2013-10-01 MZ7TE1T0HMHP-000H1-0E1 20GU000326 대외비 CA EE 임수민 52 2014-04-18 개인 임수민 보관중  \n2013-07-08 MZ7TE1T0HMHP-000H1-0E1 20GU000326 대외비 CA EE 신다영 26 2014-04-18 개인 신다영 보관중  \n</pre>\n\n\n\n\n\n\n\n=== MSL STAR Part 2월 월례회 ===\n\n\n* 일시/장소: 2014-02-03 (Mon) 15:25~15:55, 상무님 집무석\n* 참석자: 조상연 상무님, 정명준 책임, 이종도 사원\n* \'14년 1월 한 달 간 Parthenon 과제 진행 현황 정리 및 이후 진행 계획 Briefing\n\n\n==== 주요 내용 ====\n\n* Parthenon 협력 과제 공식 Kick-off 예정 (2/5)\n: 금주 수요일 (2/5), MSL-Sol.PE 간 공식 Kick-off를 갖고, Parthenon 협력과제를 본격적으로 시작할 예정임.\n: (지난 주에는 협력 일정, 방법, 기술 아이템에 대한 실무 수준의 사전 조율이 있었음)\n\n* MSL MBO 기한 (6월)을 고려하여 과제 진행 예정\n:- 6월까지는 기술이전 및 Testbed Infra 구축 완료\n:- Workload Analysis 및 Test Case 도출은 메가 혁신과제 일정인 10월까지 완료\n\n* 기술 이전 산출물은 다음 3가지로 구성됨\n:- DC Infra 기술 관련 문서 (TR) 및 Seminar\n:- Testbed Setup Package 및 Tracing Framework Software\n:- 최종 보고서 (Workload 분석 및 발굴된 Test Cases)\n\n* N-tier Testbed Optimize 시 Linux의 TCP Stack Inefficiency 고려할 것\n:- Tier 간 Communication 시 Network이 병목이 되어서는 안될 것임\n:- Linux의 TCP Network Stack 최적화를 고려할 것\n:- Intel\'s DPDK (Data Plane Development Kit) SW로 Networking Bottleneck을 줄일 수 있겠는지 고려할 것\n:- KAIST의 한동수 교수 TCP 관련 연구 참고 [http://shader.kaist.edu/mtcp/ mTCP - A Highly Scalable User-level TCP Stack for Multicore Systems]\n\n\n\n==== 개인 업무 목표 관련 지시 사항 ====\n\n*  정명준\n:- 개발실 Synergy Seminar 1회 실시할 수 있도록 준비\n:: 9월~10월쯤 (담당: 전정헌 E5)\n:- 논문 방향\n:: 사업부 상황 고려했을 때 Reliability 쪽 보다는 Performance Boost 쪽의 Workload Prediction으로 보는 것이 유리할 수 있음 (DC 환경에서 SSD를 잘 활용할 수 있는 방법으로 연결될 수 있겠음)\n:- 영어 회화 등급\n:: 현재 영어 필기 1등급이라 해도, \'\'\'회화\'\'\' (필기 말고) 등급 필요 여부 확인할 것, 필요 시 등급 획득\n\n* 이종도\n:- 영어 목표 등급 달성하고, Parthenon 과제에 몸과 영혼을 불태워볼 것 ^^\n\n\n==== Parthenon 1.0 금주 Action Items ====\n\n금주 주요 Activities는 다음과 같습니다.\n\n* 기술이전 Curriculum 합의 및 Kick-off\n:- MSL 측에서 기술이전 Curriculum을 작성하여 Sol.PE 측에 송부 (~ 2/3)\n:- 위 Curriculum을 기반으로 Sol.PE 실무측과 기술이전 일정 및 인력 운영 방식 결정 (~ 2/4)\n:- 협의된 위 내용 기반으로 공식 Kick-off - 기술이전 일정/방식/산출물 합의 (2/5)\n\n\n* Kick-off 미팅을 MSL과 Sol.PE가 진행하는 이유\n Parthenon 1.0 과제는, 기술이전을 통한 MSL-Sol.PE 간 협력이 핵심이며,\n SW개발팀과의 Interface는 MSL이 개별적으로 담당하고,\n 응용기술팀과의 Interface는 Sol.PE가 개별적으로 담당하면 될 것으로\n MSL과 Sol.PE 실무들이 판단하였음.\n\n\n\n=== InnoDB Storage Engine ===\n\n186개의 InnoDB storage engine 관련 tunables 존재.\n이 중에서 특히 intensive disk IO workload로 연결시킬 수 있는 것들을 tuning하여 SSD의 성능을 maximize하여 사용할 수 있도록 만들 필요가 있음. 다시 말하면 SSD의 max 성능을 뽑는데에 방해가 되는 host-side의 여러 요소들을 제거하거나 최적화하여 SSD 성능이 올라가는대로 target application의 성능이 올라갈 수 있도록 tuning되는 것이 필요함.\n\n\n\n==== Optimizing InnoDB Disk IO ====\n\n* References\n: [http://dev.mysql.com/doc/refman/5.7/en/optimizing-innodb-diskio.html Optimizing InnoDB Disk I/O - MySQL]\n: [http://dev.mysql.com/doc/refman/5.7/en/disk-issues.html Optimizing Disk I/O]\n: [http://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_flush_method InnoDB Startuup Options and System Variables]\n\n\n\n\n* innodb_buffer_pool_size\n: table data가 InnoDB buffer pool에 cache되어 있는 동안 어떤 disk IO도 일으키지 않고 해당 query를 처리할 수 있게 됨. Physical memory의 약 80% 정도를 사용하는 것이 일반적임.\n\n* innodb_flush_method (O_SYNC, O_DIRECT, ...)\n: to control the way to flush files to disk with UNIX fsync() call\n\n* file system mount option 중 forcedirectio 를 써야하는 경우가 있음 (Solaris에서 UFS를 사용할 때)\n\n* RAID configuration 혹은 다른 disk들에 대한 symbolic link (여러 disk 간의 striping을 말하는 것으로 보임)를 설정할 수 있는 여분의 storage device들이 있는 경우에서의 configuration optimize 고려.\n\n* innodb_io_capacity\n: InnoDB의 checkpoint operation으로 인해 DB throughput이 주기적으로 떨어지는 현상이 보인다면, innodb_io_capacity 값을 증가시키는 것을 고려할 필요가 있음. (이 값이 높을수록 자주 flushing을 하게 됨)\n\n이 외에도 다음과 같은 InnoDB configuration option들을 고려할 수 있음. (약 25가지)\n\n* innodb_buffer_pool_size\n* innodb_flush_method\n* innodb_io_capacity\n* innodb_adaptive_flushing\n* innodb_change_buffer_max_size\n* innodb_change_buffering\n* innodb_flush_neighbors\n* innodb_log_buffer_size\n* innodb_log_file_size\n* innodb_lru_scan_depth\n* innodb_max_dirty_pages_pct\n* innodb_max_purge_lag\n* innodb_open_files\n* innodb_page_size\n* innodb_random_read_ahead\n* innodb_read_ahead_threshold\n* innodb_read_io_threads\n* innodb_rollback_segments\n* innodb_write_io_threads\n* innodb_buffer_pool_size\n* innodb_log_file_size\n* innodb_log_files_in_group\n* innodb_flush_log_at_trx_commit\n* innodb_doublewrite\n* sync_binlog.\n\n== References ==\n\n<references/>','utf-8');
/*!40000 ALTER TABLE `radiohead_text` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `radiohead_transcache`
--

DROP TABLE IF EXISTS `radiohead_transcache`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
